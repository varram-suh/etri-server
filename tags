!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/3fdf28bc/
ACC	simple.proto	/^    ACC = 4;$/;"	e
ACCDEC	protocol-struct.h	/^    uint16_t ACCDEC;$/;"	m	struct:CONTROL_REMOTE	typeref:typename:uint16_t
ACC_ENABLE	protocol-struct.h	/^    uint16_t ACC_ENABLE;$/;"	m	struct:CONTROL_REMOTE	typeref:typename:uint16_t
ADJ_INTERVAL	protocol-struct.h	/^    uint16_t ADJ_INTERVAL;$/;"	m	struct:CONTROL_REMOTE	typeref:typename:uint16_t
ALIGN_CENTER	spdlog/fmt/bundled/format.h	/^    ALIGN_CENTER,$/;"	e	enum:fmt::Alignment
ALIGN_DEFAULT	spdlog/fmt/bundled/format.h	/^    ALIGN_DEFAULT,$/;"	e	enum:fmt::Alignment
ALIGN_LEFT	spdlog/fmt/bundled/format.h	/^    ALIGN_LEFT,$/;"	e	enum:fmt::Alignment
ALIGN_NUMERIC	spdlog/fmt/bundled/format.h	/^    ALIGN_NUMERIC$/;"	e	enum:fmt::Alignment
ALIGN_RIGHT	spdlog/fmt/bundled/format.h	/^    ALIGN_RIGHT,$/;"	e	enum:fmt::Alignment
ASIOServer	asio-server.h	/^        ASIOServer(boost::asio::io_service& io_service, short port)$/;"	f	class:ASIOServer
ASIOServer	asio-server.h	/^class ASIOServer$/;"	c
ASSERT_IS_ENUM_DESCRIPTOR	protobuf-c/protobuf-c.c	/^#define ASSERT_IS_ENUM_DESCRIPTOR(/;"	d	file:
ASSERT_IS_MESSAGE	protobuf-c/protobuf-c.c	/^#define ASSERT_IS_MESSAGE(/;"	d	file:
ASSERT_IS_MESSAGE_DESCRIPTOR	protobuf-c/protobuf-c.c	/^#define ASSERT_IS_MESSAGE_DESCRIPTOR(/;"	d	file:
ASSERT_IS_SERVICE_DESCRIPTOR	protobuf-c/protobuf-c.c	/^#define ASSERT_IS_SERVICE_DESCRIPTOR(/;"	d	file:
AUDIO_PACKET	tcp-packet.h	/^    AUDIO_PACKET = 6,$/;"	e	enum:__anonce98fa070203
A_formatter	spdlog/details/pattern_formatter.h	/^class A_formatter : public flag_formatter$/;"	c	namespace:spdlog::details
A_formatter	spdlog/details/pattern_formatter_impl.h	/^class A_formatter : public flag_formatter$/;"	c	namespace:spdlog::details
AddDescriptors	qc-message.pb.cc	/^void AddDescriptors() {$/;"	f	namespace:protobuf_qc_2dmessage_2eproto	typeref:typename:void
AddDescriptors	qc-message.pb.h	/^void AddDescriptors();$/;"	p	namespace:protobuf_qc_2dmessage_2eproto	typeref:typename:void
AddDescriptorsImpl	qc-message.pb.cc	/^void AddDescriptorsImpl() {$/;"	f	namespace:protobuf_qc_2dmessage_2eproto	typeref:typename:void
AlignSpec	spdlog/fmt/bundled/format.h	/^    AlignSpec(unsigned width, wchar_t fill, Alignment align = ALIGN_DEFAULT)$/;"	f	struct:fmt::AlignSpec
AlignSpec	spdlog/fmt/bundled/format.h	/^struct AlignSpec : WidthSpec$/;"	s	namespace:fmt
AlignTypeSpec	spdlog/fmt/bundled/format.h	/^    AlignTypeSpec(unsigned width, wchar_t fill)$/;"	f	struct:fmt::AlignTypeSpec
AlignTypeSpec	spdlog/fmt/bundled/format.h	/^struct AlignTypeSpec : AlignSpec$/;"	s	namespace:fmt
Alignment	spdlog/fmt/bundled/format.h	/^enum Alignment$/;"	g	namespace:fmt
AllocatorTraits	json.hpp	/^        using AllocatorTraits = std::allocator_traits<AllocatorType<T>>;$/;"	t	function:nlohmann::basic_json::create	typeref:typename:std::allocator_traits<AllocatorType<T>>
AnchorIndex	qcustomplot.h	/^  enum AnchorIndex {aiCenter};$/;"	g	class:QCPItemBracket
AnchorIndex	qcustomplot.h	/^  enum AnchorIndex {aiTop, aiTopRight, aiRight, aiBottom, aiBottomLeft, aiLeft};$/;"	g	class:QCPItemPixmap
AnchorIndex	qcustomplot.h	/^  enum AnchorIndex {aiTop, aiTopRight, aiRight, aiBottom, aiBottomLeft, aiLeft};$/;"	g	class:QCPItemRect
AnchorIndex	qcustomplot.h	/^  enum AnchorIndex {aiTopLeft, aiTop, aiTopRight, aiRight, aiBottomRight, aiBottom, aiBottomLeft/;"	g	class:QCPItemText
AnchorIndex	qcustomplot.h	/^  enum AnchorIndex {aiTopLeftRim, aiTop, aiTopRightRim, aiRight, aiBottomRightRim, aiBottom, aiB/;"	g	class:QCPItemEllipse
AntialiasedElement	qcustomplot.h	/^enum AntialiasedElement { aeAxes           = 0x0001 \/\/\/< <tt>0x0001<\/tt> Axis base line and /;"	g	namespace:QCP
Arg	spdlog/fmt/bundled/format.h	/^    typedef internal::Arg Arg;$/;"	t	class:fmt::ArgVisitor	typeref:typename:internal::Arg
Arg	spdlog/fmt/bundled/format.h	/^    typedef internal::Arg Arg;$/;"	t	class:fmt::internal::ArgFormatterBase	typeref:typename:internal::Arg
Arg	spdlog/fmt/bundled/format.h	/^struct Arg : Value$/;"	s	namespace:fmt::internal
ArgArray	spdlog/fmt/bundled/format.h	/^struct ArgArray<N, false \/*IsPacked*\/>$/;"	s	namespace:fmt::internal
ArgArray	spdlog/fmt/bundled/format.h	/^struct ArgArray<N, true \/*IsPacked*\/>$/;"	s	namespace:fmt::internal
ArgConverter	spdlog/fmt/bundled/printf.h	/^    ArgConverter(internal::Arg &arg, wchar_t type)$/;"	f	class:fmt::internal::ArgConverter
ArgConverter	spdlog/fmt/bundled/printf.h	/^class ArgConverter : public ArgVisitor<ArgConverter<T>, void>$/;"	c	namespace:fmt::internal
ArgFormatter	spdlog/fmt/bundled/format.h	/^    ArgFormatter(BasicFormatter<Char> &formatter, FormatSpec &spec, const Char *fmt)$/;"	f	class:fmt::ArgFormatter
ArgFormatter	spdlog/fmt/bundled/format.h	/^class ArgFormatter : public BasicArgFormatter<ArgFormatter<Char>, Char, FormatSpec>$/;"	c	namespace:fmt
ArgFormatterBase	spdlog/fmt/bundled/format.h	/^    ArgFormatterBase(BasicWriter<Char> &w, Spec &s)$/;"	f	class:fmt::internal::ArgFormatterBase
ArgFormatterBase	spdlog/fmt/bundled/format.h	/^class ArgFormatterBase : public ArgVisitor<Impl, void>$/;"	c	namespace:fmt::internal
ArgJoin	spdlog/fmt/bundled/format.h	/^    ArgJoin(It first, It last, const BasicCStringRef<Char> &sep)$/;"	f	struct:fmt::ArgJoin
ArgJoin	spdlog/fmt/bundled/format.h	/^struct ArgJoin$/;"	s	namespace:fmt
ArgList	spdlog/fmt/bundled/format.h	/^    ArgList()$/;"	f	class:fmt::ArgList
ArgList	spdlog/fmt/bundled/format.h	/^    ArgList(ULongLong types, const internal::Arg *args)$/;"	f	class:fmt::ArgList
ArgList	spdlog/fmt/bundled/format.h	/^    ArgList(ULongLong types, const internal::Value *values)$/;"	f	class:fmt::ArgList
ArgList	spdlog/fmt/bundled/format.h	/^class ArgList$/;"	c	namespace:fmt
ArgMap	spdlog/fmt/bundled/format.h	/^class ArgMap$/;"	c	namespace:fmt::internal
ArgType	spdlog/fmt/bundled/format.h	/^    ArgType()$/;"	f	struct:fmt::internal::ArgType
ArgType	spdlog/fmt/bundled/format.h	/^    ArgType(const T &arg)$/;"	f	struct:fmt::internal::ArgType
ArgType	spdlog/fmt/bundled/format.h	/^struct ArgType$/;"	s	namespace:fmt::internal
ArgVisitor	spdlog/fmt/bundled/format.h	/^class ArgVisitor$/;"	c	namespace:fmt
ArrayWriter	spdlog/fmt/bundled/format.h	/^typedef BasicArrayWriter<char> ArrayWriter;$/;"	t	namespace:fmt	typeref:typename:BasicArrayWriter<char>
AxisType	qcustomplot.h	/^  enum AxisType { atLeft    = 0x01  \/\/\/< <tt>0x01<\/tt> Axis is vertical and on the left side/;"	g	class:QCPAxis
BANDWIDTH_TEST__INIT	simple.pb-c.h	/^#define BANDWIDTH_TEST__INIT /;"	d
BATTERY	simple.proto	/^    BATTERY = 256;$/;"	e
BLACK	spdlog/fmt/bundled/format.h	/^    BLACK,$/;"	e	enum:fmt::Color
BLESession	ble.h	/^    BLESession(asio::io_service& ios)$/;"	f	class:BLESession
BLESession	ble.h	/^class BLESession  : public std::enable_shared_from_this<BLESession> {$/;"	c
BLUE	spdlog/fmt/bundled/format.h	/^    BLUE,$/;"	e	enum:fmt::Color
BOLD	spdlog/sinks/wincolor_sink.h	/^    const WORD BOLD = FOREGROUND_INTENSITY;$/;"	m	class:spdlog::sinks::wincolor_sink	typeref:typename:const WORD
BOOL	spdlog/fmt/bundled/format.h	/^        BOOL,$/;"	e	enum:fmt::internal::Value::Type
BOUND_SIZEOF_SCANNED_MEMBER_LOG2	protobuf-c/protobuf-c.c	/^#define BOUND_SIZEOF_SCANNED_MEMBER_LOG2 /;"	d	file:
BUFFER_SIZE	spdlog/fmt/bundled/format.h	/^        BUFFER_SIZE = std::numeric_limits<ULongLong>::digits10 + 3$/;"	e	enum:fmt::FormatInt::__anon1ea8787f0f03
B_formatter	spdlog/details/pattern_formatter.h	/^class B_formatter : public flag_formatter$/;"	c	namespace:spdlog::details
B_formatter	spdlog/details/pattern_formatter_impl.h	/^class B_formatter : public flag_formatter$/;"	c	namespace:spdlog::details
BandwidthTest	simple.pb-c.h	/^typedef struct _BandwidthTest BandwidthTest;$/;"	t	typeref:struct:_BandwidthTest
BandwidthTest	simple.proto	/^message BandwidthTest {$/;"	m
BandwidthTest_Closure	simple.pb-c.h	/^typedef void (*BandwidthTest_Closure)$/;"	t	typeref:typename:void (*)(const BandwidthTest * message,void * closure_data)
Base	spdlog/fmt/bundled/printf.h	/^    typedef internal::ArgFormatterBase<Impl, Char, Spec> Base;$/;"	t	class:fmt::BasicPrintfArgFormatter	typeref:typename:internal::ArgFormatterBase<Impl,Char,Spec>
BasicArgFormatter	spdlog/fmt/bundled/format.h	/^    BasicArgFormatter(BasicFormatter<Char, Impl> &formatter, Spec &spec, const Char *fmt)$/;"	f	class:fmt::BasicArgFormatter
BasicArgFormatter	spdlog/fmt/bundled/format.h	/^class BasicArgFormatter : public internal::ArgFormatterBase<Impl, Char, Spec>$/;"	c	namespace:fmt
BasicArrayWriter	spdlog/fmt/bundled/format.h	/^    BasicArrayWriter(Char *array, std::size_t size)$/;"	f	class:fmt::BasicArrayWriter
BasicArrayWriter	spdlog/fmt/bundled/format.h	/^    explicit BasicArrayWriter(Char (&array)[SIZE])$/;"	f	class:fmt::BasicArrayWriter
BasicArrayWriter	spdlog/fmt/bundled/format.h	/^class BasicArrayWriter : public BasicWriter<Char>$/;"	c	namespace:fmt
BasicCStringRef	spdlog/fmt/bundled/format.h	/^    BasicCStringRef(const Char *s)$/;"	f	class:fmt::BasicCStringRef
BasicCStringRef	spdlog/fmt/bundled/format.h	/^    BasicCStringRef(const std::basic_string<Char, std::char_traits<Char>, Allocator> &s)$/;"	f	class:fmt::BasicCStringRef
BasicCStringRef	spdlog/fmt/bundled/format.h	/^class BasicCStringRef$/;"	c	namespace:fmt
BasicCharTraits	spdlog/fmt/bundled/format.h	/^class BasicCharTraits$/;"	c	namespace:fmt::internal
BasicData	spdlog/fmt/bundled/format.cc	/^template struct internal::BasicData<void>;$/;"	m	class:fmt::internal	typeref:typename:struct
BasicData	spdlog/fmt/bundled/format.h	/^struct FMT_API BasicData$/;"	s	namespace:fmt::internal
BasicFormatter	spdlog/fmt/bundled/format.h	/^    BasicFormatter(const ArgList &args, BasicWriter<Char> &w)$/;"	f	class:fmt::BasicFormatter
BasicFormatter	spdlog/fmt/bundled/format.h	/^class BasicFormatter : private internal::FormatterBase$/;"	c	namespace:fmt
BasicMemoryWriter	spdlog/fmt/bundled/format.h	/^    BasicMemoryWriter(BasicMemoryWriter &&other)$/;"	f	class:fmt::BasicMemoryWriter
BasicMemoryWriter	spdlog/fmt/bundled/format.h	/^    explicit BasicMemoryWriter(const Allocator &alloc = Allocator())$/;"	f	class:fmt::BasicMemoryWriter
BasicMemoryWriter	spdlog/fmt/bundled/format.h	/^class BasicMemoryWriter : public BasicWriter<Char>$/;"	c	namespace:fmt
BasicPrintfArgFormatter	spdlog/fmt/bundled/printf.h	/^    BasicPrintfArgFormatter(BasicWriter<Char> &w, Spec &s)$/;"	f	class:fmt::BasicPrintfArgFormatter
BasicPrintfArgFormatter	spdlog/fmt/bundled/printf.h	/^class BasicPrintfArgFormatter : public internal::ArgFormatterBase<Impl, Char, Spec>$/;"	c	namespace:fmt
BasicStringRef	spdlog/fmt/bundled/format.h	/^    BasicStringRef(const Char *s)$/;"	f	class:fmt::BasicStringRef
BasicStringRef	spdlog/fmt/bundled/format.h	/^    BasicStringRef(const Char *s, std::size_t size)$/;"	f	class:fmt::BasicStringRef
BasicStringRef	spdlog/fmt/bundled/format.h	/^    BasicStringRef(const std::basic_string<Char, std::char_traits<Char>, Allocator> &s)$/;"	f	class:fmt::BasicStringRef
BasicStringRef	spdlog/fmt/bundled/format.h	/^    BasicStringRef(const std::basic_string_view<Char, std::char_traits<Char>> &s)$/;"	f	class:fmt::BasicStringRef
BasicStringRef	spdlog/fmt/bundled/format.h	/^class BasicStringRef$/;"	c	namespace:fmt
BasicWriter	spdlog/fmt/bundled/format.h	/^    explicit BasicWriter(Buffer<Char> &b)$/;"	f	class:fmt::BasicWriter
BasicWriter	spdlog/fmt/bundled/format.h	/^class BasicWriter$/;"	c	namespace:fmt
BracketStyle	qcustomplot.h	/^  enum BracketStyle { bsSquare  \/\/\/< A brace with angled edges$/;"	g	class:QCPItemBracket
BracketStyle	qcustomplot.h	/^  enum BracketStyle { bsSquareBracket \/\/\/< A square bracket is drawn.$/;"	g	class:QCPSelectionDecoratorBracket
Buffer	spdlog/fmt/bundled/format.h	/^    Buffer(T *ptr = FMT_NULL, std::size_t capacity = 0)$/;"	f	class:fmt::Buffer
Buffer	spdlog/fmt/bundled/format.h	/^class Buffer$/;"	c	namespace:fmt
BufferedFile	spdlog/fmt/bundled/posix.cc	/^fmt::BufferedFile::BufferedFile($/;"	f	class:fmt::BufferedFile
BufferedFile	spdlog/fmt/bundled/posix.h	/^    BufferedFile() FMT_NOEXCEPT : file_(FMT_NULL) {}$/;"	f	class:fmt::BufferedFile
BufferedFile	spdlog/fmt/bundled/posix.h	/^    BufferedFile(BufferedFile &&other) FMT_NOEXCEPT : file_(other.file_)$/;"	f	class:fmt::BufferedFile
BufferedFile	spdlog/fmt/bundled/posix.h	/^    BufferedFile(BufferedFile &f) FMT_NOEXCEPT : file_(f.file_)$/;"	f	class:fmt::BufferedFile
BufferedFile	spdlog/fmt/bundled/posix.h	/^    BufferedFile(Proxy p) FMT_NOEXCEPT : file_(p.file) {}$/;"	f	class:fmt::BufferedFile
BufferedFile	spdlog/fmt/bundled/posix.h	/^    FMT_API BufferedFile(CStringRef filename, CStringRef mode);$/;"	p	class:fmt::BufferedFile	typeref:typename:FMT_API
BufferedFile	spdlog/fmt/bundled/posix.h	/^    explicit BufferedFile(FILE *f)$/;"	f	class:fmt::BufferedFile
BufferedFile	spdlog/fmt/bundled/posix.h	/^class BufferedFile$/;"	c	namespace:fmt
ByteSizeLong	qc-message.pb.cc	/^size_t Imu::ByteSizeLong() const {$/;"	f	class:Imu	typeref:typename:size_t
ByteSizeLong	qc-message.pb.cc	/^size_t Protocol::ByteSizeLong() const {$/;"	f	class:Protocol	typeref:typename:size_t
ByteSizeLong	qc-message.pb.h	/^  size_t ByteSizeLong() const final;$/;"	p	class:Imu	typeref:typename:size_t
ByteSizeLong	qc-message.pb.h	/^  size_t ByteSizeLong() const final;$/;"	p	class:Protocol	typeref:typename:size_t
CASE	stb_image.h	/^         #define CASE(/;"	d
CASE	stb_image.h	/^      #define CASE(/;"	d
CHAR	spdlog/fmt/bundled/format.h	/^        CHAR,$/;"	e	enum:fmt::internal::Value::Type
CHAR_FLAG	spdlog/fmt/bundled/format.h	/^    CHAR_FLAG = 0x10 \/\/ Argument has char type - used in error reporting.$/;"	e	enum:fmt::__anon1ea8787f0d03
CLEAR_REMAINING_N_PTRS	protobuf-c/protobuf-c.c	/^#define CLEAR_REMAINING_N_PTRS(/;"	d	file:
CMAKE_AUTOMOC	CMakeLists.txt	/^set(CMAKE_AUTOMOC ON)$/;"	v
CMAKE_AUTOUIC	CMakeLists.txt	/^set(CMAKE_AUTOUIC ON)$/;"	v
CMAKE_INCLUDE_CURRENT_DIR	CMakeLists.txt	/^set(CMAKE_INCLUDE_CURRENT_DIR ON)$/;"	v
COMBO	stb_image.h	/^      #define COMBO(/;"	d
CONSOLE_CRITICAL	spdlogger.h	/^#define CONSOLE_CRITICAL(/;"	d
CONSOLE_DEBUG	spdlogger.h	/^#define CONSOLE_DEBUG(/;"	d
CONSOLE_INFO	spdlogger.h	/^#define CONSOLE_INFO(/;"	d
CONSOLE_TRACE	spdlogger.h	/^#define CONSOLE_TRACE(/;"	d
CONTROL_ABS_ROTATE	protocol-struct.h	/^struct CONTROL_ABS_ROTATE {$/;"	s
CONTROL_ENCODER	protocol-struct.h	/^struct CONTROL_ENCODER{$/;"	s
CONTROL_REL_ROTATE	protocol-struct.h	/^struct CONTROL_REL_ROTATE {$/;"	s
CONTROL_REMOTE	protocol-struct.h	/^struct CONTROL_REMOTE{$/;"	s
CONTROL_STRAIGHT	protocol-struct.h	/^struct CONTROL_STRAIGHT {$/;"	s
CONTROL_ST_AVOID	protocol-struct.h	/^struct CONTROL_ST_AVOID {$/;"	s
CONTROL_WHEEL	protocol-struct.h	/^struct CONTROL_WHEEL{$/;"	s
CONTROL_YAW_RESET	protocol-struct.h	/^struct CONTROL_YAW_RESET {$/;"	s
CSTRING	spdlog/fmt/bundled/format.h	/^        CSTRING,$/;"	e	enum:fmt::internal::Value::Type
CStringRef	spdlog/fmt/bundled/format.h	/^typedef BasicCStringRef<char> CStringRef;$/;"	t	namespace:fmt	typeref:typename:BasicCStringRef<char>
CUSTOM	spdlog/fmt/bundled/format.h	/^        CUSTOM$/;"	e	enum:fmt::internal::Value::Type
CYAN	spdlog/fmt/bundled/format.h	/^    CYAN,$/;"	e	enum:fmt::Color
CYAN	spdlog/sinks/wincolor_sink.h	/^    const WORD CYAN = FOREGROUND_GREEN | FOREGROUND_BLUE;$/;"	m	class:spdlog::sinks::wincolor_sink	typeref:typename:const WORD
CachedLabel	qcustomplot.h	/^  struct CachedLabel$/;"	s	class:QCPAxisPainterPrivate
Char	spdlog/fmt/bundled/format.h	/^    typedef CharType Char;$/;"	t	class:fmt::BasicFormatter	typeref:typename:CharType
Char	spdlog/fmt/bundled/format.h	/^    typedef char Char; \/\/ For FMT_VARIADIC_CTOR.$/;"	t	class:fmt::SystemError	typeref:typename:char
Char	spdlog/fmt/bundled/format.h	/^    typedef typename Formatter::Char Char;$/;"	t	class:fmt::internal::MakeValue	typeref:typename:Formatter::Char
CharConverter	spdlog/fmt/bundled/printf.h	/^    explicit CharConverter(internal::Arg &arg)$/;"	f	class:fmt::internal::CharConverter
CharConverter	spdlog/fmt/bundled/printf.h	/^class CharConverter : public ArgVisitor<CharConverter, void>$/;"	c	namespace:fmt::internal
CharPtr	spdlog/fmt/bundled/format.h	/^        typedef typename BasicWriter<Char>::CharPtr CharPtr;$/;"	t	function:fmt::internal::ArgFormatterBase::visit_char	typeref:typename:BasicWriter<Char>::CharPtr
CharPtr	spdlog/fmt/bundled/format.h	/^    typedef stdext::checked_array_iterator<Char *> CharPtr;$/;"	t	class:fmt::internal::BasicCharTraits	typeref:typename:stdext::checked_array_iterator<Char * >
CharPtr	spdlog/fmt/bundled/format.h	/^    typedef typename internal::CharTraits<Char>::CharPtr CharPtr;$/;"	t	class:fmt::BasicWriter	typeref:typename:internal::CharTraits<Char>::CharPtr
CharPtr	spdlog/fmt/bundled/printf.h	/^        typedef typename BasicWriter<Char>::CharPtr CharPtr;$/;"	t	function:fmt::BasicPrintfArgFormatter::visit_char	typeref:typename:BasicWriter<Char>::CharPtr
CharTraits	spdlog/fmt/bundled/format.h	/^class CharTraits<char> : public BasicCharTraits<char>$/;"	c	namespace:fmt::internal
CharTraits	spdlog/fmt/bundled/format.h	/^class CharTraits<wchar_t> : public BasicCharTraits<wchar_t>$/;"	c	namespace:fmt::internal
ChartStyle	qcustomplot.h	/^  enum ChartStyle { csOhlc         \/\/\/< Open-High-Low-Close bar representation$/;"	g	class:QCPFinancial
Chrono	chrono-util.h	/^class Chrono{$/;"	c
ChronoDuration	chrono-util.h	/^class ChronoDuration {$/;"	c
CircularBuffer	circular-buffer.cpp	/^CircularBuffer::CircularBuffer(size_t capacity)$/;"	f	class:CircularBuffer
CircularBuffer	circular-buffer.h	/^    CircularBuffer(size_t capacity);$/;"	p	class:CircularBuffer
CircularBuffer	circular-buffer.h	/^class CircularBuffer$/;"	c
Clear	qc-message.pb.cc	/^void Imu::Clear() {$/;"	f	class:Imu	typeref:typename:void
Clear	qc-message.pb.cc	/^void Protocol::Clear() {$/;"	f	class:Protocol	typeref:typename:void
Clear	qc-message.pb.h	/^  void Clear() final;$/;"	p	class:Imu	typeref:typename:void
Clear	qc-message.pb.h	/^  void Clear() final;$/;"	p	class:Protocol	typeref:typename:void
ClientWindow	gui.h	/^    ClientWindow() {$/;"	f	class:ClientWindow
ClientWindow	gui.h	/^class ClientWindow {$/;"	c
Collapsed	imgui.ini	/^Collapsed=0$/;"	k	section:Window
Color	spdlog/fmt/bundled/format.h	/^enum Color$/;"	g	namespace:fmt
ColorInterpolation	qcustomplot.h	/^  enum ColorInterpolation { ciRGB  \/\/\/< Color channels red, green and blue are linearly inter/;"	g	class:QCPColorGradient
CompatibleLimits	json.hpp	/^    using CompatibleLimits = std::numeric_limits<CompatibleNumberIntegerType>;$/;"	t	struct:nlohmann::detail::is_compatible_integer_type_impl	typeref:typename:std::numeric_limits<CompatibleNumberIntegerType>
Conditional	spdlog/fmt/bundled/format.h	/^struct Conditional$/;"	s	namespace:fmt::internal
Conditional	spdlog/fmt/bundled/format.h	/^struct Conditional<false, T, F>$/;"	s	namespace:fmt::internal
ControlMotorSTM	protocol-struct.h	/^using ControlMotorSTM = CONTROL_REMOTE;$/;"	t	typeref:typename:CONTROL_REMOTE
ControlTossingSTM	protocol-struct.h	/^struct ControlTossingSTM{$/;"	s
ConvertToInt	spdlog/fmt/bundled/format.h	/^struct ConvertToInt$/;"	s	namespace:fmt::internal
ConvertToIntImpl	spdlog/fmt/bundled/format.h	/^struct ConvertToIntImpl$/;"	s	namespace:fmt::internal
ConvertToIntImpl	spdlog/fmt/bundled/ostream.h	/^struct ConvertToIntImpl<T, true>$/;"	s	namespace:fmt::internal
ConvertToIntImpl2	spdlog/fmt/bundled/format.h	/^struct ConvertToIntImpl2$/;"	s	namespace:fmt::internal
ConvertToIntImpl2	spdlog/fmt/bundled/format.h	/^struct ConvertToIntImpl2<T, true>$/;"	s	namespace:fmt::internal
CopyFrom	qc-message.pb.cc	/^void Imu::CopyFrom(const ::google::protobuf::Message& from) {$/;"	f	class:Imu	typeref:typename:void
CopyFrom	qc-message.pb.cc	/^void Imu::CopyFrom(const Imu& from) {$/;"	f	class:Imu	typeref:typename:void
CopyFrom	qc-message.pb.cc	/^void Protocol::CopyFrom(const ::google::protobuf::Message& from) {$/;"	f	class:Protocol	typeref:typename:void
CopyFrom	qc-message.pb.cc	/^void Protocol::CopyFrom(const Protocol& from) {$/;"	f	class:Protocol	typeref:typename:void
CopyFrom	qc-message.pb.h	/^  void CopyFrom(const ::google::protobuf::Message& from) final;$/;"	p	class:Imu	typeref:typename:void
CopyFrom	qc-message.pb.h	/^  void CopyFrom(const ::google::protobuf::Message& from) final;$/;"	p	class:Protocol	typeref:typename:void
CopyFrom	qc-message.pb.h	/^  void CopyFrom(const Imu& from);$/;"	p	class:Imu	typeref:typename:void
CopyFrom	qc-message.pb.h	/^  void CopyFrom(const Protocol& from);$/;"	p	class:Protocol	typeref:typename:void
Critical	spdlogger.h	/^	void Critical(const char* message, const Args&... args)$/;"	f	namespace:util	typeref:typename:void
CustomValue	spdlog/fmt/bundled/format.h	/^    struct CustomValue$/;"	s	struct:fmt::internal::Value
DATA	protocol-struct.h	/^    DATA = 2,$/;"	e	enum:FirmwareUpdateMode
DATA_PORT	tcp-packet.h	/^    DATA_PORT = 13002 $/;"	e	enum:__anonce98fa070103
DATA_SIZE	spdlog/fmt/bundled/core.h	/^    static const size_t DATA_SIZE = NUM_ARGS + (IS_PACKED && NUM_ARGS != 0 ? 0 : 1);$/;"	m	class:format_arg_store	typeref:typename:const size_t
DEFAULT_CAPACITY	spdlog/fmt/bundled/posix.cc	/^  enum { DEFAULT_CAPACITY = 65536 };$/;"	e	enum:fmt::File::pipe::__anon5b5309a70203	file:
DEGREE	protocol-struct.h	/^    float DEGREE;$/;"	m	struct:CONTROL_ABS_ROTATE	typeref:typename:float
DEGREE	protocol-struct.h	/^    float DEGREE;$/;"	m	struct:CONTROL_REL_ROTATE	typeref:typename:float
DIGITS	spdlog/fmt/bundled/format-inl.h	/^const char basic_data<T>::DIGITS[] = "0001020304050607080910111213141516171819"$/;"	m	class:internal::basic_data<T>	typeref:typename:const char[]
DIGITS	spdlog/fmt/bundled/format.cc	/^const char internal::BasicData<T>::DIGITS[] =$/;"	m	class:fmt::internal::BasicData<T>	typeref:typename:const char[]
DIGITS	spdlog/fmt/bundled/format.h	/^    static const char DIGITS[];$/;"	m	struct:fmt::internal::BasicData	typeref:typename:const char[]
DIRECTION	protocol-struct.h	/^    int32_t DIRECTION;$/;"	m	struct:CONTROL_ABS_ROTATE	typeref:typename:int32_t
DISTANCE_CM	protocol-struct.h	/^    float DISTANCE_CM;$/;"	m	struct:CONTROL_STRAIGHT	typeref:typename:float
DOUBLE	spdlog/fmt/bundled/format.h	/^        DOUBLE,$/;"	e	enum:fmt::internal::Value::Type
DO_	qc-message.pb.cc	/^#define DO_(/;"	d	file:
Data	spdlog/fmt/bundled/format.h	/^typedef BasicData<> Data;$/;"	t	namespace:fmt::internal	typeref:typename:BasicData<>
DateStrategy	qcustomplot.h	/^  enum DateStrategy {dsNone, dsUniformTimeInDay, dsUniformDayInMonth} mDateStrategy;$/;"	g	class:QCPAxisTickerDateTime
Debug	spdlogger.h	/^	void Debug(const char* message, const Args&... args)$/;"	f	namespace:util	typeref:typename:void
DefaultType	spdlog/fmt/bundled/printf.h	/^class DefaultType : public ArgVisitor<DefaultType, char>$/;"	c	namespace:fmt::internal
DummyInt	spdlog/fmt/bundled/format.h	/^struct DummyInt$/;"	s	namespace:fmt::internal
DummyStream	spdlog/fmt/bundled/ostream.h	/^    DummyStream(); \/\/ Suppress a bogus warning in MSVC.$/;"	p	struct:fmt::internal::DummyStream
DummyStream	spdlog/fmt/bundled/ostream.h	/^struct DummyStream : std::ostream$/;"	s	namespace:fmt::internal
ENC	simple.proto	/^    ENC = 128;$/;"	e
ENCODER_CONTROL__INIT	simple.pb-c.h	/^#define ENCODER_CONTROL__INIT /;"	d
END	protocol-struct.h	/^    END = 1,$/;"	e	enum:FirmwareUpdateMode
EXECUTE	protocol-struct.h	/^    int32_t EXECUTE;$/;"	m	struct:CONTROL_ST_AVOID	typeref:typename:int32_t
E_STEP	license-session.h	/^        enum E_STEP {$/;"	g	class:LicenseSession
EmptySpec	spdlog/fmt/bundled/format.h	/^struct EmptySpec$/;"	s	namespace:fmt
EnableIf	spdlog/fmt/bundled/format.h	/^struct EnableIf$/;"	s	namespace:fmt::internal
EnableIf	spdlog/fmt/bundled/format.h	/^struct EnableIf<true, T>$/;"	s	namespace:fmt::internal
EncoderControl	simple.pb-c.h	/^typedef struct _EncoderControl EncoderControl;$/;"	t	typeref:struct:_EncoderControl
EncoderControl	simple.proto	/^message EncoderControl {$/;"	m
EncoderControl_Closure	simple.pb-c.h	/^typedef void (*EncoderControl_Closure)$/;"	t	typeref:typename:void (*)(const EncoderControl * message,void * closure_data)
EndingStyle	qcustomplot.h	/^  enum EndingStyle { esNone          \/\/\/< No ending decoration$/;"	g	class:QCPLineEnding
ErrorCode	spdlog/fmt/bundled/posix.h	/^    explicit ErrorCode(int value = 0) FMT_NOEXCEPT : value_(value) {}$/;"	f	class:fmt::ErrorCode
ErrorCode	spdlog/fmt/bundled/posix.h	/^class ErrorCode$/;"	c	namespace:fmt
ErrorType	qcustomplot.h	/^  enum ErrorType { etKeyError    \/\/\/< The errors are for the key dimension (bars appear paral/;"	g	class:QCPErrorBars
ExportPen	qcustomplot.h	/^enum ExportPen { epNoCosmetic     \/\/\/< Cosmetic pens are converted to pens with pixel width 1/;"	g	namespace:QCP
FALSE	protobuf-c/protobuf-c.c	/^#define FALSE	/;"	d	file:
FAST_BITS	stb_image.h	/^#define FAST_BITS /;"	d
FIRMWARE_UPDATE_FEEDBACK__INIT	simple.pb-c.h	/^#define FIRMWARE_UPDATE_FEEDBACK__INIT /;"	d
FIRMWARE_UPDATE__INIT	simple.pb-c.h	/^#define FIRMWARE_UPDATE__INIT /;"	d
FIRST_SCANNED_MEMBER_SLAB_SIZE_LOG2	protobuf-c/protobuf-c.c	/^#define FIRST_SCANNED_MEMBER_SLAB_SIZE_LOG2 /;"	d	file:
FMT_ADD_ARG_NAME	spdlog/fmt/bundled/format.h	/^#define FMT_ADD_ARG_NAME(/;"	d
FMT_API	spdlog/fmt/bundled/core.h	/^#define FMT_API /;"	d
FMT_API	spdlog/fmt/bundled/core.h	/^#define FMT_API$/;"	d
FMT_API	spdlog/fmt/bundled/format.h	/^#define FMT_API /;"	d
FMT_API	spdlog/fmt/bundled/format.h	/^#define FMT_API$/;"	d
FMT_ARGS	spdlog/fmt/bundled/posix.cc	/^#define FMT_ARGS$/;"	d	file:
FMT_ARG_N	spdlog/fmt/bundled/format.h	/^#define FMT_ARG_N(/;"	d
FMT_ARG_TYPE_DEFAULT	spdlog/fmt/bundled/format.h	/^#define FMT_ARG_TYPE_DEFAULT(/;"	d
FMT_ASSERT	spdlog/fmt/bundled/core.h	/^#define FMT_ASSERT(/;"	d
FMT_ASSERT	spdlog/fmt/bundled/format.h	/^#define FMT_ASSERT(/;"	d
FMT_ASSIGN_char	spdlog/fmt/bundled/format.h	/^#define FMT_ASSIGN_char(/;"	d
FMT_ASSIGN_wchar_t	spdlog/fmt/bundled/format.h	/^#define FMT_ASSIGN_wchar_t(/;"	d
FMT_BEGIN_NAMESPACE	spdlog/fmt/bundled/core.h	/^#define FMT_BEGIN_NAMESPACE /;"	d
FMT_BUILTIN_CLZ	spdlog/fmt/bundled/format.h	/^#define FMT_BUILTIN_CLZ(/;"	d
FMT_BUILTIN_CLZLL	spdlog/fmt/bundled/format.h	/^#define FMT_BUILTIN_CLZLL(/;"	d
FMT_CAPTURE	spdlog/fmt/bundled/format.h	/^#define FMT_CAPTURE(/;"	d
FMT_CAPTURE_ARG_	spdlog/fmt/bundled/format.h	/^#define FMT_CAPTURE_ARG_(/;"	d
FMT_CAPTURE_ARG_W_	spdlog/fmt/bundled/format.h	/^#define FMT_CAPTURE_ARG_W_(/;"	d
FMT_CAPTURE_W	spdlog/fmt/bundled/format.h	/^#define FMT_CAPTURE_W(/;"	d
FMT_CATCH	spdlog/fmt/bundled/format-inl.h	/^#define FMT_CATCH(/;"	d
FMT_CATCH	spdlog/fmt/bundled/format.cc	/^# define FMT_CATCH(/;"	d	file:
FMT_CLANG_VERSION	spdlog/fmt/bundled/format.h	/^#define FMT_CLANG_VERSION /;"	d
FMT_COLORS_H_	spdlog/fmt/bundled/colors.h	/^#define FMT_COLORS_H_$/;"	d
FMT_CONCAT	spdlog/fmt/bundled/format.h	/^#define FMT_CONCAT(/;"	d
FMT_CONCAT_	spdlog/fmt/bundled/format.h	/^#define FMT_CONCAT_(/;"	d
FMT_CONSTEXPR	spdlog/fmt/bundled/core.h	/^#define FMT_CONSTEXPR /;"	d
FMT_CONSTEXPR_DECL	spdlog/fmt/bundled/core.h	/^#define FMT_CONSTEXPR_DECL /;"	d
FMT_CONSTEXPR_DECL	spdlog/fmt/bundled/core.h	/^#define FMT_CONSTEXPR_DECL$/;"	d
FMT_CORE_H_	spdlog/fmt/bundled/core.h	/^#define FMT_CORE_H_$/;"	d
FMT_CTOR	spdlog/fmt/bundled/format.h	/^#define FMT_CTOR(/;"	d
FMT_DEFAULTED_COPY_CTOR	spdlog/fmt/bundled/format.h	/^#define FMT_DEFAULTED_COPY_CTOR(/;"	d
FMT_DEFINE_INT_FORMATTERS	spdlog/fmt/bundled/format.h	/^#define FMT_DEFINE_INT_FORMATTERS(/;"	d
FMT_DEFINE_INT_FORMATTERS	spdlog/fmt/bundled/format.h	/^FMT_DEFINE_INT_FORMATTERS(long)$/;"	f	namespace:fmt	typeref:typename:int
FMT_DELETED	spdlog/fmt/bundled/core.h	/^#define FMT_DELETED /;"	d
FMT_DELETED_OR_UNDEFINED	spdlog/fmt/bundled/format.h	/^#define FMT_DELETED_OR_UNDEFINED /;"	d
FMT_DELETED_OR_UNDEFINED	spdlog/fmt/bundled/format.h	/^#define FMT_DELETED_OR_UNDEFINED$/;"	d
FMT_DETECTED_NOEXCEPT	spdlog/fmt/bundled/core.h	/^#define FMT_DETECTED_NOEXCEPT /;"	d
FMT_DETECTED_NOEXCEPT	spdlog/fmt/bundled/format.h	/^#define FMT_DETECTED_NOEXCEPT /;"	d
FMT_DISABLE_CONVERSION_TO_INT	spdlog/fmt/bundled/format.h	/^#define FMT_DISABLE_CONVERSION_TO_INT(/;"	d
FMT_DISABLE_CONVERSION_TO_INT	spdlog/fmt/bundled/format.h	/^FMT_DISABLE_CONVERSION_TO_INT(double);$/;"	p	namespace:fmt::internal
FMT_DISABLE_CONVERSION_TO_INT	spdlog/fmt/bundled/format.h	/^FMT_DISABLE_CONVERSION_TO_INT(float);$/;"	p	namespace:fmt::internal
FMT_DISABLE_CONVERSION_TO_INT	spdlog/fmt/bundled/format.h	/^FMT_DISABLE_CONVERSION_TO_INT(long double);$/;"	p	namespace:fmt::internal
FMT_DISALLOW_COPY_AND_ASSIGN	spdlog/fmt/bundled/core.h	/^    FMT_DISALLOW_COPY_AND_ASSIGN(arg_map);$/;"	p	class:internal::arg_map
FMT_DISALLOW_COPY_AND_ASSIGN	spdlog/fmt/bundled/core.h	/^    FMT_DISALLOW_COPY_AND_ASSIGN(basic_buffer);$/;"	p	class:internal::basic_buffer
FMT_DISALLOW_COPY_AND_ASSIGN	spdlog/fmt/bundled/core.h	/^    FMT_DISALLOW_COPY_AND_ASSIGN(basic_format_context);$/;"	p	class:basic_format_context
FMT_DISALLOW_COPY_AND_ASSIGN	spdlog/fmt/bundled/core.h	/^#define FMT_DISALLOW_COPY_AND_ASSIGN(/;"	d
FMT_DISALLOW_COPY_AND_ASSIGN	spdlog/fmt/bundled/format.h	/^    FMT_DISALLOW_COPY_AND_ASSIGN(ArgFormatterBase);$/;"	p	class:fmt::internal::ArgFormatterBase
FMT_DISALLOW_COPY_AND_ASSIGN	spdlog/fmt/bundled/format.h	/^    FMT_DISALLOW_COPY_AND_ASSIGN(BasicFormatter);$/;"	p	class:fmt::BasicFormatter
FMT_DISALLOW_COPY_AND_ASSIGN	spdlog/fmt/bundled/format.h	/^    FMT_DISALLOW_COPY_AND_ASSIGN(BasicWriter);$/;"	p	class:fmt::BasicWriter
FMT_DISALLOW_COPY_AND_ASSIGN	spdlog/fmt/bundled/format.h	/^    FMT_DISALLOW_COPY_AND_ASSIGN(Buffer);$/;"	p	class:fmt::Buffer
FMT_DISALLOW_COPY_AND_ASSIGN	spdlog/fmt/bundled/format.h	/^#define FMT_DISALLOW_COPY_AND_ASSIGN(/;"	d
FMT_DISALLOW_COPY_AND_ASSIGN	spdlog/fmt/bundled/posix.h	/^    FMT_DISALLOW_COPY_AND_ASSIGN(BufferedFile);$/;"	p	class:fmt::BufferedFile
FMT_DISALLOW_COPY_AND_ASSIGN	spdlog/fmt/bundled/posix.h	/^    FMT_DISALLOW_COPY_AND_ASSIGN(File);$/;"	p	class:fmt::File
FMT_DISALLOW_COPY_AND_ASSIGN	spdlog/fmt/bundled/posix.h	/^    FMT_DISALLOW_COPY_AND_ASSIGN(Locale);$/;"	p	class:fmt::Locale
FMT_DISALLOW_COPY_AND_ASSIGN	spdlog/fmt/bundled/printf.h	/^    FMT_DISALLOW_COPY_AND_ASSIGN(ArgConverter);$/;"	p	class:fmt::internal::ArgConverter
FMT_DISALLOW_COPY_AND_ASSIGN	spdlog/fmt/bundled/printf.h	/^    FMT_DISALLOW_COPY_AND_ASSIGN(CharConverter);$/;"	p	class:fmt::internal::CharConverter
FMT_DISALLOW_COPY_AND_ASSIGN	spdlog/fmt/bundled/printf.h	/^    FMT_DISALLOW_COPY_AND_ASSIGN(WidthHandler);$/;"	p	class:fmt::internal::WidthHandler
FMT_DISPATCH	spdlog/fmt/bundled/format.h	/^#define FMT_DISPATCH(/;"	d
FMT_DTOR_NOEXCEPT	spdlog/fmt/bundled/core.h	/^#define FMT_DTOR_NOEXCEPT /;"	d
FMT_DTOR_NOEXCEPT	spdlog/fmt/bundled/format.h	/^#define FMT_DTOR_NOEXCEPT /;"	d
FMT_END_NAMESPACE	spdlog/fmt/bundled/core.h	/^#define FMT_END_NAMESPACE /;"	d
FMT_EXCEPTIONS	spdlog/fmt/bundled/core.h	/^#define FMT_EXCEPTIONS /;"	d
FMT_EXCEPTIONS	spdlog/fmt/bundled/format.h	/^#define FMT_EXCEPTIONS /;"	d
FMT_EXPAND	spdlog/fmt/bundled/format.h	/^#define FMT_EXPAND(/;"	d
FMT_EXPLICIT	spdlog/fmt/bundled/core.h	/^#define FMT_EXPLICIT /;"	d
FMT_EXPLICIT	spdlog/fmt/bundled/core.h	/^#define FMT_EXPLICIT$/;"	d
FMT_FORMAT_H_	spdlog/fmt/bundled/format.h	/^#define FMT_FORMAT_H_$/;"	d
FMT_FORMAT_INL_H_	spdlog/fmt/bundled/format-inl.h	/^#define FMT_FORMAT_INL_H_$/;"	d
FMT_FOR_EACH	spdlog/fmt/bundled/format.h	/^#define FMT_FOR_EACH(/;"	d
FMT_FOR_EACH1	spdlog/fmt/bundled/format.h	/^#define FMT_FOR_EACH1(/;"	d
FMT_FOR_EACH10	spdlog/fmt/bundled/format.h	/^#define FMT_FOR_EACH10(/;"	d
FMT_FOR_EACH2	spdlog/fmt/bundled/format.h	/^#define FMT_FOR_EACH2(/;"	d
FMT_FOR_EACH3	spdlog/fmt/bundled/format.h	/^#define FMT_FOR_EACH3(/;"	d
FMT_FOR_EACH4	spdlog/fmt/bundled/format.h	/^#define FMT_FOR_EACH4(/;"	d
FMT_FOR_EACH5	spdlog/fmt/bundled/format.h	/^#define FMT_FOR_EACH5(/;"	d
FMT_FOR_EACH6	spdlog/fmt/bundled/format.h	/^#define FMT_FOR_EACH6(/;"	d
FMT_FOR_EACH7	spdlog/fmt/bundled/format.h	/^#define FMT_FOR_EACH7(/;"	d
FMT_FOR_EACH8	spdlog/fmt/bundled/format.h	/^#define FMT_FOR_EACH8(/;"	d
FMT_FOR_EACH9	spdlog/fmt/bundled/format.h	/^#define FMT_FOR_EACH9(/;"	d
FMT_FOR_EACH_	spdlog/fmt/bundled/format.h	/^#define FMT_FOR_EACH_(/;"	d
FMT_FUNC	spdlog/fmt/bundled/format.h	/^#define FMT_FUNC /;"	d
FMT_FUNC	spdlog/fmt/bundled/format.h	/^#define FMT_FUNC$/;"	d
FMT_GCC_EXTENSION	spdlog/fmt/bundled/format.h	/^#define FMT_GCC_EXTENSION /;"	d
FMT_GCC_EXTENSION	spdlog/fmt/bundled/format.h	/^#define FMT_GCC_EXTENSION$/;"	d
FMT_GCC_VERSION	spdlog/fmt/bundled/core.h	/^#define FMT_GCC_VERSION /;"	d
FMT_GCC_VERSION	spdlog/fmt/bundled/format.h	/^#define FMT_GCC_VERSION /;"	d
FMT_GEN	spdlog/fmt/bundled/format.h	/^#define FMT_GEN(/;"	d
FMT_GEN1	spdlog/fmt/bundled/format.h	/^#define FMT_GEN1(/;"	d
FMT_GEN10	spdlog/fmt/bundled/format.h	/^#define FMT_GEN10(/;"	d
FMT_GEN11	spdlog/fmt/bundled/format.h	/^#define FMT_GEN11(/;"	d
FMT_GEN12	spdlog/fmt/bundled/format.h	/^#define FMT_GEN12(/;"	d
FMT_GEN13	spdlog/fmt/bundled/format.h	/^#define FMT_GEN13(/;"	d
FMT_GEN14	spdlog/fmt/bundled/format.h	/^#define FMT_GEN14(/;"	d
FMT_GEN15	spdlog/fmt/bundled/format.h	/^#define FMT_GEN15(/;"	d
FMT_GEN2	spdlog/fmt/bundled/format.h	/^#define FMT_GEN2(/;"	d
FMT_GEN3	spdlog/fmt/bundled/format.h	/^#define FMT_GEN3(/;"	d
FMT_GEN4	spdlog/fmt/bundled/format.h	/^#define FMT_GEN4(/;"	d
FMT_GEN5	spdlog/fmt/bundled/format.h	/^#define FMT_GEN5(/;"	d
FMT_GEN6	spdlog/fmt/bundled/format.h	/^#define FMT_GEN6(/;"	d
FMT_GEN7	spdlog/fmt/bundled/format.h	/^#define FMT_GEN7(/;"	d
FMT_GEN8	spdlog/fmt/bundled/format.h	/^#define FMT_GEN8(/;"	d
FMT_GEN9	spdlog/fmt/bundled/format.h	/^#define FMT_GEN9(/;"	d
FMT_GET_ARG_NAME	spdlog/fmt/bundled/format.h	/^#define FMT_GET_ARG_NAME(/;"	d
FMT_GNUC_LIBSTD_VERSION	spdlog/fmt/bundled/format.h	/^#define FMT_GNUC_LIBSTD_VERSION /;"	d
FMT_HAS_BUILTIN	spdlog/fmt/bundled/format.h	/^#define FMT_HAS_BUILTIN(/;"	d
FMT_HAS_CPP_ATTRIBUTE	spdlog/fmt/bundled/core.h	/^#define FMT_HAS_CPP_ATTRIBUTE(/;"	d
FMT_HAS_CPP_ATTRIBUTE	spdlog/fmt/bundled/format.h	/^#define FMT_HAS_CPP_ATTRIBUTE(/;"	d
FMT_HAS_CXX17_ATTRIBUTE_MAYBE_UNUSED	spdlog/fmt/bundled/format.h	/^#define FMT_HAS_CXX17_ATTRIBUTE_MAYBE_UNUSED$/;"	d
FMT_HAS_FEATURE	spdlog/fmt/bundled/core.h	/^#define FMT_HAS_FEATURE(/;"	d
FMT_HAS_FEATURE	spdlog/fmt/bundled/format.h	/^#define FMT_HAS_FEATURE(/;"	d
FMT_HAS_GXX_CXX11	spdlog/fmt/bundled/core.h	/^#define FMT_HAS_GXX_CXX11 /;"	d
FMT_HAS_GXX_CXX11	spdlog/fmt/bundled/format.h	/^#define FMT_HAS_GXX_CXX11 /;"	d
FMT_HAS_INCLUDE	spdlog/fmt/bundled/core.h	/^#define FMT_HAS_INCLUDE(/;"	d
FMT_HAS_INCLUDE	spdlog/fmt/bundled/format.h	/^#define FMT_HAS_INCLUDE(/;"	d
FMT_HAS_STRING_VIEW	spdlog/fmt/bundled/format.h	/^#define FMT_HAS_STRING_VIEW /;"	d
FMT_HEADER_ONLY	spdlog/fmt/fmt.h	/^#define FMT_HEADER_ONLY$/;"	d
FMT_HEADER_ONLY	spdlog/fmt/ostr.h	/^#define FMT_HEADER_ONLY$/;"	d
FMT_ICC_VERSION	spdlog/fmt/bundled/format.h	/^#define FMT_ICC_VERSION /;"	d
FMT_INCLUDE	spdlog/fmt/bundled/format.h	/^#define FMT_INCLUDE$/;"	d
FMT_INLINE_NAMESPACE	spdlog/fmt/bundled/core.h	/^#define FMT_INLINE_NAMESPACE /;"	d
FMT_LOCALE	spdlog/fmt/bundled/posix.h	/^#define FMT_LOCALE$/;"	d
FMT_MAKE_ARG	spdlog/fmt/bundled/format.h	/^#define FMT_MAKE_ARG(/;"	d
FMT_MAKE_ARG_TYPE	spdlog/fmt/bundled/format.h	/^#define FMT_MAKE_ARG_TYPE(/;"	d
FMT_MAKE_REF	spdlog/fmt/bundled/format.h	/^#define FMT_MAKE_REF(/;"	d
FMT_MAKE_REF2	spdlog/fmt/bundled/format.h	/^#define FMT_MAKE_REF2(/;"	d
FMT_MAKE_STR_VALUE	spdlog/fmt/bundled/format.h	/^#define FMT_MAKE_STR_VALUE(/;"	d
FMT_MAKE_TEMPLATE_ARG	spdlog/fmt/bundled/format.h	/^#define FMT_MAKE_TEMPLATE_ARG(/;"	d
FMT_MAKE_VALUE	spdlog/fmt/bundled/core.h	/^#define FMT_MAKE_VALUE(/;"	d
FMT_MAKE_VALUE	spdlog/fmt/bundled/format.h	/^    FMT_MAKE_VALUE(LongLong, long_long_value, LONG_LONG)$/;"	f	class:fmt::internal::MakeValue
FMT_MAKE_VALUE	spdlog/fmt/bundled/format.h	/^    FMT_MAKE_VALUE(bool, int_value, BOOL)$/;"	f	class:fmt::internal::MakeValue
FMT_MAKE_VALUE	spdlog/fmt/bundled/format.h	/^#define FMT_MAKE_VALUE(/;"	d
FMT_MAKE_VALUE_	spdlog/fmt/bundled/format.h	/^#define FMT_MAKE_VALUE_(/;"	d
FMT_MAKE_VALUE_SAME	spdlog/fmt/bundled/core.h	/^#define FMT_MAKE_VALUE_SAME(/;"	d
FMT_MAKE_WSTR_VALUE	spdlog/fmt/bundled/format.h	/^#define FMT_MAKE_WSTR_VALUE(/;"	d
FMT_MAYBE_UNUSED	spdlog/fmt/bundled/format.h	/^#define FMT_MAYBE_UNUSED /;"	d
FMT_MAYBE_UNUSED	spdlog/fmt/bundled/format.h	/^#define FMT_MAYBE_UNUSED$/;"	d
FMT_MSC_VER	spdlog/fmt/bundled/core.h	/^#define FMT_MSC_VER /;"	d
FMT_MSC_VER	spdlog/fmt/bundled/format.h	/^#define FMT_MSC_VER /;"	d
FMT_NARG	spdlog/fmt/bundled/format.h	/^#define FMT_NARG(/;"	d
FMT_NARG_	spdlog/fmt/bundled/format.h	/^#define FMT_NARG_(/;"	d
FMT_NOEXCEPT	spdlog/fmt/bundled/core.h	/^#define FMT_NOEXCEPT /;"	d
FMT_NOEXCEPT	spdlog/fmt/bundled/core.h	/^#define FMT_NOEXCEPT$/;"	d
FMT_NOEXCEPT	spdlog/fmt/bundled/format.h	/^#define FMT_NOEXCEPT /;"	d
FMT_NOEXCEPT	spdlog/fmt/bundled/format.h	/^#define FMT_NOEXCEPT$/;"	d
FMT_NORETURN	spdlog/fmt/bundled/core.h	/^#define FMT_NORETURN /;"	d
FMT_NORETURN	spdlog/fmt/bundled/core.h	/^#define FMT_NORETURN$/;"	d
FMT_NORETURN	spdlog/fmt/bundled/format.h	/^#define FMT_NORETURN /;"	d
FMT_NORETURN	spdlog/fmt/bundled/format.h	/^#define FMT_NORETURN$/;"	d
FMT_NULL	spdlog/fmt/bundled/core.h	/^#define FMT_NULL /;"	d
FMT_NULL	spdlog/fmt/bundled/format.h	/^#define FMT_NULL /;"	d
FMT_OSTREAM_H_	spdlog/fmt/bundled/ostream.h	/^#define FMT_OSTREAM_H_$/;"	d
FMT_OVERRIDE	spdlog/fmt/bundled/core.h	/^#define FMT_OVERRIDE /;"	d
FMT_OVERRIDE	spdlog/fmt/bundled/core.h	/^#define FMT_OVERRIDE$/;"	d
FMT_OVERRIDE	spdlog/fmt/bundled/format.h	/^#define FMT_OVERRIDE /;"	d
FMT_OVERRIDE	spdlog/fmt/bundled/format.h	/^#define FMT_OVERRIDE$/;"	d
FMT_POSIX	spdlog/fmt/bundled/posix.h	/^#define FMT_POSIX(/;"	d
FMT_POSIX_CALL	spdlog/fmt/bundled/posix.h	/^#define FMT_POSIX_CALL(/;"	d
FMT_POSIX_H_	spdlog/fmt/bundled/posix.h	/^#define FMT_POSIX_H_$/;"	d
FMT_POWERS_OF_10	spdlog/fmt/bundled/format-inl.h	/^#define FMT_POWERS_OF_10(/;"	d
FMT_POWERS_OF_10	spdlog/fmt/bundled/format.cc	/^#define FMT_POWERS_OF_10(/;"	d	file:
FMT_PRINTF_H_	spdlog/fmt/bundled/printf.h	/^#define FMT_PRINTF_H_$/;"	d
FMT_RANGES_H_	spdlog/fmt/bundled/ranges.h	/^#define FMT_RANGES_H_$/;"	d
FMT_RANGE_OUTPUT_LENGTH_LIMIT	spdlog/fmt/bundled/ranges.h	/^#define FMT_RANGE_OUTPUT_LENGTH_LIMIT /;"	d
FMT_RETRY	spdlog/fmt/bundled/posix.h	/^#define FMT_RETRY(/;"	d
FMT_RETRY_VAL	spdlog/fmt/bundled/posix.h	/^#define FMT_RETRY_VAL(/;"	d
FMT_RSEQ_N	spdlog/fmt/bundled/format.h	/^#define FMT_RSEQ_N(/;"	d
FMT_SECURE_SCL	spdlog/fmt/bundled/format.h	/^#define FMT_SECURE_SCL /;"	d
FMT_SNPRINTF	spdlog/fmt/bundled/format-inl.h	/^#define FMT_SNPRINTF /;"	d
FMT_SNPRINTF	spdlog/fmt/bundled/format.cc	/^# define FMT_SNPRINTF /;"	d	file:
FMT_SPECIALIZE_MAKE_UNSIGNED	spdlog/fmt/bundled/format.h	/^#define FMT_SPECIALIZE_MAKE_UNSIGNED(/;"	d
FMT_SPECIALIZE_MAKE_UNSIGNED	spdlog/fmt/bundled/format.h	/^FMT_SPECIALIZE_MAKE_UNSIGNED(LongLong, ULongLong);$/;"	p	namespace:fmt::internal
FMT_SPECIALIZE_MAKE_UNSIGNED	spdlog/fmt/bundled/format.h	/^FMT_SPECIALIZE_MAKE_UNSIGNED(char, unsigned char);$/;"	p	namespace:fmt::internal
FMT_SPECIALIZE_MAKE_UNSIGNED	spdlog/fmt/bundled/format.h	/^FMT_SPECIALIZE_MAKE_UNSIGNED(int, unsigned);$/;"	p	namespace:fmt::internal
FMT_SPECIALIZE_MAKE_UNSIGNED	spdlog/fmt/bundled/format.h	/^FMT_SPECIALIZE_MAKE_UNSIGNED(long, unsigned long);$/;"	p	namespace:fmt::internal
FMT_SPECIALIZE_MAKE_UNSIGNED	spdlog/fmt/bundled/format.h	/^FMT_SPECIALIZE_MAKE_UNSIGNED(short, unsigned short);$/;"	p	namespace:fmt::internal
FMT_SPECIALIZE_MAKE_UNSIGNED	spdlog/fmt/bundled/format.h	/^FMT_SPECIALIZE_MAKE_UNSIGNED(signed char, unsigned char);$/;"	p	namespace:fmt::internal
FMT_STATIC_ASSERT	spdlog/fmt/bundled/format.h	/^#define FMT_STATIC_ASSERT(/;"	d
FMT_SWPRINTF	spdlog/fmt/bundled/format-inl.h	/^#define FMT_SWPRINTF /;"	d
FMT_SWPRINTF	spdlog/fmt/bundled/format.cc	/^# define FMT_SWPRINTF /;"	d	file:
FMT_SYSTEM	spdlog/fmt/bundled/posix.h	/^#define FMT_SYSTEM(/;"	d
FMT_THROW	spdlog/fmt/bundled/format.h	/^#define FMT_THROW(/;"	d
FMT_TIME_H_	spdlog/fmt/bundled/time.h	/^#define FMT_TIME_H_$/;"	d
FMT_TRY	spdlog/fmt/bundled/format-inl.h	/^#define FMT_TRY /;"	d
FMT_TRY	spdlog/fmt/bundled/format.cc	/^# define FMT_TRY /;"	d	file:
FMT_UNUSED	spdlog/fmt/bundled/format.h	/^#define FMT_UNUSED /;"	d
FMT_UNUSED	spdlog/fmt/bundled/format.h	/^#define FMT_UNUSED$/;"	d
FMT_USE_ALLOCATOR_TRAITS	spdlog/fmt/bundled/format.h	/^#define FMT_USE_ALLOCATOR_TRAITS /;"	d
FMT_USE_CONSTEXPR	spdlog/fmt/bundled/core.h	/^#define FMT_USE_CONSTEXPR /;"	d
FMT_USE_DEFAULTED_FUNCTIONS	spdlog/fmt/bundled/format.h	/^#define FMT_USE_DEFAULTED_FUNCTIONS /;"	d
FMT_USE_DELETED_FUNCTIONS	spdlog/fmt/bundled/format.h	/^#define FMT_USE_DELETED_FUNCTIONS /;"	d
FMT_USE_EXPERIMENTAL_STRING_VIEW	spdlog/fmt/bundled/core.h	/^#define FMT_USE_EXPERIMENTAL_STRING_VIEW$/;"	d
FMT_USE_EXTERN_TEMPLATES	spdlog/fmt/bundled/format.h	/^#define FMT_USE_EXTERN_TEMPLATES /;"	d
FMT_USE_NOEXCEPT	spdlog/fmt/bundled/core.h	/^#define FMT_USE_NOEXCEPT /;"	d
FMT_USE_NOEXCEPT	spdlog/fmt/bundled/format.h	/^#define FMT_USE_NOEXCEPT /;"	d
FMT_USE_NULLPTR	spdlog/fmt/bundled/core.h	/^#define FMT_USE_NULLPTR /;"	d
FMT_USE_RVALUE_REFERENCES	spdlog/fmt/bundled/format.h	/^#define FMT_USE_RVALUE_REFERENCES /;"	d
FMT_USE_STATIC_ASSERT	spdlog/fmt/bundled/format.h	/^#define FMT_USE_STATIC_ASSERT /;"	d
FMT_USE_STD_STRING_VIEW	spdlog/fmt/bundled/core.h	/^#define FMT_USE_STD_STRING_VIEW$/;"	d
FMT_USE_USER_DEFINED_LITERALS	spdlog/fmt/bundled/format.h	/^#define FMT_USE_USER_DEFINED_LITERALS /;"	d
FMT_USE_VARIADIC_TEMPLATES	spdlog/fmt/bundled/format.h	/^#define FMT_USE_VARIADIC_TEMPLATES /;"	d
FMT_USE_WINDOWS_H	spdlog/fmt/bundled/format.h	/^#define FMT_USE_WINDOWS_H /;"	d
FMT_USE_WINDOWS_H	spdlog/fmt/fmt.h	/^#define FMT_USE_WINDOWS_H /;"	d
FMT_VARIADIC	spdlog/fmt/bundled/format.h	/^#define FMT_VARIADIC(/;"	d
FMT_VARIADIC	spdlog/fmt/bundled/printf.h	/^FMT_VARIADIC(int, fprintf, std::FILE *, CStringRef)$/;"	f	namespace:fmt
FMT_VARIADIC	spdlog/fmt/bundled/printf.h	/^FMT_VARIADIC(int, printf, CStringRef)$/;"	f	namespace:fmt
FMT_VARIADIC	spdlog/fmt/bundled/printf.h	/^FMT_VARIADIC(std::string, sprintf, CStringRef)$/;"	f	namespace:fmt
FMT_VARIADIC	spdlog/fmt/bundled/printf.h	/^FMT_VARIADIC(void, printf, WWriter &, WCStringRef)$/;"	f	namespace:fmt
FMT_VARIADIC	spdlog/fmt/bundled/printf.h	/^FMT_VARIADIC(void, printf, Writer &, CStringRef)$/;"	f	namespace:fmt
FMT_VARIADIC_	spdlog/fmt/bundled/format.h	/^#define FMT_VARIADIC_(/;"	d
FMT_VARIADIC_CONST	spdlog/fmt/bundled/format.h	/^#define FMT_VARIADIC_CONST(/;"	d
FMT_VARIADIC_CONST_W	spdlog/fmt/bundled/format.h	/^#define FMT_VARIADIC_CONST_W(/;"	d
FMT_VARIADIC_CTOR	spdlog/fmt/bundled/format.h	/^    FMT_VARIADIC_CTOR(SystemError, init, int, CStringRef)$/;"	p	class:fmt::SystemError	typeref:typename:SystemError
FMT_VARIADIC_CTOR	spdlog/fmt/bundled/format.h	/^#define FMT_VARIADIC_CTOR(/;"	d
FMT_VARIADIC_VOID	spdlog/fmt/bundled/format.h	/^#define FMT_VARIADIC_VOID(/;"	d
FMT_VARIADIC_W	spdlog/fmt/bundled/format.h	/^#define FMT_VARIADIC_W(/;"	d
FMT_VARIADIC_W	spdlog/fmt/bundled/printf.h	/^FMT_VARIADIC_W(std::wstring, sprintf, WCStringRef)$/;"	p	namespace:fmt
FMT_VERSION	spdlog/fmt/bundled/core.h	/^#define FMT_VERSION /;"	d
FMT_VERSION	spdlog/fmt/bundled/format.h	/^#define FMT_VERSION /;"	d
FMT_WRAP	spdlog/fmt/bundled/format.h	/^#define FMT_WRAP(/;"	d
FMT_WRAP1	spdlog/fmt/bundled/format.h	/^#define FMT_WRAP1(/;"	d
FPUtil	spdlog/fmt/bundled/format.h	/^typedef std::numeric_limits<fmt::internal::DummyInt> FPUtil;$/;"	t	namespace:fmt::internal	typeref:typename:std::numeric_limits<fmt::internal::DummyInt>
FalseType	spdlog/fmt/bundled/format.h	/^struct FalseType$/;"	s	namespace:fmt::internal
File	spdlog/fmt/bundled/posix.cc	/^fmt::File::File(fmt::CStringRef path, int oflag) {$/;"	f	class:fmt::File
File	spdlog/fmt/bundled/posix.h	/^    FMT_API File(CStringRef path, int oflag);$/;"	p	class:fmt::File	typeref:typename:FMT_API
File	spdlog/fmt/bundled/posix.h	/^    File() FMT_NOEXCEPT : fd_(-1) {}$/;"	f	class:fmt::File
File	spdlog/fmt/bundled/posix.h	/^    File(File &&other) FMT_NOEXCEPT : fd_(other.fd_)$/;"	f	class:fmt::File
File	spdlog/fmt/bundled/posix.h	/^    File(File &other) FMT_NOEXCEPT : fd_(other.fd_)$/;"	f	class:fmt::File
File	spdlog/fmt/bundled/posix.h	/^    File(Proxy p) FMT_NOEXCEPT : fd_(p.fd) {}$/;"	f	class:fmt::File
File	spdlog/fmt/bundled/posix.h	/^    explicit File(int fd)$/;"	f	class:fmt::File
File	spdlog/fmt/bundled/posix.h	/^class File$/;"	c	namespace:fmt
FillOrder	qcustomplot.h	/^  enum FillOrder { foRowsFirst    \/\/\/< Rows are filled first, and a new element is wrapped to/;"	g	class:QCPLayoutGrid
FirmwareUpdate	simple.pb-c.h	/^typedef struct _FirmwareUpdate FirmwareUpdate;$/;"	t	typeref:struct:_FirmwareUpdate
FirmwareUpdate	simple.proto	/^message FirmwareUpdate {$/;"	m
FirmwareUpdateFeedback	simple.pb-c.h	/^typedef struct _FirmwareUpdateFeedback FirmwareUpdateFeedback;$/;"	t	typeref:struct:_FirmwareUpdateFeedback
FirmwareUpdateFeedback	simple.proto	/^message FirmwareUpdateFeedback {$/;"	m
FirmwareUpdateFeedback_Closure	simple.pb-c.h	/^typedef void (*FirmwareUpdateFeedback_Closure)$/;"	t	typeref:typename:void (*)(const FirmwareUpdateFeedback * message,void * closure_data)
FirmwareUpdateMode	protocol-struct.h	/^enum FirmwareUpdateMode : uint8_t { $/;"	g	typeref:typename:uint8_t
FirmwareUpdate_Closure	simple.pb-c.h	/^typedef void (*FirmwareUpdate_Closure)$/;"	t	typeref:typename:void (*)(const FirmwareUpdate * message,void * closure_data)
FirmwareUpgradeDetail	protocol-struct.h	/^struct FirmwareUpgradeDetail {$/;"	s
FirmwareUpgradeResponse	protocol-struct.h	/^struct FirmwareUpgradeResponse {$/;"	s
FirmwareUpgradeSimple	protocol-struct.h	/^struct FirmwareUpgradeSimple {$/;"	s
FirmwareUpgradeVerify	protocol-struct.h	/^struct FirmwareUpgradeVerify {$/;"	s
FixedBuffer	spdlog/fmt/bundled/format.h	/^    FixedBuffer(Char *array, std::size_t size)$/;"	f	class:fmt::internal::FixedBuffer
FixedBuffer	spdlog/fmt/bundled/format.h	/^class FixedBuffer : public fmt::Buffer<Char>$/;"	c	namespace:fmt::internal
FormatBuf	spdlog/fmt/bundled/ostream.h	/^    FormatBuf(Buffer<Char> &buffer)$/;"	f	class:fmt::internal::FormatBuf
FormatBuf	spdlog/fmt/bundled/ostream.h	/^class FormatBuf : public std::basic_streambuf<Char>$/;"	c	namespace:fmt::internal
FormatError	spdlog/fmt/bundled/format.h	/^    FormatError(const FormatError &ferr)$/;"	f	class:fmt::FormatError
FormatError	spdlog/fmt/bundled/format.h	/^    explicit FormatError(CStringRef message)$/;"	f	class:fmt::FormatError
FormatError	spdlog/fmt/bundled/format.h	/^class FormatError : public std::runtime_error$/;"	c	namespace:fmt
FormatFunc	spdlog/fmt/bundled/format-inl.h	/^typedef void (*FormatFunc)(internal::buffer &, int, string_view);$/;"	t	namespace:__anonb519b34f0110	typeref:typename:void (*)(internal::buffer &,int,string_view)
FormatFunc	spdlog/fmt/bundled/format.cc	/^typedef void (*FormatFunc)(Writer &, int, StringRef);$/;"	t	namespace:fmt::__anonf3b7881d0110	typeref:typename:void (*)(Writer &,int,StringRef)	file:
FormatFunc	spdlog/fmt/bundled/format.h	/^    typedef void (*FormatFunc)(void *formatter, const void *arg, void *format_str_ptr);$/;"	t	struct:fmt::internal::Value	typeref:typename:void (*)(void * formatter,const void * arg,void * format_str_ptr)
FormatInt	spdlog/fmt/bundled/format.h	/^    explicit FormatInt(LongLong value)$/;"	f	class:fmt::FormatInt
FormatInt	spdlog/fmt/bundled/format.h	/^    explicit FormatInt(ULongLong value)$/;"	f	class:fmt::FormatInt
FormatInt	spdlog/fmt/bundled/format.h	/^    explicit FormatInt(int value)$/;"	f	class:fmt::FormatInt
FormatInt	spdlog/fmt/bundled/format.h	/^    explicit FormatInt(long value)$/;"	f	class:fmt::FormatInt
FormatInt	spdlog/fmt/bundled/format.h	/^    explicit FormatInt(unsigned long value)$/;"	f	class:fmt::FormatInt
FormatInt	spdlog/fmt/bundled/format.h	/^    explicit FormatInt(unsigned value)$/;"	f	class:fmt::FormatInt
FormatInt	spdlog/fmt/bundled/format.h	/^class FormatInt$/;"	c	namespace:fmt
FormatSigned	spdlog/fmt/bundled/format.h	/^    void FormatSigned(LongLong value)$/;"	f	class:fmt::FormatInt	typeref:typename:void
FormatSpec	spdlog/fmt/bundled/format.h	/^    FormatSpec(unsigned width = 0, char type = 0, wchar_t fill = ' ')$/;"	f	struct:fmt::FormatSpec
FormatSpec	spdlog/fmt/bundled/format.h	/^struct FormatSpec : AlignSpec$/;"	s	namespace:fmt
FormatterBase	spdlog/fmt/bundled/format.h	/^    explicit FormatterBase(const ArgList &args)$/;"	f	class:fmt::internal::FormatterBase
FormatterBase	spdlog/fmt/bundled/format.h	/^class FormatterBase$/;"	c	namespace:fmt::internal
FractionStyle	qcustomplot.h	/^  enum FractionStyle { fsFloatingPoint     \/\/\/< Fractions are displayed as regular decimal fl/;"	g	class:QCPAxisTickerPi
GMTime	spdlog/fmt/bundled/time.h	/^        GMTime(std::time_t t)$/;"	f	struct:fmt::gmtime::GMTime
GMTime	spdlog/fmt/bundled/time.h	/^    struct GMTime$/;"	s	function:fmt::gmtime
GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE	qc-message.pb.cc	/^const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIAB/;"	p	namespace:protobuf_qc_2dmessage_2eproto	typeref:typename:const::google::protobuf::uint32 TableStruct::offsets[]	file:
GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE	qc-message.pb.cc	/^static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_S/;"	p	namespace:protobuf_qc_2dmessage_2eproto	typeref:typename:const::google::protobuf::internal::MigrationSchema schemas[]	file:
GREEN	spdlog/fmt/bundled/format.h	/^    GREEN,$/;"	e	enum:fmt::Color
GREEN	spdlog/sinks/wincolor_sink.h	/^    const WORD GREEN = FOREGROUND_GREEN;$/;"	m	class:spdlog::sinks::wincolor_sink	typeref:typename:const WORD
GUI	gui.h	/^        GUI() {$/;"	f	class:GUI
GUI	gui.h	/^class GUI {$/;"	c
GYRO	simple.proto	/^    GYRO = 8;$/;"	e
GenericHandler	protobuf-c/protobuf-c.c	/^typedef void (*GenericHandler) (void *service,$/;"	t	typeref:typename:void (*)(void * service,const ProtobufCMessage * input,ProtobufCClosure closure,void * closure_data)	file:
GetArenaNoVirtual	qc-message.pb.h	/^  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {$/;"	f	class:Imu	typeref:typename:::google::protobuf::Arena *
GetArenaNoVirtual	qc-message.pb.h	/^  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {$/;"	f	class:Protocol	typeref:typename:::google::protobuf::Arena *
GetCachedSize	qc-message.pb.h	/^  int GetCachedSize() const final { return _cached_size_.Get(); }$/;"	f	class:Imu	typeref:typename:int
GetCachedSize	qc-message.pb.h	/^  int GetCachedSize() const final { return _cached_size_.Get(); }$/;"	f	class:Protocol	typeref:typename:int
GetMetadata	qc-message.pb.cc	/^::google::protobuf::Metadata Imu::GetMetadata() const {$/;"	f	class:Imu	typeref:typename:::google::protobuf::Metadata
GetMetadata	qc-message.pb.cc	/^::google::protobuf::Metadata Protocol::GetMetadata() const {$/;"	f	class:Protocol	typeref:typename:::google::protobuf::Metadata
GradientPreset	qcustomplot.h	/^  enum GradientPreset { gpGrayscale  \/\/\/< Continuous lightness from black to white (suited fo/;"	g	class:QCPColorGradient
GuiSession_depre	gui-session.h	/^        GuiSession_depre(boost::asio::io_service& io_service, GLFWwindow* window)$/;"	f	class:GuiSession_depre
GuiSession_depre	gui-session.h	/^class GuiSession_depre {$/;"	c
HASH_FLAG	spdlog/fmt/bundled/format.h	/^    HASH_FLAG = 8,$/;"	e	enum:fmt::__anon1ea8787f0d03
HOP	simple.proto	/^    HOP = 32;$/;"	e
HTTPErrorCategory	http-request.h	/^struct HTTPErrorCategory : boost::system::error_category$/;"	s	namespace:__anon7a6731110110
HTTPErrors	http-request.h	/^enum HTTPErrors$/;"	g
HTTPSession	http-request.h	/^    HTTPSession(boost::asio::io_service& ios)$/;"	f	class:HTTPSession
HTTPSession	http-request.h	/^class HTTPSession : public std::enable_shared_from_this<HTTPSession>$/;"	c
IMU	simple.proto	/^    IMU = 16;$/;"	e
IMU_USE	protocol-struct.h	/^    uint16_t IMU_USE;$/;"	m	struct:CONTROL_WHEEL	typeref:typename:uint16_t
INLINE_BUFFER_SIZE	spdlog/fmt/bundled/format.h	/^    INLINE_BUFFER_SIZE = 500$/;"	e	enum:fmt::internal::__anon1ea8787f0103
INT	spdlog/fmt/bundled/format.h	/^        INT,$/;"	e	enum:fmt::internal::Value::Type
IP	tcp-packet.h	/^namespace IP { $/;"	n
IS_PACKED	spdlog/fmt/bundled/core.h	/^    static const bool IS_PACKED = NUM_ARGS < internal::max_packed_args;$/;"	m	class:format_arg_store	typeref:typename:const bool
Imu	qc-message.pb.cc	/^Imu::Imu()$/;"	f	class:Imu
Imu	qc-message.pb.cc	/^Imu::Imu(const Imu& from)$/;"	f	class:Imu
Imu	qc-message.pb.h	/^  Imu();$/;"	p	class:Imu
Imu	qc-message.pb.h	/^  Imu(Imu&& from) noexcept$/;"	f	class:Imu
Imu	qc-message.pb.h	/^  Imu(const Imu& from);$/;"	p	class:Imu
Imu	qc-message.pb.h	/^class Imu : public ::google::protobuf::Message \/* @@protoc_insertion_point(class_definition:Imu/;"	c
Imu	qc-message.proto	/^message Imu {$/;"	m
ImuDefaultTypeInternal	qc-message.pb.cc	/^class ImuDefaultTypeInternal {$/;"	c	file:
Info	spdlogger.h	/^	void Info(const char* message, const Args&... args)$/;"	f	namespace:util	typeref:typename:void
InitAsDefaultInstance	qc-message.pb.cc	/^void Imu::InitAsDefaultInstance() {$/;"	f	class:Imu	typeref:typename:void
InitAsDefaultInstance	qc-message.pb.cc	/^void Protocol::InitAsDefaultInstance() {$/;"	f	class:Protocol	typeref:typename:void
InitAsDefaultInstance	qc-message.pb.h	/^  static void InitAsDefaultInstance();  \/\/ FOR INTERNAL USE ONLY$/;"	p	class:Imu	typeref:typename:void
InitAsDefaultInstance	qc-message.pb.h	/^  static void InitAsDefaultInstance();  \/\/ FOR INTERNAL USE ONLY$/;"	p	class:Protocol	typeref:typename:void
InitDefaults	qc-message.pb.cc	/^void InitDefaults() {$/;"	f	namespace:protobuf_qc_2dmessage_2eproto	typeref:typename:void
InitDefaultsImu	qc-message.pb.cc	/^static void InitDefaultsImu() {$/;"	f	namespace:protobuf_qc_2dmessage_2eproto	typeref:typename:void	file:
InitDefaultsProtocol	qc-message.pb.cc	/^static void InitDefaultsProtocol() {$/;"	f	namespace:protobuf_qc_2dmessage_2eproto	typeref:typename:void	file:
InnerProtocolWithSTM	protocol-struct.h	/^struct InnerProtocolWithSTM {$/;"	s
InsetPlacement	qcustomplot.h	/^  enum InsetPlacement { ipFree            \/\/\/< The element may be positioned\/sized arbitrari/;"	g	class:QCPLayoutInset
IntChecker	spdlog/fmt/bundled/printf.h	/^struct IntChecker$/;"	s	namespace:fmt::internal
IntChecker	spdlog/fmt/bundled/printf.h	/^struct IntChecker<true>$/;"	s	namespace:fmt::internal
IntFormatSpec	spdlog/fmt/bundled/format.h	/^    IntFormatSpec(T val, const SpecT &spec = SpecT())$/;"	f	class:fmt::IntFormatSpec
IntFormatSpec	spdlog/fmt/bundled/format.h	/^class IntFormatSpec : public SpecT$/;"	c	namespace:fmt
IntTraits	spdlog/fmt/bundled/format.h	/^struct IntTraits$/;"	s	namespace:fmt::internal
Interaction	qcustomplot.h	/^enum Interaction { iRangeDrag         = 0x001 \/\/\/< <tt>0x001<\/tt> Axis ranges are draggable /;"	g	namespace:QCP
InternalSerializeWithCachedSizesToArray	qc-message.pb.cc	/^::google::protobuf::uint8* Imu::InternalSerializeWithCachedSizesToArray($/;"	f	class:Imu	typeref:typename:::google::protobuf::uint8 *
InternalSerializeWithCachedSizesToArray	qc-message.pb.cc	/^::google::protobuf::uint8* Protocol::InternalSerializeWithCachedSizesToArray($/;"	f	class:Protocol	typeref:typename:::google::protobuf::uint8 *
InternalSwap	qc-message.pb.cc	/^void Imu::InternalSwap(Imu* other) {$/;"	f	class:Imu	typeref:typename:void
InternalSwap	qc-message.pb.cc	/^void Protocol::InternalSwap(Protocol* other) {$/;"	f	class:Protocol	typeref:typename:void
InternalSwap	qc-message.pb.h	/^  void InternalSwap(Imu* other);$/;"	p	class:Imu	typeref:typename:void
InternalSwap	qc-message.pb.h	/^  void InternalSwap(Protocol* other);$/;"	p	class:Protocol	typeref:typename:void
IpPing	ble.cpp	/^            IpPing(const std::string& _ip, int _ping) {$/;"	f	struct:BLESession::connectAP::IpPing	file:
IpPing	ble.cpp	/^        struct IpPing {$/;"	s	function:BLESession::connectAP	file:
IsInitialized	qc-message.pb.cc	/^bool Imu::IsInitialized() const {$/;"	f	class:Imu	typeref:typename:bool
IsInitialized	qc-message.pb.cc	/^bool Protocol::IsInitialized() const {$/;"	f	class:Protocol	typeref:typename:bool
IsInitialized	qc-message.pb.h	/^  bool IsInitialized() const final;$/;"	p	class:Imu	typeref:typename:bool
IsInitialized	qc-message.pb.h	/^  bool IsInitialized() const final;$/;"	p	class:Protocol	typeref:typename:bool
IsZeroInt	spdlog/fmt/bundled/printf.h	/^class IsZeroInt : public ArgVisitor<IsZeroInt, bool>$/;"	c	namespace:fmt::internal
JSON_CATCH	json.hpp	/^    #define JSON_CATCH /;"	d
JSON_CATCH	json.hpp	/^    #define JSON_CATCH(/;"	d
JSON_DEPRECATED	json.hpp	/^    #define JSON_DEPRECATED /;"	d
JSON_DEPRECATED	json.hpp	/^    #define JSON_DEPRECATED$/;"	d
JSON_HAS_CPP_14	json.hpp	/^    #define JSON_HAS_CPP_14$/;"	d
JSON_HAS_CPP_17	json.hpp	/^    #define JSON_HAS_CPP_17$/;"	d
JSON_LIKELY	json.hpp	/^    #define JSON_LIKELY(/;"	d
JSON_THROW	json.hpp	/^    #define JSON_THROW /;"	d
JSON_THROW	json.hpp	/^    #define JSON_THROW(/;"	d
JSON_TRY	json.hpp	/^    #define JSON_TRY /;"	d
JSON_UNLIKELY	json.hpp	/^    #define JSON_UNLIKELY(/;"	d
LAST_INTEGER_TYPE	spdlog/fmt/bundled/format.h	/^        LAST_INTEGER_TYPE = CHAR,$/;"	e	enum:fmt::internal::Value::Type
LAST_NUMERIC_TYPE	spdlog/fmt/bundled/format.h	/^        LAST_NUMERIC_TYPE = LONG_DOUBLE,$/;"	e	enum:fmt::internal::Value::Type
LC_NUMERIC_MASK	spdlog/fmt/bundled/posix.h	/^        LC_NUMERIC_MASK = LC_NUMERIC$/;"	e	enum:fmt::Locale::__anonc4b4f0c90203
LConvCheck	spdlog/fmt/bundled/format.h	/^    LConvCheck(int) {}$/;"	f	struct:fmt::internal::LConvCheck
LConvCheck	spdlog/fmt/bundled/format.h	/^struct LConvCheck$/;"	s	namespace:fmt::internal
LED_CONTROL__INIT	simple.pb-c.h	/^#define LED_CONTROL__INIT /;"	d
LEFT	protocol-struct.h	/^    int16_t LEFT;$/;"	m	struct:CONTROL_ENCODER	typeref:typename:int16_t
LEFT	protocol-struct.h	/^    int16_t LEFT;$/;"	m	struct:CONTROL_WHEEL	typeref:typename:int16_t
LINMATH_H	linmath.h	/^#define LINMATH_H$/;"	d
LINMATH_H_DEFINE_VEC	linmath.h	/^#define LINMATH_H_DEFINE_VEC(/;"	d
LONG_DOUBLE	spdlog/fmt/bundled/format.h	/^        LONG_DOUBLE,$/;"	e	enum:fmt::internal::Value::Type
LONG_LONG	spdlog/fmt/bundled/format.h	/^        LONG_LONG,$/;"	e	enum:fmt::internal::Value::Type
LabelSide	qcustomplot.h	/^  enum LabelSide { lsInside    \/\/\/< Tick labels will be displayed inside the axis rect and cl/;"	g	class:QCPAxis
LayerInsertMode	qcustomplot.h	/^  enum LayerInsertMode { limBelow  \/\/\/< Layer is inserted below other layer$/;"	g	class:QCustomPlot
LayerMode	qcustomplot.h	/^  enum LayerMode { lmLogical   \/\/\/< Layer is used only for rendering order, and shares paint /;"	g	class:QCPLayer
LedControl	simple.pb-c.h	/^typedef struct _LedControl LedControl;$/;"	t	typeref:struct:_LedControl
LedControl	simple.proto	/^message LedControl {$/;"	m
LedControl_Closure	simple.pb-c.h	/^typedef void (*LedControl_Closure)$/;"	t	typeref:typename:void (*)(const LedControl * message,void * closure_data)
LicenseSession	license-session.h	/^        LicenseSession(boost::asio::io_service& io_service)$/;"	f	class:LicenseSession
LicenseSession	license-session.h	/^class LicenseSession : public boost::enable_shared_from_this<LicenseSession>$/;"	c
LineStyle	qcustomplot.h	/^  enum LineStyle { lsNone        \/\/\/< data points are not connected with any lines (e.g. data/;"	g	class:QCPGraph
LineStyle	qcustomplot.h	/^  enum LineStyle { lsNone  \/\/\/< No line is drawn between data points (e.g. only scatters)$/;"	g	class:QCPCurve
LocalTime	spdlog/fmt/bundled/time.h	/^        LocalTime(std::time_t t)$/;"	f	struct:fmt::localtime::LocalTime
LocalTime	spdlog/fmt/bundled/time.h	/^    struct LocalTime$/;"	s	function:fmt::localtime
Locale	spdlog/fmt/bundled/posix.h	/^    Locale()$/;"	f	class:fmt::Locale
Locale	spdlog/fmt/bundled/posix.h	/^class Locale$/;"	c	namespace:fmt
Log	spdlogger.h	/^		Log()$/;"	f	class:util::Log
Log	spdlogger.h	/^	class Log$/;"	c	namespace:util
LongLong	spdlog/fmt/bundled/format.h	/^FMT_GCC_EXTENSION typedef long long LongLong;$/;"	t	namespace:fmt	typeref:typename:long long
MAGENTA	spdlog/fmt/bundled/format.h	/^    MAGENTA,$/;"	e	enum:fmt::Color
MAINWINDOW_H	mainwindow.h	/^#define MAINWINDOW_H$/;"	d
MAX_FORMAT_SIZE	spdlog/fmt/bundled/format.h	/^        MAX_FORMAT_SIZE = 10$/;"	e	enum:fmt::BasicWriter::write_double::__anon1ea8787f0e03
MAX_PACKED_ARGS	spdlog/fmt/bundled/format.h	/^        MAX_PACKED_ARGS = 16$/;"	e	enum:fmt::ArgList::__anon1ea8787f0c03
MAX_SCANNED_MEMBER_SLAB	protobuf-c/protobuf-c.c	/^#define MAX_SCANNED_MEMBER_SLAB	/;"	d	file:
MAX_UINT64_ENCODED_SIZE	protobuf-c/protobuf-c.c	/^#define MAX_UINT64_ENCODED_SIZE	/;"	d	file:
MDIMAINWINDOW_H	mdi-child.h	/^#define MDIMAINWINDOW_H$/;"	d
MEDIA_PORT	tcp-packet.h	/^    MEDIA_PORT = 13001,$/;"	e	enum:__anonce98fa070103
MINUS_FLAG	spdlog/fmt/bundled/format.h	/^    MINUS_FLAG = 4,$/;"	e	enum:fmt::__anon1ea8787f0d03
MOTOR	simple.proto	/^    MOTOR = 64;$/;"	e
MainType	spdlog/fmt/bundled/format.cc	/^  typedef internal::IntTraits<int>::MainType MainType;$/;"	t	function:fmt::__anonf3b7881d0110::format_error_code	typeref:typename:internal::IntTraits<int>::MainType	file:
MainType	spdlog/fmt/bundled/format.h	/^        typedef typename internal::IntTraits<Int>::MainType MainType;$/;"	t	function:fmt::BasicWriter::write_decimal	typeref:typename:internal::IntTraits<Int>::MainType
MainType	spdlog/fmt/bundled/format.h	/^    typedef typename TypeSelector<std::numeric_limits<T>::digits <= 32>::Type MainType;$/;"	t	struct:fmt::internal::IntTraits	typeref:typename:TypeSelector<std::numeric_limits<T>::digits<=32>::Type
MainType	spdlog/fmt/bundled/format.h	/^    typedef typename internal::IntTraits<T>::MainType MainType;$/;"	t	function:fmt::format_decimal	typeref:typename:internal::IntTraits<T>::MainType
MainWindow	mainwindow.cpp	/^MainWindow::MainWindow(QWidget *parent) :$/;"	f	class:MainWindow
MainWindow	mainwindow.h	/^    explicit MainWindow(QWidget *parent = nullptr);$/;"	p	class:MainWindow
MainWindow	mainwindow.h	/^class MainWindow : public QMainWindow$/;"	c
MakeArg	spdlog/fmt/bundled/format.h	/^    MakeArg()$/;"	f	class:fmt::internal::MakeArg
MakeArg	spdlog/fmt/bundled/format.h	/^    MakeArg(const T &value)$/;"	f	class:fmt::internal::MakeArg
MakeArg	spdlog/fmt/bundled/format.h	/^class MakeArg : public Arg$/;"	c	namespace:fmt::internal
MakeArg	spdlog/fmt/bundled/ostream.h	/^    typedef internal::MakeArg<BasicFormatter<Char>> MakeArg;$/;"	t	function:fmt::format_arg	typeref:typename:internal::MakeArg<BasicFormatter<Char>>
MakeUnsigned	spdlog/fmt/bundled/format.h	/^struct MakeUnsigned$/;"	s	namespace:fmt::internal
MakeValue	spdlog/fmt/bundled/format.h	/^    MakeValue() {}$/;"	f	class:fmt::internal::MakeValue
MakeValue	spdlog/fmt/bundled/format.h	/^    MakeValue(T *value);$/;"	p	class:fmt::internal::MakeValue
MakeValue	spdlog/fmt/bundled/format.h	/^    MakeValue(const NamedArg<Char_> &value)$/;"	f	class:fmt::internal::MakeValue
MakeValue	spdlog/fmt/bundled/format.h	/^    MakeValue(const NamedArgWithType<Char_, T> &value)$/;"	f	class:fmt::internal::MakeValue
MakeValue	spdlog/fmt/bundled/format.h	/^    MakeValue(const T *value);$/;"	p	class:fmt::internal::MakeValue
MakeValue	spdlog/fmt/bundled/format.h	/^    MakeValue(typename WCharHelper<WStringRef, Char>::Unsupported);$/;"	p	class:fmt::internal::MakeValue
MakeValue	spdlog/fmt/bundled/format.h	/^    MakeValue(typename WCharHelper<const std::wstring &, Char>::Unsupported);$/;"	p	class:fmt::internal::MakeValue
MakeValue	spdlog/fmt/bundled/format.h	/^    MakeValue(typename WCharHelper<const std::wstring_view &, Char>::Unsupported);$/;"	p	class:fmt::internal::MakeValue
MakeValue	spdlog/fmt/bundled/format.h	/^    MakeValue(typename WCharHelper<const wchar_t *, Char>::Unsupported);$/;"	p	class:fmt::internal::MakeValue
MakeValue	spdlog/fmt/bundled/format.h	/^    MakeValue(typename WCharHelper<wchar_t *, Char>::Unsupported);$/;"	p	class:fmt::internal::MakeValue
MakeValue	spdlog/fmt/bundled/format.h	/^    MakeValue(typename WCharHelper<wchar_t, Char>::Supported value)$/;"	f	class:fmt::internal::MakeValue
MakeValue	spdlog/fmt/bundled/format.h	/^    MakeValue(typename WCharHelper<wchar_t, Char>::Unsupported);$/;"	p	class:fmt::internal::MakeValue
MakeValue	spdlog/fmt/bundled/format.h	/^    MakeValue(unsigned long value)$/;"	f	class:fmt::internal::MakeValue
MakeValue	spdlog/fmt/bundled/format.h	/^class MakeValue : public Arg$/;"	c	namespace:fmt::internal
MapType	spdlog/fmt/bundled/format.h	/^    typedef std::vector<std::pair<fmt::BasicStringRef<Char>, internal::Arg>> MapType;$/;"	t	class:fmt::internal::ArgMap	typeref:typename:std::vector<std::pair<fmt::BasicStringRef<Char>,internal::Arg>>
MarginSide	qcustomplot.h	/^enum MarginSide { msLeft     = 0x01 \/\/\/< <tt>0x01<\/tt> left margin$/;"	g	namespace:QCP
MaybeArenaPtr	qc-message.pb.h	/^  inline void* MaybeArenaPtr() const {$/;"	f	class:Imu	typeref:typename:void *
MaybeArenaPtr	qc-message.pb.h	/^  inline void* MaybeArenaPtr() const {$/;"	f	class:Protocol	typeref:typename:void *
MdiChild	mdi-child.cpp	/^MdiChild::MdiChild(QWidget *parent) :$/;"	f	class:MdiChild
MdiChild	mdi-child.h	/^    explicit MdiChild(QWidget *parent = nullptr) ;$/;"	p	class:MdiChild
MdiChild	mdi-child.h	/^class MdiChild : public QMainWindow$/;"	c
MemoryBuffer	spdlog/fmt/bundled/format.h	/^    MemoryBuffer(MemoryBuffer &&other)$/;"	f	class:fmt::internal::MemoryBuffer
MemoryBuffer	spdlog/fmt/bundled/format.h	/^    explicit MemoryBuffer(const Allocator &alloc = Allocator())$/;"	f	class:fmt::internal::MemoryBuffer
MemoryBuffer	spdlog/fmt/bundled/format.h	/^class MemoryBuffer : private Allocator, public Buffer<T>$/;"	c	namespace:fmt::internal
MemoryWriter	spdlog/fmt/bundled/format.h	/^typedef BasicMemoryWriter<char> MemoryWriter;$/;"	t	namespace:fmt	typeref:typename:BasicMemoryWriter<char>
MergeFrom	qc-message.pb.cc	/^void Imu::MergeFrom(const ::google::protobuf::Message& from) {$/;"	f	class:Imu	typeref:typename:void
MergeFrom	qc-message.pb.cc	/^void Imu::MergeFrom(const Imu& from) {$/;"	f	class:Imu	typeref:typename:void
MergeFrom	qc-message.pb.cc	/^void Protocol::MergeFrom(const ::google::protobuf::Message& from) {$/;"	f	class:Protocol	typeref:typename:void
MergeFrom	qc-message.pb.cc	/^void Protocol::MergeFrom(const Protocol& from) {$/;"	f	class:Protocol	typeref:typename:void
MergeFrom	qc-message.pb.h	/^  void MergeFrom(const ::google::protobuf::Message& from) final;$/;"	p	class:Imu	typeref:typename:void
MergeFrom	qc-message.pb.h	/^  void MergeFrom(const ::google::protobuf::Message& from) final;$/;"	p	class:Protocol	typeref:typename:void
MergeFrom	qc-message.pb.h	/^  void MergeFrom(const Imu& from);$/;"	p	class:Imu	typeref:typename:void
MergeFrom	qc-message.pb.h	/^  void MergeFrom(const Protocol& from);$/;"	p	class:Protocol	typeref:typename:void
MergePartialFromCodedStream	qc-message.pb.cc	/^bool Imu::MergePartialFromCodedStream($/;"	f	class:Imu	typeref:typename:bool
MergePartialFromCodedStream	qc-message.pb.cc	/^bool Protocol::MergePartialFromCodedStream($/;"	f	class:Protocol	typeref:typename:bool
MergePartialFromCodedStream	qc-message.pb.h	/^  bool MergePartialFromCodedStream($/;"	p	class:Imu	typeref:typename:bool
MergePartialFromCodedStream	qc-message.pb.h	/^  bool MergePartialFromCodedStream($/;"	p	class:Protocol	typeref:typename:bool
ModernProtocolWithSTM	protocol-struct.h	/^struct ModernProtocolWithSTM {$/;"	s
MyType	spdlog/sinks/stdout_sinks.h	/^    using MyType = stderr_sink<Mutex>;$/;"	t	class:spdlog::sinks::SPDLOG_FINAL	typeref:typename:stderr_sink<Mutex>
MyType	spdlog/sinks/stdout_sinks.h	/^    using MyType = stdout_sink<Mutex>;$/;"	t	class:spdlog::sinks::SPDLOG_FINAL	typeref:typename:stdout_sink<Mutex>
NAMED_ARG	spdlog/fmt/bundled/format.h	/^        NAMED_ARG,$/;"	e	enum:fmt::internal::Value::Type
NLOHMANN_BASIC_JSON_TPL	json.hpp	/^#define NLOHMANN_BASIC_JSON_TPL /;"	d
NLOHMANN_BASIC_JSON_TPL_DECLARATION	json.hpp	/^#define NLOHMANN_BASIC_JSON_TPL_DECLARATION /;"	d
NLOHMANN_JSON_FWD_HPP	json.hpp	/^#define NLOHMANN_JSON_FWD_HPP$/;"	d
NLOHMANN_JSON_HAS_HELPER	json.hpp	/^#define NLOHMANN_JSON_HAS_HELPER(/;"	d
NLOHMANN_JSON_HAS_HELPER	json.hpp	/^NLOHMANN_JSON_HAS_HELPER(iterator);$/;"	p	namespace:nlohmann::detail
NLOHMANN_JSON_HAS_HELPER	json.hpp	/^NLOHMANN_JSON_HAS_HELPER(key_type);$/;"	p	namespace:nlohmann::detail
NLOHMANN_JSON_HAS_HELPER	json.hpp	/^NLOHMANN_JSON_HAS_HELPER(mapped_type);$/;"	p	namespace:nlohmann::detail
NLOHMANN_JSON_HAS_HELPER	json.hpp	/^NLOHMANN_JSON_HAS_HELPER(value_type);$/;"	p	namespace:nlohmann::detail
NLOHMANN_JSON_HPP	json.hpp	/^#define NLOHMANN_JSON_HPP$/;"	d
NLOHMANN_JSON_VERSION_MAJOR	json.hpp	/^#define NLOHMANN_JSON_VERSION_MAJOR /;"	d
NLOHMANN_JSON_VERSION_MINOR	json.hpp	/^#define NLOHMANN_JSON_VERSION_MINOR /;"	d
NLOHMANN_JSON_VERSION_PATCH	json.hpp	/^#define NLOHMANN_JSON_VERSION_PATCH /;"	d
NOMINMAX	spdlog/details/os.h	/^#define NOMINMAX /;"	d
NOMINMAX	spdlog/fmt/bundled/format-inl.h	/^#define NOMINMAX$/;"	d
NOMINMAX	spdlog/fmt/bundled/format.cc	/^#  define NOMINMAX$/;"	d	file:
NONE	spdlog/fmt/bundled/format.h	/^        NONE,$/;"	e	enum:fmt::internal::Value::Type
NUM_ARGS	spdlog/fmt/bundled/core.h	/^    static const size_t NUM_ARGS = sizeof...(Args);$/;"	m	class:format_arg_store	typeref:typename:const size_t
NamedArg	spdlog/fmt/bundled/format.h	/^    NamedArg(BasicStringRef<Char> argname, const T &value)$/;"	f	struct:fmt::internal::NamedArg
NamedArg	spdlog/fmt/bundled/format.h	/^    typedef internal::NamedArg<Char> NamedArg;$/;"	t	function:fmt::internal::ArgMap::init	typeref:typename:internal::NamedArg<Char>
NamedArg	spdlog/fmt/bundled/format.h	/^struct NamedArg : Arg$/;"	s	namespace:fmt::internal
NamedArgWithType	spdlog/fmt/bundled/format.h	/^    NamedArgWithType(BasicStringRef<Char> argname, const T &value)$/;"	f	struct:fmt::internal::NamedArgWithType
NamedArgWithType	spdlog/fmt/bundled/format.h	/^struct NamedArgWithType : NamedArg<Char>$/;"	s	namespace:fmt::internal
New	qc-message.pb.h	/^  Imu* New(::google::protobuf::Arena* arena) const final {$/;"	f	class:Imu	typeref:typename:Imu *
New	qc-message.pb.h	/^  Protocol* New(::google::protobuf::Arena* arena) const final {$/;"	f	class:Protocol	typeref:typename:Protocol *
New	qc-message.pb.h	/^  inline Imu* New() const final {$/;"	f	class:Imu	typeref:typename:Imu *
New	qc-message.pb.h	/^  inline Protocol* New() const final {$/;"	f	class:Protocol	typeref:typename:Protocol *
No	spdlog/fmt/bundled/format.h	/^typedef char No[2];$/;"	t	namespace:fmt::internal	typeref:typename:char[2]
NoThousandsSep	spdlog/fmt/bundled/format.h	/^struct NoThousandsSep$/;"	s	namespace:fmt::internal
Not	spdlog/fmt/bundled/format.h	/^struct Not$/;"	s	namespace:fmt::internal
Not	spdlog/fmt/bundled/format.h	/^struct Not<false>$/;"	s	namespace:fmt::internal
Null	spdlog/fmt/bundled/format.h	/^struct Null$/;"	s	namespace:fmt::internal
O_CREAT	spdlog/fmt/bundled/posix.cc	/^# define O_CREAT /;"	d	file:
O_TRUNC	spdlog/fmt/bundled/posix.cc	/^# define O_TRUNC /;"	d	file:
PKT	tcp-packet.h	/^}PKT; $/;"	t	typeref:struct:__anonce98fa070308
PKT_	tcp-packet.h	/^#define PKT_	/;"	d
PKT_AUDIO_SEND	tcp-packet.h	/^#define PKT_AUDIO_SEND	/;"	d
PKT_SIG	tcp-packet.h	/^}PKT_SIG; $/;"	t	typeref:struct:__anonce98fa070408
PKT_TO_DEVICE	tcp-packet.h	/^#define PKT_TO_DEVICE(/;"	d
PKT_TO_LICENSE	tcp-packet.h	/^#define PKT_TO_LICENSE(/;"	d
PKT_TO_MOBILE	tcp-packet.h	/^#define PKT_TO_MOBILE(/;"	d
PKT_VIDEO_REQUEST	tcp-packet.h	/^#define PKT_VIDEO_REQUEST	/;"	d
PLUS_FLAG	spdlog/fmt/bundled/format.h	/^    PLUS_FLAG = 2,$/;"	e	enum:fmt::__anon1ea8787f0d03
POINTER	spdlog/fmt/bundled/format.h	/^        POINTER,$/;"	e	enum:fmt::internal::Value::Type
POW10_EXPONENTS	spdlog/fmt/bundled/format-inl.h	/^const int16_t basic_data<T>::POW10_EXPONENTS[] = {-1220, -1193, -1166, -1140, -1113, -1087, -106/;"	m	class:internal::basic_data<T>	typeref:typename:const int16_t[]
POW10_SIGNIFICANDS	spdlog/fmt/bundled/format-inl.h	/^const uint64_t basic_data<T>::POW10_SIGNIFICANDS[] = {0xfa8fd5a0081c0288, 0xbaaee17fa23ebf76, 0x/;"	m	class:internal::basic_data<T>	typeref:typename:const uint64_t[]
POWERS_OF_10_32	spdlog/fmt/bundled/format-inl.h	/^const uint32_t basic_data<T>::POWERS_OF_10_32[] = {0, FMT_POWERS_OF_10(1)};$/;"	m	class:internal::basic_data<T>	typeref:typename:const uint32_t[]
POWERS_OF_10_32	spdlog/fmt/bundled/format.cc	/^const uint32_t internal::BasicData<T>::POWERS_OF_10_32[] = {$/;"	m	class:fmt::internal::BasicData<T>	typeref:typename:const uint32_t[]
POWERS_OF_10_32	spdlog/fmt/bundled/format.h	/^    static const uint32_t POWERS_OF_10_32[];$/;"	m	struct:fmt::internal::BasicData	typeref:typename:const uint32_t[]
POWERS_OF_10_64	spdlog/fmt/bundled/format-inl.h	/^const uint64_t basic_data<T>::POWERS_OF_10_64[] = {0, FMT_POWERS_OF_10(1), FMT_POWERS_OF_10(1000/;"	m	class:internal::basic_data<T>	typeref:typename:const uint64_t[]
POWERS_OF_10_64	spdlog/fmt/bundled/format.cc	/^const uint64_t internal::BasicData<T>::POWERS_OF_10_64[] = {$/;"	m	class:fmt::internal::BasicData<T>	typeref:typename:const uint64_t[]
POWERS_OF_10_64	spdlog/fmt/bundled/format.h	/^    static const uint64_t POWERS_OF_10_64[];$/;"	m	struct:fmt::internal::BasicData	typeref:typename:const uint64_t[]
PRINT_IF_HAS	license-session.cpp	/^#define PRINT_IF_HAS(/;"	d	file:
PROTOBUF_C_BUFFER_SIMPLE_CLEAR	protobuf-c/protobuf-c.h	/^#define PROTOBUF_C_BUFFER_SIMPLE_CLEAR(/;"	d
PROTOBUF_C_BUFFER_SIMPLE_INIT	protobuf-c/protobuf-c.h	/^#define PROTOBUF_C_BUFFER_SIMPLE_INIT(/;"	d
PROTOBUF_C_FIELD_FLAG_DEPRECATED	protobuf-c/protobuf-c.h	/^	PROTOBUF_C_FIELD_FLAG_DEPRECATED	= (1 << 1),$/;"	e	enum:__anond4f0254c0103
PROTOBUF_C_FIELD_FLAG_ONEOF	protobuf-c/protobuf-c.h	/^	PROTOBUF_C_FIELD_FLAG_ONEOF		= (1 << 2),$/;"	e	enum:__anond4f0254c0103
PROTOBUF_C_FIELD_FLAG_PACKED	protobuf-c/protobuf-c.h	/^	PROTOBUF_C_FIELD_FLAG_PACKED		= (1 << 0),$/;"	e	enum:__anond4f0254c0103
PROTOBUF_C_H	protobuf-c/protobuf-c.h	/^#define PROTOBUF_C_H$/;"	d
PROTOBUF_C_LABEL_NONE	protobuf-c/protobuf-c.h	/^	PROTOBUF_C_LABEL_NONE,$/;"	e	enum:__anond4f0254c0203
PROTOBUF_C_LABEL_OPTIONAL	protobuf-c/protobuf-c.h	/^	PROTOBUF_C_LABEL_OPTIONAL,$/;"	e	enum:__anond4f0254c0203
PROTOBUF_C_LABEL_REPEATED	protobuf-c/protobuf-c.h	/^	PROTOBUF_C_LABEL_REPEATED,$/;"	e	enum:__anond4f0254c0203
PROTOBUF_C_LABEL_REQUIRED	protobuf-c/protobuf-c.h	/^	PROTOBUF_C_LABEL_REQUIRED,$/;"	e	enum:__anond4f0254c0203
PROTOBUF_C_MESSAGE_INIT	protobuf-c/protobuf-c.h	/^#define PROTOBUF_C_MESSAGE_INIT(/;"	d
PROTOBUF_C_MIN_COMPILER_VERSION	protobuf-c/protobuf-c.h	/^#define PROTOBUF_C_MIN_COMPILER_VERSION	/;"	d
PROTOBUF_C_TYPE_BOOL	protobuf-c/protobuf-c.h	/^	PROTOBUF_C_TYPE_BOOL,       \/**< boolean *\/$/;"	e	enum:__anond4f0254c0303
PROTOBUF_C_TYPE_BYTES	protobuf-c/protobuf-c.h	/^	PROTOBUF_C_TYPE_BYTES,      \/**< arbitrary byte sequence *\/$/;"	e	enum:__anond4f0254c0303
PROTOBUF_C_TYPE_DOUBLE	protobuf-c/protobuf-c.h	/^	PROTOBUF_C_TYPE_DOUBLE,     \/**< double *\/$/;"	e	enum:__anond4f0254c0303
PROTOBUF_C_TYPE_ENUM	protobuf-c/protobuf-c.h	/^	PROTOBUF_C_TYPE_ENUM,       \/**< enumerated type *\/$/;"	e	enum:__anond4f0254c0303
PROTOBUF_C_TYPE_FIXED32	protobuf-c/protobuf-c.h	/^	PROTOBUF_C_TYPE_FIXED32,    \/**< unsigned int32 (4 bytes) *\/$/;"	e	enum:__anond4f0254c0303
PROTOBUF_C_TYPE_FIXED64	protobuf-c/protobuf-c.h	/^	PROTOBUF_C_TYPE_FIXED64,    \/**< unsigned int64 (8 bytes) *\/$/;"	e	enum:__anond4f0254c0303
PROTOBUF_C_TYPE_FLOAT	protobuf-c/protobuf-c.h	/^	PROTOBUF_C_TYPE_FLOAT,      \/**< float *\/$/;"	e	enum:__anond4f0254c0303
PROTOBUF_C_TYPE_INT32	protobuf-c/protobuf-c.h	/^	PROTOBUF_C_TYPE_INT32,      \/**< int32 *\/$/;"	e	enum:__anond4f0254c0303
PROTOBUF_C_TYPE_INT64	protobuf-c/protobuf-c.h	/^	PROTOBUF_C_TYPE_INT64,      \/**< int64 *\/$/;"	e	enum:__anond4f0254c0303
PROTOBUF_C_TYPE_MESSAGE	protobuf-c/protobuf-c.h	/^	PROTOBUF_C_TYPE_MESSAGE,    \/**< nested message *\/$/;"	e	enum:__anond4f0254c0303
PROTOBUF_C_TYPE_SFIXED32	protobuf-c/protobuf-c.h	/^	PROTOBUF_C_TYPE_SFIXED32,   \/**< signed int32 (4 bytes) *\/$/;"	e	enum:__anond4f0254c0303
PROTOBUF_C_TYPE_SFIXED64	protobuf-c/protobuf-c.h	/^	PROTOBUF_C_TYPE_SFIXED64,   \/**< signed int64 (8 bytes) *\/$/;"	e	enum:__anond4f0254c0303
PROTOBUF_C_TYPE_SINT32	protobuf-c/protobuf-c.h	/^	PROTOBUF_C_TYPE_SINT32,     \/**< signed int32 *\/$/;"	e	enum:__anond4f0254c0303
PROTOBUF_C_TYPE_SINT64	protobuf-c/protobuf-c.h	/^	PROTOBUF_C_TYPE_SINT64,     \/**< signed int64 *\/$/;"	e	enum:__anond4f0254c0303
PROTOBUF_C_TYPE_STRING	protobuf-c/protobuf-c.h	/^	PROTOBUF_C_TYPE_STRING,     \/**< UTF-8 or ASCII string *\/$/;"	e	enum:__anond4f0254c0303
PROTOBUF_C_TYPE_UINT32	protobuf-c/protobuf-c.h	/^	PROTOBUF_C_TYPE_UINT32,     \/**< unsigned int32 *\/$/;"	e	enum:__anond4f0254c0303
PROTOBUF_C_TYPE_UINT64	protobuf-c/protobuf-c.h	/^	PROTOBUF_C_TYPE_UINT64,     \/**< unsigned int64 *\/$/;"	e	enum:__anond4f0254c0303
PROTOBUF_C_UNPACK_ERROR	protobuf-c/protobuf-c.c	/^# define PROTOBUF_C_UNPACK_ERROR(/;"	d	file:
PROTOBUF_C_VERSION	protobuf-c/protobuf-c.h	/^#define PROTOBUF_C_VERSION	/;"	d
PROTOBUF_C_VERSION_NUMBER	protobuf-c/protobuf-c.h	/^#define PROTOBUF_C_VERSION_NUMBER	/;"	d
PROTOBUF_C_WIRE_TYPE_32BIT	protobuf-c/protobuf-c.h	/^	PROTOBUF_C_WIRE_TYPE_32BIT = 5,$/;"	e	enum:__anond4f0254c0403
PROTOBUF_C_WIRE_TYPE_64BIT	protobuf-c/protobuf-c.h	/^	PROTOBUF_C_WIRE_TYPE_64BIT = 1,$/;"	e	enum:__anond4f0254c0403
PROTOBUF_C_WIRE_TYPE_LENGTH_PREFIXED	protobuf-c/protobuf-c.h	/^	PROTOBUF_C_WIRE_TYPE_LENGTH_PREFIXED = 2,$/;"	e	enum:__anond4f0254c0403
PROTOBUF_C_WIRE_TYPE_VARINT	protobuf-c/protobuf-c.h	/^	PROTOBUF_C_WIRE_TYPE_VARINT = 0,$/;"	e	enum:__anond4f0254c0403
PROTOBUF_C__API	protobuf-c/protobuf-c.h	/^#  define PROTOBUF_C__API /;"	d
PROTOBUF_C__ASSERT_NOT_REACHED	protobuf-c/protobuf-c.c	/^#define PROTOBUF_C__ASSERT_NOT_REACHED(/;"	d	file:
PROTOBUF_C__BEGIN_DECLS	protobuf-c/protobuf-c.h	/^# define PROTOBUF_C__BEGIN_DECLS	/;"	d
PROTOBUF_C__BEGIN_DECLS	protobuf-c/protobuf-c.h	/^# define PROTOBUF_C__BEGIN_DECLS$/;"	d
PROTOBUF_C__DEPRECATED	protobuf-c/protobuf-c.h	/^# define PROTOBUF_C__DEPRECATED /;"	d
PROTOBUF_C__END_DECLS	protobuf-c/protobuf-c.h	/^# define PROTOBUF_C__END_DECLS	/;"	d
PROTOBUF_C__END_DECLS	protobuf-c/protobuf-c.h	/^# define PROTOBUF_C__END_DECLS$/;"	d
PROTOBUF_C__ENUM_DESCRIPTOR_MAGIC	protobuf-c/protobuf-c.h	/^#define PROTOBUF_C__ENUM_DESCRIPTOR_MAGIC /;"	d
PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE	protobuf-c/protobuf-c.h	/^ #define PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(/;"	d
PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC	protobuf-c/protobuf-c.h	/^#define PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC /;"	d
PROTOBUF_C__NO_DEPRECATED	simple.pb-c.c	/^#define PROTOBUF_C__NO_DEPRECATED$/;"	d	file:
PROTOBUF_C__SERVICE_DESCRIPTOR_MAGIC	protobuf-c/protobuf-c.h	/^#define PROTOBUF_C__SERVICE_DESCRIPTOR_MAGIC /;"	d
PROTOBUF_C_simple_2eproto__INCLUDED	simple.pb-c.h	/^#define PROTOBUF_C_simple_2eproto__INCLUDED$/;"	d
PROTOBUF_INCLUDED_qc_2dmessage_2eproto	qc-message.pb.h	/^#define PROTOBUF_INCLUDED_qc_2dmessage_2eproto$/;"	d
PROTOBUF_INTERNAL_EXPORT_protobuf_qc_2dmessage_2eproto	qc-message.pb.h	/^#define PROTOBUF_INTERNAL_EXPORT_protobuf_qc_2dmessage_2eproto /;"	d
PainterMode	qcustomplot.h	/^  enum PainterMode { pmDefault       = 0x00   \/\/\/< <tt>0x00<\/tt> Default mode for painting o/;"	g	class:QCPPainter
Pair	spdlog/fmt/bundled/format.h	/^    typedef typename MapType::value_type Pair;$/;"	t	class:fmt::internal::ArgMap	typeref:typename:MapType::value_type
PlottingHint	qcustomplot.h	/^enum PlottingHint { phNone              = 0x000 \/\/\/< <tt>0x000<\/tt> No hints are set$/;"	g	namespace:QCP
Pos	imgui.ini	/^Pos=60,60$/;"	k	section:Window
Pos	imgui.ini	/^Pos=807,89$/;"	k	section:Window
Pos	imgui.ini	/^Pos=89,33$/;"	k	section:Window
PositionType	qcustomplot.h	/^  enum PositionType { ptAbsolute        \/\/\/< Static positioning in pixels, starting from the /;"	g	class:QCPItemPosition
PrecisionHandler	spdlog/fmt/bundled/printf.h	/^class PrecisionHandler : public ArgVisitor<PrecisionHandler, int>$/;"	c	namespace:fmt::internal
PrintfArgFormatter	spdlog/fmt/bundled/printf.h	/^    PrintfArgFormatter(BasicWriter<Char> &w, FormatSpec &s)$/;"	f	class:fmt::PrintfArgFormatter
PrintfArgFormatter	spdlog/fmt/bundled/printf.h	/^class PrintfArgFormatter : public BasicPrintfArgFormatter<PrintfArgFormatter<Char>, Char, Format/;"	c	namespace:fmt
PrintfFormatter	spdlog/fmt/bundled/printf.h	/^    explicit PrintfFormatter(const ArgList &al, BasicWriter<Char> &w)$/;"	f	class:fmt::PrintfFormatter
PrintfFormatter	spdlog/fmt/bundled/printf.h	/^class PrintfFormatter : private internal::FormatterBase$/;"	c	namespace:fmt
ProtobufCAllocator	protobuf-c/protobuf-c.h	/^struct ProtobufCAllocator {$/;"	s
ProtobufCAllocator	protobuf-c/protobuf-c.h	/^typedef struct ProtobufCAllocator ProtobufCAllocator;$/;"	t	typeref:struct:ProtobufCAllocator
ProtobufCBinaryData	protobuf-c/protobuf-c.h	/^struct ProtobufCBinaryData {$/;"	s
ProtobufCBinaryData	protobuf-c/protobuf-c.h	/^typedef struct ProtobufCBinaryData ProtobufCBinaryData;$/;"	t	typeref:struct:ProtobufCBinaryData
ProtobufCBuffer	protobuf-c/protobuf-c.h	/^struct ProtobufCBuffer {$/;"	s
ProtobufCBuffer	protobuf-c/protobuf-c.h	/^typedef struct ProtobufCBuffer ProtobufCBuffer;$/;"	t	typeref:struct:ProtobufCBuffer
ProtobufCBufferSimple	protobuf-c/protobuf-c.h	/^struct ProtobufCBufferSimple {$/;"	s
ProtobufCBufferSimple	protobuf-c/protobuf-c.h	/^typedef struct ProtobufCBufferSimple ProtobufCBufferSimple;$/;"	t	typeref:struct:ProtobufCBufferSimple
ProtobufCClosure	protobuf-c/protobuf-c.h	/^typedef void (*ProtobufCClosure)(const ProtobufCMessage *, void *closure_data);$/;"	t	typeref:typename:void (*)(const ProtobufCMessage *,void * closure_data)
ProtobufCEnumDescriptor	protobuf-c/protobuf-c.h	/^struct ProtobufCEnumDescriptor {$/;"	s
ProtobufCEnumDescriptor	protobuf-c/protobuf-c.h	/^typedef struct ProtobufCEnumDescriptor ProtobufCEnumDescriptor;$/;"	t	typeref:struct:ProtobufCEnumDescriptor
ProtobufCEnumValue	protobuf-c/protobuf-c.h	/^struct ProtobufCEnumValue {$/;"	s
ProtobufCEnumValue	protobuf-c/protobuf-c.h	/^typedef struct ProtobufCEnumValue ProtobufCEnumValue;$/;"	t	typeref:struct:ProtobufCEnumValue
ProtobufCEnumValueIndex	protobuf-c/protobuf-c.h	/^struct ProtobufCEnumValueIndex {$/;"	s
ProtobufCEnumValueIndex	protobuf-c/protobuf-c.h	/^typedef struct ProtobufCEnumValueIndex ProtobufCEnumValueIndex;$/;"	t	typeref:struct:ProtobufCEnumValueIndex
ProtobufCFieldDescriptor	protobuf-c/protobuf-c.h	/^struct ProtobufCFieldDescriptor {$/;"	s
ProtobufCFieldDescriptor	protobuf-c/protobuf-c.h	/^typedef struct ProtobufCFieldDescriptor ProtobufCFieldDescriptor;$/;"	t	typeref:struct:ProtobufCFieldDescriptor
ProtobufCFieldFlag	protobuf-c/protobuf-c.h	/^} ProtobufCFieldFlag;$/;"	t	typeref:enum:__anond4f0254c0103
ProtobufCIntRange	protobuf-c/protobuf-c.h	/^struct ProtobufCIntRange {$/;"	s
ProtobufCIntRange	protobuf-c/protobuf-c.h	/^typedef struct ProtobufCIntRange ProtobufCIntRange;$/;"	t	typeref:struct:ProtobufCIntRange
ProtobufCLabel	protobuf-c/protobuf-c.h	/^} ProtobufCLabel;$/;"	t	typeref:enum:__anond4f0254c0203
ProtobufCMessage	protobuf-c/protobuf-c.h	/^struct ProtobufCMessage {$/;"	s
ProtobufCMessage	protobuf-c/protobuf-c.h	/^typedef struct ProtobufCMessage ProtobufCMessage;$/;"	t	typeref:struct:ProtobufCMessage
ProtobufCMessageDescriptor	protobuf-c/protobuf-c.h	/^struct ProtobufCMessageDescriptor {$/;"	s
ProtobufCMessageDescriptor	protobuf-c/protobuf-c.h	/^typedef struct ProtobufCMessageDescriptor ProtobufCMessageDescriptor;$/;"	t	typeref:struct:ProtobufCMessageDescriptor
ProtobufCMessageInit	protobuf-c/protobuf-c.h	/^typedef void (*ProtobufCMessageInit)(ProtobufCMessage *);$/;"	t	typeref:typename:void (*)(ProtobufCMessage *)
ProtobufCMessageUnknownField	protobuf-c/protobuf-c.h	/^struct ProtobufCMessageUnknownField {$/;"	s
ProtobufCMessageUnknownField	protobuf-c/protobuf-c.h	/^typedef struct ProtobufCMessageUnknownField ProtobufCMessageUnknownField;$/;"	t	typeref:struct:ProtobufCMessageUnknownField
ProtobufCMethodDescriptor	protobuf-c/protobuf-c.h	/^struct ProtobufCMethodDescriptor {$/;"	s
ProtobufCMethodDescriptor	protobuf-c/protobuf-c.h	/^typedef struct ProtobufCMethodDescriptor ProtobufCMethodDescriptor;$/;"	t	typeref:struct:ProtobufCMethodDescriptor
ProtobufCService	protobuf-c/protobuf-c.h	/^struct ProtobufCService {$/;"	s
ProtobufCService	protobuf-c/protobuf-c.h	/^typedef struct ProtobufCService ProtobufCService;$/;"	t	typeref:struct:ProtobufCService
ProtobufCServiceDescriptor	protobuf-c/protobuf-c.h	/^struct ProtobufCServiceDescriptor {$/;"	s
ProtobufCServiceDescriptor	protobuf-c/protobuf-c.h	/^typedef struct ProtobufCServiceDescriptor ProtobufCServiceDescriptor;$/;"	t	typeref:struct:ProtobufCServiceDescriptor
ProtobufCServiceDestroy	protobuf-c/protobuf-c.h	/^typedef void (*ProtobufCServiceDestroy)(ProtobufCService *);$/;"	t	typeref:typename:void (*)(ProtobufCService *)
ProtobufCType	protobuf-c/protobuf-c.h	/^} ProtobufCType;$/;"	t	typeref:enum:__anond4f0254c0303
ProtobufCWireType	protobuf-c/protobuf-c.h	/^} ProtobufCWireType;$/;"	t	typeref:enum:__anond4f0254c0403
Protocol	qc-message.pb.cc	/^Protocol::Protocol()$/;"	f	class:Protocol
Protocol	qc-message.pb.cc	/^Protocol::Protocol(const Protocol& from)$/;"	f	class:Protocol
Protocol	qc-message.pb.h	/^  Protocol();$/;"	p	class:Protocol
Protocol	qc-message.pb.h	/^  Protocol(Protocol&& from) noexcept$/;"	f	class:Protocol
Protocol	qc-message.pb.h	/^  Protocol(const Protocol& from);$/;"	p	class:Protocol
Protocol	qc-message.pb.h	/^class Protocol : public ::google::protobuf::Message \/* @@protoc_insertion_point(class_definitio/;"	c
Protocol	qc-message.proto	/^message Protocol {$/;"	m
ProtocolDefaultTypeInternal	qc-message.pb.cc	/^class ProtocolDefaultTypeInternal {$/;"	c	file:
ProtocolWithSTM	protocol-struct.h	/^struct ProtocolWithSTM {$/;"	s
Proxy	spdlog/fmt/bundled/posix.h	/^    struct Proxy$/;"	s	class:fmt::BufferedFile
Proxy	spdlog/fmt/bundled/posix.h	/^    struct Proxy$/;"	s	class:fmt::File
QCP	qcustomplot.h	/^namespace QCP {$/;"	n
QCPAbstractItem	qcustomplot.cpp	/^QCPAbstractItem::QCPAbstractItem(QCustomPlot *parentPlot) :$/;"	f	class:QCPAbstractItem
QCPAbstractItem	qcustomplot.h	/^  explicit QCPAbstractItem(QCustomPlot *parentPlot);$/;"	p	class:QCPAbstractItem
QCPAbstractItem	qcustomplot.h	/^class QCP_LIB_DECL QCPAbstractItem : public QCPLayerable$/;"	c
QCPAbstractLegendItem	qcustomplot.cpp	/^QCPAbstractLegendItem::QCPAbstractLegendItem(QCPLegend *parent) :$/;"	f	class:QCPAbstractLegendItem
QCPAbstractLegendItem	qcustomplot.h	/^  explicit QCPAbstractLegendItem(QCPLegend *parent);$/;"	p	class:QCPAbstractLegendItem
QCPAbstractLegendItem	qcustomplot.h	/^class QCP_LIB_DECL QCPAbstractLegendItem : public QCPLayoutElement$/;"	c
QCPAbstractPaintBuffer	qcustomplot.cpp	/^QCPAbstractPaintBuffer::QCPAbstractPaintBuffer(const QSize &size, double devicePixelRatio) :$/;"	f	class:QCPAbstractPaintBuffer
QCPAbstractPaintBuffer	qcustomplot.h	/^  explicit QCPAbstractPaintBuffer(const QSize &size, double devicePixelRatio);$/;"	p	class:QCPAbstractPaintBuffer
QCPAbstractPaintBuffer	qcustomplot.h	/^class QCP_LIB_DECL QCPAbstractPaintBuffer$/;"	c
QCPAbstractPlottable	qcustomplot.cpp	/^QCPAbstractPlottable::QCPAbstractPlottable(QCPAxis *keyAxis, QCPAxis *valueAxis) :$/;"	f	class:QCPAbstractPlottable
QCPAbstractPlottable	qcustomplot.h	/^  QCPAbstractPlottable(QCPAxis *keyAxis, QCPAxis *valueAxis);$/;"	p	class:QCPAbstractPlottable
QCPAbstractPlottable	qcustomplot.h	/^class QCP_LIB_DECL QCPAbstractPlottable : public QCPLayerable$/;"	c
QCPAbstractPlottable1D	qcustomplot.h	/^  QCPAbstractPlottable1D(QCPAxis *keyAxis, QCPAxis *valueAxis);$/;"	p	class:QCPAbstractPlottable1D
QCPAbstractPlottable1D	qcustomplot.h	/^QCPAbstractPlottable1D<DataType>::QCPAbstractPlottable1D(QCPAxis *keyAxis, QCPAxis *valueAxis) :$/;"	f	class:QCPAbstractPlottable1D
QCPAbstractPlottable1D	qcustomplot.h	/^class QCPAbstractPlottable1D : public QCPAbstractPlottable, public QCPPlottableInterface1D \/\/ /;"	c
QCPAxis	qcustomplot.cpp	/^QCPAxis::QCPAxis(QCPAxisRect *parent, AxisType type) :$/;"	f	class:QCPAxis
QCPAxis	qcustomplot.h	/^class QCP_LIB_DECL QCPAxis : public QCPLayerable$/;"	c
QCPAxisPainterPrivate	qcustomplot.cpp	/^QCPAxisPainterPrivate::QCPAxisPainterPrivate(QCustomPlot *parentPlot) :$/;"	f	class:QCPAxisPainterPrivate
QCPAxisPainterPrivate	qcustomplot.h	/^  explicit QCPAxisPainterPrivate(QCustomPlot *parentPlot);$/;"	p	class:QCPAxisPainterPrivate
QCPAxisPainterPrivate	qcustomplot.h	/^class QCPAxisPainterPrivate$/;"	c
QCPAxisRect	qcustomplot.cpp	/^QCPAxisRect::QCPAxisRect(QCustomPlot *parentPlot, bool setupDefaultAxes) :$/;"	f	class:QCPAxisRect
QCPAxisRect	qcustomplot.h	/^  explicit QCPAxisRect(QCustomPlot *parentPlot, bool setupDefaultAxes=true);$/;"	p	class:QCPAxisRect
QCPAxisRect	qcustomplot.h	/^class QCP_LIB_DECL QCPAxisRect : public QCPLayoutElement$/;"	c
QCPAxisTicker	qcustomplot.cpp	/^QCPAxisTicker::QCPAxisTicker() :$/;"	f	class:QCPAxisTicker
QCPAxisTicker	qcustomplot.h	/^  QCPAxisTicker();$/;"	p	class:QCPAxisTicker	typeref:typename:TickStepStrategy
QCPAxisTicker	qcustomplot.h	/^class QCP_LIB_DECL QCPAxisTicker$/;"	c
QCPAxisTickerDateTime	qcustomplot.cpp	/^QCPAxisTickerDateTime::QCPAxisTickerDateTime() :$/;"	f	class:QCPAxisTickerDateTime
QCPAxisTickerDateTime	qcustomplot.h	/^  QCPAxisTickerDateTime();$/;"	p	class:QCPAxisTickerDateTime
QCPAxisTickerDateTime	qcustomplot.h	/^class QCP_LIB_DECL QCPAxisTickerDateTime : public QCPAxisTicker$/;"	c
QCPAxisTickerFixed	qcustomplot.cpp	/^QCPAxisTickerFixed::QCPAxisTickerFixed() :$/;"	f	class:QCPAxisTickerFixed
QCPAxisTickerFixed	qcustomplot.h	/^  QCPAxisTickerFixed();$/;"	p	class:QCPAxisTickerFixed	typeref:typename:ScaleStrategy
QCPAxisTickerFixed	qcustomplot.h	/^class QCP_LIB_DECL QCPAxisTickerFixed : public QCPAxisTicker$/;"	c
QCPAxisTickerLog	qcustomplot.cpp	/^QCPAxisTickerLog::QCPAxisTickerLog() :$/;"	f	class:QCPAxisTickerLog
QCPAxisTickerLog	qcustomplot.h	/^  QCPAxisTickerLog();$/;"	p	class:QCPAxisTickerLog
QCPAxisTickerLog	qcustomplot.h	/^class QCP_LIB_DECL QCPAxisTickerLog : public QCPAxisTicker$/;"	c
QCPAxisTickerPi	qcustomplot.cpp	/^QCPAxisTickerPi::QCPAxisTickerPi() :$/;"	f	class:QCPAxisTickerPi
QCPAxisTickerPi	qcustomplot.h	/^  QCPAxisTickerPi();$/;"	p	class:QCPAxisTickerPi	typeref:typename:FractionStyle
QCPAxisTickerPi	qcustomplot.h	/^class QCP_LIB_DECL QCPAxisTickerPi : public QCPAxisTicker$/;"	c
QCPAxisTickerText	qcustomplot.cpp	/^QCPAxisTickerText::QCPAxisTickerText() :$/;"	f	class:QCPAxisTickerText
QCPAxisTickerText	qcustomplot.h	/^  QCPAxisTickerText();$/;"	p	class:QCPAxisTickerText
QCPAxisTickerText	qcustomplot.h	/^class QCP_LIB_DECL QCPAxisTickerText : public QCPAxisTicker$/;"	c
QCPAxisTickerTime	qcustomplot.cpp	/^QCPAxisTickerTime::QCPAxisTickerTime() :$/;"	f	class:QCPAxisTickerTime
QCPAxisTickerTime	qcustomplot.h	/^  QCPAxisTickerTime();$/;"	p	class:QCPAxisTickerTime	typeref:typename:TimeUnit
QCPAxisTickerTime	qcustomplot.h	/^class QCP_LIB_DECL QCPAxisTickerTime : public QCPAxisTicker$/;"	c
QCPBars	qcustomplot.cpp	/^QCPBars::QCPBars(QCPAxis *keyAxis, QCPAxis *valueAxis) :$/;"	f	class:QCPBars
QCPBars	qcustomplot.h	/^  explicit QCPBars(QCPAxis *keyAxis, QCPAxis *valueAxis);$/;"	p	class:QCPBars	typeref:typename:WidthType
QCPBars	qcustomplot.h	/^class QCP_LIB_DECL QCPBars : public QCPAbstractPlottable1D<QCPBarsData>$/;"	c
QCPBarsData	qcustomplot.cpp	/^QCPBarsData::QCPBarsData() :$/;"	f	class:QCPBarsData
QCPBarsData	qcustomplot.cpp	/^QCPBarsData::QCPBarsData(double key, double value) :$/;"	f	class:QCPBarsData
QCPBarsData	qcustomplot.h	/^  QCPBarsData();$/;"	p	class:QCPBarsData
QCPBarsData	qcustomplot.h	/^  QCPBarsData(double key, double value);$/;"	p	class:QCPBarsData
QCPBarsData	qcustomplot.h	/^class QCP_LIB_DECL QCPBarsData$/;"	c
QCPBarsDataContainer	qcustomplot.h	/^typedef QCPDataContainer<QCPBarsData> QCPBarsDataContainer;$/;"	t	typeref:typename:QCPDataContainer<QCPBarsData>
QCPBarsGroup	qcustomplot.cpp	/^QCPBarsGroup::QCPBarsGroup(QCustomPlot *parentPlot) :$/;"	f	class:QCPBarsGroup
QCPBarsGroup	qcustomplot.h	/^  explicit QCPBarsGroup(QCustomPlot *parentPlot);$/;"	p	class:QCPBarsGroup	typeref:typename:SpacingType
QCPBarsGroup	qcustomplot.h	/^class QCP_LIB_DECL QCPBarsGroup : public QObject$/;"	c
QCPColorGradient	qcustomplot.cpp	/^QCPColorGradient::QCPColorGradient() :$/;"	f	class:QCPColorGradient
QCPColorGradient	qcustomplot.cpp	/^QCPColorGradient::QCPColorGradient(GradientPreset preset) :$/;"	f	class:QCPColorGradient
QCPColorGradient	qcustomplot.h	/^  QCPColorGradient();$/;"	p	class:QCPColorGradient	typeref:typename:GradientPreset
QCPColorGradient	qcustomplot.h	/^  QCPColorGradient(GradientPreset preset);$/;"	p	class:QCPColorGradient
QCPColorGradient	qcustomplot.h	/^class QCP_LIB_DECL QCPColorGradient$/;"	c
QCPColorMap	qcustomplot.cpp	/^QCPColorMap::QCPColorMap(QCPAxis *keyAxis, QCPAxis *valueAxis) :$/;"	f	class:QCPColorMap
QCPColorMap	qcustomplot.h	/^  explicit QCPColorMap(QCPAxis *keyAxis, QCPAxis *valueAxis);$/;"	p	class:QCPColorMap
QCPColorMap	qcustomplot.h	/^class QCP_LIB_DECL QCPColorMap : public QCPAbstractPlottable$/;"	c
QCPColorMapData	qcustomplot.cpp	/^QCPColorMapData::QCPColorMapData(const QCPColorMapData &other) :$/;"	f	class:QCPColorMapData
QCPColorMapData	qcustomplot.cpp	/^QCPColorMapData::QCPColorMapData(int keySize, int valueSize, const QCPRange &keyRange, const QCP/;"	f	class:QCPColorMapData
QCPColorMapData	qcustomplot.h	/^  QCPColorMapData(const QCPColorMapData &other);$/;"	p	class:QCPColorMapData
QCPColorMapData	qcustomplot.h	/^  QCPColorMapData(int keySize, int valueSize, const QCPRange &keyRange, const QCPRange &valueRan/;"	p	class:QCPColorMapData
QCPColorMapData	qcustomplot.h	/^class QCP_LIB_DECL QCPColorMapData$/;"	c
QCPColorScale	qcustomplot.cpp	/^QCPColorScale::QCPColorScale(QCustomPlot *parentPlot) :$/;"	f	class:QCPColorScale
QCPColorScale	qcustomplot.h	/^  explicit QCPColorScale(QCustomPlot *parentPlot);$/;"	p	class:QCPColorScale
QCPColorScale	qcustomplot.h	/^class QCP_LIB_DECL QCPColorScale : public QCPLayoutElement$/;"	c
QCPColorScaleAxisRectPrivate	qcustomplot.cpp	/^QCPColorScaleAxisRectPrivate::QCPColorScaleAxisRectPrivate(QCPColorScale *parentColorScale) :$/;"	f	class:QCPColorScaleAxisRectPrivate
QCPColorScaleAxisRectPrivate	qcustomplot.h	/^  explicit QCPColorScaleAxisRectPrivate(QCPColorScale *parentColorScale);$/;"	p	class:QCPColorScaleAxisRectPrivate
QCPColorScaleAxisRectPrivate	qcustomplot.h	/^class QCPColorScaleAxisRectPrivate : public QCPAxisRect$/;"	c
QCPCurve	qcustomplot.cpp	/^QCPCurve::QCPCurve(QCPAxis *keyAxis, QCPAxis *valueAxis) :$/;"	f	class:QCPCurve
QCPCurve	qcustomplot.h	/^  explicit QCPCurve(QCPAxis *keyAxis, QCPAxis *valueAxis);$/;"	p	class:QCPCurve	typeref:typename:LineStyle
QCPCurve	qcustomplot.h	/^class QCP_LIB_DECL QCPCurve : public QCPAbstractPlottable1D<QCPCurveData>$/;"	c
QCPCurveData	qcustomplot.cpp	/^QCPCurveData::QCPCurveData() :$/;"	f	class:QCPCurveData
QCPCurveData	qcustomplot.cpp	/^QCPCurveData::QCPCurveData(double t, double key, double value) :$/;"	f	class:QCPCurveData
QCPCurveData	qcustomplot.h	/^  QCPCurveData();$/;"	p	class:QCPCurveData
QCPCurveData	qcustomplot.h	/^  QCPCurveData(double t, double key, double value);$/;"	p	class:QCPCurveData
QCPCurveData	qcustomplot.h	/^class QCP_LIB_DECL QCPCurveData$/;"	c
QCPCurveDataContainer	qcustomplot.h	/^typedef QCPDataContainer<QCPCurveData> QCPCurveDataContainer;$/;"	t	typeref:typename:QCPDataContainer<QCPCurveData>
QCPDataContainer	qcustomplot.h	/^  QCPDataContainer();$/;"	p	class:QCPDataContainer
QCPDataContainer	qcustomplot.h	/^QCPDataContainer<DataType>::QCPDataContainer() :$/;"	f	class:QCPDataContainer
QCPDataContainer	qcustomplot.h	/^class QCPDataContainer \/\/ no QCP_LIB_DECL, template class ends up in header (cpp included belo/;"	c
QCPDataRange	qcustomplot.cpp	/^QCPDataRange::QCPDataRange() :$/;"	f	class:QCPDataRange
QCPDataRange	qcustomplot.cpp	/^QCPDataRange::QCPDataRange(int begin, int end) :$/;"	f	class:QCPDataRange
QCPDataRange	qcustomplot.h	/^  QCPDataRange();$/;"	p	class:QCPDataRange
QCPDataRange	qcustomplot.h	/^  QCPDataRange(int begin, int end);$/;"	p	class:QCPDataRange
QCPDataRange	qcustomplot.h	/^class QCP_LIB_DECL QCPDataRange$/;"	c
QCPDataSelection	qcustomplot.cpp	/^QCPDataSelection::QCPDataSelection()$/;"	f	class:QCPDataSelection
QCPDataSelection	qcustomplot.cpp	/^QCPDataSelection::QCPDataSelection(const QCPDataRange &range)$/;"	f	class:QCPDataSelection
QCPDataSelection	qcustomplot.h	/^  explicit QCPDataSelection();$/;"	p	class:QCPDataSelection
QCPDataSelection	qcustomplot.h	/^  explicit QCPDataSelection(const QCPDataRange &range);$/;"	p	class:QCPDataSelection
QCPDataSelection	qcustomplot.h	/^class QCP_LIB_DECL QCPDataSelection$/;"	c
QCPErrorBars	qcustomplot.cpp	/^QCPErrorBars::QCPErrorBars(QCPAxis *keyAxis, QCPAxis *valueAxis) :$/;"	f	class:QCPErrorBars
QCPErrorBars	qcustomplot.h	/^  explicit QCPErrorBars(QCPAxis *keyAxis, QCPAxis *valueAxis);$/;"	p	class:QCPErrorBars	typeref:typename:ErrorType
QCPErrorBars	qcustomplot.h	/^class QCP_LIB_DECL QCPErrorBars : public QCPAbstractPlottable, public QCPPlottableInterface1D$/;"	c
QCPErrorBarsData	qcustomplot.cpp	/^QCPErrorBarsData::QCPErrorBarsData() :$/;"	f	class:QCPErrorBarsData
QCPErrorBarsData	qcustomplot.cpp	/^QCPErrorBarsData::QCPErrorBarsData(double error) :$/;"	f	class:QCPErrorBarsData
QCPErrorBarsData	qcustomplot.cpp	/^QCPErrorBarsData::QCPErrorBarsData(double errorMinus, double errorPlus) :$/;"	f	class:QCPErrorBarsData
QCPErrorBarsData	qcustomplot.h	/^  QCPErrorBarsData();$/;"	p	class:QCPErrorBarsData
QCPErrorBarsData	qcustomplot.h	/^  QCPErrorBarsData(double errorMinus, double errorPlus);$/;"	p	class:QCPErrorBarsData
QCPErrorBarsData	qcustomplot.h	/^  explicit QCPErrorBarsData(double error);$/;"	p	class:QCPErrorBarsData
QCPErrorBarsData	qcustomplot.h	/^class QCP_LIB_DECL QCPErrorBarsData$/;"	c
QCPErrorBarsDataContainer	qcustomplot.h	/^typedef QVector<QCPErrorBarsData> QCPErrorBarsDataContainer;$/;"	t	typeref:typename:QVector<QCPErrorBarsData>
QCPFinancial	qcustomplot.cpp	/^QCPFinancial::QCPFinancial(QCPAxis *keyAxis, QCPAxis *valueAxis) :$/;"	f	class:QCPFinancial
QCPFinancial	qcustomplot.h	/^  explicit QCPFinancial(QCPAxis *keyAxis, QCPAxis *valueAxis);$/;"	p	class:QCPFinancial	typeref:typename:ChartStyle
QCPFinancial	qcustomplot.h	/^class QCP_LIB_DECL QCPFinancial : public QCPAbstractPlottable1D<QCPFinancialData>$/;"	c
QCPFinancialData	qcustomplot.cpp	/^QCPFinancialData::QCPFinancialData() :$/;"	f	class:QCPFinancialData
QCPFinancialData	qcustomplot.cpp	/^QCPFinancialData::QCPFinancialData(double key, double open, double high, double low, double clos/;"	f	class:QCPFinancialData
QCPFinancialData	qcustomplot.h	/^  QCPFinancialData();$/;"	p	class:QCPFinancialData
QCPFinancialData	qcustomplot.h	/^  QCPFinancialData(double key, double open, double high, double low, double close);$/;"	p	class:QCPFinancialData
QCPFinancialData	qcustomplot.h	/^class QCP_LIB_DECL QCPFinancialData$/;"	c
QCPFinancialDataContainer	qcustomplot.h	/^typedef QCPDataContainer<QCPFinancialData> QCPFinancialDataContainer;$/;"	t	typeref:typename:QCPDataContainer<QCPFinancialData>
QCPGraph	qcustomplot.cpp	/^QCPGraph::QCPGraph(QCPAxis *keyAxis, QCPAxis *valueAxis) :$/;"	f	class:QCPGraph
QCPGraph	qcustomplot.h	/^  explicit QCPGraph(QCPAxis *keyAxis, QCPAxis *valueAxis);$/;"	p	class:QCPGraph	typeref:typename:LineStyle
QCPGraph	qcustomplot.h	/^class QCP_LIB_DECL QCPGraph : public QCPAbstractPlottable1D<QCPGraphData>$/;"	c
QCPGraphData	qcustomplot.cpp	/^QCPGraphData::QCPGraphData() :$/;"	f	class:QCPGraphData
QCPGraphData	qcustomplot.cpp	/^QCPGraphData::QCPGraphData(double key, double value) :$/;"	f	class:QCPGraphData
QCPGraphData	qcustomplot.h	/^  QCPGraphData();$/;"	p	class:QCPGraphData
QCPGraphData	qcustomplot.h	/^  QCPGraphData(double key, double value);$/;"	p	class:QCPGraphData
QCPGraphData	qcustomplot.h	/^class QCP_LIB_DECL QCPGraphData$/;"	c
QCPGraphDataContainer	qcustomplot.h	/^typedef QCPDataContainer<QCPGraphData> QCPGraphDataContainer;$/;"	t	typeref:typename:QCPDataContainer<QCPGraphData>
QCPGrid	qcustomplot.cpp	/^QCPGrid::QCPGrid(QCPAxis *parentAxis) :$/;"	f	class:QCPGrid
QCPGrid	qcustomplot.h	/^  explicit QCPGrid(QCPAxis *parentAxis);$/;"	p	class:QCPGrid
QCPGrid	qcustomplot.h	/^class QCP_LIB_DECL QCPGrid :public QCPLayerable$/;"	c
QCPItemAnchor	qcustomplot.cpp	/^QCPItemAnchor::QCPItemAnchor(QCustomPlot *parentPlot, QCPAbstractItem *parentItem, const QString/;"	f	class:QCPItemAnchor
QCPItemAnchor	qcustomplot.h	/^  QCPItemAnchor(QCustomPlot *parentPlot, QCPAbstractItem *parentItem, const QString &name, int a/;"	p	class:QCPItemAnchor
QCPItemAnchor	qcustomplot.h	/^class QCP_LIB_DECL QCPItemAnchor$/;"	c
QCPItemBracket	qcustomplot.cpp	/^QCPItemBracket::QCPItemBracket(QCustomPlot *parentPlot) :$/;"	f	class:QCPItemBracket
QCPItemBracket	qcustomplot.h	/^  explicit QCPItemBracket(QCustomPlot *parentPlot);$/;"	p	class:QCPItemBracket	typeref:typename:BracketStyle
QCPItemBracket	qcustomplot.h	/^class QCP_LIB_DECL QCPItemBracket : public QCPAbstractItem$/;"	c
QCPItemCurve	qcustomplot.cpp	/^QCPItemCurve::QCPItemCurve(QCustomPlot *parentPlot) :$/;"	f	class:QCPItemCurve
QCPItemCurve	qcustomplot.h	/^  explicit QCPItemCurve(QCustomPlot *parentPlot);$/;"	p	class:QCPItemCurve
QCPItemCurve	qcustomplot.h	/^class QCP_LIB_DECL QCPItemCurve : public QCPAbstractItem$/;"	c
QCPItemEllipse	qcustomplot.cpp	/^QCPItemEllipse::QCPItemEllipse(QCustomPlot *parentPlot) :$/;"	f	class:QCPItemEllipse
QCPItemEllipse	qcustomplot.h	/^  explicit QCPItemEllipse(QCustomPlot *parentPlot);$/;"	p	class:QCPItemEllipse
QCPItemEllipse	qcustomplot.h	/^class QCP_LIB_DECL QCPItemEllipse : public QCPAbstractItem$/;"	c
QCPItemLine	qcustomplot.cpp	/^QCPItemLine::QCPItemLine(QCustomPlot *parentPlot) :$/;"	f	class:QCPItemLine
QCPItemLine	qcustomplot.h	/^  explicit QCPItemLine(QCustomPlot *parentPlot);$/;"	p	class:QCPItemLine
QCPItemLine	qcustomplot.h	/^class QCP_LIB_DECL QCPItemLine : public QCPAbstractItem$/;"	c
QCPItemPixmap	qcustomplot.cpp	/^QCPItemPixmap::QCPItemPixmap(QCustomPlot *parentPlot) :$/;"	f	class:QCPItemPixmap
QCPItemPixmap	qcustomplot.h	/^  explicit QCPItemPixmap(QCustomPlot *parentPlot);$/;"	p	class:QCPItemPixmap
QCPItemPixmap	qcustomplot.h	/^class QCP_LIB_DECL QCPItemPixmap : public QCPAbstractItem$/;"	c
QCPItemPosition	qcustomplot.cpp	/^QCPItemPosition::QCPItemPosition(QCustomPlot *parentPlot, QCPAbstractItem *parentItem, const QSt/;"	f	class:QCPItemPosition
QCPItemPosition	qcustomplot.h	/^  QCPItemPosition(QCustomPlot *parentPlot, QCPAbstractItem *parentItem, const QString &name);$/;"	p	class:QCPItemPosition	typeref:typename:PositionType
QCPItemPosition	qcustomplot.h	/^class QCP_LIB_DECL QCPItemPosition : public QCPItemAnchor$/;"	c
QCPItemRect	qcustomplot.cpp	/^QCPItemRect::QCPItemRect(QCustomPlot *parentPlot) :$/;"	f	class:QCPItemRect
QCPItemRect	qcustomplot.h	/^  explicit QCPItemRect(QCustomPlot *parentPlot);$/;"	p	class:QCPItemRect
QCPItemRect	qcustomplot.h	/^class QCP_LIB_DECL QCPItemRect : public QCPAbstractItem$/;"	c
QCPItemStraightLine	qcustomplot.cpp	/^QCPItemStraightLine::QCPItemStraightLine(QCustomPlot *parentPlot) :$/;"	f	class:QCPItemStraightLine
QCPItemStraightLine	qcustomplot.h	/^  explicit QCPItemStraightLine(QCustomPlot *parentPlot);$/;"	p	class:QCPItemStraightLine
QCPItemStraightLine	qcustomplot.h	/^class QCP_LIB_DECL QCPItemStraightLine : public QCPAbstractItem$/;"	c
QCPItemText	qcustomplot.cpp	/^QCPItemText::QCPItemText(QCustomPlot *parentPlot) :$/;"	f	class:QCPItemText
QCPItemText	qcustomplot.h	/^  explicit QCPItemText(QCustomPlot *parentPlot);$/;"	p	class:QCPItemText
QCPItemText	qcustomplot.h	/^class QCP_LIB_DECL QCPItemText : public QCPAbstractItem$/;"	c
QCPItemTracer	qcustomplot.cpp	/^QCPItemTracer::QCPItemTracer(QCustomPlot *parentPlot) :$/;"	f	class:QCPItemTracer
QCPItemTracer	qcustomplot.h	/^  explicit QCPItemTracer(QCustomPlot *parentPlot);$/;"	p	class:QCPItemTracer	typeref:typename:TracerStyle
QCPItemTracer	qcustomplot.h	/^class QCP_LIB_DECL QCPItemTracer : public QCPAbstractItem$/;"	c
QCPLayer	qcustomplot.cpp	/^QCPLayer::QCPLayer(QCustomPlot *parentPlot, const QString &layerName) :$/;"	f	class:QCPLayer
QCPLayer	qcustomplot.h	/^  QCPLayer(QCustomPlot* parentPlot, const QString &layerName);$/;"	p	class:QCPLayer	typeref:typename:LayerMode
QCPLayer	qcustomplot.h	/^class QCP_LIB_DECL QCPLayer : public QObject$/;"	c
QCPLayerable	qcustomplot.cpp	/^QCPLayerable::QCPLayerable(QCustomPlot *plot, QString targetLayer, QCPLayerable *parentLayerable/;"	f	class:QCPLayerable
QCPLayerable	qcustomplot.h	/^  QCPLayerable(QCustomPlot *plot, QString targetLayer=QString(), QCPLayerable *parentLayerable=0/;"	p	class:QCPLayerable
QCPLayerable	qcustomplot.h	/^class QCP_LIB_DECL QCPLayerable : public QObject$/;"	c
QCPLayout	qcustomplot.cpp	/^QCPLayout::QCPLayout()$/;"	f	class:QCPLayout
QCPLayout	qcustomplot.h	/^  explicit QCPLayout();$/;"	p	class:QCPLayout
QCPLayout	qcustomplot.h	/^class QCP_LIB_DECL QCPLayout : public QCPLayoutElement$/;"	c
QCPLayoutElement	qcustomplot.cpp	/^QCPLayoutElement::QCPLayoutElement(QCustomPlot *parentPlot) :$/;"	f	class:QCPLayoutElement
QCPLayoutElement	qcustomplot.h	/^  explicit QCPLayoutElement(QCustomPlot *parentPlot=0);$/;"	p	class:QCPLayoutElement	typeref:typename:SizeConstraintRect
QCPLayoutElement	qcustomplot.h	/^class QCP_LIB_DECL QCPLayoutElement : public QCPLayerable$/;"	c
QCPLayoutGrid	qcustomplot.cpp	/^QCPLayoutGrid::QCPLayoutGrid() :$/;"	f	class:QCPLayoutGrid
QCPLayoutGrid	qcustomplot.h	/^  explicit QCPLayoutGrid();$/;"	p	class:QCPLayoutGrid	typeref:typename:FillOrder
QCPLayoutGrid	qcustomplot.h	/^class QCP_LIB_DECL QCPLayoutGrid : public QCPLayout$/;"	c
QCPLayoutInset	qcustomplot.cpp	/^QCPLayoutInset::QCPLayoutInset()$/;"	f	class:QCPLayoutInset
QCPLayoutInset	qcustomplot.h	/^  explicit QCPLayoutInset();$/;"	p	class:QCPLayoutInset	typeref:typename:InsetPlacement
QCPLayoutInset	qcustomplot.h	/^class QCP_LIB_DECL QCPLayoutInset : public QCPLayout$/;"	c
QCPLegend	qcustomplot.cpp	/^QCPLegend::QCPLegend()$/;"	f	class:QCPLegend
QCPLegend	qcustomplot.h	/^class QCP_LIB_DECL QCPLegend : public QCPLayoutGrid$/;"	c
QCPLineEnding	qcustomplot.cpp	/^QCPLineEnding::QCPLineEnding() :$/;"	f	class:QCPLineEnding
QCPLineEnding	qcustomplot.cpp	/^QCPLineEnding::QCPLineEnding(QCPLineEnding::EndingStyle style, double width, double length, bool/;"	f	class:QCPLineEnding
QCPLineEnding	qcustomplot.h	/^  QCPLineEnding();$/;"	p	class:QCPLineEnding	typeref:typename:EndingStyle
QCPLineEnding	qcustomplot.h	/^  QCPLineEnding(EndingStyle style, double width=8, double length=10, bool inverted=false);$/;"	p	class:QCPLineEnding
QCPLineEnding	qcustomplot.h	/^class QCP_LIB_DECL QCPLineEnding$/;"	c
QCPMarginGroup	qcustomplot.cpp	/^QCPMarginGroup::QCPMarginGroup(QCustomPlot *parentPlot) :$/;"	f	class:QCPMarginGroup
QCPMarginGroup	qcustomplot.h	/^  explicit QCPMarginGroup(QCustomPlot *parentPlot);$/;"	p	class:QCPMarginGroup
QCPMarginGroup	qcustomplot.h	/^class QCP_LIB_DECL QCPMarginGroup : public QObject$/;"	c
QCPPaintBufferGlFbo	qcustomplot.cpp	/^QCPPaintBufferGlFbo::QCPPaintBufferGlFbo(const QSize &size, double devicePixelRatio, QWeakPointe/;"	f	class:QCPPaintBufferGlFbo
QCPPaintBufferGlFbo	qcustomplot.h	/^  explicit QCPPaintBufferGlFbo(const QSize &size, double devicePixelRatio, QWeakPointer<QOpenGLC/;"	p	class:QCPPaintBufferGlFbo
QCPPaintBufferGlFbo	qcustomplot.h	/^class QCP_LIB_DECL QCPPaintBufferGlFbo : public QCPAbstractPaintBuffer$/;"	c
QCPPaintBufferGlPbuffer	qcustomplot.cpp	/^QCPPaintBufferGlPbuffer::QCPPaintBufferGlPbuffer(const QSize &size, double devicePixelRatio, int/;"	f	class:QCPPaintBufferGlPbuffer
QCPPaintBufferGlPbuffer	qcustomplot.h	/^  explicit QCPPaintBufferGlPbuffer(const QSize &size, double devicePixelRatio, int multisamples)/;"	p	class:QCPPaintBufferGlPbuffer
QCPPaintBufferGlPbuffer	qcustomplot.h	/^class QCP_LIB_DECL QCPPaintBufferGlPbuffer : public QCPAbstractPaintBuffer$/;"	c
QCPPaintBufferPixmap	qcustomplot.cpp	/^QCPPaintBufferPixmap::QCPPaintBufferPixmap(const QSize &size, double devicePixelRatio) :$/;"	f	class:QCPPaintBufferPixmap
QCPPaintBufferPixmap	qcustomplot.h	/^  explicit QCPPaintBufferPixmap(const QSize &size, double devicePixelRatio);$/;"	p	class:QCPPaintBufferPixmap
QCPPaintBufferPixmap	qcustomplot.h	/^class QCP_LIB_DECL QCPPaintBufferPixmap : public QCPAbstractPaintBuffer$/;"	c
QCPPainter	qcustomplot.cpp	/^QCPPainter::QCPPainter() :$/;"	f	class:QCPPainter
QCPPainter	qcustomplot.cpp	/^QCPPainter::QCPPainter(QPaintDevice *device) :$/;"	f	class:QCPPainter
QCPPainter	qcustomplot.h	/^  explicit QCPPainter(QPaintDevice *device);$/;"	p	class:QCPPainter
QCPPainter	qcustomplot.h	/^class QCP_LIB_DECL QCPPainter : public QPainter$/;"	c
QCPPlottableInterface1D	qcustomplot.h	/^class QCPPlottableInterface1D$/;"	c
QCPPlottableLegendItem	qcustomplot.cpp	/^QCPPlottableLegendItem::QCPPlottableLegendItem(QCPLegend *parent, QCPAbstractPlottable *plottabl/;"	f	class:QCPPlottableLegendItem
QCPPlottableLegendItem	qcustomplot.h	/^  QCPPlottableLegendItem(QCPLegend *parent, QCPAbstractPlottable *plottable);$/;"	p	class:QCPPlottableLegendItem
QCPPlottableLegendItem	qcustomplot.h	/^class QCP_LIB_DECL QCPPlottableLegendItem : public QCPAbstractLegendItem$/;"	c
QCPRange	qcustomplot.cpp	/^QCPRange::QCPRange() :$/;"	f	class:QCPRange
QCPRange	qcustomplot.cpp	/^QCPRange::QCPRange(double lower, double upper) :$/;"	f	class:QCPRange
QCPRange	qcustomplot.h	/^  QCPRange();$/;"	p	class:QCPRange
QCPRange	qcustomplot.h	/^  QCPRange(double lower, double upper);$/;"	p	class:QCPRange
QCPRange	qcustomplot.h	/^class QCP_LIB_DECL QCPRange$/;"	c
QCPScatterStyle	qcustomplot.cpp	/^QCPScatterStyle::QCPScatterStyle() :$/;"	f	class:QCPScatterStyle
QCPScatterStyle	qcustomplot.cpp	/^QCPScatterStyle::QCPScatterStyle(ScatterShape shape, const QColor &color, const QColor &fill, do/;"	f	class:QCPScatterStyle
QCPScatterStyle	qcustomplot.cpp	/^QCPScatterStyle::QCPScatterStyle(ScatterShape shape, const QColor &color, double size) :$/;"	f	class:QCPScatterStyle
QCPScatterStyle	qcustomplot.cpp	/^QCPScatterStyle::QCPScatterStyle(ScatterShape shape, const QPen &pen, const QBrush &brush, doubl/;"	f	class:QCPScatterStyle
QCPScatterStyle	qcustomplot.cpp	/^QCPScatterStyle::QCPScatterStyle(ScatterShape shape, double size) :$/;"	f	class:QCPScatterStyle
QCPScatterStyle	qcustomplot.cpp	/^QCPScatterStyle::QCPScatterStyle(const QPainterPath &customPath, const QPen &pen, const QBrush &/;"	f	class:QCPScatterStyle
QCPScatterStyle	qcustomplot.cpp	/^QCPScatterStyle::QCPScatterStyle(const QPixmap &pixmap) :$/;"	f	class:QCPScatterStyle
QCPScatterStyle	qcustomplot.h	/^  QCPScatterStyle();$/;"	p	class:QCPScatterStyle	typeref:typename:ScatterShape
QCPScatterStyle	qcustomplot.h	/^  QCPScatterStyle(ScatterShape shape, const QColor &color, const QColor &fill, double size);$/;"	p	class:QCPScatterStyle
QCPScatterStyle	qcustomplot.h	/^  QCPScatterStyle(ScatterShape shape, const QColor &color, double size);$/;"	p	class:QCPScatterStyle
QCPScatterStyle	qcustomplot.h	/^  QCPScatterStyle(ScatterShape shape, const QPen &pen, const QBrush &brush, double size);$/;"	p	class:QCPScatterStyle
QCPScatterStyle	qcustomplot.h	/^  QCPScatterStyle(ScatterShape shape, double size=6);$/;"	p	class:QCPScatterStyle
QCPScatterStyle	qcustomplot.h	/^  QCPScatterStyle(const QPainterPath &customPath, const QPen &pen, const QBrush &brush=Qt::NoBru/;"	p	class:QCPScatterStyle
QCPScatterStyle	qcustomplot.h	/^  QCPScatterStyle(const QPixmap &pixmap);$/;"	p	class:QCPScatterStyle
QCPScatterStyle	qcustomplot.h	/^class QCP_LIB_DECL QCPScatterStyle$/;"	c
QCPSelectionDecorator	qcustomplot.cpp	/^QCPSelectionDecorator::QCPSelectionDecorator() :$/;"	f	class:QCPSelectionDecorator
QCPSelectionDecorator	qcustomplot.h	/^  QCPSelectionDecorator();$/;"	p	class:QCPSelectionDecorator
QCPSelectionDecorator	qcustomplot.h	/^class QCP_LIB_DECL QCPSelectionDecorator$/;"	c
QCPSelectionDecoratorBracket	qcustomplot.cpp	/^QCPSelectionDecoratorBracket::QCPSelectionDecoratorBracket() :$/;"	f	class:QCPSelectionDecoratorBracket
QCPSelectionDecoratorBracket	qcustomplot.h	/^  QCPSelectionDecoratorBracket();$/;"	p	class:QCPSelectionDecoratorBracket	typeref:typename:BracketStyle
QCPSelectionDecoratorBracket	qcustomplot.h	/^class QCP_LIB_DECL QCPSelectionDecoratorBracket : public QCPSelectionDecorator$/;"	c
QCPSelectionRect	qcustomplot.cpp	/^QCPSelectionRect::QCPSelectionRect(QCustomPlot *parentPlot) :$/;"	f	class:QCPSelectionRect
QCPSelectionRect	qcustomplot.h	/^  explicit QCPSelectionRect(QCustomPlot *parentPlot);$/;"	p	class:QCPSelectionRect
QCPSelectionRect	qcustomplot.h	/^class QCP_LIB_DECL QCPSelectionRect : public QCPLayerable$/;"	c
QCPStatisticalBox	qcustomplot.cpp	/^QCPStatisticalBox::QCPStatisticalBox(QCPAxis *keyAxis, QCPAxis *valueAxis) :$/;"	f	class:QCPStatisticalBox
QCPStatisticalBox	qcustomplot.h	/^  explicit QCPStatisticalBox(QCPAxis *keyAxis, QCPAxis *valueAxis);$/;"	p	class:QCPStatisticalBox
QCPStatisticalBox	qcustomplot.h	/^class QCP_LIB_DECL QCPStatisticalBox : public QCPAbstractPlottable1D<QCPStatisticalBoxData>$/;"	c
QCPStatisticalBoxData	qcustomplot.cpp	/^QCPStatisticalBoxData::QCPStatisticalBoxData() :$/;"	f	class:QCPStatisticalBoxData
QCPStatisticalBoxData	qcustomplot.cpp	/^QCPStatisticalBoxData::QCPStatisticalBoxData(double key, double minimum, double lowerQuartile, d/;"	f	class:QCPStatisticalBoxData
QCPStatisticalBoxData	qcustomplot.h	/^  QCPStatisticalBoxData();$/;"	p	class:QCPStatisticalBoxData
QCPStatisticalBoxData	qcustomplot.h	/^  QCPStatisticalBoxData(double key, double minimum, double lowerQuartile, double median, double /;"	p	class:QCPStatisticalBoxData
QCPStatisticalBoxData	qcustomplot.h	/^class QCP_LIB_DECL QCPStatisticalBoxData$/;"	c
QCPStatisticalBoxDataContainer	qcustomplot.h	/^typedef QCPDataContainer<QCPStatisticalBoxData> QCPStatisticalBoxDataContainer;$/;"	t	typeref:typename:QCPDataContainer<QCPStatisticalBoxData>
QCPTextElement	qcustomplot.cpp	/^QCPTextElement::QCPTextElement(QCustomPlot *parentPlot) :$/;"	f	class:QCPTextElement
QCPTextElement	qcustomplot.cpp	/^QCPTextElement::QCPTextElement(QCustomPlot *parentPlot, const QString &text) :$/;"	f	class:QCPTextElement
QCPTextElement	qcustomplot.cpp	/^QCPTextElement::QCPTextElement(QCustomPlot *parentPlot, const QString &text, const QFont &font) /;"	f	class:QCPTextElement
QCPTextElement	qcustomplot.cpp	/^QCPTextElement::QCPTextElement(QCustomPlot *parentPlot, const QString &text, const QString &font/;"	f	class:QCPTextElement
QCPTextElement	qcustomplot.cpp	/^QCPTextElement::QCPTextElement(QCustomPlot *parentPlot, const QString &text, double pointSize) :$/;"	f	class:QCPTextElement
QCPTextElement	qcustomplot.h	/^  QCPTextElement(QCustomPlot *parentPlot, const QString &text);$/;"	p	class:QCPTextElement
QCPTextElement	qcustomplot.h	/^  QCPTextElement(QCustomPlot *parentPlot, const QString &text, const QFont &font);$/;"	p	class:QCPTextElement
QCPTextElement	qcustomplot.h	/^  QCPTextElement(QCustomPlot *parentPlot, const QString &text, const QString &fontFamily, double/;"	p	class:QCPTextElement
QCPTextElement	qcustomplot.h	/^  QCPTextElement(QCustomPlot *parentPlot, const QString &text, double pointSize);$/;"	p	class:QCPTextElement
QCPTextElement	qcustomplot.h	/^  explicit QCPTextElement(QCustomPlot *parentPlot);$/;"	p	class:QCPTextElement
QCPTextElement	qcustomplot.h	/^class QCP_LIB_DECL QCPTextElement : public QCPLayoutElement$/;"	c
QCPVector2D	qcustomplot.cpp	/^QCPVector2D::QCPVector2D() :$/;"	f	class:QCPVector2D
QCPVector2D	qcustomplot.cpp	/^QCPVector2D::QCPVector2D(const QPoint &point) :$/;"	f	class:QCPVector2D
QCPVector2D	qcustomplot.cpp	/^QCPVector2D::QCPVector2D(const QPointF &point) :$/;"	f	class:QCPVector2D
QCPVector2D	qcustomplot.cpp	/^QCPVector2D::QCPVector2D(double x, double y) :$/;"	f	class:QCPVector2D
QCPVector2D	qcustomplot.h	/^  QCPVector2D();$/;"	p	class:QCPVector2D
QCPVector2D	qcustomplot.h	/^  QCPVector2D(const QPoint &point);$/;"	p	class:QCPVector2D
QCPVector2D	qcustomplot.h	/^  QCPVector2D(const QPointF &point);$/;"	p	class:QCPVector2D
QCPVector2D	qcustomplot.h	/^  QCPVector2D(double x, double y);$/;"	p	class:QCPVector2D
QCPVector2D	qcustomplot.h	/^class QCP_LIB_DECL QCPVector2D$/;"	c
QCP_DEVICEPIXELRATIO_FLOAT	qcustomplot.h	/^#    define QCP_DEVICEPIXELRATIO_FLOAT$/;"	d
QCP_DEVICEPIXELRATIO_SUPPORTED	qcustomplot.h	/^#  define QCP_DEVICEPIXELRATIO_SUPPORTED$/;"	d
QCP_LIB_DECL	qcustomplot.h	/^#  define QCP_LIB_DECL /;"	d
QCP_LIB_DECL	qcustomplot.h	/^#  define QCP_LIB_DECL$/;"	d
QCP_OPENGL_FBO	qcustomplot.h	/^#    define QCP_OPENGL_FBO$/;"	d
QCP_OPENGL_OFFSCREENSURFACE	qcustomplot.h	/^#    define QCP_OPENGL_OFFSCREENSURFACE$/;"	d
QCP_OPENGL_PBUFFER	qcustomplot.h	/^#    define QCP_OPENGL_PBUFFER$/;"	d
QCUSTOMPLOT_H	qcustomplot.h	/^#define QCUSTOMPLOT_H$/;"	d
QCUSTOMPLOT_VERSION	qcustomplot.h	/^#define QCUSTOMPLOT_VERSION /;"	d
QCUSTOMPLOT_VERSION_STR	qcustomplot.h	/^#define QCUSTOMPLOT_VERSION_STR /;"	d
QCustomPlot	qcustomplot.cpp	/^QCustomPlot::QCustomPlot(QWidget *parent) :$/;"	f	class:QCustomPlot
QCustomPlot	qcustomplot.h	/^  explicit QCustomPlot(QWidget *parent = 0);$/;"	p	class:QCustomPlot	typeref:typename:RefreshPriority
QCustomPlot	qcustomplot.h	/^class QCP_LIB_DECL QCustomPlot : public QWidget$/;"	c
Q_DECLARE_METATYPE	qcustomplot.h	/^Q_DECLARE_METATYPE(QCPScatterStyle::ScatterProperty)$/;"	f	typeref:typename:QCPScatterStyle::ScatterProperties
Q_DECLARE_TYPEINFO	qcustomplot.h	/^Q_DECLARE_TYPEINFO(QCPBarsData, Q_PRIMITIVE_TYPE);$/;"	p
Q_DECLARE_TYPEINFO	qcustomplot.h	/^Q_DECLARE_TYPEINFO(QCPCurveData, Q_PRIMITIVE_TYPE);$/;"	p
Q_DECLARE_TYPEINFO	qcustomplot.h	/^Q_DECLARE_TYPEINFO(QCPDataRange, Q_MOVABLE_TYPE);$/;"	p
Q_DECLARE_TYPEINFO	qcustomplot.h	/^Q_DECLARE_TYPEINFO(QCPErrorBarsData, Q_PRIMITIVE_TYPE);$/;"	p
Q_DECLARE_TYPEINFO	qcustomplot.h	/^Q_DECLARE_TYPEINFO(QCPFinancialData, Q_PRIMITIVE_TYPE);$/;"	p
Q_DECLARE_TYPEINFO	qcustomplot.h	/^Q_DECLARE_TYPEINFO(QCPGraphData, Q_PRIMITIVE_TYPE);$/;"	p
Q_DECLARE_TYPEINFO	qcustomplot.h	/^Q_DECLARE_TYPEINFO(QCPLineEnding, Q_MOVABLE_TYPE);$/;"	p
Q_DECLARE_TYPEINFO	qcustomplot.h	/^Q_DECLARE_TYPEINFO(QCPRange, Q_MOVABLE_TYPE);$/;"	p
Q_DECLARE_TYPEINFO	qcustomplot.h	/^Q_DECLARE_TYPEINFO(QCPScatterStyle, Q_MOVABLE_TYPE);$/;"	p
Q_DECLARE_TYPEINFO	qcustomplot.h	/^Q_DECLARE_TYPEINFO(QCPStatisticalBoxData, Q_MOVABLE_TYPE);$/;"	p
Q_DECLARE_TYPEINFO	qcustomplot.h	/^Q_DECLARE_TYPEINFO(QCPVector2D, Q_MOVABLE_TYPE);$/;"	p
Q_DECL_OVERRIDE	qcustomplot.h	/^#  define Q_DECL_OVERRIDE$/;"	d
Q_FLAGS	qcustomplot.h	/^  Q_FLAGS(PainterModes)$/;"	p	class:QCPPainter	typeref:typename:PainterMode
Q_FLAGS	qcustomplot.h	/^  Q_FLAGS(SelectableParts)$/;"	p	class:QCPAxis	typeref:typename:SelectablePart
Q_FLAGS	qcustomplot.h	/^  Q_FLAGS(SelectableParts)$/;"	p	class:QCPLegend	typeref:typename:SelectablePart
QcSession	qc-session.h	/^        QcSession(boost::asio::io_service& io_service)$/;"	f	class:QcSession
QcSession	qc-session.h	/^class QcSession : public boost::enable_shared_from_this<QcSession>$/;"	c
RDONLY	spdlog/fmt/bundled/posix.h	/^        RDONLY = FMT_POSIX(O_RDONLY), \/\/ Open for reading only.$/;"	e	enum:fmt::File::__anonc4b4f0c90103
RDWR	spdlog/fmt/bundled/posix.h	/^        RDWR = FMT_POSIX(O_RDWR)      \/\/ Open for reading and writing.$/;"	e	enum:fmt::File::__anonc4b4f0c90103
RED	spdlog/fmt/bundled/format.h	/^    RED,$/;"	e	enum:fmt::Color
RED	spdlog/sinks/wincolor_sink.h	/^    const WORD RED = FOREGROUND_RED;$/;"	m	class:spdlog::sinks::wincolor_sink	typeref:typename:const WORD
REQUIRED_FIELD_BITMAP_IS_SET	protobuf-c/protobuf-c.c	/^#define REQUIRED_FIELD_BITMAP_IS_SET(/;"	d	file:
REQUIRED_FIELD_BITMAP_SET	protobuf-c/protobuf-c.c	/^#define REQUIRED_FIELD_BITMAP_SET(/;"	d	file:
REQ_ACTIVATE_LICENSE	tcp-packet.h	/^    REQ_ACTIVATE_LICENSE = 54,$/;"	e	enum:__anonce98fa070203
REQ_COMPLETE_SETUP__INIT	simple.pb-c.h	/^#define REQ_COMPLETE_SETUP__INIT /;"	d
REQ_CONNECT	tcp-packet.h	/^    REQ_CONNECT = 48,$/;"	e	enum:__anonce98fa070203
REQ_DEVICE_SETUP	tcp-packet.h	/^    REQ_DEVICE_SETUP = 56,$/;"	e	enum:__anonce98fa070203
REQ_PRODUCT_LICENSE	tcp-packet.h	/^    REQ_PRODUCT_LICENSE = 52,$/;"	e	enum:__anonce98fa070203
REQ_SERIAL_KEY	tcp-packet.h	/^    REQ_SERIAL_KEY = 50,$/;"	e	enum:__anonce98fa070203
REQ_TOKEN_UPDATE	tcp-packet.h	/^    REQ_TOKEN_UPDATE = 58,$/;"	e	enum:__anonce98fa070203
RESET_COLOR	spdlog/fmt/bundled/format-inl.h	/^const char basic_data<T>::RESET_COLOR[] = "\\x1b[0m";$/;"	m	class:internal::basic_data<T>	typeref:typename:const char[]
RESET_COLOR	spdlog/fmt/bundled/format.cc	/^const char RESET_COLOR[] = "\\x1b[0m";$/;"	v	namespace:fmt::__anonf3b7881d0110	typeref:typename:const char[]
RIGHT	protocol-struct.h	/^    int16_t RIGHT;$/;"	m	struct:CONTROL_ENCODER	typeref:typename:int16_t
RIGHT	protocol-struct.h	/^    int16_t RIGHT;$/;"	m	struct:CONTROL_WHEEL	typeref:typename:int16_t
ROUGH_MOTOR_CONTROL__INIT	simple.pb-c.h	/^#define ROUGH_MOTOR_CONTROL__INIT /;"	d
RSP_ACTIVATE_LICENSE	tcp-packet.h	/^    RSP_ACTIVATE_LICENSE = 55,$/;"	e	enum:__anonce98fa070203
RSP_CONNECT	tcp-packet.h	/^    RSP_CONNECT = 49,$/;"	e	enum:__anonce98fa070203
RSP_DEVICE_SETUP	tcp-packet.h	/^    RSP_DEVICE_SETUP = 57,$/;"	e	enum:__anonce98fa070203
RSP_PRODUCT_LICENSE	tcp-packet.h	/^    RSP_PRODUCT_LICENSE = 53,$/;"	e	enum:__anonce98fa070203
RSP_SERIAL_KEY	tcp-packet.h	/^    RSP_SERIAL_KEY = 51,$/;"	e	enum:__anonce98fa070203
RSP_SERVICE_KEY__INIT	simple.pb-c.h	/^#define RSP_SERVICE_KEY__INIT /;"	d
RSP_TOKEN_UPDATE	tcp-packet.h	/^    RSP_TOKEN_UPDATE = 59, $/;"	e	enum:__anonce98fa070203
RWResult	spdlog/fmt/bundled/posix.cc	/^typedef int RWResult;$/;"	t	namespace:__anon5b5309a70110	typeref:typename:int	file:
RealLimits	json.hpp	/^    using RealLimits = std::numeric_limits<RealIntegerType>;$/;"	t	struct:nlohmann::detail::is_compatible_integer_type_impl	typeref:typename:std::numeric_limits<RealIntegerType>
RefreshPriority	qcustomplot.h	/^  enum RefreshPriority { rpImmediateRefresh \/\/\/< Replots immediately and repaints the widget /;"	g	class:QCustomPlot
ReqCompleteSetup	simple.pb-c.h	/^typedef struct _ReqCompleteSetup ReqCompleteSetup;$/;"	t	typeref:struct:_ReqCompleteSetup
ReqCompleteSetup	simple.proto	/^message ReqCompleteSetup {$/;"	m
ReqCompleteSetup_Closure	simple.pb-c.h	/^typedef void (*ReqCompleteSetup_Closure)$/;"	t	typeref:typename:void (*)(const ReqCompleteSetup * message,void * closure_data)
ResolutionUnit	qcustomplot.h	/^enum ResolutionUnit { ruDotsPerMeter       \/\/\/< Resolution is given in dots per meter (dpm)$/;"	g	namespace:QCP
RoughMotorControl	simple.pb-c.h	/^typedef struct _RoughMotorControl RoughMotorControl;$/;"	t	typeref:struct:_RoughMotorControl
RoughMotorControl	simple.proto	/^message RoughMotorControl {$/;"	m
RoughMotorControl_Closure	simple.pb-c.h	/^typedef void (*RoughMotorControl_Closure)$/;"	t	typeref:typename:void (*)(const RoughMotorControl * message,void * closure_data)
RspServiceKey	simple.pb-c.h	/^typedef struct _RspServiceKey RspServiceKey;$/;"	t	typeref:struct:_RspServiceKey
RspServiceKey	simple.proto	/^message RspServiceKey {$/;"	m
RspServiceKey_Closure	simple.pb-c.h	/^typedef void (*RspServiceKey_Closure)$/;"	t	typeref:typename:void (*)(const RspServiceKey * message,void * closure_data)
RuntimeError	spdlog/fmt/bundled/format.h	/^    RuntimeError()$/;"	f	class:fmt::internal::RuntimeError
RuntimeError	spdlog/fmt/bundled/format.h	/^    RuntimeError(const RuntimeError &rerr)$/;"	f	class:fmt::internal::RuntimeError
RuntimeError	spdlog/fmt/bundled/format.h	/^class RuntimeError : public std::runtime_error$/;"	c	namespace:fmt::internal
SIGN_FLAG	spdlog/fmt/bundled/format.h	/^    SIGN_FLAG = 1,$/;"	e	enum:fmt::__anon1ea8787f0d03
SMOOTH_MOTOR_CONTROL_DEPRECATED__INIT	simple.pb-c.h	/^#define SMOOTH_MOTOR_CONTROL_DEPRECATED__INIT /;"	d
SPDLOG_ANDROID_RETRIES	spdlog/sinks/android_sink.h	/^#define SPDLOG_ANDROID_RETRIES /;"	d
SPDLOG_CONSTEXPR	spdlog/common.h	/^#define SPDLOG_CONSTEXPR /;"	d
SPDLOG_CONSTEXPR	spdlog/common.h	/^#define SPDLOG_CONSTEXPR$/;"	d
SPDLOG_DEBUG	spdlog/spdlog.h	/^#define SPDLOG_DEBUG(/;"	d
SPDLOG_DEPRECATED	spdlog/common.h	/^#define SPDLOG_DEPRECATED /;"	d
SPDLOG_DEPRECATED	spdlog/common.h	/^#define SPDLOG_DEPRECATED$/;"	d
SPDLOG_EOL	spdlog/details/os.h	/^#define SPDLOG_EOL /;"	d
SPDLOG_FILENAME_T	spdlog/details/os.h	/^#define SPDLOG_FILENAME_T(/;"	d
SPDLOG_FINAL	spdlog/async_logger.h	/^class async_logger SPDLOG_FINAL : public logger$/;"	c	namespace:spdlog
SPDLOG_FINAL	spdlog/common.h	/^#define SPDLOG_FINAL /;"	d
SPDLOG_FINAL	spdlog/common.h	/^#define SPDLOG_FINAL$/;"	d
SPDLOG_FINAL	spdlog/contrib/sinks/step_file_sink.h	/^class step_file_sink SPDLOG_FINAL : public base_sink<Mutex>$/;"	c	namespace:spdlog::sinks
SPDLOG_FINAL	spdlog/details/pattern_formatter.h	/^class C_formatter SPDLOG_FINAL : public flag_formatter$/;"	c	namespace:spdlog::details
SPDLOG_FINAL	spdlog/details/pattern_formatter.h	/^class D_formatter SPDLOG_FINAL : public flag_formatter$/;"	c	namespace:spdlog::details
SPDLOG_FINAL	spdlog/details/pattern_formatter.h	/^class E_formatter SPDLOG_FINAL : public flag_formatter$/;"	c	namespace:spdlog::details
SPDLOG_FINAL	spdlog/details/pattern_formatter.h	/^class F_formatter SPDLOG_FINAL : public flag_formatter$/;"	c	namespace:spdlog::details
SPDLOG_FINAL	spdlog/details/pattern_formatter.h	/^class H_formatter SPDLOG_FINAL : public flag_formatter$/;"	c	namespace:spdlog::details
SPDLOG_FINAL	spdlog/details/pattern_formatter.h	/^class I_formatter SPDLOG_FINAL : public flag_formatter$/;"	c	namespace:spdlog::details
SPDLOG_FINAL	spdlog/details/pattern_formatter.h	/^class M_formatter SPDLOG_FINAL : public flag_formatter$/;"	c	namespace:spdlog::details
SPDLOG_FINAL	spdlog/details/pattern_formatter.h	/^class R_formatter SPDLOG_FINAL : public flag_formatter$/;"	c	namespace:spdlog::details
SPDLOG_FINAL	spdlog/details/pattern_formatter.h	/^class S_formatter SPDLOG_FINAL : public flag_formatter$/;"	c	namespace:spdlog::details
SPDLOG_FINAL	spdlog/details/pattern_formatter.h	/^class T_formatter SPDLOG_FINAL : public flag_formatter$/;"	c	namespace:spdlog::details
SPDLOG_FINAL	spdlog/details/pattern_formatter.h	/^class Y_formatter SPDLOG_FINAL : public flag_formatter$/;"	c	namespace:spdlog::details
SPDLOG_FINAL	spdlog/details/pattern_formatter.h	/^class aggregate_formatter SPDLOG_FINAL : public flag_formatter$/;"	c	namespace:spdlog::details
SPDLOG_FINAL	spdlog/details/pattern_formatter.h	/^class c_formatter SPDLOG_FINAL : public flag_formatter$/;"	c	namespace:spdlog::details
SPDLOG_FINAL	spdlog/details/pattern_formatter.h	/^class ch_formatter SPDLOG_FINAL : public flag_formatter$/;"	c	namespace:spdlog::details
SPDLOG_FINAL	spdlog/details/pattern_formatter.h	/^class color_start_formatter SPDLOG_FINAL : public flag_formatter$/;"	c	namespace:spdlog::details
SPDLOG_FINAL	spdlog/details/pattern_formatter.h	/^class color_stop_formatter SPDLOG_FINAL : public flag_formatter$/;"	c	namespace:spdlog::details
SPDLOG_FINAL	spdlog/details/pattern_formatter.h	/^class d_formatter SPDLOG_FINAL : public flag_formatter$/;"	c	namespace:spdlog::details
SPDLOG_FINAL	spdlog/details/pattern_formatter.h	/^class e_formatter SPDLOG_FINAL : public flag_formatter$/;"	c	namespace:spdlog::details
SPDLOG_FINAL	spdlog/details/pattern_formatter.h	/^class f_formatter SPDLOG_FINAL : public flag_formatter$/;"	c	namespace:spdlog::details
SPDLOG_FINAL	spdlog/details/pattern_formatter.h	/^class full_formatter SPDLOG_FINAL : public flag_formatter$/;"	c	namespace:spdlog::details
SPDLOG_FINAL	spdlog/details/pattern_formatter.h	/^class i_formatter SPDLOG_FINAL : public flag_formatter$/;"	c	namespace:spdlog::details
SPDLOG_FINAL	spdlog/details/pattern_formatter.h	/^class m_formatter SPDLOG_FINAL : public flag_formatter$/;"	c	namespace:spdlog::details
SPDLOG_FINAL	spdlog/details/pattern_formatter.h	/^class p_formatter SPDLOG_FINAL : public flag_formatter$/;"	c	namespace:spdlog::details
SPDLOG_FINAL	spdlog/details/pattern_formatter.h	/^class pattern_formatter SPDLOG_FINAL : public formatter$/;"	c	namespace:spdlog
SPDLOG_FINAL	spdlog/details/pattern_formatter.h	/^class pid_formatter SPDLOG_FINAL : public flag_formatter$/;"	c	namespace:spdlog::details
SPDLOG_FINAL	spdlog/details/pattern_formatter.h	/^class r_formatter SPDLOG_FINAL : public flag_formatter$/;"	c	namespace:spdlog::details
SPDLOG_FINAL	spdlog/details/pattern_formatter.h	/^class t_formatter SPDLOG_FINAL : public flag_formatter$/;"	c	namespace:spdlog::details
SPDLOG_FINAL	spdlog/details/pattern_formatter.h	/^class v_formatter SPDLOG_FINAL : public flag_formatter$/;"	c	namespace:spdlog::details
SPDLOG_FINAL	spdlog/details/pattern_formatter.h	/^class z_formatter SPDLOG_FINAL : public flag_formatter$/;"	c	namespace:spdlog::details
SPDLOG_FINAL	spdlog/details/pattern_formatter_impl.h	/^class C_formatter SPDLOG_FINAL : public flag_formatter$/;"	c	namespace:spdlog::details
SPDLOG_FINAL	spdlog/details/pattern_formatter_impl.h	/^class D_formatter SPDLOG_FINAL : public flag_formatter$/;"	c	namespace:spdlog::details
SPDLOG_FINAL	spdlog/details/pattern_formatter_impl.h	/^class E_formatter SPDLOG_FINAL : public flag_formatter$/;"	c	namespace:spdlog::details
SPDLOG_FINAL	spdlog/details/pattern_formatter_impl.h	/^class F_formatter SPDLOG_FINAL : public flag_formatter$/;"	c	namespace:spdlog::details
SPDLOG_FINAL	spdlog/details/pattern_formatter_impl.h	/^class H_formatter SPDLOG_FINAL : public flag_formatter$/;"	c	namespace:spdlog::details
SPDLOG_FINAL	spdlog/details/pattern_formatter_impl.h	/^class I_formatter SPDLOG_FINAL : public flag_formatter$/;"	c	namespace:spdlog::details
SPDLOG_FINAL	spdlog/details/pattern_formatter_impl.h	/^class M_formatter SPDLOG_FINAL : public flag_formatter$/;"	c	namespace:spdlog::details
SPDLOG_FINAL	spdlog/details/pattern_formatter_impl.h	/^class R_formatter SPDLOG_FINAL : public flag_formatter$/;"	c	namespace:spdlog::details
SPDLOG_FINAL	spdlog/details/pattern_formatter_impl.h	/^class S_formatter SPDLOG_FINAL : public flag_formatter$/;"	c	namespace:spdlog::details
SPDLOG_FINAL	spdlog/details/pattern_formatter_impl.h	/^class T_formatter SPDLOG_FINAL : public flag_formatter$/;"	c	namespace:spdlog::details
SPDLOG_FINAL	spdlog/details/pattern_formatter_impl.h	/^class Y_formatter SPDLOG_FINAL : public flag_formatter$/;"	c	namespace:spdlog::details
SPDLOG_FINAL	spdlog/details/pattern_formatter_impl.h	/^class aggregate_formatter SPDLOG_FINAL : public flag_formatter$/;"	c	namespace:spdlog::details
SPDLOG_FINAL	spdlog/details/pattern_formatter_impl.h	/^class c_formatter SPDLOG_FINAL : public flag_formatter$/;"	c	namespace:spdlog::details
SPDLOG_FINAL	spdlog/details/pattern_formatter_impl.h	/^class ch_formatter SPDLOG_FINAL : public flag_formatter$/;"	c	namespace:spdlog::details
SPDLOG_FINAL	spdlog/details/pattern_formatter_impl.h	/^class color_start_formatter SPDLOG_FINAL : public flag_formatter$/;"	c	namespace:spdlog::details
SPDLOG_FINAL	spdlog/details/pattern_formatter_impl.h	/^class color_stop_formatter SPDLOG_FINAL : public flag_formatter$/;"	c	namespace:spdlog::details
SPDLOG_FINAL	spdlog/details/pattern_formatter_impl.h	/^class d_formatter SPDLOG_FINAL : public flag_formatter$/;"	c	namespace:spdlog::details
SPDLOG_FINAL	spdlog/details/pattern_formatter_impl.h	/^class e_formatter SPDLOG_FINAL : public flag_formatter$/;"	c	namespace:spdlog::details
SPDLOG_FINAL	spdlog/details/pattern_formatter_impl.h	/^class f_formatter SPDLOG_FINAL : public flag_formatter$/;"	c	namespace:spdlog::details
SPDLOG_FINAL	spdlog/details/pattern_formatter_impl.h	/^class full_formatter SPDLOG_FINAL : public flag_formatter$/;"	c	namespace:spdlog::details
SPDLOG_FINAL	spdlog/details/pattern_formatter_impl.h	/^class i_formatter SPDLOG_FINAL : public flag_formatter$/;"	c	namespace:spdlog::details
SPDLOG_FINAL	spdlog/details/pattern_formatter_impl.h	/^class m_formatter SPDLOG_FINAL : public flag_formatter$/;"	c	namespace:spdlog::details
SPDLOG_FINAL	spdlog/details/pattern_formatter_impl.h	/^class p_formatter SPDLOG_FINAL : public flag_formatter$/;"	c	namespace:spdlog::details
SPDLOG_FINAL	spdlog/details/pattern_formatter_impl.h	/^class pid_formatter SPDLOG_FINAL : public flag_formatter$/;"	c	namespace:spdlog::details
SPDLOG_FINAL	spdlog/details/pattern_formatter_impl.h	/^class r_formatter SPDLOG_FINAL : public flag_formatter$/;"	c	namespace:spdlog::details
SPDLOG_FINAL	spdlog/details/pattern_formatter_impl.h	/^class t_formatter SPDLOG_FINAL : public flag_formatter$/;"	c	namespace:spdlog::details
SPDLOG_FINAL	spdlog/details/pattern_formatter_impl.h	/^class v_formatter SPDLOG_FINAL : public flag_formatter$/;"	c	namespace:spdlog::details
SPDLOG_FINAL	spdlog/details/pattern_formatter_impl.h	/^class z_formatter SPDLOG_FINAL : public flag_formatter$/;"	c	namespace:spdlog::details
SPDLOG_FINAL	spdlog/formatter.h	/^class pattern_formatter SPDLOG_FINAL : public formatter$/;"	c	namespace:spdlog
SPDLOG_FINAL	spdlog/sinks/basic_file_sink.h	/^class basic_file_sink SPDLOG_FINAL : public base_sink<Mutex>$/;"	c	namespace:spdlog::sinks
SPDLOG_FINAL	spdlog/sinks/daily_file_sink.h	/^class daily_file_sink SPDLOG_FINAL : public base_sink<Mutex>$/;"	c	namespace:spdlog::sinks
SPDLOG_FINAL	spdlog/sinks/file_sinks.h	/^class daily_file_sink SPDLOG_FINAL : public base_sink<Mutex>$/;"	c	namespace:spdlog::sinks
SPDLOG_FINAL	spdlog/sinks/file_sinks.h	/^class rotating_file_sink SPDLOG_FINAL : public base_sink<Mutex>$/;"	c	namespace:spdlog::sinks
SPDLOG_FINAL	spdlog/sinks/file_sinks.h	/^class simple_file_sink SPDLOG_FINAL : public base_sink<Mutex>$/;"	c	namespace:spdlog::sinks
SPDLOG_FINAL	spdlog/sinks/rotating_file_sink.h	/^class rotating_file_sink SPDLOG_FINAL : public base_sink<Mutex>$/;"	c	namespace:spdlog::sinks
SPDLOG_FINAL	spdlog/sinks/stdout_sinks.h	/^class stderr_sink SPDLOG_FINAL : public base_sink<Mutex>$/;"	c	namespace:spdlog::sinks
SPDLOG_FINAL	spdlog/sinks/stdout_sinks.h	/^class stdout_sink SPDLOG_FINAL : public base_sink<Mutex>$/;"	c	namespace:spdlog::sinks
SPDLOG_LEVEL_NAMES	spdlog/common.h	/^#define SPDLOG_LEVEL_NAMES /;"	d
SPDLOG_NOEXCEPT	spdlog/common.h	/^#define SPDLOG_NOEXCEPT /;"	d
SPDLOG_STR_H	spdlog/spdlog.h	/^#define SPDLOG_STR_H(/;"	d
SPDLOG_STR_HELPER	spdlog/spdlog.h	/^#define SPDLOG_STR_HELPER(/;"	d
SPDLOG_TRACE	spdlog/spdlog.h	/^#define SPDLOG_TRACE(/;"	d
SPDLOG_VERSION	spdlog/common.h	/^#define SPDLOG_VERSION /;"	d
SPEED	protocol-struct.h	/^    uint32_t SPEED;$/;"	m	struct:CONTROL_ABS_ROTATE	typeref:typename:uint32_t
SPEED	protocol-struct.h	/^    uint32_t SPEED;$/;"	m	struct:CONTROL_REL_ROTATE	typeref:typename:uint32_t
SPEED	protocol-struct.h	/^    uint32_t SPEED;$/;"	m	struct:CONTROL_STRAIGHT	typeref:typename:uint32_t
START	protocol-struct.h	/^    START = 0,$/;"	e	enum:FirmwareUpdateMode
STATUS	simple.proto	/^    STATUS = 1;  \/\/0x01$/;"	e
STBIDEF	stb_image.h	/^#define STBIDEF /;"	d
STBI_ASSERT	stb_image.h	/^#define STBI_ASSERT(/;"	d
STBI_FREE	stb_image.h	/^#define STBI_FREE(/;"	d
STBI_HAS_LROTL	stb_image.h	/^#define STBI_HAS_LROTL$/;"	d
STBI_INCLUDE_STB_IMAGE_H	stb_image.h	/^#define STBI_INCLUDE_STB_IMAGE_H$/;"	d
STBI_MALLOC	stb_image.h	/^#define STBI_MALLOC(/;"	d
STBI_NOTUSED	stb_image.h	/^#define STBI_NOTUSED(/;"	d
STBI_NO_BMP	stb_image.h	/^   #define STBI_NO_BMP$/;"	d
STBI_NO_GIF	stb_image.h	/^   #define STBI_NO_GIF$/;"	d
STBI_NO_HDR	stb_image.h	/^   #define STBI_NO_HDR$/;"	d
STBI_NO_JPEG	stb_image.h	/^   #define STBI_NO_JPEG$/;"	d
STBI_NO_PIC	stb_image.h	/^   #define STBI_NO_PIC$/;"	d
STBI_NO_PNG	stb_image.h	/^   #define STBI_NO_PNG$/;"	d
STBI_NO_PNM	stb_image.h	/^   #define STBI_NO_PNM$/;"	d
STBI_NO_PSD	stb_image.h	/^   #define STBI_NO_PSD$/;"	d
STBI_NO_SIMD	stb_image.h	/^#define STBI_NO_SIMD$/;"	d
STBI_NO_TGA	stb_image.h	/^   #define STBI_NO_TGA$/;"	d
STBI_NO_ZLIB	stb_image.h	/^#define STBI_NO_ZLIB$/;"	d
STBI_REALLOC	stb_image.h	/^#define STBI_REALLOC(/;"	d
STBI_REALLOC_SIZED	stb_image.h	/^#define STBI_REALLOC_SIZED(/;"	d
STBI_SIMD_ALIGN	stb_image.h	/^#define STBI_SIMD_ALIGN(/;"	d
STBI_SSE2	stb_image.h	/^#define STBI_SSE2$/;"	d
STBI_VERSION	stb_image.h	/^#define STBI_VERSION /;"	d
STBI__BYTECAST	stb_image.h	/^#define STBI__BYTECAST(/;"	d
STBI__F_avg	stb_image.h	/^   STBI__F_avg=3,$/;"	e	enum:__anon84e4e8860d03
STBI__F_avg_first	stb_image.h	/^   STBI__F_avg_first,$/;"	e	enum:__anon84e4e8860d03
STBI__F_none	stb_image.h	/^   STBI__F_none=0,$/;"	e	enum:__anon84e4e8860d03
STBI__F_paeth	stb_image.h	/^   STBI__F_paeth=4,$/;"	e	enum:__anon84e4e8860d03
STBI__F_paeth_first	stb_image.h	/^   STBI__F_paeth_first$/;"	e	enum:__anon84e4e8860d03
STBI__F_sub	stb_image.h	/^   STBI__F_sub=1,$/;"	e	enum:__anon84e4e8860d03
STBI__F_up	stb_image.h	/^   STBI__F_up=2,$/;"	e	enum:__anon84e4e8860d03
STBI__HDR_BUFLEN	stb_image.h	/^#define STBI__HDR_BUFLEN /;"	d
STBI__IDCT_1D	stb_image.h	/^#define STBI__IDCT_1D(/;"	d
STBI__MARKER_none	stb_image.h	/^#define STBI__MARKER_none /;"	d
STBI__PNG_TYPE	stb_image.h	/^#define STBI__PNG_TYPE(/;"	d
STBI__RESTART	stb_image.h	/^#define STBI__RESTART(/;"	d
STBI__SCAN_header	stb_image.h	/^   STBI__SCAN_header$/;"	e	enum:__anon84e4e8860403
STBI__SCAN_load	stb_image.h	/^   STBI__SCAN_load=0,$/;"	e	enum:__anon84e4e8860403
STBI__SCAN_type	stb_image.h	/^   STBI__SCAN_type,$/;"	e	enum:__anon84e4e8860403
STBI__X64_TARGET	stb_image.h	/^#define STBI__X64_TARGET$/;"	d
STBI__X86_TARGET	stb_image.h	/^#define STBI__X86_TARGET$/;"	d
STBI__ZFAST_BITS	stb_image.h	/^#define STBI__ZFAST_BITS /;"	d
STBI__ZFAST_MASK	stb_image.h	/^#define STBI__ZFAST_MASK /;"	d
STBI_default	stb_image.h	/^   STBI_default = 0, \/\/ only used for req_comp$/;"	e	enum:__anon84e4e8860103
STBI_grey	stb_image.h	/^   STBI_grey       = 1,$/;"	e	enum:__anon84e4e8860103
STBI_grey_alpha	stb_image.h	/^   STBI_grey_alpha = 2,$/;"	e	enum:__anon84e4e8860103
STBI_rgb	stb_image.h	/^   STBI_rgb        = 3,$/;"	e	enum:__anon84e4e8860103
STBI_rgb_alpha	stb_image.h	/^   STBI_rgb_alpha  = 4$/;"	e	enum:__anon84e4e8860103
STB_IMAGE_IMPLEMENTATION	license-session.cpp	/^#define STB_IMAGE_IMPLEMENTATION$/;"	d	file:
STEP_B7	license-session.h	/^            STEP_CA = 0, STEP_B7, STEP_CRC, STEP_LENGTH, STEP_PROTOBUF$/;"	e	enum:LicenseSession::E_STEP
STEP_CA	license-session.h	/^            STEP_CA = 0, STEP_B7, STEP_CRC, STEP_LENGTH, STEP_PROTOBUF$/;"	e	enum:LicenseSession::E_STEP
STEP_CRC	license-session.h	/^            STEP_CA = 0, STEP_B7, STEP_CRC, STEP_LENGTH, STEP_PROTOBUF$/;"	e	enum:LicenseSession::E_STEP
STEP_LENGTH	license-session.h	/^            STEP_CA = 0, STEP_B7, STEP_CRC, STEP_LENGTH, STEP_PROTOBUF$/;"	e	enum:LicenseSession::E_STEP
STEP_PROTOBUF	license-session.h	/^            STEP_CA = 0, STEP_B7, STEP_CRC, STEP_LENGTH, STEP_PROTOBUF$/;"	e	enum:LicenseSession::E_STEP
STRING	spdlog/fmt/bundled/format.h	/^        STRING,$/;"	e	enum:fmt::internal::Value::Type
STRING_IF_HAS	license-session.cpp	/^#define STRING_IF_HAS(/;"	d	file:
STRUCT_MEMBER	protobuf-c/protobuf-c.c	/^#define STRUCT_MEMBER(/;"	d	file:
STRUCT_MEMBER_P	protobuf-c/protobuf-c.c	/^#define STRUCT_MEMBER_P(/;"	d	file:
STRUCT_MEMBER_PTR	protobuf-c/protobuf-c.c	/^#define STRUCT_MEMBER_PTR(/;"	d	file:
ST_INFO__ACC	simple.pb-c.h	/^  ST_INFO__ACC = 4,$/;"	e	enum:_StInfo
ST_INFO__BATTERY	simple.pb-c.h	/^  ST_INFO__BATTERY = 256$/;"	e	enum:_StInfo
ST_INFO__ENC	simple.pb-c.h	/^  ST_INFO__ENC = 128,$/;"	e	enum:_StInfo
ST_INFO__GYRO	simple.pb-c.h	/^  ST_INFO__GYRO = 8,$/;"	e	enum:_StInfo
ST_INFO__HOP	simple.pb-c.h	/^  ST_INFO__HOP = 32,$/;"	e	enum:_StInfo
ST_INFO__IMU	simple.pb-c.h	/^  ST_INFO__IMU = 16,$/;"	e	enum:_StInfo
ST_INFO__MOTOR	simple.pb-c.h	/^  ST_INFO__MOTOR = 64,$/;"	e	enum:_StInfo
ST_INFO__STATUS	simple.pb-c.h	/^  ST_INFO__STATUS = 1,$/;"	e	enum:_StInfo
ST_INFO__TOF	simple.pb-c.h	/^  ST_INFO__TOF = 2,$/;"	e	enum:_StInfo
S_IRUSR	spdlog/fmt/bundled/posix.cc	/^#  define S_IRUSR /;"	d	file:
S_IWUSR	spdlog/fmt/bundled/posix.cc	/^#  define S_IWUSR /;"	d	file:
ScaleStrategy	qcustomplot.h	/^  enum ScaleStrategy { ssNone      \/\/\/< Modifications are not allowed, the specified tick ste/;"	g	class:QCPAxisTickerFixed
ScaleType	qcustomplot.h	/^  enum ScaleType { stLinear       \/\/\/< Linear scaling$/;"	g	class:QCPAxis
ScannedMember	protobuf-c/protobuf-c.c	/^typedef struct _ScannedMember ScannedMember;$/;"	t	typeref:struct:_ScannedMember	file:
ScatterProperty	qcustomplot.h	/^  enum ScatterProperty { spNone  = 0x00  \/\/\/< <tt>0x00<\/tt> None$/;"	g	class:QCPScatterStyle
ScatterShape	qcustomplot.h	/^  enum ScatterShape { ssNone       \/\/\/< no scatter symbols are drawn (e.g. in QCPGraph, data /;"	g	class:QCPScatterStyle
SelectablePart	qcustomplot.h	/^  enum SelectablePart { spNone        = 0      \/\/\/< None of the selectable parts$/;"	g	class:QCPAxis
SelectablePart	qcustomplot.h	/^  enum SelectablePart { spNone        = 0x000 \/\/\/< <tt>0x000<\/tt> None$/;"	g	class:QCPLegend
SelectionRectMode	qcustomplot.h	/^enum SelectionRectMode { srmNone    \/\/\/< The selection rect is disabled, and all mouse events/;"	g	namespace:QCP
SelectionType	qcustomplot.h	/^enum SelectionType { stNone                \/\/\/< The plottable is not selectable$/;"	g	namespace:QCP
SerializeWithCachedSizes	qc-message.pb.cc	/^void Imu::SerializeWithCachedSizes($/;"	f	class:Imu	typeref:typename:void
SerializeWithCachedSizes	qc-message.pb.cc	/^void Protocol::SerializeWithCachedSizes($/;"	f	class:Protocol	typeref:typename:void
SerializeWithCachedSizes	qc-message.pb.h	/^  void SerializeWithCachedSizes($/;"	p	class:Imu	typeref:typename:void
SerializeWithCachedSizes	qc-message.pb.h	/^  void SerializeWithCachedSizes($/;"	p	class:Protocol	typeref:typename:void
SetCachedSize	qc-message.pb.cc	/^void Imu::SetCachedSize(int size) const {$/;"	f	class:Imu	typeref:typename:void
SetCachedSize	qc-message.pb.cc	/^void Protocol::SetCachedSize(int size) const {$/;"	f	class:Protocol	typeref:typename:void
SetCachedSize	qc-message.pb.h	/^  void SetCachedSize(int size) const final;$/;"	p	class:Imu	typeref:typename:void
SetCachedSize	qc-message.pb.h	/^  void SetCachedSize(int size) const final;$/;"	p	class:Protocol	typeref:typename:void
SharedCtor	qc-message.pb.cc	/^void Imu::SharedCtor() {$/;"	f	class:Imu	typeref:typename:void
SharedCtor	qc-message.pb.cc	/^void Protocol::SharedCtor() {$/;"	f	class:Protocol	typeref:typename:void
SharedCtor	qc-message.pb.h	/^  void SharedCtor();$/;"	p	class:Imu	typeref:typename:void
SharedCtor	qc-message.pb.h	/^  void SharedCtor();$/;"	p	class:Protocol	typeref:typename:void
SharedDtor	qc-message.pb.cc	/^void Imu::SharedDtor() {$/;"	f	class:Imu	typeref:typename:void
SharedDtor	qc-message.pb.cc	/^void Protocol::SharedDtor() {$/;"	f	class:Protocol	typeref:typename:void
SharedDtor	qc-message.pb.h	/^  void SharedDtor();$/;"	p	class:Imu	typeref:typename:void
SharedDtor	qc-message.pb.h	/^  void SharedDtor();$/;"	p	class:Protocol	typeref:typename:void
SignChecker	spdlog/fmt/bundled/format.h	/^struct SignChecker$/;"	s	namespace:fmt::internal
SignChecker	spdlog/fmt/bundled/format.h	/^struct SignChecker<false>$/;"	s	namespace:fmt::internal
SignDomain	qcustomplot.h	/^enum SignDomain { sdNegative  \/\/\/< The negative sign domain, i.e. numbers smaller than zero$/;"	g	namespace:QCP
Size	imgui.ini	/^Size=400,400$/;"	k	section:Window
Size	imgui.ini	/^Size=550,680$/;"	k	section:Window
Size	imgui.ini	/^Size=650,490$/;"	k	section:Window
SizeConstraintRect	qcustomplot.h	/^  enum SizeConstraintRect { scrInnerRect \/\/\/< Minimum\/Maximum size constraints apply to inne/;"	g	class:QCPLayoutElement
SmoothMotorControlDeprecated	simple.pb-c.h	/^typedef struct _SmoothMotorControlDeprecated SmoothMotorControlDeprecated;$/;"	t	typeref:struct:_SmoothMotorControlDeprecated
SmoothMotorControlDeprecated	simple.proto	/^message SmoothMotorControlDeprecated {$/;"	m
SmoothMotorControlDeprecated_Closure	simple.pb-c.h	/^typedef void (*SmoothMotorControlDeprecated_Closure)$/;"	t	typeref:typename:void (*)(const SmoothMotorControlDeprecated * message,void * closure_data)
SpacingType	qcustomplot.h	/^  enum SpacingType { stAbsolute       \/\/\/< Bar spacing is in absolute pixels$/;"	g	class:QCPBarsGroup
SpecType	spdlog/fmt/bundled/format.h	/^    typedef Spec SpecType;$/;"	t	class:fmt::internal::ArgFormatterBase	typeref:typename:Spec
StInfo	simple.pb-c.h	/^} StInfo;$/;"	t	typeref:enum:_StInfo
StInfo	simple.proto	/^enum StInfo$/;"	g
StaticDescriptorInitializer	qc-message.pb.cc	/^  StaticDescriptorInitializer() {$/;"	f	struct:protobuf_qc_2dmessage_2eproto::StaticDescriptorInitializer	file:
StaticDescriptorInitializer	qc-message.pb.cc	/^struct StaticDescriptorInitializer {$/;"	s	namespace:protobuf_qc_2dmessage_2eproto	file:
StrError	spdlog/fmt/bundled/format.cc	/^    StrError(int err_code, char *&buf, std::size_t buf_size)$/;"	f	class:fmt::__anonf3b7881d0110::safe_strerror::StrError	file:
StrError	spdlog/fmt/bundled/format.cc	/^  class StrError {$/;"	c	function:fmt::__anonf3b7881d0110::safe_strerror	file:
StrFormatSpec	spdlog/fmt/bundled/format.h	/^    StrFormatSpec(const Char *str, unsigned width, FillChar fill)$/;"	f	class:fmt::StrFormatSpec
StrFormatSpec	spdlog/fmt/bundled/format.h	/^class StrFormatSpec : public AlignSpec$/;"	c	namespace:fmt
StringRef	spdlog/fmt/bundled/format.h	/^typedef BasicStringRef<char> StringRef;$/;"	t	namespace:fmt	typeref:typename:BasicStringRef<char>
StringValue	spdlog/fmt/bundled/format.h	/^    struct StringValue$/;"	s	struct:fmt::internal::Value
Supported	spdlog/fmt/bundled/format.h	/^    typedef Null<T> Supported;$/;"	t	struct:fmt::internal::WCharHelper	typeref:typename:Null<T>
Supported	spdlog/fmt/bundled/format.h	/^    typedef T Supported;$/;"	t	struct:fmt::internal::WCharHelper	typeref:typename:T
Swap	qc-message.pb.cc	/^void Imu::Swap(Imu* other) {$/;"	f	class:Imu	typeref:typename:void
Swap	qc-message.pb.cc	/^void Protocol::Swap(Protocol* other) {$/;"	f	class:Protocol	typeref:typename:void
Swap	qc-message.pb.h	/^  void Swap(Imu* other);$/;"	p	class:Imu	typeref:typename:void
Swap	qc-message.pb.h	/^  void Swap(Protocol* other);$/;"	p	class:Protocol	typeref:typename:void
SystemError	spdlog/fmt/bundled/format.h	/^    SystemError() {}$/;"	f	class:fmt::SystemError
SystemError	spdlog/fmt/bundled/format.h	/^    SystemError(int error_code, CStringRef message)$/;"	f	class:fmt::SystemError
SystemError	spdlog/fmt/bundled/format.h	/^class SystemError : public internal::RuntimeError$/;"	c	namespace:fmt
TOF	simple.proto	/^    TOF = 2;	\/\/0x02$/;"	e
TO_BLE__INIT	simple.pb-c.h	/^#define TO_BLE__INIT /;"	d
TO_HI__INIT	simple.pb-c.h	/^#define TO_HI__INIT /;"	d
TO_HOST__INIT	simple.pb-c.h	/^#define TO_HOST__INIT /;"	d
TO_ST__INIT	simple.pb-c.h	/^#define TO_ST__INIT /;"	d
TRUE	protobuf-c/protobuf-c.c	/^#define TRUE	/;"	d	file:
TYPES	spdlog/fmt/bundled/core.h	/^    static constexpr long long TYPES = get_types();$/;"	m	class:format_arg_store	typeref:typename:long long
TYPES	spdlog/fmt/bundled/core.h	/^const long long format_arg_store<Context, Args...>::TYPES = get_types();$/;"	m	class:format_arg_store<Context, Args...>	typeref:typename:const long long
TableStruct	qc-message.pb.h	/^struct TableStruct {$/;"	s	namespace:protobuf_qc_2dmessage_2eproto
TargetType	spdlog/fmt/bundled/printf.h	/^        typedef typename internal::Conditional<is_same<T, void>::value, U, T>::type TargetType;$/;"	t	function:fmt::internal::ArgConverter::visit_any_int	typeref:typename:internal::Conditional<is_same<T,void>::value,U,T>::type
ThousandsSep	spdlog/fmt/bundled/format.h	/^    explicit ThousandsSep(fmt::StringRef sep)$/;"	f	class:fmt::internal::ThousandsSep
ThousandsSep	spdlog/fmt/bundled/format.h	/^class ThousandsSep$/;"	c	namespace:fmt::internal
TickLabelData	qcustomplot.h	/^  struct TickLabelData$/;"	s	class:QCPAxisPainterPrivate
TickStepStrategy	qcustomplot.h	/^  enum TickStepStrategy$/;"	g	class:QCPAxisTicker
TimeUnit	qcustomplot.h	/^  enum TimeUnit { tuMilliseconds \/\/\/< Milliseconds, one thousandth of a second (%%z in \\ref /;"	g	class:QCPAxisTickerTime
ToBle	simple.pb-c.h	/^typedef struct _ToBle ToBle;$/;"	t	typeref:struct:_ToBle
ToBle	simple.proto	/^message ToBle {$/;"	m
ToBle_Closure	simple.pb-c.h	/^typedef void (*ToBle_Closure)$/;"	t	typeref:typename:void (*)(const ToBle * message,void * closure_data)
ToHi	simple.pb-c.h	/^typedef struct _ToHi ToHi;$/;"	t	typeref:struct:_ToHi
ToHi	simple.proto	/^message ToHi {$/;"	m
ToHi_Closure	simple.pb-c.h	/^typedef void (*ToHi_Closure)$/;"	t	typeref:typename:void (*)(const ToHi * message,void * closure_data)
ToHost	simple.pb-c.h	/^typedef struct _ToHost ToHost;$/;"	t	typeref:struct:_ToHost
ToHost	simple.proto	/^message ToHost {$/;"	m
ToHost_Closure	simple.pb-c.h	/^typedef void (*ToHost_Closure)$/;"	t	typeref:typename:void (*)(const ToHost * message,void * closure_data)
ToSt	simple.pb-c.h	/^typedef struct _ToSt ToSt;$/;"	t	typeref:struct:_ToSt
ToSt	simple.proto	/^message ToSt {$/;"	m
ToSt_Closure	simple.pb-c.h	/^typedef void (*ToSt_Closure)$/;"	t	typeref:typename:void (*)(const ToSt * message,void * closure_data)
Trace	spdlogger.h	/^	void Trace(const char* message, const Args&... args)$/;"	f	namespace:util	typeref:typename:void
TracerStyle	qcustomplot.h	/^  enum TracerStyle { tsNone        \/\/\/< The tracer is not visible$/;"	g	class:QCPItemTracer
Type	spdlog/fmt/bundled/format.h	/^    enum Type$/;"	g	struct:fmt::internal::Value
Type	spdlog/fmt/bundled/format.h	/^    typedef Arg Type[N + 1]; \/\/ +1 for the list end Arg::NONE$/;"	t	struct:fmt::internal::ArgArray	typeref:typename:Arg[N+1]
Type	spdlog/fmt/bundled/format.h	/^    typedef T Type;$/;"	t	struct:fmt::internal::MakeUnsigned	typeref:typename:T
Type	spdlog/fmt/bundled/format.h	/^    typedef Value Type[N > 0 ? N : +1];$/;"	t	struct:fmt::internal::ArgArray	typeref:typename:Value[N>0?N:+1]
Type	spdlog/fmt/bundled/format.h	/^    typedef uint32_t Type;$/;"	t	struct:fmt::internal::TypeSelector	typeref:typename:uint32_t
Type	spdlog/fmt/bundled/format.h	/^    typedef uint64_t Type;$/;"	t	struct:fmt::internal::TypeSelector	typeref:typename:uint64_t
Type	spdlog/fmt/bundled/posix.h	/^    typedef locale_t Type;$/;"	t	class:fmt::Locale	typeref:typename:locale_t
TypeSelector	spdlog/fmt/bundled/format.h	/^struct TypeSelector$/;"	s	namespace:fmt::internal
TypeSelector	spdlog/fmt/bundled/format.h	/^struct TypeSelector<false>$/;"	s	namespace:fmt::internal
TypeSpec	spdlog/fmt/bundled/format.h	/^struct TypeSpec : EmptySpec$/;"	s	namespace:fmt
UINT	spdlog/fmt/bundled/format.h	/^        UINT,$/;"	e	enum:fmt::internal::Value::Type
ULONG_LONG	spdlog/fmt/bundled/format.h	/^        ULONG_LONG,$/;"	e	enum:fmt::internal::Value::Type
ULongLong	spdlog/fmt/bundled/format.h	/^FMT_GCC_EXTENSION typedef unsigned long long ULongLong;$/;"	t	namespace:fmt	typeref:typename:unsigned long long
UTF16ToUTF8	spdlog/fmt/bundled/format.cc	/^FMT_FUNC internal::UTF16ToUTF8::UTF16ToUTF8(WStringRef s) {$/;"	f	class:fmt::internal::UTF16ToUTF8	typeref:typename:FMT_FUNC
UTF16ToUTF8	spdlog/fmt/bundled/format.h	/^    FMT_API explicit UTF16ToUTF8(WStringRef s);$/;"	p	class:fmt::internal::UTF16ToUTF8	typeref:typename:FMT_API
UTF16ToUTF8	spdlog/fmt/bundled/format.h	/^    UTF16ToUTF8() {}$/;"	f	class:fmt::internal::UTF16ToUTF8
UTF16ToUTF8	spdlog/fmt/bundled/format.h	/^class UTF16ToUTF8$/;"	c	namespace:fmt::internal
UTF8ToUTF16	spdlog/fmt/bundled/format.cc	/^FMT_FUNC internal::UTF8ToUTF16::UTF8ToUTF16(StringRef s) {$/;"	f	class:fmt::internal::UTF8ToUTF16	typeref:typename:FMT_FUNC
UTF8ToUTF16	spdlog/fmt/bundled/format.h	/^    FMT_API explicit UTF8ToUTF16(StringRef s);$/;"	p	class:fmt::internal::UTF8ToUTF16	typeref:typename:FMT_API
UTF8ToUTF16	spdlog/fmt/bundled/format.h	/^class UTF8ToUTF16$/;"	c	namespace:fmt::internal
UTF8_ACCEPT	json.hpp	/^    static constexpr uint8_t UTF8_ACCEPT = 0;$/;"	m	class:nlohmann::detail::serializer	typeref:typename:uint8_t
UTF8_REJECT	json.hpp	/^    static constexpr uint8_t UTF8_REJECT = 1;$/;"	m	class:nlohmann::detail::serializer	typeref:typename:uint8_t
UdlArg	spdlog/fmt/bundled/format.h	/^struct UdlArg$/;"	s	namespace:fmt::internal
UdlFormat	spdlog/fmt/bundled/format.h	/^struct UdlFormat$/;"	s	namespace:fmt::internal
Ui	mainwindow.h	/^namespace Ui {$/;"	n
Ui	mdi-child.h	/^namespace Ui {$/;"	n
Unsigned	spdlog/fmt/bundled/printf.h	/^                typedef typename internal::MakeUnsigned<TargetType>::Type Unsigned;$/;"	t	function:fmt::internal::ArgConverter::visit_any_int	typeref:typename:internal::MakeUnsigned<TargetType>::Type
UnsignedStreamSize	spdlog/fmt/bundled/ostream.cc	/^  typedef internal::MakeUnsigned<std::streamsize>::Type UnsignedStreamSize;$/;"	t	function:fmt::internal::write	typeref:typename:internal::MakeUnsigned<std::streamsize>::Type	file:
UnsignedType	spdlog/fmt/bundled/format.h	/^    typedef typename internal::IntTraits<T>::MainType UnsignedType;$/;"	t	function:fmt::BasicWriter::write_int	typeref:typename:internal::IntTraits<T>::MainType
UnsignedType	spdlog/fmt/bundled/printf.h	/^        typedef typename internal::IntTraits<T>::MainType UnsignedType;$/;"	t	function:fmt::internal::WidthHandler::visit_any_int	typeref:typename:internal::IntTraits<T>::MainType
Unsupported	spdlog/fmt/bundled/format.h	/^    typedef Null<T> Unsupported;$/;"	t	struct:fmt::internal::WCharHelper	typeref:typename:Null<T>
Unsupported	spdlog/fmt/bundled/format.h	/^    typedef T Unsupported;$/;"	t	struct:fmt::internal::WCharHelper	typeref:typename:T
UpdatePhase	qcustomplot.h	/^  enum UpdatePhase { upPreparation \/\/\/< Phase used for any type of preparation that needs to /;"	g	class:QCPLayoutElement
VERIFY	protocol-struct.h	/^    VERIFY = 3,$/;"	e	enum:FirmwareUpdateMode
VIDEO_PACKET	tcp-packet.h	/^    VIDEO_PACKET = 5,$/;"	e	enum:__anonce98fa070203
Value	spdlog/fmt/bundled/format.h	/^struct Value$/;"	s	namespace:fmt::internal
WArrayWriter	spdlog/fmt/bundled/format.h	/^typedef BasicArrayWriter<wchar_t> WArrayWriter;$/;"	t	namespace:fmt	typeref:typename:BasicArrayWriter<wchar_t>
WCStringRef	spdlog/fmt/bundled/format.h	/^typedef BasicCStringRef<wchar_t> WCStringRef;$/;"	t	namespace:fmt	typeref:typename:BasicCStringRef<wchar_t>
WCharHelper	spdlog/fmt/bundled/format.h	/^struct WCharHelper$/;"	s	namespace:fmt::internal
WCharHelper	spdlog/fmt/bundled/format.h	/^struct WCharHelper<T, wchar_t>$/;"	s	namespace:fmt::internal
WHITE	spdlog/fmt/bundled/format.h	/^    WHITE$/;"	e	enum:fmt::Color
WHITE	spdlog/sinks/wincolor_sink.h	/^    const WORD WHITE = FOREGROUND_RED | FOREGROUND_GREEN | FOREGROUND_BLUE;$/;"	m	class:spdlog::sinks::wincolor_sink	typeref:typename:const WORD
WIN32_LEAN_AND_MEAN	spdlog/details/os.h	/^#define WIN32_LEAN_AND_MEAN$/;"	d
WIN32_LEAN_AND_MEAN	spdlog/fmt/bundled/format-inl.h	/^#define WIN32_LEAN_AND_MEAN$/;"	d
WIN32_LEAN_AND_MEAN	spdlog/fmt/bundled/format.cc	/^#  define WIN32_LEAN_AND_MEAN$/;"	d	file:
WIN32_LEAN_AND_MEAN	spdlog/fmt/bundled/posix.cc	/^#  define WIN32_LEAN_AND_MEAN$/;"	d	file:
WMemoryWriter	spdlog/fmt/bundled/format.h	/^typedef BasicMemoryWriter<wchar_t> WMemoryWriter;$/;"	t	namespace:fmt	typeref:typename:BasicMemoryWriter<wchar_t>
WRESET_COLOR	spdlog/fmt/bundled/format-inl.h	/^const wchar_t basic_data<T>::WRESET_COLOR[] = L"\\x1b[0m";$/;"	m	class:internal::basic_data<T>	typeref:typename:const wchar_t[]
WRONLY	spdlog/fmt/bundled/posix.h	/^        WRONLY = FMT_POSIX(O_WRONLY), \/\/ Open for writing only.$/;"	e	enum:fmt::File::__anonc4b4f0c90103
WSTRING	spdlog/fmt/bundled/format.h	/^        WSTRING,$/;"	e	enum:fmt::internal::Value::Type
WStringRef	spdlog/fmt/bundled/format.h	/^typedef BasicStringRef<wchar_t> WStringRef;$/;"	t	namespace:fmt	typeref:typename:BasicStringRef<wchar_t>
WWriter	spdlog/fmt/bundled/format.h	/^typedef BasicWriter<wchar_t> WWriter;$/;"	t	namespace:fmt	typeref:typename:BasicWriter<wchar_t>
WidthHandler	spdlog/fmt/bundled/printf.h	/^    explicit WidthHandler(FormatSpec &spec)$/;"	f	class:fmt::internal::WidthHandler
WidthHandler	spdlog/fmt/bundled/printf.h	/^class WidthHandler : public ArgVisitor<WidthHandler, unsigned>$/;"	c	namespace:fmt::internal
WidthSpec	spdlog/fmt/bundled/format.h	/^    WidthSpec(unsigned width, wchar_t fill)$/;"	f	struct:fmt::WidthSpec
WidthSpec	spdlog/fmt/bundled/format.h	/^struct WidthSpec$/;"	s	namespace:fmt
WidthType	qcustomplot.h	/^  enum WidthType { wtAbsolute       \/\/\/< Bar width is in absolute pixels$/;"	g	class:QCPBars
WidthType	qcustomplot.h	/^  enum WidthType { wtAbsolute       \/\/\/< width is in absolute pixels$/;"	g	class:QCPFinancial
Window	imgui.ini	/^[Window][Another Window]$/;"	s
Window	imgui.ini	/^[Window][Debug##Default]$/;"	s
Window	imgui.ini	/^[Window][ImGui Demo]$/;"	s
WindowsError	spdlog/fmt/bundled/format.h	/^    WindowsError(int error_code, CStringRef message)$/;"	f	class:fmt::WindowsError
WindowsError	spdlog/fmt/bundled/format.h	/^class WindowsError : public SystemError$/;"	c	namespace:fmt
Writer	spdlog/fmt/bundled/format.h	/^typedef BasicWriter<char> Writer;$/;"	t	namespace:fmt	typeref:typename:BasicWriter<char>
YCbCr_to_RGB_kernel	stb_image.h	/^   void (*YCbCr_to_RGB_kernel)(stbi_uc *out, const stbi_uc *y, const stbi_uc *pcb, const stbi_uc/;"	m	struct:__anon84e4e8860608	typeref:typename:void (*)(stbi_uc * out,const stbi_uc * y,const stbi_uc * pcb,const stbi_uc * pcr,int count,int step)
YELLOW	spdlog/fmt/bundled/format.h	/^    YELLOW,$/;"	e	enum:fmt::Color
YELLOW	spdlog/sinks/wincolor_sink.h	/^    const WORD YELLOW = FOREGROUND_RED | FOREGROUND_GREEN;$/;"	m	class:spdlog::sinks::wincolor_sink	typeref:typename:const WORD
Yes	spdlog/fmt/bundled/format.h	/^typedef char Yes[1];$/;"	t	namespace:fmt::internal	typeref:typename:char[1]
_404	http-request.h	/^    _404 = 404,$/;"	e	enum:HTTPErrors
_BandwidthTest	simple.pb-c.h	/^struct  _BandwidthTest$/;"	s
_CRT_SECURE_NO_WARNINGS	spdlog/fmt/bundled/posix.cc	/^# define _CRT_SECURE_NO_WARNINGS$/;"	d	file:
_EncoderControl	simple.pb-c.h	/^struct  _EncoderControl$/;"	s
_FirmwareUpdate	simple.pb-c.h	/^struct  _FirmwareUpdate$/;"	s
_FirmwareUpdateFeedback	simple.pb-c.h	/^struct  _FirmwareUpdateFeedback$/;"	s
_Imu_default_instance_	qc-message.pb.cc	/^} _Imu_default_instance_;$/;"	v	typeref:class:ImuDefaultTypeInternal
_LedControl	simple.pb-c.h	/^struct  _LedControl$/;"	s
_Protocol_default_instance_	qc-message.pb.cc	/^} _Protocol_default_instance_;$/;"	v	typeref:class:ProtocolDefaultTypeInternal
_ReqCompleteSetup	simple.pb-c.h	/^struct  _ReqCompleteSetup$/;"	s
_RoughMotorControl	simple.pb-c.h	/^struct  _RoughMotorControl$/;"	s
_RspServiceKey	simple.pb-c.h	/^struct  _RspServiceKey$/;"	s
_SH_DENYNO	spdlog/fmt/bundled/posix.cc	/^#  define _SH_DENYNO /;"	d	file:
_ScannedMember	protobuf-c/protobuf-c.c	/^struct _ScannedMember {$/;"	s	file:
_SmoothMotorControlDeprecated	simple.pb-c.h	/^struct  _SmoothMotorControlDeprecated$/;"	s
_StInfo	simple.pb-c.h	/^typedef enum _StInfo {$/;"	g
_ToBle	simple.pb-c.h	/^struct  _ToBle$/;"	s
_ToHi	simple.pb-c.h	/^struct  _ToHi$/;"	s
_ToHost	simple.pb-c.h	/^struct  _ToHost$/;"	s
_ToSt	simple.pb-c.h	/^struct  _ToSt$/;"	s
__STDC_CONTANT_MACROS	ble.h	/^#define __STDC_CONTANT_MACROS$/;"	d
__STDC_FORMAT_MACROS	ble.h	/^#define __STDC_FORMAT_MACROS$/;"	d
__anon0f88c9600102	gui.h	/^            std::shared_ptr<ClientWindow> cw(new ClientWindow(), [](ClientWindow* p) { delete p;/;"	f	function:GUI::addClient	file:
__anon1d557fc20102	spdlogger.h	/^			std::call_once(initFlag, []() { instance = new Log(); });$/;"	f	function:util::Log::getInstance	file:
__anon1ea8787f0103	spdlog/fmt/bundled/format.h	/^{$/;"	g	namespace:fmt::internal
__anon1ea8787f020a	spdlog/fmt/bundled/format.h	/^    {$/;"	u	struct:fmt::internal::Value
__anon1ea8787f0303	spdlog/fmt/bundled/format.h	/^    {$/;"	g	struct:fmt::internal::ConvertToIntImpl
__anon1ea8787f0403	spdlog/fmt/bundled/format.h	/^    {$/;"	g	struct:fmt::internal::ConvertToIntImpl2
__anon1ea8787f0503	spdlog/fmt/bundled/format.h	/^    {$/;"	g	struct:fmt::internal::ConvertToIntImpl2
__anon1ea8787f0603	spdlog/fmt/bundled/format.h	/^    {$/;"	g	struct:fmt::internal::ConvertToInt
__anon1ea8787f0703	spdlog/fmt/bundled/format.h	/^    {$/;"	g	struct:fmt::internal::ConvertToInt
__anon1ea8787f0803	spdlog/fmt/bundled/format.h	/^    {$/;"	g	struct:fmt::internal::Not
__anon1ea8787f0903	spdlog/fmt/bundled/format.h	/^    {$/;"	g	struct:fmt::internal::Not
__anon1ea8787f0a03	spdlog/fmt/bundled/format.h	/^    {$/;"	g	struct:fmt::internal::FalseType
__anon1ea8787f0b0a	spdlog/fmt/bundled/format.h	/^    {$/;"	u	class:fmt::ArgList
__anon1ea8787f0c03	spdlog/fmt/bundled/format.h	/^    {$/;"	g	class:fmt::ArgList
__anon1ea8787f0d03	spdlog/fmt/bundled/format.h	/^{$/;"	g	namespace:fmt
__anon1ea8787f0e03	spdlog/fmt/bundled/format.h	/^    {$/;"	g	function:fmt::BasicWriter::write_double
__anon1ea8787f0f03	spdlog/fmt/bundled/format.h	/^    {$/;"	g	class:fmt::FormatInt
__anon2b475a090103	spdlog/fmt/bundled/printf.h	/^    {$/;"	g	struct:fmt::internal::is_same
__anon2b475a090203	spdlog/fmt/bundled/printf.h	/^    {$/;"	g	struct:fmt::internal::is_same
__anon3a856c1f0103	protocol-struct.h	/^    enum {value=0xBA};$/;"	g	struct:CONTROL_ST_AVOID
__anon3a856c1f0203	protocol-struct.h	/^    enum {value=0xCA};$/;"	g	struct:CONTROL_ABS_ROTATE
__anon3a856c1f0303	protocol-struct.h	/^    enum {value=0xDA};$/;"	g	struct:CONTROL_REL_ROTATE
__anon3a856c1f0403	protocol-struct.h	/^    enum {value=0xEA};$/;"	g	struct:CONTROL_STRAIGHT
__anon578f9eca0102	license-session.cpp	/^                                 {$/;"	f	function:LicenseSession::sendStream	file:
__anon5b5309a70110	spdlog/fmt/bundled/posix.cc	/^namespace {$/;"	n	file:
__anon5b5309a70203	spdlog/fmt/bundled/posix.cc	/^  enum { DEFAULT_CAPACITY = 65536 };$/;"	g	function:fmt::File::pipe	file:
__anon62fc15510103	spdlog/fmt/bundled/ostream.h	/^    {$/;"	g	struct:fmt::internal::ConvertToIntImpl
__anon6ef9a7c00102	qc-session.h	/^            m_pktBody.reset((PKT*)new uint8_t[sizeof(PKT) + m_pktHeader.dataLen], [](PKT* p) { $/;"	f	function:QcSession::readPacketHeader	file:
__anon6ef9a7c00203	qc-session.h	/^        enum { max_length = 1024 };$/;"	g	class:QcSession
__anon7a6731110110	http-request.h	/^namespace {$/;"	n
__anon7a6731110202	http-request.h	/^                const tcp::resolver::iterator& result) {$/;"	f	function:HTTPSession::run	file:
__anon7a6731110302	http-request.h	/^                    {$/;"	f	function:HTTPSession::run::__anon7a6731110202	file:
__anon7a6731110402	http-request.h	/^                            {$/;"	f	function:HTTPSession::run::__anon7a6731110202::__anon7a6731110302	file:
__anon7a6731110502	http-request.h	/^                                    [this, onRead, self](boost::system::error_code ec, std::size/;"	f	function:HTTPSession::run::__anon7a6731110202::__anon7a6731110302::__anon7a6731110402	file:
__anon7eb69b890102	ble.cpp	/^        asio::async_write(m_port, buffer, [this, self = shared_from_this()](boost::system::error/;"	f	function:BLESession::sender	file:
__anon7eb69b890202	ble.cpp	/^    m_io.post([this, self = shared_from_this()]() {$/;"	f	function:BLESession::sender	file:
__anon7eb69b890302	ble.cpp	/^                m_pktBody = std::shared_ptr<PKT>((PKT*)malloc(sizeof(PKT) + length), [](PKT* p) /;"	f	function:BLESession::innerProtocol	file:
__anon7eb69b890402	ble.cpp	/^        [this, self = shared_from_this()](std::string s, boost::system::error_code ec) {$/;"	f	function:BLESession::connectAuthServer	file:
__anon7eb69b890502	ble.cpp	/^                    m_recoveryTimer.async_wait([this, self = shared_from_this()](const boost::sy/;"	f	function:BLESession::connectAuthServer::__anon7eb69b890402	file:
__anon7eb69b890602	ble.cpp	/^                GVar::get()->signalSession->connectSignalServer(host, port, "hello", [](int b) {$/;"	f	function:BLESession::connectAuthServer::__anon7eb69b890402	file:
__anon84e4e8860103	stb_image.h	/^{$/;"	g
__anon84e4e8860208	stb_image.h	/^{$/;"	s
__anon84e4e8860308	stb_image.h	/^{$/;"	s
__anon84e4e8860403	stb_image.h	/^{$/;"	g
__anon84e4e8860508	stb_image.h	/^{$/;"	s
__anon84e4e8860608	stb_image.h	/^{$/;"	s
__anon84e4e8860708	stb_image.h	/^   {$/;"	s	struct:__anon84e4e8860608
__anon84e4e8860808	stb_image.h	/^{$/;"	s
__anon84e4e8860908	stb_image.h	/^{$/;"	s
__anon84e4e8860a08	stb_image.h	/^{$/;"	s
__anon84e4e8860b08	stb_image.h	/^{$/;"	s
__anon84e4e8860c08	stb_image.h	/^{$/;"	s
__anon84e4e8860d03	stb_image.h	/^enum {$/;"	g
__anon84e4e8860e08	stb_image.h	/^{$/;"	s
__anon84e4e8860f08	stb_image.h	/^{$/;"	s
__anon84e4e8861008	stb_image.h	/^{$/;"	s
__anon84e4e8861108	stb_image.h	/^{$/;"	s
__anonb519b34f0110	spdlog/fmt/bundled/format-inl.h	/^namespace {$/;"	n
__anonc4b4f0c90103	spdlog/fmt/bundled/posix.h	/^    {$/;"	g	class:fmt::File
__anonc4b4f0c90203	spdlog/fmt/bundled/posix.h	/^    {$/;"	g	class:fmt::Locale
__anonce98fa070103	tcp-packet.h	/^enum {$/;"	g
__anonce98fa070203	tcp-packet.h	/^enum {$/;"	g
__anonce98fa070308	tcp-packet.h	/^{$/;"	s
__anonce98fa070408	tcp-packet.h	/^{$/;"	s
__anond4f0254c0103	protobuf-c/protobuf-c.h	/^typedef enum {$/;"	g
__anond4f0254c0203	protobuf-c/protobuf-c.h	/^typedef enum {$/;"	g
__anond4f0254c0303	protobuf-c/protobuf-c.h	/^typedef enum {$/;"	g
__anond4f0254c0403	protobuf-c/protobuf-c.h	/^typedef enum {$/;"	g
__anone0083d190102	spdlog/details/logger_impl.h	/^    _err_handler = [this](const std::string &msg) { this->_default_err_handler(msg); };$/;"	f	function:spdlog::logger::logger	file:
__anonee2ce1d50102	json.hpp	/^    {$/;"	f	function:nlohmann::detail::from_json	file:
__anonee2ce1d50202	json.hpp	/^    {$/;"	f	function:nlohmann::detail::from_json_array_impl	file:
__anonee2ce1d50302	json.hpp	/^    {$/;"	f	function:nlohmann::detail::from_json_array_impl	file:
__anonee2ce1d50402	json.hpp	/^    {$/;"	f	function:nlohmann::detail::from_json	file:
__anonee2ce1d50510	json.hpp	/^{$/;"	n	namespace:nlohmann
__anonee2ce1d50610	json.hpp	/^{$/;"	n	namespace:nlohmann
__anonee2ce1d50702	json.hpp	/^        {$/;"	f	function:nlohmann::detail::input_adapter::input_adapter	file:
__anonee2ce1d50802	json.hpp	/^        {$/;"	f	function:nlohmann::detail::binary_reader::get_string	file:
__anonee2ce1d50902	json.hpp	/^        {$/;"	f	function:nlohmann::detail::binary_reader::get_cbor_array	file:
__anonee2ce1d50a02	json.hpp	/^        {$/;"	f	function:nlohmann::detail::binary_reader::get_cbor_object	file:
__anonee2ce1d50b02	json.hpp	/^        {$/;"	f	function:nlohmann::detail::binary_reader::get_msgpack_array	file:
__anonee2ce1d50c02	json.hpp	/^        {$/;"	f	function:nlohmann::detail::binary_reader::get_msgpack_object	file:
__anonee2ce1d50d02	json.hpp	/^                    {$/;"	f	function:nlohmann::detail::binary_reader::get_ubjson_array	file:
__anonee2ce1d50e02	json.hpp	/^                {$/;"	f	function:nlohmann::detail::binary_reader::get_ubjson_array	file:
__anonee2ce1d50f02	json.hpp	/^                {$/;"	f	function:nlohmann::detail::binary_reader::get_ubjson_object	file:
__anonee2ce1d51002	json.hpp	/^                {$/;"	f	function:nlohmann::detail::binary_reader::get_ubjson_object	file:
__anonee2ce1d51102	json.hpp	/^                    {$/;"	f	function:nlohmann::detail::binary_writer::write_ubjson	file:
__anonee2ce1d51202	json.hpp	/^                    {$/;"	f	function:nlohmann::detail::binary_writer::write_ubjson	file:
__anonee2ce1d51302	json.hpp	/^        {$/;"	f	function:nlohmann::detail::serializer::dump_float	file:
__anonee2ce1d51402	json.hpp	/^        {$/;"	f	function:nlohmann::json_pointer::to_string	file:
__anonee2ce1d51502	json.hpp	/^                {$/;"	f	function:nlohmann::json_pointer::get_unchecked	file:
__anonee2ce1d51602	json.hpp	/^        {$/;"	f	function:nlohmann::basic_json::create	file:
__anonee2ce1d51702	json.hpp	/^        {$/;"	f	function:nlohmann::basic_json::basic_json	file:
__anonee2ce1d51802	json.hpp	/^            {$/;"	f	function:nlohmann::basic_json::basic_json	file:
__anonee2ce1d51902	json.hpp	/^        {$/;"	f	function:nlohmann::basic_json::patch	file:
__anonee2ce1d51a02	json.hpp	/^        {$/;"	f	function:nlohmann::basic_json::patch	file:
__anonee2ce1d51b02	json.hpp	/^        {$/;"	f	function:nlohmann::basic_json::patch	file:
__anonee2ce1d51c02	json.hpp	/^            {$/;"	f	function:nlohmann::basic_json::patch	typeref:typename:basic_json &	file:
__anonef64315f0103	spdlog/fmt/bundled/core.h	/^    {$/;"	g	struct:internal::convert_to_int
__anonef64315f020a	spdlog/fmt/bundled/core.h	/^    {$/;"	u	class:internal::value
__anonef64315f0303	spdlog/fmt/bundled/core.h	/^{$/;"	g	namespace:internal
__anonef64315f040a	spdlog/fmt/bundled/core.h	/^    {$/;"	u	class:basic_format_args
__anonf23c278d0102	spdlog/details/mpmc_blocking_q.h	/^            pop_cv_.wait(lock, [this] { return this->q_.size() < this->max_items_; });$/;"	f	function:spdlog::details::mpmc_bounded_queue::enqueue	file:
__anonf23c278d0202	spdlog/details/mpmc_blocking_q.h	/^            if (!push_cv_.wait_for(lock, wait_duration, [this] { return this->q_.size() > 0; }))$/;"	f	function:spdlog::details::mpmc_bounded_queue::dequeue_for	file:
__anonf3b7881d0110	spdlog/fmt/bundled/format.cc	/^namespace {$/;"	n	namespace:fmt	file:
__has_feature	spdlog/details/os.h	/^#define __has_feature(/;"	d
_async_log_helper	spdlog/async_logger.h	/^    std::unique_ptr<details::async_log_helper> _async_log_helper;$/;"	m	class:spdlog::SPDLOG_FINAL	typeref:typename:std::unique_ptr<details::async_log_helper>
_async_mode	spdlog/details/registry.h	/^    bool _async_mode = false;$/;"	m	class:spdlog::details::registry_t	typeref:typename:bool
_async_q_size	spdlog/details/registry.h	/^    size_t _async_q_size = 0;$/;"	m	class:spdlog::details::registry_t	typeref:typename:size_t
_base_filename	spdlog/contrib/sinks/step_file_sink.h	/^    const filename_t _base_filename;$/;"	m	class:spdlog::sinks::SPDLOG_FINAL	typeref:typename:const filename_t
_base_filename	spdlog/sinks/file_sinks.h	/^    filename_t _base_filename;$/;"	m	class:spdlog::sinks::SPDLOG_FINAL	typeref:typename:filename_t
_ch	spdlog/details/pattern_formatter_impl.h	/^    char _ch;$/;"	m	class:spdlog::details::SPDLOG_FINAL	typeref:typename:char
_current_filename	spdlog/contrib/sinks/step_file_sink.h	/^    filename_t _current_filename;$/;"	m	class:spdlog::sinks::SPDLOG_FINAL	typeref:typename:filename_t
_current_size	spdlog/contrib/sinks/step_file_sink.h	/^    unsigned _current_size;$/;"	m	class:spdlog::sinks::SPDLOG_FINAL	typeref:typename:unsigned
_current_size	spdlog/sinks/file_sinks.h	/^    std::size_t _current_size;$/;"	m	class:spdlog::sinks::SPDLOG_FINAL	typeref:typename:std::size_t
_default_err_handler	spdlog/details/logger_impl.h	/^inline void spdlog::logger::_default_err_handler(const std::string &msg)$/;"	f	class:spdlog::logger	typeref:typename:void
_default_err_handler	spdlog/logger.h	/^    virtual void _default_err_handler(const std::string &msg);$/;"	p	class:spdlog::logger	typeref:typename:void
_ecvt_s	spdlog/fmt/bundled/format.h	/^inline DummyInt _ecvt_s(...)$/;"	f	namespace:fmt::internal	typeref:typename:DummyInt
_eol	spdlog/formatter.h	/^    const std::string _eol;$/;"	m	class:spdlog::SPDLOG_FINAL	typeref:typename:const std::string
_err_handler	spdlog/details/async_log_helper.h	/^    log_err_handler _err_handler;$/;"	m	class:spdlog::details::async_log_helper	typeref:typename:log_err_handler
_err_handler	spdlog/details/registry.h	/^    log_err_handler _err_handler;$/;"	m	class:spdlog::details::registry_t	typeref:typename:log_err_handler
_err_handler	spdlog/logger.h	/^    log_err_handler _err_handler;$/;"	m	class:spdlog::logger	typeref:typename:log_err_handler
_ext	spdlog/contrib/sinks/step_file_sink.h	/^    filename_t _ext;$/;"	m	class:spdlog::sinks::SPDLOG_FINAL	typeref:typename:filename_t
_fd	spdlog/details/file_helper.h	/^    FILE *_fd{nullptr};$/;"	m	class:spdlog::details::file_helper	typeref:typename:FILE *
_file_helper	spdlog/contrib/sinks/step_file_sink.h	/^    details::file_helper _file_helper;$/;"	m	class:spdlog::sinks::SPDLOG_FINAL	typeref:typename:details::file_helper
_file_helper	spdlog/sinks/file_sinks.h	/^    details::file_helper _file_helper;$/;"	m	class:spdlog::sinks::SPDLOG_FINAL	typeref:typename:details::file_helper
_filename	spdlog/details/file_helper.h	/^    filename_t _filename;$/;"	m	class:spdlog::details::file_helper	typeref:typename:filename_t
_finite	spdlog/fmt/bundled/format.h	/^inline DummyInt _finite(...)$/;"	f	namespace:fmt::internal	typeref:typename:DummyInt
_flush	spdlog/contrib/sinks/step_file_sink.h	/^    void _flush() override$/;"	f	class:spdlog::sinks::SPDLOG_FINAL	typeref:typename:void
_flush	spdlog/sinks/ansicolor_sink.h	/^    void _flush() override$/;"	f	class:spdlog::sinks::ansicolor_sink	typeref:typename:void
_flush	spdlog/sinks/base_sink.h	/^    virtual void _flush() = 0;$/;"	p	class:spdlog::sinks::base_sink	typeref:typename:void
_flush	spdlog/sinks/dist_sink.h	/^    void _flush() override$/;"	f	class:spdlog::sinks::dist_sink	typeref:typename:void
_flush	spdlog/sinks/file_sinks.h	/^    void _flush() override$/;"	f	class:spdlog::sinks::SPDLOG_FINAL	typeref:typename:void
_flush	spdlog/sinks/msvc_sink.h	/^    void _flush() override {}$/;"	f	class:spdlog::sinks::msvc_sink	typeref:typename:void
_flush	spdlog/sinks/null_sink.h	/^    void _flush() override {}$/;"	f	class:spdlog::sinks::null_sink	typeref:typename:void
_flush	spdlog/sinks/ostream_sink.h	/^    void _flush() override$/;"	f	class:spdlog::sinks::ostream_sink	typeref:typename:void
_flush	spdlog/sinks/stdout_sinks.h	/^    void _flush() override$/;"	f	class:spdlog::sinks::SPDLOG_FINAL	typeref:typename:void
_flush	spdlog/sinks/wincolor_sink.h	/^    void _flush() override$/;"	f	class:spdlog::sinks::wincolor_sink	typeref:typename:void
_flush_interval_ms	spdlog/details/async_log_helper.h	/^    const std::chrono::milliseconds _flush_interval_ms;$/;"	m	class:spdlog::details::async_log_helper	typeref:typename:const std::chrono::milliseconds
_flush_interval_ms	spdlog/details/registry.h	/^    std::chrono::milliseconds _flush_interval_ms{std::chrono::milliseconds::zero()};$/;"	m	class:spdlog::details::registry_t	typeref:typename:std::chrono::milliseconds
_flush_level	spdlog/details/registry.h	/^    level::level_enum _flush_level = level::off;$/;"	m	class:spdlog::details::registry_t	typeref:typename:level::level_enum
_flush_level	spdlog/logger.h	/^    spdlog::level_t _flush_level;$/;"	m	class:spdlog::logger	typeref:typename:spdlog::level_t
_force_flush	spdlog/sinks/file_sinks.h	/^    bool _force_flush;$/;"	m	class:spdlog::sinks::SPDLOG_FINAL	typeref:typename:bool
_force_flush	spdlog/sinks/ostream_sink.h	/^    bool _force_flush;$/;"	m	class:spdlog::sinks::ostream_sink	typeref:typename:bool
_formatter	spdlog/details/async_log_helper.h	/^    formatter_ptr _formatter;$/;"	m	class:spdlog::details::async_log_helper	typeref:typename:formatter_ptr
_formatter	spdlog/details/registry.h	/^    formatter_ptr _formatter;$/;"	m	class:spdlog::details::registry_t	typeref:typename:formatter_ptr
_formatter	spdlog/logger.h	/^    formatter_ptr _formatter;$/;"	m	class:spdlog::logger	typeref:typename:formatter_ptr
_formatters	spdlog/formatter.h	/^    std::vector<std::unique_ptr<details::flag_formatter>> _formatters;$/;"	m	class:spdlog::SPDLOG_FINAL	typeref:typename:std::vector<std::unique_ptr<details::flag_formatter>>
_ident	spdlog/sinks/syslog_sink.h	/^    const std::string _ident;$/;"	m	class:spdlog::sinks::syslog_sink	typeref:typename:const std::string
_incr_msg_counter	spdlog/details/logger_impl.h	/^inline void spdlog::logger::_incr_msg_counter(details::log_msg &msg)$/;"	f	class:spdlog::logger	typeref:typename:void
_incr_msg_counter	spdlog/logger.h	/^    void _incr_msg_counter(details::log_msg &msg);$/;"	p	class:spdlog::logger	typeref:typename:void
_internal_imu	qc-message.pb.h	/^  const ::Imu& _internal_imu() const;$/;"	p	class:Protocol	typeref:typename:const::Imu &
_internal_imu	qc-message.pb.h	/^inline const ::Imu& Protocol::_internal_imu() const {$/;"	f	class:Protocol	typeref:typename:const::Imu &
_isnan	spdlog/fmt/bundled/format.h	/^inline DummyInt _isnan(...)$/;"	f	namespace:fmt::internal	typeref:typename:DummyInt
_last_err_time	spdlog/logger.h	/^    std::atomic<time_t> _last_err_time;$/;"	m	class:spdlog::logger	typeref:typename:std::atomic<time_t>
_last_flush	spdlog/details/async_log_helper.h	/^    std::chrono::time_point<log_clock> _last_flush;$/;"	m	class:spdlog::details::async_log_helper	typeref:typename:std::chrono::time_point<log_clock>
_last_update	spdlog/details/pattern_formatter_impl.h	/^    log_clock::time_point _last_update{std::chrono::seconds(0)};$/;"	m	class:spdlog::details::SPDLOG_FINAL	typeref:typename:log_clock::time_point
_level	spdlog/details/registry.h	/^    level::level_enum _level = level::info;$/;"	m	class:spdlog::details::registry_t	typeref:typename:level::level_enum
_level	spdlog/logger.h	/^    spdlog::level_t _level;$/;"	m	class:spdlog::logger	typeref:typename:spdlog::level_t
_level	spdlog/sinks/sink.h	/^    level_t _level{level::trace};$/;"	m	class:spdlog::sinks::sink	typeref:typename:level_t
_logger_name	spdlog/details/async_log_helper.h	/^	std::string _logger_name;$/;"	m	class:spdlog::details::async_log_helper	typeref:typename:std::string
_loggers	spdlog/details/registry.h	/^    std::unordered_map<std::string, std::shared_ptr<logger>> _loggers;$/;"	m	class:spdlog::details::registry_t	typeref:typename:std::unordered_map<std::string,std::shared_ptr<logger>>
_max_files	spdlog/sinks/file_sinks.h	/^    std::size_t _max_files;$/;"	m	class:spdlog::sinks::SPDLOG_FINAL	typeref:typename:std::size_t
_max_size	spdlog/contrib/sinks/step_file_sink.h	/^    const unsigned _max_size;$/;"	m	class:spdlog::sinks::SPDLOG_FINAL	typeref:typename:const unsigned
_max_size	spdlog/sinks/file_sinks.h	/^    std::size_t _max_size;$/;"	m	class:spdlog::sinks::SPDLOG_FINAL	typeref:typename:std::size_t
_msg	spdlog/common.h	/^    std::string _msg;$/;"	m	class:spdlog::spdlog_ex	typeref:typename:std::string
_msg_counter	spdlog/logger.h	/^    std::atomic<size_t> _msg_counter;$/;"	m	class:spdlog::logger	typeref:typename:std::atomic<size_t>
_mutex	spdlog/details/pattern_formatter_impl.h	/^    std::mutex _mutex;$/;"	m	class:spdlog::details::SPDLOG_FINAL	typeref:typename:std::mutex
_mutex	spdlog/details/registry.h	/^    Mutex _mutex;$/;"	m	class:spdlog::details::registry_t	typeref:typename:Mutex
_mutex	spdlog/sinks/base_sink.h	/^    Mutex _mutex;$/;"	m	class:spdlog::sinks::base_sink	typeref:typename:Mutex
_name	spdlog/logger.h	/^    const std::string _name;$/;"	m	class:spdlog::logger	typeref:typename:const std::string
_next_rotation_tp	spdlog/sinks/file_sinks.h	/^    std::chrono::system_clock::time_point _next_rotation_tp()$/;"	f	class:spdlog::sinks::SPDLOG_FINAL	typeref:typename:std::chrono::system_clock::time_point
_next_tp	spdlog/contrib/sinks/step_file_sink.h	/^    std::chrono::system_clock::time_point _next_tp()$/;"	f	class:spdlog::sinks::SPDLOG_FINAL	typeref:typename:std::chrono::system_clock::time_point
_offset_minutes	spdlog/details/pattern_formatter_impl.h	/^    int _offset_minutes{0};$/;"	m	class:spdlog::details::SPDLOG_FINAL	typeref:typename:int
_ostream	spdlog/sinks/ostream_sink.h	/^    std::ostream &_ostream;$/;"	m	class:spdlog::sinks::ostream_sink	typeref:typename:std::ostream &
_overflow_policy	spdlog/details/async_log_helper.h	/^    const async_overflow_policy _overflow_policy;$/;"	m	class:spdlog::details::async_log_helper	typeref:typename:const async_overflow_policy
_overflow_policy	spdlog/details/registry.h	/^    async_overflow_policy _overflow_policy = async_overflow_policy::block_retry;$/;"	m	class:spdlog::details::registry_t	typeref:typename:async_overflow_policy
_pattern	spdlog/formatter.h	/^    const std::string _pattern;$/;"	m	class:spdlog::SPDLOG_FINAL	typeref:typename:const std::string
_pattern_time	spdlog/formatter.h	/^    const pattern_time_type _pattern_time;$/;"	m	class:spdlog::SPDLOG_FINAL	typeref:typename:const pattern_time_type
_print_ccode	spdlog/sinks/ansicolor_sink.h	/^    void _print_ccode(const std::string &color_code)$/;"	f	class:spdlog::sinks::ansicolor_sink	typeref:typename:void
_print_range	spdlog/sinks/ansicolor_sink.h	/^    void _print_range(const details::log_msg &msg, size_t start, size_t end)$/;"	f	class:spdlog::sinks::ansicolor_sink	typeref:typename:void
_print_range	spdlog/sinks/wincolor_sink.h	/^    void _print_range(const details::log_msg &msg, size_t start, size_t end)$/;"	f	class:spdlog::sinks::wincolor_sink	typeref:typename:void
_priorities	spdlog/sinks/syslog_sink.h	/^    std::array<int, 7> _priorities;$/;"	m	class:spdlog::sinks::syslog_sink	typeref:typename:std::array<int,7>
_q	spdlog/details/async_log_helper.h	/^    q_type _q;$/;"	m	class:spdlog::details::async_log_helper	typeref:typename:q_type
_rotate	spdlog/sinks/file_sinks.h	/^    void _rotate()$/;"	f	class:spdlog::sinks::SPDLOG_FINAL	typeref:typename:void
_rotation_h	spdlog/sinks/file_sinks.h	/^    int _rotation_h;$/;"	m	class:spdlog::sinks::SPDLOG_FINAL	typeref:typename:int
_rotation_m	spdlog/sinks/file_sinks.h	/^    int _rotation_m;$/;"	m	class:spdlog::sinks::SPDLOG_FINAL	typeref:typename:int
_rotation_tp	spdlog/sinks/file_sinks.h	/^    std::chrono::system_clock::time_point _rotation_tp;$/;"	m	class:spdlog::sinks::SPDLOG_FINAL	typeref:typename:std::chrono::system_clock::time_point
_set_formatter	spdlog/async_logger.h	/^    void _set_formatter(spdlog::formatter_ptr msg_formatter) override;$/;"	p	class:spdlog::SPDLOG_FINAL	typeref:typename:void
_set_formatter	spdlog/details/async_logger_impl.h	/^inline void spdlog::async_logger::_set_formatter(spdlog::formatter_ptr msg_formatter)$/;"	f	class:spdlog::async_logger	typeref:typename:void
_set_formatter	spdlog/details/logger_impl.h	/^inline void spdlog::logger::_set_formatter(formatter_ptr msg_formatter)$/;"	f	class:spdlog::logger	typeref:typename:void
_set_formatter	spdlog/logger.h	/^    virtual void _set_formatter(formatter_ptr msg_formatter);$/;"	p	class:spdlog::logger	typeref:typename:void
_set_pattern	spdlog/async_logger.h	/^    void _set_pattern(const std::string &pattern, pattern_time_type pattern_time) override;$/;"	p	class:spdlog::SPDLOG_FINAL	typeref:typename:void
_set_pattern	spdlog/details/async_logger_impl.h	/^inline void spdlog::async_logger::_set_pattern(const std::string &pattern, pattern_time_type pat/;"	f	class:spdlog::async_logger	typeref:typename:void
_set_pattern	spdlog/details/logger_impl.h	/^inline void spdlog::logger::_set_pattern(const std::string &pattern, pattern_time_type pattern_t/;"	f	class:spdlog::logger	typeref:typename:void
_set_pattern	spdlog/logger.h	/^    virtual void _set_pattern(const std::string &pattern, pattern_time_type pattern_time);$/;"	p	class:spdlog::logger	typeref:typename:void
_should_flush_on	spdlog/details/logger_impl.h	/^inline bool spdlog::logger::_should_flush_on(const details::log_msg &msg)$/;"	f	class:spdlog::logger	typeref:typename:bool
_should_flush_on	spdlog/logger.h	/^    bool _should_flush_on(const details::log_msg &msg);$/;"	p	class:spdlog::logger	typeref:typename:bool
_sink_it	spdlog/async_logger.h	/^    void _sink_it(details::log_msg &msg) override;$/;"	p	class:spdlog::SPDLOG_FINAL	typeref:typename:void
_sink_it	spdlog/contrib/sinks/step_file_sink.h	/^    void _sink_it(const details::log_msg &msg) override$/;"	f	class:spdlog::sinks::SPDLOG_FINAL	typeref:typename:void
_sink_it	spdlog/details/async_logger_impl.h	/^inline void spdlog::async_logger::_sink_it(details::log_msg &msg)$/;"	f	class:spdlog::async_logger	typeref:typename:void
_sink_it	spdlog/details/logger_impl.h	/^inline void spdlog::logger::_sink_it(details::log_msg &msg)$/;"	f	class:spdlog::logger	typeref:typename:void
_sink_it	spdlog/logger.h	/^    virtual void _sink_it(details::log_msg &msg);$/;"	p	class:spdlog::logger	typeref:typename:void
_sink_it	spdlog/sinks/ansicolor_sink.h	/^    void _sink_it(const details::log_msg &msg) override$/;"	f	class:spdlog::sinks::ansicolor_sink	typeref:typename:void
_sink_it	spdlog/sinks/base_sink.h	/^    virtual void _sink_it(const details::log_msg &msg) = 0;$/;"	p	class:spdlog::sinks::base_sink	typeref:typename:void
_sink_it	spdlog/sinks/dist_sink.h	/^    void _sink_it(const details::log_msg &msg) override$/;"	f	class:spdlog::sinks::dist_sink	typeref:typename:void
_sink_it	spdlog/sinks/file_sinks.h	/^    void _sink_it(const details::log_msg &msg) override$/;"	f	class:spdlog::sinks::SPDLOG_FINAL	typeref:typename:void
_sink_it	spdlog/sinks/msvc_sink.h	/^    void _sink_it(const details::log_msg &msg) override$/;"	f	class:spdlog::sinks::msvc_sink	typeref:typename:void
_sink_it	spdlog/sinks/null_sink.h	/^    void _sink_it(const details::log_msg &) override {}$/;"	f	class:spdlog::sinks::null_sink	typeref:typename:void
_sink_it	spdlog/sinks/ostream_sink.h	/^    void _sink_it(const details::log_msg &msg) override$/;"	f	class:spdlog::sinks::ostream_sink	typeref:typename:void
_sink_it	spdlog/sinks/stdout_sinks.h	/^    void _sink_it(const details::log_msg &msg) override$/;"	f	class:spdlog::sinks::SPDLOG_FINAL	typeref:typename:void
_sink_it	spdlog/sinks/wincolor_sink.h	/^    void _sink_it(const details::log_msg &msg) override$/;"	f	class:spdlog::sinks::wincolor_sink	typeref:typename:void
_sinks	spdlog/details/async_log_helper.h	/^    std::vector<std::shared_ptr<sinks::sink>> _sinks;$/;"	m	class:spdlog::details::async_log_helper	typeref:typename:std::vector<std::shared_ptr<sinks::sink>>
_sinks	spdlog/logger.h	/^    std::vector<sink_ptr> _sinks;$/;"	m	class:spdlog::logger	typeref:typename:std::vector<sink_ptr>
_sinks	spdlog/sinks/dist_sink.h	/^    std::vector<std::shared_ptr<sink>> _sinks;$/;"	m	class:spdlog::sinks::dist_sink	typeref:typename:std::vector<std::shared_ptr<sink>>
_step_seconds	spdlog/contrib/sinks/step_file_sink.h	/^    const std::chrono::seconds _step_seconds;$/;"	m	class:spdlog::sinks::SPDLOG_FINAL	typeref:typename:const std::chrono::seconds
_str	spdlog/details/pattern_formatter_impl.h	/^    std::string _str;$/;"	m	class:spdlog::details::SPDLOG_FINAL	typeref:typename:std::string
_tag	spdlog/sinks/android_sink.h	/^    std::string _tag;$/;"	m	class:spdlog::sinks::android_sink	typeref:typename:std::string
_thread_id	spdlog/details/os.h	/^inline size_t _thread_id()$/;"	f	namespace:spdlog::details::os	typeref:typename:size_t
_tmp_ext	spdlog/contrib/sinks/step_file_sink.h	/^    const filename_t _tmp_ext;$/;"	m	class:spdlog::sinks::SPDLOG_FINAL	typeref:typename:const filename_t
_tp	spdlog/contrib/sinks/step_file_sink.h	/^    std::chrono::system_clock::time_point _tp;$/;"	m	class:spdlog::sinks::SPDLOG_FINAL	typeref:typename:std::chrono::system_clock::time_point
_use_raw_msg	spdlog/sinks/android_sink.h	/^    bool _use_raw_msg;$/;"	m	class:spdlog::sinks::android_sink	typeref:typename:bool
_worker_teardown_cb	spdlog/details/async_log_helper.h	/^    const std::function<void()> _worker_teardown_cb;$/;"	m	class:spdlog::details::async_log_helper	typeref:typename:const std::function<void ()>
_worker_teardown_cb	spdlog/details/registry.h	/^    std::function<void()> _worker_teardown_cb;$/;"	m	class:spdlog::details::registry_t	typeref:typename:std::function<void ()>
_worker_thread	spdlog/details/async_log_helper.h	/^    std::thread _worker_thread;$/;"	m	class:spdlog::details::async_log_helper	typeref:typename:std::thread
_worker_warmup_cb	spdlog/details/async_log_helper.h	/^    const std::function<void()> _worker_warmup_cb;$/;"	m	class:spdlog::details::async_log_helper	typeref:typename:const std::function<void ()>
_worker_warmup_cb	spdlog/details/registry.h	/^    std::function<void()> _worker_warmup_cb;$/;"	m	class:spdlog::details::registry_t	typeref:typename:std::function<void ()>
a_formatter	spdlog/details/pattern_formatter.h	/^class a_formatter : public flag_formatter$/;"	c	namespace:spdlog::details
a_formatter	spdlog/details/pattern_formatter_impl.h	/^class a_formatter : public flag_formatter$/;"	c	namespace:spdlog::details
abbreviateDecimalPowers	qcustomplot.h	/^  bool abbreviateDecimalPowers;$/;"	m	class:QCPAxisPainterPrivate	typeref:typename:bool
acc_decrease	simple.pb-c.h	/^  uint32_t acc_decrease;$/;"	m	struct:_SmoothMotorControlDeprecated	typeref:typename:uint32_t
acc_decrease	simple.proto	/^    optional uint32 acc_decrease = 4;$/;"	f
accept	json.hpp	/^    bool accept(const bool strict = true)$/;"	f	class:nlohmann::detail::parser	typeref:typename:bool
accept	json.hpp	/^    static bool accept(IteratorType first, IteratorType last)$/;"	f	class:nlohmann::basic_json	typeref:typename:bool
accept	json.hpp	/^    static bool accept(detail::input_adapter i)$/;"	f	class:nlohmann::basic_json	typeref:typename:bool
accept	json.hpp	/^    static bool accept(detail::input_adapter& i)$/;"	f	class:nlohmann::basic_json	typeref:typename:bool
accept_internal	json.hpp	/^    bool accept_internal()$/;"	f	class:nlohmann::detail::parser	typeref:typename:bool
accepted	qcustomplot.h	/^  void accepted(const QRect &rect, QMouseEvent *event);$/;"	S	class:QCPSelectionRect	typeref:typename:void
accepted	qcustomplot.h	/^  void accepted(const QRect &rect, QMouseEvent *event);$/;"	p	class:QCPSelectionRect	typeref:typename:void
acceptor_	asio-server.h	/^        tcp::acceptor acceptor_;$/;"	m	class:ASIOServer	typeref:typename:tcp::acceptor
acceptor_	mainwindow.h	/^    boost::asio::ip::tcp::acceptor acceptor_;$/;"	m	class:MainWindow	typeref:typename:boost::asio::ip::tcp::acceptor
accessor	spdlog/fmt/bundled/core.h	/^        accessor(bi_iterator iter)$/;"	f	struct:internal::get_container::accessor
accessor	spdlog/fmt/bundled/core.h	/^    struct accessor : bi_iterator$/;"	s	function:internal::get_container
accx	simple.pb-c.h	/^  float accx;$/;"	m	struct:_ToHi	typeref:typename:float
accx	simple.proto	/^    optional float accx = 5;$/;"	f
accy	simple.pb-c.h	/^  float accy;$/;"	m	struct:_ToHi	typeref:typename:float
accy	simple.proto	/^    optional float accy = 6;$/;"	f
accz	simple.pb-c.h	/^  float accz;$/;"	m	struct:_ToHi	typeref:typename:float
accz	simple.proto	/^    optional float accz = 7;$/;"	f
adaptiveSampling	qcustomplot.h	/^  Q_PROPERTY(bool adaptiveSampling READ adaptiveSampling WRITE setAdaptiveSampling)$/;"	p	class:QCPGraph	typeref:typename:bool
adaptiveSampling	qcustomplot.h	/^  bool adaptiveSampling() const { return mAdaptiveSampling; }$/;"	f	class:QCPGraph	typeref:typename:bool
adc_interval	simple.pb-c.h	/^  uint32_t adc_interval;$/;"	m	struct:_SmoothMotorControlDeprecated	typeref:typename:uint32_t
adc_interval	simple.proto	/^    optional uint32 adc_interval = 3;$/;"	f
add	json.hpp	/^        enum class patch_operations {add, remove, replace, move, copy, test, invalid};$/;"	e	enum:nlohmann::basic_json::patch::patch_operations
add	json.hpp	/^    void add(int c)$/;"	f	class:nlohmann::detail::lexer	typeref:typename:void
add	qcustomplot.h	/^  void add(const DataType &data);$/;"	p	class:QCPDataContainer	typeref:typename:void
add	qcustomplot.h	/^  void add(const QCPDataContainer<DataType> &data);$/;"	p	class:QCPDataContainer	typeref:typename:void
add	qcustomplot.h	/^  void add(const QVector<DataType> &data, bool alreadySorted=false);$/;"	p	class:QCPDataContainer	typeref:typename:void
add	qcustomplot.h	/^void QCPDataContainer<DataType>::add(const DataType &data)$/;"	f	class:QCPDataContainer	typeref:typename:void
add	qcustomplot.h	/^void QCPDataContainer<DataType>::add(const QCPDataContainer<DataType> &data)$/;"	f	class:QCPDataContainer	typeref:typename:void
add	qcustomplot.h	/^void QCPDataContainer<DataType>::add(const QVector<DataType> &data, bool alreadySorted)$/;"	f	class:QCPDataContainer	typeref:typename:void
addAxes	qcustomplot.cpp	/^QList<QCPAxis*> QCPAxisRect::addAxes(QCPAxis::AxisTypes types)$/;"	f	class:QCPAxisRect	typeref:typename:QList<QCPAxis * >
addAxes	qcustomplot.h	/^  QList<QCPAxis*> addAxes(QCPAxis::AxisTypes types);$/;"	p	class:QCPAxisRect	typeref:typename:QList<QCPAxis * >
addAxis	qcustomplot.cpp	/^QCPAxis *QCPAxisRect::addAxis(QCPAxis::AxisType type, QCPAxis *axis)$/;"	f	class:QCPAxisRect	typeref:typename:QCPAxis *
addAxis	qcustomplot.h	/^  QCPAxis *addAxis(QCPAxis::AxisType type, QCPAxis *axis=0);$/;"	p	class:QCPAxisRect	typeref:typename:QCPAxis *
addChild	qcustomplot.cpp	/^void QCPLayer::addChild(QCPLayerable *layerable, bool prepend)$/;"	f	class:QCPLayer	typeref:typename:void
addChild	qcustomplot.cpp	/^void QCPMarginGroup::addChild(QCP::MarginSide side, QCPLayoutElement *element)$/;"	f	class:QCPMarginGroup	typeref:typename:void
addChild	qcustomplot.h	/^  void addChild(QCP::MarginSide side, QCPLayoutElement *element);$/;"	p	class:QCPMarginGroup	typeref:typename:void
addChild	qcustomplot.h	/^  void addChild(QCPLayerable *layerable, bool prepend);$/;"	p	class:QCPLayer	typeref:typename:void
addChildX	qcustomplot.cpp	/^void QCPItemAnchor::addChildX(QCPItemPosition *pos)$/;"	f	class:QCPItemAnchor	typeref:typename:void
addChildX	qcustomplot.h	/^  void addChildX(QCPItemPosition* pos); \/\/ called from pos when this anchor is set as parent$/;"	p	class:QCPItemAnchor	typeref:typename:void
addChildY	qcustomplot.cpp	/^void QCPItemAnchor::addChildY(QCPItemPosition *pos)$/;"	f	class:QCPItemAnchor	typeref:typename:void
addChildY	qcustomplot.h	/^  void addChildY(QCPItemPosition* pos); \/\/ called from pos when this anchor is set as parent$/;"	p	class:QCPItemAnchor	typeref:typename:void
addClient	gui.h	/^        std::shared_ptr<ClientWindow> addClient() {$/;"	f	class:GUI	typeref:typename:std::shared_ptr<ClientWindow>
addData	qcustomplot.cpp	/^void QCPBars::addData(const QVector<double> &keys, const QVector<double> &values, bool alreadySo/;"	f	class:QCPBars	typeref:typename:void
addData	qcustomplot.cpp	/^void QCPBars::addData(double key, double value)$/;"	f	class:QCPBars	typeref:typename:void
addData	qcustomplot.cpp	/^void QCPCurve::addData(const QVector<double> &keys, const QVector<double> &values)$/;"	f	class:QCPCurve	typeref:typename:void
addData	qcustomplot.cpp	/^void QCPCurve::addData(const QVector<double> &t, const QVector<double> &keys, const QVector<doub/;"	f	class:QCPCurve	typeref:typename:void
addData	qcustomplot.cpp	/^void QCPCurve::addData(double key, double value)$/;"	f	class:QCPCurve	typeref:typename:void
addData	qcustomplot.cpp	/^void QCPCurve::addData(double t, double key, double value)$/;"	f	class:QCPCurve	typeref:typename:void
addData	qcustomplot.cpp	/^void QCPErrorBars::addData(const QVector<double> &error)$/;"	f	class:QCPErrorBars	typeref:typename:void
addData	qcustomplot.cpp	/^void QCPErrorBars::addData(const QVector<double> &errorMinus, const QVector<double> &errorPlus)$/;"	f	class:QCPErrorBars	typeref:typename:void
addData	qcustomplot.cpp	/^void QCPErrorBars::addData(double error)$/;"	f	class:QCPErrorBars	typeref:typename:void
addData	qcustomplot.cpp	/^void QCPErrorBars::addData(double errorMinus, double errorPlus)$/;"	f	class:QCPErrorBars	typeref:typename:void
addData	qcustomplot.cpp	/^void QCPFinancial::addData(const QVector<double> &keys, const QVector<double> &open, const QVect/;"	f	class:QCPFinancial	typeref:typename:void
addData	qcustomplot.cpp	/^void QCPFinancial::addData(double key, double open, double high, double low, double close)$/;"	f	class:QCPFinancial	typeref:typename:void
addData	qcustomplot.cpp	/^void QCPGraph::addData(const QVector<double> &keys, const QVector<double> &values, bool alreadyS/;"	f	class:QCPGraph	typeref:typename:void
addData	qcustomplot.cpp	/^void QCPGraph::addData(double key, double value)$/;"	f	class:QCPGraph	typeref:typename:void
addData	qcustomplot.cpp	/^void QCPStatisticalBox::addData(const QVector<double> &keys, const QVector<double> &minimum, con/;"	f	class:QCPStatisticalBox	typeref:typename:void
addData	qcustomplot.cpp	/^void QCPStatisticalBox::addData(double key, double minimum, double lowerQuartile, double median,/;"	f	class:QCPStatisticalBox	typeref:typename:void
addData	qcustomplot.h	/^  void addData(const QVector<double> &error);$/;"	p	class:QCPErrorBars	typeref:typename:void
addData	qcustomplot.h	/^  void addData(const QVector<double> &errorMinus, const QVector<double> &errorPlus);$/;"	p	class:QCPErrorBars	typeref:typename:void
addData	qcustomplot.h	/^  void addData(const QVector<double> &keys, const QVector<double> &minimum, const QVector<double/;"	p	class:QCPStatisticalBox	typeref:typename:void
addData	qcustomplot.h	/^  void addData(const QVector<double> &keys, const QVector<double> &open, const QVector<double> &/;"	p	class:QCPFinancial	typeref:typename:void
addData	qcustomplot.h	/^  void addData(const QVector<double> &keys, const QVector<double> &values);$/;"	p	class:QCPCurve	typeref:typename:void
addData	qcustomplot.h	/^  void addData(const QVector<double> &keys, const QVector<double> &values, bool alreadySorted=fa/;"	p	class:QCPBars	typeref:typename:void
addData	qcustomplot.h	/^  void addData(const QVector<double> &keys, const QVector<double> &values, bool alreadySorted=fa/;"	p	class:QCPGraph	typeref:typename:void
addData	qcustomplot.h	/^  void addData(const QVector<double> &t, const QVector<double> &keys, const QVector<double> &val/;"	p	class:QCPCurve	typeref:typename:void
addData	qcustomplot.h	/^  void addData(double error);$/;"	p	class:QCPErrorBars	typeref:typename:void
addData	qcustomplot.h	/^  void addData(double errorMinus, double errorPlus);$/;"	p	class:QCPErrorBars	typeref:typename:void
addData	qcustomplot.h	/^  void addData(double key, double minimum, double lowerQuartile, double median, double upperQuar/;"	p	class:QCPStatisticalBox	typeref:typename:void
addData	qcustomplot.h	/^  void addData(double key, double open, double high, double low, double close);$/;"	p	class:QCPFinancial	typeref:typename:void
addData	qcustomplot.h	/^  void addData(double key, double value);$/;"	p	class:QCPBars	typeref:typename:void
addData	qcustomplot.h	/^  void addData(double key, double value);$/;"	p	class:QCPCurve	typeref:typename:void
addData	qcustomplot.h	/^  void addData(double key, double value);$/;"	p	class:QCPGraph	typeref:typename:void
addData	qcustomplot.h	/^  void addData(double t, double key, double value);$/;"	p	class:QCPCurve	typeref:typename:void
addDataRange	qcustomplot.cpp	/^void QCPDataSelection::addDataRange(const QCPDataRange &dataRange, bool simplify)$/;"	f	class:QCPDataSelection	typeref:typename:void
addDataRange	qcustomplot.h	/^  void addDataRange(const QCPDataRange &dataRange, bool simplify=true);$/;"	p	class:QCPDataSelection	typeref:typename:void
addElement	qcustomplot.cpp	/^bool QCPLayoutGrid::addElement(QCPLayoutElement *element)$/;"	f	class:QCPLayoutGrid	typeref:typename:bool
addElement	qcustomplot.cpp	/^bool QCPLayoutGrid::addElement(int row, int column, QCPLayoutElement *element)$/;"	f	class:QCPLayoutGrid	typeref:typename:bool
addElement	qcustomplot.cpp	/^void QCPLayoutInset::addElement(QCPLayoutElement *element, Qt::Alignment alignment)$/;"	f	class:QCPLayoutInset	typeref:typename:void
addElement	qcustomplot.cpp	/^void QCPLayoutInset::addElement(QCPLayoutElement *element, const QRectF &rect)$/;"	f	class:QCPLayoutInset	typeref:typename:void
addElement	qcustomplot.h	/^  bool addElement(QCPLayoutElement *element);$/;"	p	class:QCPLayoutGrid	typeref:typename:bool
addElement	qcustomplot.h	/^  bool addElement(int row, int column, QCPLayoutElement *element);$/;"	p	class:QCPLayoutGrid	typeref:typename:bool
addElement	qcustomplot.h	/^  void addElement(QCPLayoutElement *element, Qt::Alignment alignment);$/;"	p	class:QCPLayoutInset	typeref:typename:void
addElement	qcustomplot.h	/^  void addElement(QCPLayoutElement *element, const QRectF &rect);$/;"	p	class:QCPLayoutInset	typeref:typename:void
addGraph	qcustomplot.cpp	/^QCPGraph *QCustomPlot::addGraph(QCPAxis *keyAxis, QCPAxis *valueAxis)$/;"	f	class:QCustomPlot	typeref:typename:QCPGraph *
addGraph	qcustomplot.h	/^  QCPGraph *addGraph(QCPAxis *keyAxis=0, QCPAxis *valueAxis=0);$/;"	p	class:QCustomPlot	typeref:typename:QCPGraph *
addItem	qcustomplot.cpp	/^bool QCPLegend::addItem(QCPAbstractLegendItem *item)$/;"	f	class:QCPLegend	typeref:typename:bool
addItem	qcustomplot.h	/^  bool addItem(QCPAbstractLegendItem *item);$/;"	p	class:QCPLegend	typeref:typename:bool
addLayer	qcustomplot.cpp	/^bool QCustomPlot::addLayer(const QString &name, QCPLayer *otherLayer, QCustomPlot::LayerInsertMo/;"	f	class:QCustomPlot	typeref:typename:bool
addLayer	qcustomplot.h	/^  bool addLayer(const QString &name, QCPLayer *otherLayer=0, LayerInsertMode insertMode=limAbove/;"	p	class:QCustomPlot	typeref:typename:bool
addTick	qcustomplot.cpp	/^void QCPAxisTickerText::addTick(double position, const QString &label)$/;"	f	class:QCPAxisTickerText	typeref:typename:void
addTick	qcustomplot.h	/^  void addTick(double position, const QString &label);$/;"	p	class:QCPAxisTickerText	typeref:typename:void
addTicks	qcustomplot.cpp	/^void QCPAxisTickerText::addTicks(const QMap<double, QString> &ticks)$/;"	f	class:QCPAxisTickerText	typeref:typename:void
addTicks	qcustomplot.cpp	/^void QCPAxisTickerText::addTicks(const QVector<double> &positions, const QVector<QString> &label/;"	f	class:QCPAxisTickerText	typeref:typename:void
addTicks	qcustomplot.h	/^  void addTicks(const QMap<double, QString> &ticks);$/;"	p	class:QCPAxisTickerText	typeref:typename:void
addTicks	qcustomplot.h	/^  void addTicks(const QVector<double> &positions, const QVector<QString> &labels);$/;"	p	class:QCPAxisTickerText	typeref:typename:void
addToLegend	qcustomplot.cpp	/^bool QCPAbstractPlottable::addToLegend()$/;"	f	class:QCPAbstractPlottable	typeref:typename:bool
addToLegend	qcustomplot.cpp	/^bool QCPAbstractPlottable::addToLegend(QCPLegend *legend)$/;"	f	class:QCPAbstractPlottable	typeref:typename:bool
addToLegend	qcustomplot.h	/^  bool addToLegend();$/;"	p	class:QCPAbstractPlottable	typeref:typename:bool
addToLegend	qcustomplot.h	/^  bool addToLegend(QCPLegend *legend);$/;"	p	class:QCPAbstractPlottable	typeref:typename:bool
add_ch	spdlog/details/pattern_formatter.h	/^    void add_ch(char ch)$/;"	f	class:spdlog::details::SPDLOG_FINAL	typeref:typename:void
add_ch	spdlog/details/pattern_formatter_impl.h	/^    void add_ch(char ch)$/;"	f	class:spdlog::details::SPDLOG_FINAL	typeref:typename:void
add_delimiter_spaces	spdlog/fmt/bundled/ranges.h	/^    static FMT_CONSTEXPR_DECL const bool add_delimiter_spaces = true;$/;"	m	struct:formatting_range	typeref:typename:FMT_CONSTEXPR_DECL const bool
add_delimiter_spaces	spdlog/fmt/bundled/ranges.h	/^    static FMT_CONSTEXPR_DECL const bool add_delimiter_spaces = true;$/;"	m	struct:formatting_tuple	typeref:typename:FMT_CONSTEXPR_DECL const bool
add_prepostfix_space	spdlog/fmt/bundled/ranges.h	/^    static FMT_CONSTEXPR_DECL const bool add_prepostfix_space = false;$/;"	m	struct:formatting_range	typeref:typename:FMT_CONSTEXPR_DECL const bool
add_prepostfix_space	spdlog/fmt/bundled/ranges.h	/^    static FMT_CONSTEXPR_DECL const bool add_prepostfix_space = false;$/;"	m	struct:formatting_tuple	typeref:typename:FMT_CONSTEXPR_DECL const bool
add_sink	spdlog/sinks/dist_sink.h	/^    void add_sink(std::shared_ptr<sink> sink)$/;"	f	class:spdlog::sinks::dist_sink	typeref:typename:void
adjusted	qcustomplot.h	/^  QCPDataRange adjusted(int changeBegin, int changeEnd) const { return QCPDataRange(mBegin+chang/;"	f	class:QCPDataRange	typeref:typename:QCPDataRange
adl_serializer	json.hpp	/^struct adl_serializer$/;"	s	namespace:nlohmann
adoptElement	qcustomplot.cpp	/^void QCPLayout::adoptElement(QCPLayoutElement *el)$/;"	f	class:QCPLayout	typeref:typename:void
adoptElement	qcustomplot.h	/^  void adoptElement(QCPLayoutElement *el);$/;"	p	class:QCPLayout	typeref:typename:void
advance_to	spdlog/fmt/bundled/core.h	/^    FMT_CONSTEXPR void advance_to(iterator it)$/;"	f	class:basic_parse_context	typeref:typename:FMT_CONSTEXPR void
advance_to	spdlog/fmt/bundled/core.h	/^    void advance_to(iterator it)$/;"	f	class:internal::context_base	typeref:typename:void
aeAll	qcustomplot.h	/^                          ,aeAll           = 0xFFFF \/\/\/< <tt>0xFFFF<\/tt> All elements$/;"	e	enum:QCP::AntialiasedElement
aeAxes	qcustomplot.h	/^enum AntialiasedElement { aeAxes           = 0x0001 \/\/\/< <tt>0x0001<\/tt> Axis base line and /;"	e	enum:QCP::AntialiasedElement
aeFills	qcustomplot.h	/^                          ,aeFills         = 0x0100 \/\/\/< <tt>0x0100<\/tt> Borders of fills (e/;"	e	enum:QCP::AntialiasedElement
aeGrid	qcustomplot.h	/^                          ,aeGrid          = 0x0002 \/\/\/< <tt>0x0002<\/tt> Grid lines$/;"	e	enum:QCP::AntialiasedElement
aeItems	qcustomplot.h	/^                          ,aeItems         = 0x0040 \/\/\/< <tt>0x0040<\/tt> Main lines of items$/;"	e	enum:QCP::AntialiasedElement
aeLegend	qcustomplot.h	/^                          ,aeLegend        = 0x0008 \/\/\/< <tt>0x0008<\/tt> Legend box$/;"	e	enum:QCP::AntialiasedElement
aeLegendItems	qcustomplot.h	/^                          ,aeLegendItems   = 0x0010 \/\/\/< <tt>0x0010<\/tt> Legend items$/;"	e	enum:QCP::AntialiasedElement
aeNone	qcustomplot.h	/^                          ,aeNone          = 0x0000 \/\/\/< <tt>0x0000<\/tt> No elements$/;"	e	enum:QCP::AntialiasedElement
aeOther	qcustomplot.h	/^                          ,aeOther         = 0x8000 \/\/\/< <tt>0x8000<\/tt> Other elements that/;"	e	enum:QCP::AntialiasedElement
aePlottables	qcustomplot.h	/^                          ,aePlottables    = 0x0020 \/\/\/< <tt>0x0020<\/tt> Main lines of plott/;"	e	enum:QCP::AntialiasedElement
aeScatters	qcustomplot.h	/^                          ,aeScatters      = 0x0080 \/\/\/< <tt>0x0080<\/tt> Scatter symbols of /;"	e	enum:QCP::AntialiasedElement
aeSubGrid	qcustomplot.h	/^                          ,aeSubGrid       = 0x0004 \/\/\/< <tt>0x0004<\/tt> Sub grid lines$/;"	e	enum:QCP::AntialiasedElement
aeZeroLine	qcustomplot.h	/^                          ,aeZeroLine      = 0x0200 \/\/\/< <tt>0x0200<\/tt> Zero-lines, see \\r/;"	e	enum:QCP::AntialiasedElement
afterReplot	qcustomplot.h	/^  void afterReplot();$/;"	S	class:QCustomPlot	typeref:typename:void
afterReplot	qcustomplot.h	/^  void afterReplot();$/;"	p	class:QCustomPlot	typeref:typename:void
aggregate_formatter	spdlog/details/pattern_formatter.h	/^    aggregate_formatter() = default;$/;"	p	class:spdlog::details::SPDLOG_FINAL
aggregate_formatter	spdlog/details/pattern_formatter_impl.h	/^    aggregate_formatter() = default;$/;"	p	class:spdlog::details::SPDLOG_FINAL
aiBottom	qcustomplot.h	/^  enum AnchorIndex {aiTop, aiTopRight, aiRight, aiBottom, aiBottomLeft, aiLeft};$/;"	e	enum:QCPItemPixmap::AnchorIndex
aiBottom	qcustomplot.h	/^  enum AnchorIndex {aiTop, aiTopRight, aiRight, aiBottom, aiBottomLeft, aiLeft};$/;"	e	enum:QCPItemRect::AnchorIndex
aiBottom	qcustomplot.h	/^  enum AnchorIndex {aiTopLeft, aiTop, aiTopRight, aiRight, aiBottomRight, aiBottom, aiBottomLeft/;"	e	enum:QCPItemText::AnchorIndex
aiBottom	qcustomplot.h	/^  enum AnchorIndex {aiTopLeftRim, aiTop, aiTopRightRim, aiRight, aiBottomRightRim, aiBottom, aiB/;"	e	enum:QCPItemEllipse::AnchorIndex
aiBottomLeft	qcustomplot.h	/^  enum AnchorIndex {aiTop, aiTopRight, aiRight, aiBottom, aiBottomLeft, aiLeft};$/;"	e	enum:QCPItemPixmap::AnchorIndex
aiBottomLeft	qcustomplot.h	/^  enum AnchorIndex {aiTop, aiTopRight, aiRight, aiBottom, aiBottomLeft, aiLeft};$/;"	e	enum:QCPItemRect::AnchorIndex
aiBottomLeft	qcustomplot.h	/^  enum AnchorIndex {aiTopLeft, aiTop, aiTopRight, aiRight, aiBottomRight, aiBottom, aiBottomLeft/;"	e	enum:QCPItemText::AnchorIndex
aiBottomLeftRim	qcustomplot.h	/^  enum AnchorIndex {aiTopLeftRim, aiTop, aiTopRightRim, aiRight, aiBottomRightRim, aiBottom, aiB/;"	e	enum:QCPItemEllipse::AnchorIndex
aiBottomRight	qcustomplot.h	/^  enum AnchorIndex {aiTopLeft, aiTop, aiTopRight, aiRight, aiBottomRight, aiBottom, aiBottomLeft/;"	e	enum:QCPItemText::AnchorIndex
aiBottomRightRim	qcustomplot.h	/^  enum AnchorIndex {aiTopLeftRim, aiTop, aiTopRightRim, aiRight, aiBottomRightRim, aiBottom, aiB/;"	e	enum:QCPItemEllipse::AnchorIndex
aiCenter	qcustomplot.h	/^  enum AnchorIndex {aiCenter};$/;"	e	enum:QCPItemBracket::AnchorIndex
aiCenter	qcustomplot.h	/^  enum AnchorIndex {aiTopLeftRim, aiTop, aiTopRightRim, aiRight, aiBottomRightRim, aiBottom, aiB/;"	e	enum:QCPItemEllipse::AnchorIndex
aiLeft	qcustomplot.h	/^  enum AnchorIndex {aiTop, aiTopRight, aiRight, aiBottom, aiBottomLeft, aiLeft};$/;"	e	enum:QCPItemPixmap::AnchorIndex
aiLeft	qcustomplot.h	/^  enum AnchorIndex {aiTop, aiTopRight, aiRight, aiBottom, aiBottomLeft, aiLeft};$/;"	e	enum:QCPItemRect::AnchorIndex
aiLeft	qcustomplot.h	/^  enum AnchorIndex {aiTopLeft, aiTop, aiTopRight, aiRight, aiBottomRight, aiBottom, aiBottomLeft/;"	e	enum:QCPItemText::AnchorIndex
aiLeft	qcustomplot.h	/^  enum AnchorIndex {aiTopLeftRim, aiTop, aiTopRightRim, aiRight, aiBottomRightRim, aiBottom, aiB/;"	e	enum:QCPItemEllipse::AnchorIndex
aiRight	qcustomplot.h	/^  enum AnchorIndex {aiTop, aiTopRight, aiRight, aiBottom, aiBottomLeft, aiLeft};$/;"	e	enum:QCPItemPixmap::AnchorIndex
aiRight	qcustomplot.h	/^  enum AnchorIndex {aiTop, aiTopRight, aiRight, aiBottom, aiBottomLeft, aiLeft};$/;"	e	enum:QCPItemRect::AnchorIndex
aiRight	qcustomplot.h	/^  enum AnchorIndex {aiTopLeft, aiTop, aiTopRight, aiRight, aiBottomRight, aiBottom, aiBottomLeft/;"	e	enum:QCPItemText::AnchorIndex
aiRight	qcustomplot.h	/^  enum AnchorIndex {aiTopLeftRim, aiTop, aiTopRightRim, aiRight, aiBottomRightRim, aiBottom, aiB/;"	e	enum:QCPItemEllipse::AnchorIndex
aiTop	qcustomplot.h	/^  enum AnchorIndex {aiTop, aiTopRight, aiRight, aiBottom, aiBottomLeft, aiLeft};$/;"	e	enum:QCPItemPixmap::AnchorIndex
aiTop	qcustomplot.h	/^  enum AnchorIndex {aiTop, aiTopRight, aiRight, aiBottom, aiBottomLeft, aiLeft};$/;"	e	enum:QCPItemRect::AnchorIndex
aiTop	qcustomplot.h	/^  enum AnchorIndex {aiTopLeft, aiTop, aiTopRight, aiRight, aiBottomRight, aiBottom, aiBottomLeft/;"	e	enum:QCPItemText::AnchorIndex
aiTop	qcustomplot.h	/^  enum AnchorIndex {aiTopLeftRim, aiTop, aiTopRightRim, aiRight, aiBottomRightRim, aiBottom, aiB/;"	e	enum:QCPItemEllipse::AnchorIndex
aiTopLeft	qcustomplot.h	/^  enum AnchorIndex {aiTopLeft, aiTop, aiTopRight, aiRight, aiBottomRight, aiBottom, aiBottomLeft/;"	e	enum:QCPItemText::AnchorIndex
aiTopLeftRim	qcustomplot.h	/^  enum AnchorIndex {aiTopLeftRim, aiTop, aiTopRightRim, aiRight, aiBottomRightRim, aiBottom, aiB/;"	e	enum:QCPItemEllipse::AnchorIndex
aiTopRight	qcustomplot.h	/^  enum AnchorIndex {aiTop, aiTopRight, aiRight, aiBottom, aiBottomLeft, aiLeft};$/;"	e	enum:QCPItemPixmap::AnchorIndex
aiTopRight	qcustomplot.h	/^  enum AnchorIndex {aiTop, aiTopRight, aiRight, aiBottom, aiBottomLeft, aiLeft};$/;"	e	enum:QCPItemRect::AnchorIndex
aiTopRight	qcustomplot.h	/^  enum AnchorIndex {aiTopLeft, aiTop, aiTopRight, aiRight, aiBottomRight, aiBottom, aiBottomLeft/;"	e	enum:QCPItemText::AnchorIndex
aiTopRightRim	qcustomplot.h	/^  enum AnchorIndex {aiTopLeftRim, aiTop, aiTopRightRim, aiRight, aiBottomRightRim, aiBottom, aiB/;"	e	enum:QCPItemEllipse::AnchorIndex
alice_blue	spdlog/fmt/bundled/colors.h	/^    alice_blue = 0xF0F8FF,              \/\/ rgb(240,248,255)$/;"	e	enum:color
align	spdlog/fmt/bundled/format.h	/^    Alignment align() const$/;"	f	struct:fmt::AlignSpec	typeref:typename:Alignment
align	spdlog/fmt/bundled/format.h	/^    Alignment align() const$/;"	f	struct:fmt::TypeSpec	typeref:typename:Alignment
align_	spdlog/fmt/bundled/format.h	/^    Alignment align_;$/;"	m	struct:fmt::AlignSpec	typeref:typename:Alignment
all_a	stb_image.h	/^   unsigned int mr,mg,mb,ma, all_a;$/;"	m	struct:__anon84e4e8860e08	typeref:typename:unsigned int
alloc	protobuf-c/protobuf-c.h	/^	void		*(*alloc)(void *allocator_data, size_t size);$/;"	m	struct:ProtobufCAllocator	typeref:typename:void * (*)(void * allocator_data,size_t size)
allocator	protobuf-c/protobuf-c.h	/^	ProtobufCAllocator	*allocator;$/;"	m	struct:ProtobufCBufferSimple	typeref:typename:ProtobufCAllocator *
allocator_data	protobuf-c/protobuf-c.h	/^	void		*allocator_data;$/;"	m	struct:ProtobufCAllocator	typeref:typename:void *
allocator_type	json.hpp	/^    using allocator_type = AllocatorType<basic_json>;$/;"	t	class:nlohmann::basic_json	typeref:typename:AllocatorType<basic_json>
alloced	protobuf-c/protobuf-c.h	/^	size_t			alloced;$/;"	m	struct:ProtobufCBufferSimple	typeref:typename:size_t
allow_exceptions	json.hpp	/^    const bool allow_exceptions = true;$/;"	m	class:nlohmann::detail::parser	typeref:typename:const bool
alpha	qcustomplot.cpp	/^unsigned char QCPColorMapData::alpha(int keyIndex, int valueIndex)$/;"	f	class:QCPColorMapData	typeref:typename:unsigned char
alpha	qcustomplot.h	/^  unsigned char alpha(int keyIndex, int valueIndex);$/;"	p	class:QCPColorMapData	typeref:typename:unsigned char
ampm	spdlog/details/pattern_formatter.h	/^static const char *ampm(const tm &t)$/;"	f	namespace:spdlog::details	typeref:typename:const char *
ampm	spdlog/details/pattern_formatter_impl.h	/^static const char *ampm(const tm &t)$/;"	f	namespace:spdlog::details	typeref:typename:const char *
anchor	json.hpp	/^        IteratorType anchor;$/;"	m	class:nlohmann::detail::iteration_proxy::iteration_proxy_internal	typeref:typename:IteratorType
anchor	qcustomplot.cpp	/^QCPItemAnchor *QCPAbstractItem::anchor(const QString &name) const$/;"	f	class:QCPAbstractItem	typeref:typename:QCPItemAnchor *
anchor	qcustomplot.h	/^  QCPItemAnchor *anchor(const QString &name) const;$/;"	p	class:QCPAbstractItem	typeref:typename:QCPItemAnchor *
anchorPixelPosition	qcustomplot.cpp	/^QPointF QCPAbstractItem::anchorPixelPosition(int anchorId) const$/;"	f	class:QCPAbstractItem	typeref:typename:QPointF
anchorPixelPosition	qcustomplot.cpp	/^QPointF QCPItemBracket::anchorPixelPosition(int anchorId) const$/;"	f	class:QCPItemBracket	typeref:typename:QPointF
anchorPixelPosition	qcustomplot.cpp	/^QPointF QCPItemEllipse::anchorPixelPosition(int anchorId) const$/;"	f	class:QCPItemEllipse	typeref:typename:QPointF
anchorPixelPosition	qcustomplot.cpp	/^QPointF QCPItemPixmap::anchorPixelPosition(int anchorId) const$/;"	f	class:QCPItemPixmap	typeref:typename:QPointF
anchorPixelPosition	qcustomplot.cpp	/^QPointF QCPItemRect::anchorPixelPosition(int anchorId) const$/;"	f	class:QCPItemRect	typeref:typename:QPointF
anchorPixelPosition	qcustomplot.cpp	/^QPointF QCPItemText::anchorPixelPosition(int anchorId) const$/;"	f	class:QCPItemText	typeref:typename:QPointF
anchorPixelPosition	qcustomplot.h	/^  virtual QPointF anchorPixelPosition(int anchorId) const Q_DECL_OVERRIDE;$/;"	p	class:QCPItemBracket	typeref:typename:QPointF
anchorPixelPosition	qcustomplot.h	/^  virtual QPointF anchorPixelPosition(int anchorId) const Q_DECL_OVERRIDE;$/;"	p	class:QCPItemEllipse	typeref:typename:QPointF
anchorPixelPosition	qcustomplot.h	/^  virtual QPointF anchorPixelPosition(int anchorId) const Q_DECL_OVERRIDE;$/;"	p	class:QCPItemPixmap	typeref:typename:QPointF
anchorPixelPosition	qcustomplot.h	/^  virtual QPointF anchorPixelPosition(int anchorId) const Q_DECL_OVERRIDE;$/;"	p	class:QCPItemRect	typeref:typename:QPointF
anchorPixelPosition	qcustomplot.h	/^  virtual QPointF anchorPixelPosition(int anchorId) const Q_DECL_OVERRIDE;$/;"	p	class:QCPItemText	typeref:typename:QPointF
anchorPixelPosition	qcustomplot.h	/^  virtual QPointF anchorPixelPosition(int anchorId) const;$/;"	p	class:QCPAbstractItem	typeref:typename:QPointF
anchors	qcustomplot.h	/^  QList<QCPItemAnchor*> anchors() const { return mAnchors; }$/;"	f	class:QCPAbstractItem	typeref:typename:QList<QCPItemAnchor * >
android_logger	spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::android_logger(const std::string &logger_name, co/;"	f	class:spdlog	typeref:typename:std::shared_ptr<spdlog::logger>
android_logger	spdlog/spdlog.h	/^std::shared_ptr<logger> android_logger(const std::string &logger_name, const std::string &tag = /;"	p	namespace:spdlog	typeref:typename:std::shared_ptr<logger>
android_sink	spdlog/sinks/android_sink.h	/^    explicit android_sink(const std::string &tag = "spdlog", bool use_raw_msg = false)$/;"	f	class:spdlog::sinks::android_sink
android_sink	spdlog/sinks/android_sink.h	/^class android_sink : public sink$/;"	c	namespace:spdlog::sinks
ansicolor_sink	spdlog/sinks/ansicolor_sink.h	/^    explicit ansicolor_sink(FILE *file)$/;"	f	class:spdlog::sinks::ansicolor_sink
ansicolor_sink	spdlog/sinks/ansicolor_sink.h	/^class ansicolor_sink : public base_sink<Mutex>$/;"	c	namespace:spdlog::sinks
ansicolor_stderr_sink	spdlog/sinks/ansicolor_sink.h	/^    ansicolor_stderr_sink()$/;"	f	class:spdlog::sinks::ansicolor_stderr_sink
ansicolor_stderr_sink	spdlog/sinks/ansicolor_sink.h	/^class ansicolor_stderr_sink : public ansicolor_sink<Mutex>$/;"	c	namespace:spdlog::sinks
ansicolor_stderr_sink_mt	spdlog/sinks/ansicolor_sink.h	/^using ansicolor_stderr_sink_mt = ansicolor_stderr_sink<std::mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:ansicolor_stderr_sink<std::mutex>
ansicolor_stderr_sink_st	spdlog/sinks/ansicolor_sink.h	/^using ansicolor_stderr_sink_st = ansicolor_stderr_sink<details::null_mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:ansicolor_stderr_sink<details::null_mutex>
ansicolor_stdout_sink	spdlog/sinks/ansicolor_sink.h	/^    ansicolor_stdout_sink()$/;"	f	class:spdlog::sinks::ansicolor_stdout_sink
ansicolor_stdout_sink	spdlog/sinks/ansicolor_sink.h	/^class ansicolor_stdout_sink : public ansicolor_sink<Mutex>$/;"	c	namespace:spdlog::sinks
ansicolor_stdout_sink_mt	spdlog/sinks/ansicolor_sink.h	/^using ansicolor_stdout_sink_mt = ansicolor_stdout_sink<std::mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:ansicolor_stdout_sink<std::mutex>
ansicolor_stdout_sink_st	spdlog/sinks/ansicolor_sink.h	/^using ansicolor_stdout_sink_st = ansicolor_stdout_sink<details::null_mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:ansicolor_stdout_sink<details::null_mutex>
antialiased	qcustomplot.h	/^  Q_PROPERTY(bool antialiased READ antialiased WRITE setAntialiased)$/;"	p	class:QCPLayerable	typeref:typename:bool
antialiased	qcustomplot.h	/^  bool antialiased() const { return mAntialiased; }$/;"	f	class:QCPLayerable	typeref:typename:bool
antialiasedElements	qcustomplot.h	/^  QCP::AntialiasedElements antialiasedElements() const { return mAntialiasedElements; }$/;"	f	class:QCustomPlot	typeref:typename:QCP::AntialiasedElements
antialiasedFill	qcustomplot.h	/^  Q_PROPERTY(bool antialiasedFill READ antialiasedFill WRITE setAntialiasedFill)$/;"	p	class:QCPAbstractPlottable	typeref:typename:bool
antialiasedFill	qcustomplot.h	/^  bool antialiasedFill() const { return mAntialiasedFill; }$/;"	f	class:QCPAbstractPlottable	typeref:typename:bool
antialiasedScatters	qcustomplot.h	/^  Q_PROPERTY(bool antialiasedScatters READ antialiasedScatters WRITE setAntialiasedScatters)$/;"	p	class:QCPAbstractPlottable	typeref:typename:bool
antialiasedScatters	qcustomplot.h	/^  bool antialiasedScatters() const { return mAntialiasedScatters; }$/;"	f	class:QCPAbstractPlottable	typeref:typename:bool
antialiasedSubGrid	qcustomplot.h	/^  Q_PROPERTY(bool antialiasedSubGrid READ antialiasedSubGrid WRITE setAntialiasedSubGrid)$/;"	p	class:QCPGrid	typeref:typename:bool
antialiasedSubGrid	qcustomplot.h	/^  bool antialiasedSubGrid() const { return mAntialiasedSubGrid; }$/;"	f	class:QCPGrid	typeref:typename:bool
antialiasedZeroLine	qcustomplot.h	/^  Q_PROPERTY(bool antialiasedZeroLine READ antialiasedZeroLine WRITE setAntialiasedZeroLine)$/;"	p	class:QCPGrid	typeref:typename:bool
antialiasedZeroLine	qcustomplot.h	/^  bool antialiasedZeroLine() const { return mAntialiasedZeroLine; }$/;"	f	class:QCPGrid	typeref:typename:bool
antialiasing	qcustomplot.h	/^  bool antialiasing() const { return testRenderHint(QPainter::Antialiasing); }$/;"	f	class:QCPPainter	typeref:typename:bool
antique_white	spdlog/fmt/bundled/colors.h	/^    antique_white = 0xFAEBD7,           \/\/ rgb(250,235,215)$/;"	e	enum:color
append	protobuf-c/protobuf-c.h	/^	void		(*append)(ProtobufCBuffer *buffer,$/;"	m	struct:ProtobufCBuffer	typeref:typename:void (*)(ProtobufCBuffer * buffer,size_t len,const uint8_t * data)
append	qcustomplot.cpp	/^void QCPBarsGroup::append(QCPBars *bars)$/;"	f	class:QCPBarsGroup	typeref:typename:void
append	qcustomplot.h	/^  void append(QCPBars *bars);$/;"	p	class:QCPBarsGroup	typeref:typename:void
append	spdlog/fmt/bundled/core.h	/^    void append(const U *begin, const U *end);$/;"	p	class:internal::basic_buffer	typeref:typename:void
append	spdlog/fmt/bundled/format.h	/^    void append(const U *begin, const U *end);$/;"	p	class:fmt::Buffer	typeref:typename:void
append	spdlog/fmt/bundled/format.h	/^void Buffer<T>::append(const U *begin, const U *end)$/;"	f	class:fmt::Buffer	typeref:typename:void
append_buf	spdlog/details/fmt_helper.h	/^inline void append_buf(const fmt::basic_memory_buffer<char, Buffer_Size1> &buf, fmt::basic_memor/;"	f	namespace:spdlog::details::fmt_helper	typeref:typename:void
append_c_str	spdlog/details/fmt_helper.h	/^inline void append_c_str(const char *c_str, fmt::basic_memory_buffer<char, Buffer_Size> &dest)$/;"	f	namespace:spdlog::details::fmt_helper	typeref:typename:void
append_exponent	json.hpp	/^inline char* append_exponent(char* buf, int e)$/;"	f	namespace:nlohmann::detail::dtoa_impl	typeref:typename:char *
append_float_length	spdlog/fmt/bundled/format.h	/^    void append_float_length(Char *&, T)$/;"	f	class:fmt::BasicWriter	typeref:typename:void
append_float_length	spdlog/fmt/bundled/format.h	/^    void append_float_length(Char *&format_ptr, long double)$/;"	f	class:fmt::BasicWriter	typeref:typename:void
append_int	spdlog/details/fmt_helper.h	/^inline void append_int(T n, fmt::basic_memory_buffer<char, Buffer_Size> &dest)$/;"	f	namespace:spdlog::details::fmt_helper	typeref:typename:void
append_str	spdlog/details/fmt_helper.h	/^inline void append_str(const std::string &str, fmt::basic_memory_buffer<char, Buffer_Size> &dest/;"	f	namespace:spdlog::details::fmt_helper	typeref:typename:void
applyAntialiasingHint	qcustomplot.cpp	/^void QCPLayerable::applyAntialiasingHint(QCPPainter *painter, bool localAntialiased, QCP::Antial/;"	f	class:QCPLayerable	typeref:typename:void
applyAntialiasingHint	qcustomplot.h	/^  void applyAntialiasingHint(QCPPainter *painter, bool localAntialiased, QCP::AntialiasedElement/;"	p	class:QCPLayerable	typeref:typename:void
applyBrush	qcustomplot.cpp	/^void QCPSelectionDecorator::applyBrush(QCPPainter *painter) const$/;"	f	class:QCPSelectionDecorator	typeref:typename:void
applyBrush	qcustomplot.h	/^  void applyBrush(QCPPainter *painter) const;$/;"	p	class:QCPSelectionDecorator	typeref:typename:void
applyDefaultAntialiasingHint	qcustomplot.cpp	/^void QCPAbstractItem::applyDefaultAntialiasingHint(QCPPainter *painter) const$/;"	f	class:QCPAbstractItem	typeref:typename:void
applyDefaultAntialiasingHint	qcustomplot.cpp	/^void QCPAbstractLegendItem::applyDefaultAntialiasingHint(QCPPainter *painter) const$/;"	f	class:QCPAbstractLegendItem	typeref:typename:void
applyDefaultAntialiasingHint	qcustomplot.cpp	/^void QCPAbstractPlottable::applyDefaultAntialiasingHint(QCPPainter *painter) const$/;"	f	class:QCPAbstractPlottable	typeref:typename:void
applyDefaultAntialiasingHint	qcustomplot.cpp	/^void QCPAxis::applyDefaultAntialiasingHint(QCPPainter *painter) const$/;"	f	class:QCPAxis	typeref:typename:void
applyDefaultAntialiasingHint	qcustomplot.cpp	/^void QCPAxisRect::applyDefaultAntialiasingHint(QCPPainter *painter) const$/;"	f	class:QCPAxisRect	typeref:typename:void
applyDefaultAntialiasingHint	qcustomplot.cpp	/^void QCPColorScale::applyDefaultAntialiasingHint(QCPPainter *painter) const$/;"	f	class:QCPColorScale	typeref:typename:void
applyDefaultAntialiasingHint	qcustomplot.cpp	/^void QCPGrid::applyDefaultAntialiasingHint(QCPPainter *painter) const$/;"	f	class:QCPGrid	typeref:typename:void
applyDefaultAntialiasingHint	qcustomplot.cpp	/^void QCPLegend::applyDefaultAntialiasingHint(QCPPainter *painter) const$/;"	f	class:QCPLegend	typeref:typename:void
applyDefaultAntialiasingHint	qcustomplot.cpp	/^void QCPSelectionRect::applyDefaultAntialiasingHint(QCPPainter *painter) const$/;"	f	class:QCPSelectionRect	typeref:typename:void
applyDefaultAntialiasingHint	qcustomplot.cpp	/^void QCPTextElement::applyDefaultAntialiasingHint(QCPPainter *painter) const$/;"	f	class:QCPTextElement	typeref:typename:void
applyDefaultAntialiasingHint	qcustomplot.h	/^  virtual void applyDefaultAntialiasingHint(QCPPainter *painter) const = 0;$/;"	p	class:QCPLayerable	typeref:typename:void
applyDefaultAntialiasingHint	qcustomplot.h	/^  virtual void applyDefaultAntialiasingHint(QCPPainter *painter) const Q_DECL_OVERRIDE { Q_UNUSE/;"	f	class:QCPLayoutElement	typeref:typename:void
applyDefaultAntialiasingHint	qcustomplot.h	/^  virtual void applyDefaultAntialiasingHint(QCPPainter *painter) const Q_DECL_OVERRIDE;$/;"	p	class:QCPAbstractItem	typeref:typename:void
applyDefaultAntialiasingHint	qcustomplot.h	/^  virtual void applyDefaultAntialiasingHint(QCPPainter *painter) const Q_DECL_OVERRIDE;$/;"	p	class:QCPAbstractLegendItem	typeref:typename:void
applyDefaultAntialiasingHint	qcustomplot.h	/^  virtual void applyDefaultAntialiasingHint(QCPPainter *painter) const Q_DECL_OVERRIDE;$/;"	p	class:QCPAxis	typeref:typename:void
applyDefaultAntialiasingHint	qcustomplot.h	/^  virtual void applyDefaultAntialiasingHint(QCPPainter *painter) const Q_DECL_OVERRIDE;$/;"	p	class:QCPAxisRect	typeref:typename:void
applyDefaultAntialiasingHint	qcustomplot.h	/^  virtual void applyDefaultAntialiasingHint(QCPPainter *painter) const Q_DECL_OVERRIDE;$/;"	p	class:QCPColorScale	typeref:typename:void
applyDefaultAntialiasingHint	qcustomplot.h	/^  virtual void applyDefaultAntialiasingHint(QCPPainter *painter) const Q_DECL_OVERRIDE;$/;"	p	class:QCPGrid	typeref:typename:void
applyDefaultAntialiasingHint	qcustomplot.h	/^  virtual void applyDefaultAntialiasingHint(QCPPainter *painter) const Q_DECL_OVERRIDE;$/;"	p	class:QCPLegend	typeref:typename:void
applyDefaultAntialiasingHint	qcustomplot.h	/^  virtual void applyDefaultAntialiasingHint(QCPPainter *painter) const Q_DECL_OVERRIDE;$/;"	p	class:QCPSelectionRect	typeref:typename:void
applyDefaultAntialiasingHint	qcustomplot.h	/^  virtual void applyDefaultAntialiasingHint(QCPPainter *painter) const Q_DECL_OVERRIDE;$/;"	p	class:QCPTextElement	typeref:typename:void
applyDefaultAntialiasingHint	qcustomplot.h	/^  void applyDefaultAntialiasingHint(QCPPainter *painter) const Q_DECL_OVERRIDE;$/;"	p	class:QCPAbstractPlottable	typeref:typename:void
applyFillAntialiasingHint	qcustomplot.cpp	/^void QCPAbstractPlottable::applyFillAntialiasingHint(QCPPainter *painter) const$/;"	f	class:QCPAbstractPlottable	typeref:typename:void
applyFillAntialiasingHint	qcustomplot.h	/^  void applyFillAntialiasingHint(QCPPainter *painter) const;$/;"	p	class:QCPAbstractPlottable	typeref:typename:void
applyPen	qcustomplot.cpp	/^void QCPSelectionDecorator::applyPen(QCPPainter *painter) const$/;"	f	class:QCPSelectionDecorator	typeref:typename:void
applyPen	qcustomplot.h	/^  void applyPen(QCPPainter *painter) const;$/;"	p	class:QCPSelectionDecorator	typeref:typename:void
applyResults	mdi-child.cpp	/^void MdiChild::applyResults(const QByteArray& message) {$/;"	f	class:MdiChild	typeref:typename:void
applyResults	mdi-child.h	/^    void applyResults(const QByteArray& message);$/;"	p	class:MdiChild	typeref:typename:void
applyResults	mdi-child.h	/^    void applyResults(const QByteArray& message);$/;"	s	class:MdiChild	typeref:typename:void
applyScattersAntialiasingHint	qcustomplot.cpp	/^void QCPAbstractPlottable::applyScattersAntialiasingHint(QCPPainter *painter) const$/;"	f	class:QCPAbstractPlottable	typeref:typename:void
applyScattersAntialiasingHint	qcustomplot.h	/^  void applyScattersAntialiasingHint(QCPPainter *painter) const;$/;"	p	class:QCPAbstractPlottable	typeref:typename:void
applyTo	qcustomplot.cpp	/^void QCPScatterStyle::applyTo(QCPPainter *painter, const QPen &defaultPen) const$/;"	f	class:QCPScatterStyle	typeref:typename:void
applyTo	qcustomplot.h	/^  void applyTo(QCPPainter *painter, const QPen &defaultPen) const;$/;"	p	class:QCPScatterStyle	typeref:typename:void
apply_all	spdlog/details/registry.h	/^    void apply_all(std::function<void(std::shared_ptr<logger>)> fun)$/;"	f	class:spdlog::details::registry_t	typeref:typename:void
apply_all	spdlog/details/spdlog_impl.h	/^inline void spdlog::apply_all(std::function<void(std::shared_ptr<logger>)> fun)$/;"	f	class:spdlog	typeref:typename:void
apply_all	spdlog/spdlog.h	/^void apply_all(std::function<void(std::shared_ptr<logger>)> fun);$/;"	p	namespace:spdlog	typeref:typename:void
aqua	spdlog/fmt/bundled/colors.h	/^    aqua = 0x00FFFF,                    \/\/ rgb(0,255,255)$/;"	e	enum:color
aquamarine	spdlog/fmt/bundled/colors.h	/^    aquamarine = 0x7FFFD4,              \/\/ rgb(127,255,212)$/;"	e	enum:color
arg	spdlog/fmt/bundled/core.h	/^        basic_format_arg<Context> arg;$/;"	m	struct:internal::arg_map::entry	typeref:typename:basic_format_arg<Context>
arg	spdlog/fmt/bundled/core.h	/^inline internal::named_arg<T, char> arg(string_view name, const T &arg)$/;"	f	typeref:typename:internal::named_arg<T,char>
arg	spdlog/fmt/bundled/core.h	/^inline internal::named_arg<T, wchar_t> arg(wstring_view name, const T &arg)$/;"	f	typeref:typename:internal::named_arg<T,wchar_t>
arg	spdlog/fmt/bundled/core.h	/^void arg(S, internal::named_arg<T, Char>) FMT_DELETED;$/;"	p	typeref:typename:void
arg	spdlog/fmt/bundled/format.h	/^inline internal::NamedArgWithType<char, T> arg(StringRef name, const T &arg)$/;"	f	namespace:fmt	typeref:typename:internal::NamedArgWithType<char,T>
arg	spdlog/fmt/bundled/format.h	/^inline internal::NamedArgWithType<wchar_t, T> arg(WStringRef name, const T &arg)$/;"	f	namespace:fmt	typeref:typename:internal::NamedArgWithType<wchar_t,T>
arg	spdlog/fmt/bundled/format.h	/^void arg(StringRef, const internal::NamedArg<Char> &) FMT_DELETED_OR_UNDEFINED;$/;"	p	namespace:fmt	typeref:typename:void
arg	spdlog/fmt/bundled/format.h	/^void arg(WStringRef, const internal::NamedArg<Char> &) FMT_DELETED_OR_UNDEFINED;$/;"	p	namespace:fmt	typeref:typename:void
arg_	spdlog/fmt/bundled/printf.h	/^    internal::Arg &arg_;$/;"	m	class:fmt::internal::ArgConverter	typeref:typename:internal::Arg &
arg_	spdlog/fmt/bundled/printf.h	/^    internal::Arg &arg_;$/;"	m	class:fmt::internal::CharConverter	typeref:typename:internal::Arg &
arg_map	spdlog/fmt/bundled/core.h	/^    arg_map()$/;"	f	class:internal::arg_map
arg_map	spdlog/fmt/bundled/core.h	/^class arg_map$/;"	c	namespace:internal
args	spdlog/fmt/bundled/core.h	/^    basic_format_args<Context> args() const$/;"	f	class:internal::context_base	typeref:typename:basic_format_args<Context>
args	spdlog/fmt/bundled/format.h	/^    const ArgList &args() const$/;"	f	class:fmt::internal::FormatterBase	typeref:typename:const ArgList &
args_	spdlog/fmt/bundled/core.h	/^        const format_arg *args_;$/;"	m	union:basic_format_args::__anonef64315f040a	typeref:typename:const format_arg *
args_	spdlog/fmt/bundled/core.h	/^    basic_format_args<Context> args_;$/;"	m	class:internal::context_base	typeref:typename:basic_format_args<Context>
args_	spdlog/fmt/bundled/format.h	/^        const internal::Arg *args_;$/;"	m	union:fmt::ArgList::__anon1ea8787f0b0a	typeref:typename:const internal::Arg *
args_	spdlog/fmt/bundled/format.h	/^    ArgList args_;$/;"	m	class:fmt::internal::FormatterBase	typeref:typename:ArgList
array	json.hpp	/^        array_t* array;$/;"	m	union:nlohmann::basic_json::json_value	typeref:typename:array_t *
array	json.hpp	/^    array,            \/\/\/< array (ordered collection of values)$/;"	e	enum:nlohmann::detail::value_t
array	json.hpp	/^    static basic_json array(initializer_list_t init = {})$/;"	f	class:nlohmann::basic_json	typeref:typename:basic_json
array_end	json.hpp	/^        array_end,$/;"	e	enum:nlohmann::detail::parser::parse_event_t
array_index	json.hpp	/^        std::size_t array_index = 0;$/;"	m	class:nlohmann::detail::iteration_proxy::iteration_proxy_internal	typeref:typename:std::size_t
array_index	json.hpp	/^    static int array_index(const std::string& s)$/;"	f	class:nlohmann::json_pointer	typeref:typename:int
array_iterator	json.hpp	/^    typename BasicJsonType::array_t::iterator array_iterator {};$/;"	m	struct:nlohmann::detail::internal_iterator	typeref:typename:BasicJsonType::array_t::iterator
array_start	json.hpp	/^        array_start,$/;"	e	enum:nlohmann::detail::parser::parse_event_t
array_t	json.hpp	/^    using array_t = ArrayType<basic_json, AllocatorType<basic_json>>;$/;"	t	class:nlohmann::basic_json	typeref:typename:ArrayType<basic_json,AllocatorType<basic_json>>
array_t	json.hpp	/^    using array_t = typename BasicJsonType::array_t;$/;"	t	class:nlohmann::detail::iter_impl	typeref:typename:BasicJsonType::array_t
as_named_arg	spdlog/fmt/bundled/core.h	/^    const named_arg_base<char_type> &as_named_arg()$/;"	f	class:internal::value	typeref:typename:const named_arg_base<char_type> &
aspectRatioMode	qcustomplot.h	/^  Qt::AspectRatioMode aspectRatioMode() const { return mAspectRatioMode; }$/;"	f	class:QCPItemPixmap	typeref:typename:Qt::AspectRatioMode
assert_invariant	json.hpp	/^    void assert_invariant() const noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:void
async_factory	spdlog/async.h	/^struct async_factory$/;"	s	namespace:spdlog
async_log_helper	spdlog/details/async_log_helper.h	/^    async_log_helper(const async_log_helper &) = delete;$/;"	p	class:spdlog::details::async_log_helper
async_log_helper	spdlog/details/async_log_helper.h	/^    async_log_helper(std::string logger_name,$/;"	p	class:spdlog::details::async_log_helper
async_log_helper	spdlog/details/async_log_helper.h	/^class async_log_helper$/;"	c	namespace:spdlog::details
async_log_helper	spdlog/details/async_log_helper.h	/^inline spdlog::details::async_log_helper::async_log_helper(std::string logger_name, $/;"	f	class:spdlog::details::async_log_helper
async_logger	spdlog/async_logger.h	/^    async_logger(const std::string &logger_name, const It &begin, const It &end, size_t queue_si/;"	p	class:spdlog::SPDLOG_FINAL
async_logger	spdlog/async_logger.h	/^    async_logger(const std::string &logger_name, sink_ptr single_sink, size_t queue_size,$/;"	p	class:spdlog::SPDLOG_FINAL
async_logger	spdlog/async_logger.h	/^    async_logger(const std::string &logger_name, sinks_init_list sinks, size_t queue_size,$/;"	p	class:spdlog::SPDLOG_FINAL
async_logger	spdlog/details/async_logger_impl.h	/^inline spdlog::async_logger::async_logger(const std::string &logger_name, const It &begin, const/;"	f	class:spdlog::async_logger
async_logger	spdlog/details/async_logger_impl.h	/^inline spdlog::async_logger::async_logger(const std::string &logger_name, sink_ptr single_sink, /;"	f	class:spdlog::async_logger
async_logger	spdlog/details/async_logger_impl.h	/^inline spdlog::async_logger::async_logger(const std::string &logger_name, sinks_init_list sinks_/;"	f	class:spdlog::async_logger
async_logger_ptr	spdlog/details/thread_pool.h	/^using async_logger_ptr = std::shared_ptr<spdlog::async_logger>;$/;"	t	namespace:spdlog::details	typeref:typename:std::shared_ptr<spdlog::async_logger>
async_msg	spdlog/details/async_log_helper.h	/^        async_msg() = default;$/;"	p	struct:spdlog::details::async_log_helper::async_msg
async_msg	spdlog/details/async_log_helper.h	/^        async_msg(async_msg &&other) = default;$/;"	p	struct:spdlog::details::async_log_helper::async_msg
async_msg	spdlog/details/async_log_helper.h	/^        async_msg(const async_msg &) = delete;$/;"	p	struct:spdlog::details::async_log_helper::async_msg
async_msg	spdlog/details/async_log_helper.h	/^        explicit async_msg(async_msg_type m_type)$/;"	f	struct:spdlog::details::async_log_helper::async_msg
async_msg	spdlog/details/async_log_helper.h	/^        explicit async_msg(const details::log_msg &m)$/;"	f	struct:spdlog::details::async_log_helper::async_msg
async_msg	spdlog/details/async_log_helper.h	/^    struct async_msg$/;"	s	class:spdlog::details::async_log_helper
async_msg	spdlog/details/thread_pool.h	/^    async_msg() = default;$/;"	p	struct:spdlog::details::async_msg
async_msg	spdlog/details/thread_pool.h	/^    async_msg(async_logger_ptr &&worker, async_msg_type the_type)$/;"	f	struct:spdlog::details::async_msg
async_msg	spdlog/details/thread_pool.h	/^    async_msg(async_logger_ptr &&worker, async_msg_type the_type, details::log_msg &&m)$/;"	f	struct:spdlog::details::async_msg
async_msg	spdlog/details/thread_pool.h	/^    async_msg(async_msg &&other) = default;$/;"	p	struct:spdlog::details::async_msg
async_msg	spdlog/details/thread_pool.h	/^    async_msg(async_msg &&other) SPDLOG_NOEXCEPT : msg_type(other.msg_type),$/;"	f	struct:spdlog::details::async_msg
async_msg	spdlog/details/thread_pool.h	/^    async_msg(async_msg_type the_type)$/;"	f	struct:spdlog::details::async_msg
async_msg	spdlog/details/thread_pool.h	/^    async_msg(const async_msg &) = delete;$/;"	p	struct:spdlog::details::async_msg
async_msg	spdlog/details/thread_pool.h	/^struct async_msg$/;"	s	namespace:spdlog::details
async_msg_type	spdlog/details/async_log_helper.h	/^    enum class async_msg_type$/;"	g	class:spdlog::details::async_log_helper
async_msg_type	spdlog/details/thread_pool.h	/^enum class async_msg_type$/;"	g	namespace:spdlog::details
async_overflow_policy	spdlog/common.h	/^enum class async_overflow_policy$/;"	g	namespace:spdlog
at	json.hpp	/^    const_reference at(const json_pointer& ptr) const$/;"	f	class:nlohmann::basic_json	typeref:typename:const_reference
at	json.hpp	/^    const_reference at(const typename object_t::key_type& key) const$/;"	f	class:nlohmann::basic_json	typeref:typename:const_reference
at	json.hpp	/^    const_reference at(size_type idx) const$/;"	f	class:nlohmann::basic_json	typeref:typename:const_reference
at	json.hpp	/^    reference at(const json_pointer& ptr)$/;"	f	class:nlohmann::basic_json	typeref:typename:reference
at	json.hpp	/^    reference at(const typename object_t::key_type& key)$/;"	f	class:nlohmann::basic_json	typeref:typename:reference
at	json.hpp	/^    reference at(size_type idx)$/;"	f	class:nlohmann::basic_json	typeref:typename:reference
at	qcustomplot.h	/^  const_iterator at(int index) const { return constBegin()+qBound(0, index, size()); }$/;"	f	class:QCPDataContainer	typeref:typename:const_iterator
atBottom	qcustomplot.h	/^                  ,atBottom = 0x08  \/\/\/< <tt>0x08<\/tt> Axis is horizontal and on the bottom /;"	e	enum:QCPAxis::AxisType
atLeft	qcustomplot.h	/^  enum AxisType { atLeft    = 0x01  \/\/\/< <tt>0x01<\/tt> Axis is vertical and on the left side/;"	e	enum:QCPAxis::AxisType
atRight	qcustomplot.h	/^                  ,atRight  = 0x02  \/\/\/< <tt>0x02<\/tt> Axis is vertical and on the right sid/;"	e	enum:QCPAxis::AxisType
atTop	qcustomplot.h	/^                  ,atTop    = 0x04  \/\/\/< <tt>0x04<\/tt> Axis is horizontal and on the top sid/;"	e	enum:QCPAxis::AxisType
audio	mdi-child.h	/^    QAudioOutput* audio; $/;"	m	class:MdiChild	typeref:typename:QAudioOutput *
audio	qc-message.pb.h	/^  const ::std::string& audio() const;$/;"	p	class:Protocol	typeref:typename:const::std::string &
audio	qc-message.pb.h	/^inline const ::std::string& Protocol::audio() const {$/;"	f	class:Protocol	typeref:typename:const::std::string &
audio	qc-message.proto	/^optional bytes audio = 5;$/;"	f
audio	simple.pb-c.h	/^  ProtobufCBinaryData audio;$/;"	m	struct:_ToHi	typeref:typename:ProtobufCBinaryData
audio	simple.pb-c.h	/^  ProtobufCBinaryData audio;$/;"	m	struct:_ToHost	typeref:typename:ProtobufCBinaryData
audio	simple.proto	/^    optional bytes audio = 114;$/;"	f
audio	simple.proto	/^    optional bytes audio = 2; \/\/ host 가 재생할 오디오$/;"	f
autoAddPlottableToLegend	qcustomplot.h	/^  Q_PROPERTY(bool autoAddPlottableToLegend READ autoAddPlottableToLegend WRITE setAutoAddPlottab/;"	p	class:QCustomPlot	typeref:typename:bool
autoAddPlottableToLegend	qcustomplot.h	/^  bool autoAddPlottableToLegend() const { return mAutoAddPlottableToLegend; }$/;"	f	class:QCustomPlot	typeref:typename:bool
autoMargins	qcustomplot.h	/^  QCP::MarginSides autoMargins() const { return mAutoMargins; }$/;"	f	class:QCPLayoutElement	typeref:typename:QCP::MarginSides
autoSqueeze	qcustomplot.h	/^  bool autoSqueeze() const { return mAutoSqueeze; }$/;"	f	class:QCPDataContainer	typeref:typename:bool
auto_charge_control	simple.pb-c.h	/^  protobuf_c_boolean auto_charge_control;$/;"	m	struct:_ToSt	typeref:typename:protobuf_c_boolean
auto_charge_control	simple.proto	/^    optional bool auto_charge_control = 5;$/;"	f
auto_charge_step	simple.pb-c.h	/^  uint32_t auto_charge_step;$/;"	m	struct:_ToHi	typeref:typename:uint32_t
auto_charge_step	simple.proto	/^    optional uint32 auto_charge_step = 24;$/;"	f
aux	qc-message.pb.h	/^  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];$/;"	m	struct:protobuf_qc_2dmessage_2eproto::TableStruct	typeref:typename:const::google::protobuf::internal::AuxillaryParseTableField[]
axes	qcustomplot.cpp	/^QList<QCPAxis*> QCPAxisRect::axes() const$/;"	f	class:QCPAxisRect	typeref:typename:QList<QCPAxis * >
axes	qcustomplot.cpp	/^QList<QCPAxis*> QCPAxisRect::axes(QCPAxis::AxisTypes types) const$/;"	f	class:QCPAxisRect	typeref:typename:QList<QCPAxis * >
axes	qcustomplot.h	/^  QList<QCPAxis*> axes() const;$/;"	p	class:QCPAxisRect	typeref:typename:QList<QCPAxis * >
axes	qcustomplot.h	/^  QList<QCPAxis*> axes(QCPAxis::AxisTypes types) const;$/;"	p	class:QCPAxisRect	typeref:typename:QList<QCPAxis * >
axis	qcustomplot.cpp	/^QCPAxis *QCPAxisRect::axis(QCPAxis::AxisType type, int index) const$/;"	f	class:QCPAxisRect	typeref:typename:QCPAxis *
axis	qcustomplot.h	/^  QCPAxis *axis() const { return mColorAxis.data(); }$/;"	f	class:QCPColorScale	typeref:typename:QCPAxis *
axis	qcustomplot.h	/^  QCPAxis *axis(QCPAxis::AxisType type, int index=0) const;$/;"	p	class:QCPAxisRect	typeref:typename:QCPAxis *
axisClick	qcustomplot.h	/^  void axisClick(QCPAxis *axis, QCPAxis::SelectablePart part, QMouseEvent *event);$/;"	S	class:QCustomPlot	typeref:typename:void
axisClick	qcustomplot.h	/^  void axisClick(QCPAxis *axis, QCPAxis::SelectablePart part, QMouseEvent *event);$/;"	p	class:QCustomPlot	typeref:typename:void
axisCount	qcustomplot.cpp	/^int QCPAxisRect::axisCount(QCPAxis::AxisType type) const$/;"	f	class:QCPAxisRect	typeref:typename:int
axisCount	qcustomplot.h	/^  int axisCount(QCPAxis::AxisType type) const;$/;"	p	class:QCPAxisRect	typeref:typename:int
axisDoubleClick	qcustomplot.h	/^  void axisDoubleClick(QCPAxis *axis, QCPAxis::SelectablePart part, QMouseEvent *event);$/;"	S	class:QCustomPlot	typeref:typename:void
axisDoubleClick	qcustomplot.h	/^  void axisDoubleClick(QCPAxis *axis, QCPAxis::SelectablePart part, QMouseEvent *event);$/;"	p	class:QCustomPlot	typeref:typename:void
axisRect	qcustomplot.cpp	/^QCPAxisRect *QCPItemPosition::axisRect() const$/;"	f	class:QCPItemPosition	typeref:typename:QCPAxisRect *
axisRect	qcustomplot.cpp	/^QCPAxisRect *QCustomPlot::axisRect(int index) const$/;"	f	class:QCustomPlot	typeref:typename:QCPAxisRect *
axisRect	qcustomplot.h	/^  QCPAxisRect *axisRect() const { return mAxisRect; }$/;"	f	class:QCPAxis	typeref:typename:QCPAxisRect *
axisRect	qcustomplot.h	/^  QCPAxisRect *axisRect() const;$/;"	p	class:QCPItemPosition	typeref:typename:QCPAxisRect *
axisRect	qcustomplot.h	/^  QCPAxisRect* axisRect(int index=0) const;$/;"	p	class:QCustomPlot	typeref:typename:QCPAxisRect *
axisRect	qcustomplot.h	/^  QRect axisRect, viewportRect;$/;"	m	class:QCPAxisPainterPrivate	typeref:typename:QRect
axisRectAt	qcustomplot.cpp	/^QCPAxisRect *QCustomPlot::axisRectAt(const QPointF &pos) const$/;"	f	class:QCustomPlot	typeref:typename:QCPAxisRect *
axisRectAt	qcustomplot.h	/^  QCPAxisRect* axisRectAt(const QPointF &pos) const;$/;"	p	class:QCustomPlot	typeref:typename:QCPAxisRect *
axisRectCount	qcustomplot.cpp	/^int QCustomPlot::axisRectCount() const$/;"	f	class:QCustomPlot	typeref:typename:int
axisRectCount	qcustomplot.h	/^  int axisRectCount() const;$/;"	p	class:QCustomPlot	typeref:typename:int
axisRects	qcustomplot.cpp	/^QList<QCPAxisRect*> QCustomPlot::axisRects() const$/;"	f	class:QCustomPlot	typeref:typename:QList<QCPAxisRect * >
axisRects	qcustomplot.h	/^  QList<QCPAxisRect*> axisRects() const;$/;"	p	class:QCustomPlot	typeref:typename:QList<QCPAxisRect * >
axisRemoved	qcustomplot.cpp	/^void QCustomPlot::axisRemoved(QCPAxis *axis)$/;"	f	class:QCustomPlot	typeref:typename:void
axisRemoved	qcustomplot.h	/^  virtual void axisRemoved(QCPAxis *axis);$/;"	p	class:QCustomPlot	typeref:typename:void
axisSelectableChanged	qcustomplot.cpp	/^void QCPColorScaleAxisRectPrivate::axisSelectableChanged(QCPAxis::SelectableParts selectablePart/;"	f	class:QCPColorScaleAxisRectPrivate	typeref:typename:void
axisSelectableChanged	qcustomplot.h	/^  Q_SLOT void axisSelectableChanged(QCPAxis::SelectableParts selectableParts);$/;"	p	class:QCPColorScaleAxisRectPrivate	typeref:typename:Q_SLOT void
axisSelectionBox	qcustomplot.h	/^  QRect axisSelectionBox() const { return mAxisSelectionBox; }$/;"	f	class:QCPAxisPainterPrivate	typeref:typename:QRect
axisSelectionChanged	qcustomplot.cpp	/^void QCPColorScaleAxisRectPrivate::axisSelectionChanged(QCPAxis::SelectableParts selectedParts)$/;"	f	class:QCPColorScaleAxisRectPrivate	typeref:typename:void
axisSelectionChanged	qcustomplot.h	/^  Q_SLOT void axisSelectionChanged(QCPAxis::SelectableParts selectedParts);$/;"	p	class:QCPColorScaleAxisRectPrivate	typeref:typename:Q_SLOT void
axisType	qcustomplot.h	/^  AxisType axisType() const { return mAxisType; }$/;"	f	class:QCPAxis	typeref:typename:AxisType
axisType	qcustomplot.h	/^  Q_PROPERTY(AxisType axisType READ axisType)$/;"	p	class:QCPAxis	typeref:typename:AxisType
azure	spdlog/fmt/bundled/colors.h	/^    azure = 0xF0FFFF,                   \/\/ rgb(240,255,255)$/;"	e	enum:color
b	spdlog/fmt/bundled/colors.h	/^    uint8_t b;$/;"	m	struct:rgb	typeref:typename:uint8_t
b_formatter	spdlog/details/pattern_formatter.h	/^class b_formatter : public flag_formatter$/;"	c	namespace:spdlog::details
b_formatter	spdlog/details/pattern_formatter_impl.h	/^class b_formatter : public flag_formatter$/;"	c	namespace:spdlog::details
back	json.hpp	/^    const_reference back() const$/;"	f	class:nlohmann::basic_json	typeref:typename:const_reference
back	json.hpp	/^    reference back()$/;"	f	class:nlohmann::basic_json	typeref:typename:reference
background	qcustomplot.h	/^  QPixmap background() const { return mBackgroundPixmap; }$/;"	f	class:QCPAxisRect	typeref:typename:QPixmap
background	qcustomplot.h	/^  QPixmap background() const { return mBackgroundPixmap; }$/;"	f	class:QCustomPlot	typeref:typename:QPixmap
background	qcustomplot.h	/^  Q_PROPERTY(QPixmap background READ background WRITE setBackground)$/;"	p	class:QCPAxisRect	typeref:typename:QPixmap
background	qcustomplot.h	/^  Q_PROPERTY(QPixmap background READ background WRITE setBackground)$/;"	p	class:QCustomPlot	typeref:typename:QPixmap
backgroundBrush	qcustomplot.h	/^  QBrush backgroundBrush() const { return mBackgroundBrush; }$/;"	f	class:QCPAxisRect	typeref:typename:QBrush
backgroundScaled	qcustomplot.h	/^  Q_PROPERTY(bool backgroundScaled READ backgroundScaled WRITE setBackgroundScaled)$/;"	p	class:QCPAxisRect	typeref:typename:bool
backgroundScaled	qcustomplot.h	/^  Q_PROPERTY(bool backgroundScaled READ backgroundScaled WRITE setBackgroundScaled)$/;"	p	class:QCustomPlot	typeref:typename:bool
backgroundScaled	qcustomplot.h	/^  bool backgroundScaled() const { return mBackgroundScaled; }$/;"	f	class:QCPAxisRect	typeref:typename:bool
backgroundScaled	qcustomplot.h	/^  bool backgroundScaled() const { return mBackgroundScaled; }$/;"	f	class:QCustomPlot	typeref:typename:bool
backgroundScaledMode	qcustomplot.h	/^  Qt::AspectRatioMode backgroundScaledMode() const { return mBackgroundScaledMode; }$/;"	f	class:QCPAxisRect	typeref:typename:Qt::AspectRatioMode
backgroundScaledMode	qcustomplot.h	/^  Qt::AspectRatioMode backgroundScaledMode() const { return mBackgroundScaledMode; }$/;"	f	class:QCustomPlot	typeref:typename:Qt::AspectRatioMode
bandwidth_by_hi	simple.pb-c.h	/^  uint32_t bandwidth_by_hi;$/;"	m	struct:_BandwidthTest	typeref:typename:uint32_t
bandwidth_by_hi	simple.proto	/^    optional uint32 bandwidth_by_hi = 3;$/;"	f
bandwidth_test	simple.pb-c.h	/^  BandwidthTest *bandwidth_test;$/;"	m	struct:_ToHi	typeref:typename:BandwidthTest *
bandwidth_test	simple.pb-c.h	/^  BandwidthTest *bandwidth_test;$/;"	m	struct:_ToHost	typeref:typename:BandwidthTest *
bandwidth_test	simple.proto	/^    optional BandwidthTest bandwidth_test = 103; $/;"	f
bandwidth_test	simple.proto	/^    optional BandwidthTest bandwidth_test = 11; $/;"	f
bandwidth_test__descriptor	simple.pb-c.c	/^const ProtobufCMessageDescriptor bandwidth_test__descriptor =$/;"	v	typeref:typename:const ProtobufCMessageDescriptor
bandwidth_test__field_descriptors	simple.pb-c.c	/^static const ProtobufCFieldDescriptor bandwidth_test__field_descriptors[3] =$/;"	v	typeref:typename:const ProtobufCFieldDescriptor[3]	file:
bandwidth_test__field_indices_by_name	simple.pb-c.c	/^static const unsigned bandwidth_test__field_indices_by_name[] = {$/;"	v	typeref:typename:const unsigned[]	file:
bandwidth_test__free_unpacked	simple.pb-c.c	/^void   bandwidth_test__free_unpacked$/;"	f	typeref:typename:void
bandwidth_test__free_unpacked	simple.pb-c.h	/^void   bandwidth_test__free_unpacked$/;"	p	typeref:typename:void
bandwidth_test__get_packed_size	simple.pb-c.c	/^size_t bandwidth_test__get_packed_size$/;"	f	typeref:typename:size_t
bandwidth_test__get_packed_size	simple.pb-c.h	/^size_t bandwidth_test__get_packed_size$/;"	p	typeref:typename:size_t
bandwidth_test__init	simple.pb-c.c	/^void   bandwidth_test__init$/;"	f	typeref:typename:void
bandwidth_test__init	simple.pb-c.h	/^void   bandwidth_test__init$/;"	p	typeref:typename:void
bandwidth_test__number_ranges	simple.pb-c.c	/^static const ProtobufCIntRange bandwidth_test__number_ranges[1 + 1] =$/;"	v	typeref:typename:const ProtobufCIntRange[]	file:
bandwidth_test__pack	simple.pb-c.c	/^size_t bandwidth_test__pack$/;"	f	typeref:typename:size_t
bandwidth_test__pack	simple.pb-c.h	/^size_t bandwidth_test__pack$/;"	p	typeref:typename:size_t
bandwidth_test__pack_to_buffer	simple.pb-c.c	/^size_t bandwidth_test__pack_to_buffer$/;"	f	typeref:typename:size_t
bandwidth_test__pack_to_buffer	simple.pb-c.h	/^size_t bandwidth_test__pack_to_buffer$/;"	p	typeref:typename:size_t
bandwidth_test__unpack	simple.pb-c.c	/^       bandwidth_test__unpack$/;"	f	typeref:typename:BandwidthTest *
bandwidth_test__unpack	simple.pb-c.h	/^       bandwidth_test__unpack$/;"	p	typeref:typename:BandwidthTest *
barAbove	qcustomplot.h	/^  QCPBars *barAbove() const { return mBarAbove.data(); }$/;"	f	class:QCPBars	typeref:typename:QCPBars *
barBelow	qcustomplot.h	/^  QCPBars *barBelow() const { return mBarBelow.data(); }$/;"	f	class:QCPBars	typeref:typename:QCPBars *
barWidth	qcustomplot.h	/^  Q_PROPERTY(int barWidth READ barWidth WRITE setBarWidth)$/;"	p	class:QCPColorScale	typeref:typename:int
barWidth	qcustomplot.h	/^  int barWidth () const { return mBarWidth; }$/;"	f	class:QCPColorScale	typeref:typename:int
bars	qcustomplot.cpp	/^QCPBars *QCPBarsGroup::bars(int index) const$/;"	f	class:QCPBarsGroup	typeref:typename:QCPBars *
bars	qcustomplot.h	/^  QCPBars* bars(int index) const;$/;"	p	class:QCPBarsGroup	typeref:typename:QCPBars *
bars	qcustomplot.h	/^  QList<QCPBars*> bars() const { return mBars; }$/;"	f	class:QCPBarsGroup	typeref:typename:QList<QCPBars * >
barsGroup	qcustomplot.h	/^  QCPBarsGroup *barsGroup() const { return mBarsGroup; }$/;"	f	class:QCPBars	typeref:typename:QCPBarsGroup *
base	protobuf-c/protobuf-c.h	/^	ProtobufCBuffer		base;$/;"	m	struct:ProtobufCBufferSimple	typeref:typename:ProtobufCBuffer
base	simple.pb-c.h	/^  ProtobufCMessage base;$/;"	m	struct:_BandwidthTest	typeref:typename:ProtobufCMessage
base	simple.pb-c.h	/^  ProtobufCMessage base;$/;"	m	struct:_EncoderControl	typeref:typename:ProtobufCMessage
base	simple.pb-c.h	/^  ProtobufCMessage base;$/;"	m	struct:_FirmwareUpdate	typeref:typename:ProtobufCMessage
base	simple.pb-c.h	/^  ProtobufCMessage base;$/;"	m	struct:_FirmwareUpdateFeedback	typeref:typename:ProtobufCMessage
base	simple.pb-c.h	/^  ProtobufCMessage base;$/;"	m	struct:_LedControl	typeref:typename:ProtobufCMessage
base	simple.pb-c.h	/^  ProtobufCMessage base;$/;"	m	struct:_ReqCompleteSetup	typeref:typename:ProtobufCMessage
base	simple.pb-c.h	/^  ProtobufCMessage base;$/;"	m	struct:_RoughMotorControl	typeref:typename:ProtobufCMessage
base	simple.pb-c.h	/^  ProtobufCMessage base;$/;"	m	struct:_RspServiceKey	typeref:typename:ProtobufCMessage
base	simple.pb-c.h	/^  ProtobufCMessage base;$/;"	m	struct:_SmoothMotorControlDeprecated	typeref:typename:ProtobufCMessage
base	simple.pb-c.h	/^  ProtobufCMessage base;$/;"	m	struct:_ToBle	typeref:typename:ProtobufCMessage
base	simple.pb-c.h	/^  ProtobufCMessage base;$/;"	m	struct:_ToHi	typeref:typename:ProtobufCMessage
base	simple.pb-c.h	/^  ProtobufCMessage base;$/;"	m	struct:_ToHost	typeref:typename:ProtobufCMessage
base	simple.pb-c.h	/^  ProtobufCMessage base;$/;"	m	struct:_ToSt	typeref:typename:ProtobufCMessage
base	spdlog/fmt/bundled/core.h	/^    typedef internal::context_base<OutputIt, basic_format_context, Char> base;$/;"	t	class:basic_format_context	typeref:typename:internal::context_base<OutputIt,basic_format_context,Char>
baseBounds	qcustomplot.h	/^    QRect baseBounds, expBounds, suffixBounds, totalBounds, rotatedTotalBounds;$/;"	m	struct:QCPAxisPainterPrivate::TickLabelData	typeref:typename:QRect
baseFont	qcustomplot.h	/^    QFont baseFont, expFont;$/;"	m	struct:QCPAxisPainterPrivate::TickLabelData	typeref:typename:QFont
basePart	qcustomplot.h	/^    QString basePart, expPart, suffixPart;$/;"	m	struct:QCPAxisPainterPrivate::TickLabelData	typeref:typename:QString
basePen	qcustomplot.h	/^  QPen basePen() const { return mBasePen; }$/;"	f	class:QCPAxis	typeref:typename:QPen
basePen	qcustomplot.h	/^  QPen basePen;$/;"	m	class:QCPAxisPainterPrivate	typeref:typename:QPen
basePen	qcustomplot.h	/^  Q_PROPERTY(QPen basePen READ basePen WRITE setBasePen)$/;"	p	class:QCPAxis	typeref:typename:QPen
baseValue	qcustomplot.h	/^  Q_PROPERTY(double baseValue READ baseValue WRITE setBaseValue)$/;"	p	class:QCPBars	typeref:typename:double
baseValue	qcustomplot.h	/^  double baseValue() const { return mBaseValue; }$/;"	f	class:QCPBars	typeref:typename:double
base_filename_	spdlog/sinks/daily_file_sink.h	/^    filename_t base_filename_;$/;"	m	class:spdlog::sinks::SPDLOG_FINAL	typeref:typename:filename_t
base_filename_	spdlog/sinks/rotating_file_sink.h	/^    filename_t base_filename_;$/;"	m	class:spdlog::sinks::SPDLOG_FINAL	typeref:typename:filename_t
base_iterator	json.hpp	/^    using base_iterator = std::reverse_iterator<Base>;$/;"	t	class:nlohmann::detail::json_reverse_iterator	typeref:typename:std::reverse_iterator<Base>
base_sink	spdlog/sinks/base_sink.h	/^    base_sink() = default;$/;"	p	class:spdlog::sinks::base_sink
base_sink	spdlog/sinks/base_sink.h	/^    base_sink(const base_sink &) = delete;$/;"	p	class:spdlog::sinks::base_sink
base_sink	spdlog/sinks/base_sink.h	/^class base_sink : public sink$/;"	c	namespace:spdlog::sinks
basic_buffer	spdlog/fmt/bundled/core.h	/^    basic_buffer(T *p = FMT_NULL, std::size_t sz = 0, std::size_t cap = 0) FMT_NOEXCEPT : ptr_(p/;"	f	class:internal::basic_buffer
basic_buffer	spdlog/fmt/bundled/core.h	/^class basic_buffer$/;"	c	namespace:internal
basic_file_sink	spdlog/sinks/basic_file_sink.h	/^    explicit basic_file_sink(const filename_t &filename, bool truncate = false)$/;"	f	class:spdlog::sinks::SPDLOG_FINAL
basic_file_sink_mt	spdlog/sinks/basic_file_sink.h	/^using basic_file_sink_mt = basic_file_sink<std::mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:basic_file_sink<std::mutex>
basic_file_sink_st	spdlog/sinks/basic_file_sink.h	/^using basic_file_sink_st = basic_file_sink<details::null_mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:basic_file_sink<details::null_mutex>
basic_format_arg	spdlog/fmt/bundled/core.h	/^    FMT_CONSTEXPR basic_format_arg()$/;"	f	class:basic_format_arg	typeref:typename:FMT_CONSTEXPR
basic_format_arg	spdlog/fmt/bundled/core.h	/^class basic_format_arg$/;"	c
basic_format_args	spdlog/fmt/bundled/core.h	/^    basic_format_args()$/;"	f	class:basic_format_args
basic_format_args	spdlog/fmt/bundled/core.h	/^    basic_format_args(const format_arg_store<Context, Args...> &store)$/;"	f	class:basic_format_args
basic_format_args	spdlog/fmt/bundled/core.h	/^class basic_format_args$/;"	c
basic_format_context	spdlog/fmt/bundled/core.h	/^    basic_format_context(OutputIt out, basic_string_view<char_type> format_str, basic_format_arg/;"	f	class:basic_format_context
basic_format_context	spdlog/fmt/bundled/core.h	/^class basic_format_context : public internal::context_base<OutputIt, basic_format_context<Output/;"	c
basic_json	json.hpp	/^    basic_json(CompatibleType && val) noexcept(noexcept($/;"	f	class:nlohmann::basic_json
basic_json	json.hpp	/^    basic_json(InputIT first, InputIT last)$/;"	f	class:nlohmann::basic_json
basic_json	json.hpp	/^    basic_json(basic_json&& other) noexcept$/;"	f	class:nlohmann::basic_json
basic_json	json.hpp	/^    basic_json(const BasicJsonType& val)$/;"	f	class:nlohmann::basic_json
basic_json	json.hpp	/^    basic_json(const basic_json& other)$/;"	f	class:nlohmann::basic_json
basic_json	json.hpp	/^    basic_json(const detail::json_ref<basic_json>& ref)$/;"	f	class:nlohmann::basic_json
basic_json	json.hpp	/^    basic_json(const value_t v)$/;"	f	class:nlohmann::basic_json
basic_json	json.hpp	/^    basic_json(initializer_list_t init,$/;"	f	class:nlohmann::basic_json
basic_json	json.hpp	/^    basic_json(size_type cnt, const basic_json& val)$/;"	f	class:nlohmann::basic_json
basic_json	json.hpp	/^    basic_json(std::nullptr_t = nullptr) noexcept$/;"	f	class:nlohmann::basic_json
basic_json	json.hpp	/^class basic_json$/;"	c	namespace:nlohmann
basic_json_t	json.hpp	/^    using basic_json_t = NLOHMANN_BASIC_JSON_TPL;$/;"	t	class:nlohmann::basic_json	typeref:typename:NLOHMANN_BASIC_JSON_TPL
basic_logger_mt	spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::basic_logger_mt(const std::string &logger_name, c/;"	f	class:spdlog	typeref:typename:std::shared_ptr<spdlog::logger>
basic_logger_mt	spdlog/sinks/basic_file_sink.h	/^inline std::shared_ptr<logger> basic_logger_mt(const std::string &logger_name, const filename_t /;"	f	namespace:spdlog	typeref:typename:std::shared_ptr<logger>
basic_logger_mt	spdlog/spdlog.h	/^std::shared_ptr<logger> basic_logger_mt(const std::string &logger_name, const filename_t &filena/;"	p	namespace:spdlog	typeref:typename:std::shared_ptr<logger>
basic_logger_st	spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::basic_logger_st(const std::string &logger_name, c/;"	f	class:spdlog	typeref:typename:std::shared_ptr<spdlog::logger>
basic_logger_st	spdlog/sinks/basic_file_sink.h	/^inline std::shared_ptr<logger> basic_logger_st(const std::string &logger_name, const filename_t /;"	f	namespace:spdlog	typeref:typename:std::shared_ptr<logger>
basic_logger_st	spdlog/spdlog.h	/^std::shared_ptr<logger> basic_logger_st(const std::string &logger_name, const filename_t &filena/;"	p	namespace:spdlog	typeref:typename:std::shared_ptr<logger>
basic_parse_context	spdlog/fmt/bundled/core.h	/^    explicit FMT_CONSTEXPR basic_parse_context(basic_string_view<Char> format_str, ErrorHandler /;"	f	class:basic_parse_context	typeref:typename:FMT_CONSTEXPR
basic_parse_context	spdlog/fmt/bundled/core.h	/^class basic_parse_context : private ErrorHandler$/;"	c
basic_string_view	spdlog/fmt/bundled/core.h	/^    FMT_CONSTEXPR basic_string_view() FMT_NOEXCEPT : data_(FMT_NULL), size_(0) {}$/;"	f	class:basic_string_view	typeref:typename:FMT_CONSTEXPR
basic_string_view	spdlog/fmt/bundled/core.h	/^    FMT_CONSTEXPR basic_string_view(const Char *s, size_t count) FMT_NOEXCEPT : data_(s), size_(/;"	f	class:basic_string_view	typeref:typename:FMT_CONSTEXPR
basic_string_view	spdlog/fmt/bundled/core.h	/^    FMT_CONSTEXPR basic_string_view(const std::basic_string<Char, Alloc> &s) FMT_NOEXCEPT : data/;"	f	class:basic_string_view	typeref:typename:FMT_CONSTEXPR
basic_string_view	spdlog/fmt/bundled/core.h	/^    FMT_CONSTEXPR basic_string_view(type s) FMT_NOEXCEPT : data_(s.data()), size_(s.size()) {}$/;"	f	class:basic_string_view	typeref:typename:FMT_CONSTEXPR
basic_string_view	spdlog/fmt/bundled/core.h	/^    basic_string_view(const Char *s)$/;"	f	class:basic_string_view
basic_string_view	spdlog/fmt/bundled/core.h	/^class basic_string_view$/;"	c
battery	simple.pb-c.h	/^  float battery;$/;"	m	struct:_ToHi	typeref:typename:float
battery	simple.proto	/^    optional float battery = 14; \/\/ voltage$/;"	f
beforeReplot	qcustomplot.h	/^  void beforeReplot();$/;"	S	class:QCustomPlot	typeref:typename:void
beforeReplot	qcustomplot.h	/^  void beforeReplot();$/;"	p	class:QCustomPlot	typeref:typename:void
beg_index_	circular-buffer.h	/^    size_t beg_index_, end_index_, size_;$/;"	m	class:CircularBuffer	typeref:typename:size_t
begin	json.hpp	/^    const_iterator begin() const noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:const_iterator
begin	json.hpp	/^    iteration_proxy_internal begin() noexcept$/;"	f	class:nlohmann::detail::iteration_proxy	typeref:typename:iteration_proxy_internal
begin	json.hpp	/^    iterator begin() noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:iterator
begin	packet-buffer.h	/^  const boost::asio::const_buffer* begin() const { return &buffer_; }$/;"	f	class:shared_const_buffer	typeref:typename:const boost::asio::const_buffer *
begin	qcustomplot.cpp	/^bool QCPPainter::begin(QPaintDevice *device)$/;"	f	class:QCPPainter	typeref:typename:bool
begin	qcustomplot.h	/^  bool begin(QPaintDevice *device);$/;"	p	class:QCPPainter	typeref:typename:bool
begin	qcustomplot.h	/^  int begin() const { return mBegin; }$/;"	f	class:QCPDataRange	typeref:typename:int
begin	qcustomplot.h	/^  iterator begin() { return mData.begin()+mPreallocSize; }$/;"	f	class:QCPDataContainer	typeref:typename:iterator
begin	spdlog/fmt/bundled/core.h	/^    FMT_CONSTEXPR iterator begin() const FMT_NOEXCEPT$/;"	f	class:basic_parse_context	typeref:typename:FMT_CONSTEXPR iterator
begin	spdlog/fmt/bundled/core.h	/^    FMT_CONSTEXPR iterator begin() const$/;"	f	class:basic_string_view	typeref:typename:FMT_CONSTEXPR iterator
begin	spdlog/fmt/bundled/core.h	/^    T *begin() FMT_NOEXCEPT$/;"	f	class:internal::basic_buffer	typeref:typename:T *
begin	spdlog/fmt/bundled/core.h	/^    iterator begin()$/;"	f	class:internal::context_base	typeref:typename:iterator
begin_array	json.hpp	/^        begin_array,      \/\/\/< the character for array begin `[`$/;"	e	enum:nlohmann::detail::lexer::token_type
begin_object	json.hpp	/^        begin_object,     \/\/\/< the character for object begin `{`$/;"	e	enum:nlohmann::detail::lexer::token_type
begin_value	json.hpp	/^    static constexpr difference_type begin_value = 0;$/;"	m	class:nlohmann::detail::primitive_iterator_t	typeref:typename:difference_type
beige	spdlog/fmt/bundled/colors.h	/^    beige = 0xF5F5DC,                   \/\/ rgb(245,245,220)$/;"	e	enum:color
bgindex	stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags, delay;$/;"	m	struct:__anon84e4e8861108	typeref:typename:int
bi_iterator	spdlog/fmt/bundled/core.h	/^    typedef std::back_insert_iterator<Container> bi_iterator;$/;"	t	function:internal::get_container	typeref:typename:std::back_insert_iterator<Container>
bin	spdlog/fmt/bundled/format.h	/^IntFormatSpec<int, TypeSpec<'b'>> bin(int value);$/;"	p	namespace:fmt	typeref:typename:IntFormatSpec<int,TypeSpec<'b'>>
binary_data_pack	protobuf-c/protobuf-c.c	/^binary_data_pack(const ProtobufCBinaryData *bd, uint8_t *out)$/;"	f	typeref:typename:size_t	file:
binary_reader	json.hpp	/^    explicit binary_reader(input_adapter_t adapter) : ia(std::move(adapter))$/;"	f	class:nlohmann::detail::binary_reader
binary_reader	json.hpp	/^    using binary_reader = ::nlohmann::detail::binary_reader<basic_json>;$/;"	t	class:nlohmann::basic_json	typeref:typename:::nlohmann::detail::binary_reader<basic_json>
binary_reader	json.hpp	/^class binary_reader$/;"	c	namespace:nlohmann::detail
binary_writer	json.hpp	/^    explicit binary_writer(output_adapter_t<CharType> adapter) : oa(adapter)$/;"	f	class:nlohmann::detail::binary_writer
binary_writer	json.hpp	/^    template<typename CharType> using binary_writer = ::nlohmann::detail::binary_writer<basic_js/;"	t	class:nlohmann::basic_json	typeref:typename:::nlohmann::detail::binary_writer<basic_json,CharType>
binary_writer	json.hpp	/^class binary_writer$/;"	c	namespace:nlohmann::detail
bisque	spdlog/fmt/bundled/colors.h	/^    bisque = 0xFFE4C4,                  \/\/ rgb(255,228,196)$/;"	e	enum:color
bitrate	simple.pb-c.h	/^  uint32_t bitrate;$/;"	m	struct:_ToHost	typeref:typename:uint32_t
bitrate	simple.proto	/^    optional uint32 bitrate = 7; \/\/ hi 가 올려주는 h.264 bitrate$/;"	f
bits_type	json.hpp	/^    using bits_type = typename std::conditional< kPrecision == 24, uint32_t, uint64_t >::type;$/;"	t	function:nlohmann::detail::dtoa_impl::compute_boundaries	typeref:typename:std::conditional<kPrecision==24,uint32_t,uint64_t>::type
black	spdlog/fmt/bundled/colors.h	/^    black = 0x000000,                   \/\/ rgb(0,0,0)$/;"	e	enum:color
black	spdlog/fmt/bundled/core.h	/^    black,$/;"	e	enum:color
black	spdlog/sinks/ansicolor_sink.h	/^    const std::string black = "\\033[30m";$/;"	m	class:spdlog::sinks::ansicolor_sink	typeref:typename:const std::string
blanched_almond	spdlog/fmt/bundled/colors.h	/^    blanched_almond = 0xFFEBCD,         \/\/ rgb(255,235,205)$/;"	e	enum:color
ble_update	simple.pb-c.h	/^  FirmwareUpdate *ble_update;$/;"	m	struct:_ToSt	typeref:typename:FirmwareUpdate *
ble_update	simple.proto	/^    optional FirmwareUpdate ble_update = 13; $/;"	f
blink	spdlog/sinks/ansicolor_sink.h	/^    const std::string blink = "\\033[5m";$/;"	m	class:spdlog::sinks::ansicolor_sink	typeref:typename:const std::string
block_retry	spdlog/common.h	/^    block_retry,    \/\/ Block \/ yield \/ sleep until message can be enqueued$/;"	e	enum:spdlog::async_overflow_policy
blue	spdlog/fmt/bundled/colors.h	/^    blue = 0x0000FF,                    \/\/ rgb(0,0,255)$/;"	e	enum:color
blue	spdlog/fmt/bundled/core.h	/^    blue,$/;"	e	enum:color
blue	spdlog/sinks/ansicolor_sink.h	/^    const std::string blue = "\\033[34m";$/;"	m	class:spdlog::sinks::ansicolor_sink	typeref:typename:const std::string
blue_violet	spdlog/fmt/bundled/colors.h	/^    blue_violet = 0x8A2BE2,             \/\/ rgb(138,43,226)$/;"	e	enum:color
bold	spdlog/sinks/ansicolor_sink.h	/^    const std::string bold = "\\033[1m";$/;"	m	class:spdlog::sinks::ansicolor_sink	typeref:typename:const std::string
bool_type	spdlog/fmt/bundled/core.h	/^    bool_type,$/;"	e	enum:internal::type
boolean	json.hpp	/^        boolean_t boolean;$/;"	m	union:nlohmann::basic_json::json_value	typeref:typename:boolean_t
boolean	json.hpp	/^    boolean,          \/\/\/< boolean value$/;"	e	enum:nlohmann::detail::value_t
boolean_pack	protobuf-c/protobuf-c.c	/^boolean_pack(protobuf_c_boolean value, uint8_t *out)$/;"	f	typeref:typename:size_t	file:
boolean_t	json.hpp	/^    using boolean_t = BooleanType;$/;"	t	class:nlohmann::basic_json	typeref:typename:BooleanType
boost	http-request.h	/^namespace boost {$/;"	n
borderPen	qcustomplot.h	/^  QPen borderPen() const { return mBorderPen; }$/;"	f	class:QCPLegend	typeref:typename:QPen
borderPen	qcustomplot.h	/^  Q_PROPERTY(QPen borderPen READ borderPen WRITE setBorderPen)$/;"	p	class:QCPLegend	typeref:typename:QPen
bottom	qcustomplot.h	/^  QCPItemAnchor * const bottom;$/;"	m	class:QCPItemEllipse	typeref:typename:QCPItemAnchor * const
bottom	qcustomplot.h	/^  QCPItemAnchor * const bottom;$/;"	m	class:QCPItemPixmap	typeref:typename:QCPItemAnchor * const
bottom	qcustomplot.h	/^  QCPItemAnchor * const bottom;$/;"	m	class:QCPItemRect	typeref:typename:QCPItemAnchor * const
bottom	qcustomplot.h	/^  QCPItemAnchor * const bottom;$/;"	m	class:QCPItemText	typeref:typename:QCPItemAnchor * const
bottom	qcustomplot.h	/^  int bottom() const { return mRect.bottom(); }$/;"	f	class:QCPAxisRect	typeref:typename:int
bottomLeft	qcustomplot.h	/^  QCPItemAnchor * const bottomLeft;$/;"	m	class:QCPItemPixmap	typeref:typename:QCPItemAnchor * const
bottomLeft	qcustomplot.h	/^  QCPItemAnchor * const bottomLeft;$/;"	m	class:QCPItemRect	typeref:typename:QCPItemAnchor * const
bottomLeft	qcustomplot.h	/^  QCPItemAnchor * const bottomLeft;$/;"	m	class:QCPItemText	typeref:typename:QCPItemAnchor * const
bottomLeft	qcustomplot.h	/^  QPoint bottomLeft() const { return mRect.bottomLeft(); }$/;"	f	class:QCPAxisRect	typeref:typename:QPoint
bottomLeftRim	qcustomplot.h	/^  QCPItemAnchor * const bottomLeftRim;$/;"	m	class:QCPItemEllipse	typeref:typename:QCPItemAnchor * const
bottomRight	qcustomplot.h	/^  QCPItemAnchor * const bottomRight;$/;"	m	class:QCPItemText	typeref:typename:QCPItemAnchor * const
bottomRight	qcustomplot.h	/^  QCPItemPosition * const bottomRight;$/;"	m	class:QCPItemEllipse	typeref:typename:QCPItemPosition * const
bottomRight	qcustomplot.h	/^  QCPItemPosition * const bottomRight;$/;"	m	class:QCPItemPixmap	typeref:typename:QCPItemPosition * const
bottomRight	qcustomplot.h	/^  QCPItemPosition * const bottomRight;$/;"	m	class:QCPItemRect	typeref:typename:QCPItemPosition * const
bottomRight	qcustomplot.h	/^  QPoint bottomRight() const { return mRect.bottomRight(); }$/;"	f	class:QCPAxisRect	typeref:typename:QPoint
bottomRightRim	qcustomplot.h	/^  QCPItemAnchor * const bottomRightRim;$/;"	m	class:QCPItemEllipse	typeref:typename:QCPItemAnchor * const
boundaries	json.hpp	/^struct boundaries$/;"	s	namespace:nlohmann::detail::dtoa_impl
bounded	qcustomplot.cpp	/^QCPDataRange QCPDataRange::bounded(const QCPDataRange &other) const$/;"	f	class:QCPDataRange	typeref:typename:QCPDataRange
bounded	qcustomplot.cpp	/^QCPRange QCPRange::bounded(double lowerBound, double upperBound) const$/;"	f	class:QCPRange	typeref:typename:QCPRange
bounded	qcustomplot.h	/^  QCPDataRange bounded(const QCPDataRange &other) const;$/;"	p	class:QCPDataRange	typeref:typename:QCPDataRange
bounded	qcustomplot.h	/^  QCPRange bounded(double lowerBound, double upperBound) const;$/;"	p	class:QCPRange	typeref:typename:QCPRange
boundingDistance	qcustomplot.cpp	/^double QCPLineEnding::boundingDistance() const$/;"	f	class:QCPLineEnding	typeref:typename:double
boundingDistance	qcustomplot.h	/^  double boundingDistance() const;$/;"	p	class:QCPLineEnding	typeref:typename:double
bpp	stb_image.h	/^   int bpp, offset, hsz;$/;"	m	struct:__anon84e4e8860e08	typeref:typename:int
bracketBrush	qcustomplot.h	/^  QBrush bracketBrush() const { return mBracketBrush; }$/;"	f	class:QCPSelectionDecoratorBracket	typeref:typename:QBrush
bracketHeight	qcustomplot.h	/^  int bracketHeight() const { return mBracketHeight; }$/;"	f	class:QCPSelectionDecoratorBracket	typeref:typename:int
bracketPen	qcustomplot.h	/^  QPen bracketPen() const { return mBracketPen; }$/;"	f	class:QCPSelectionDecoratorBracket	typeref:typename:QPen
bracketStyle	qcustomplot.h	/^  BracketStyle bracketStyle() const { return mBracketStyle; }$/;"	f	class:QCPSelectionDecoratorBracket	typeref:typename:BracketStyle
bracketWidth	qcustomplot.h	/^  int bracketWidth() const { return mBracketWidth; }$/;"	f	class:QCPSelectionDecoratorBracket	typeref:typename:int
bright	simple.pb-c.h	/^  uint32_t bright;$/;"	m	struct:_LedControl	typeref:typename:uint32_t
bright	simple.proto	/^    optional uint32 bright = 3;$/;"	f
brown	spdlog/fmt/bundled/colors.h	/^    brown = 0xA52A2A,                   \/\/ rgb(165,42,42)$/;"	e	enum:color
brush	qcustomplot.h	/^  QBrush brush() const { return mBrush; }$/;"	f	class:QCPAbstractPlottable	typeref:typename:QBrush
brush	qcustomplot.h	/^  QBrush brush() const { return mBrush; }$/;"	f	class:QCPItemEllipse	typeref:typename:QBrush
brush	qcustomplot.h	/^  QBrush brush() const { return mBrush; }$/;"	f	class:QCPItemRect	typeref:typename:QBrush
brush	qcustomplot.h	/^  QBrush brush() const { return mBrush; }$/;"	f	class:QCPItemText	typeref:typename:QBrush
brush	qcustomplot.h	/^  QBrush brush() const { return mBrush; }$/;"	f	class:QCPItemTracer	typeref:typename:QBrush
brush	qcustomplot.h	/^  QBrush brush() const { return mBrush; }$/;"	f	class:QCPLegend	typeref:typename:QBrush
brush	qcustomplot.h	/^  QBrush brush() const { return mBrush; }$/;"	f	class:QCPScatterStyle	typeref:typename:QBrush
brush	qcustomplot.h	/^  QBrush brush() const { return mBrush; }$/;"	f	class:QCPSelectionDecorator	typeref:typename:QBrush
brush	qcustomplot.h	/^  QBrush brush() const { return mBrush; }$/;"	f	class:QCPSelectionRect	typeref:typename:QBrush
brush	qcustomplot.h	/^  Q_PROPERTY(QBrush brush READ brush WRITE setBrush)$/;"	p	class:QCPAbstractPlottable	typeref:typename:QBrush
brush	qcustomplot.h	/^  Q_PROPERTY(QBrush brush READ brush WRITE setBrush)$/;"	p	class:QCPItemEllipse	typeref:typename:QBrush
brush	qcustomplot.h	/^  Q_PROPERTY(QBrush brush READ brush WRITE setBrush)$/;"	p	class:QCPItemRect	typeref:typename:QBrush
brush	qcustomplot.h	/^  Q_PROPERTY(QBrush brush READ brush WRITE setBrush)$/;"	p	class:QCPItemText	typeref:typename:QBrush
brush	qcustomplot.h	/^  Q_PROPERTY(QBrush brush READ brush WRITE setBrush)$/;"	p	class:QCPItemTracer	typeref:typename:QBrush
brush	qcustomplot.h	/^  Q_PROPERTY(QBrush brush READ brush WRITE setBrush)$/;"	p	class:QCPLegend	typeref:typename:QBrush
brushNegative	qcustomplot.h	/^  QBrush brushNegative() const { return mBrushNegative; }$/;"	f	class:QCPFinancial	typeref:typename:QBrush
brushNegative	qcustomplot.h	/^  Q_PROPERTY(QBrush brushNegative READ brushNegative WRITE setBrushNegative)$/;"	p	class:QCPFinancial	typeref:typename:QBrush
brushPositive	qcustomplot.h	/^  QBrush brushPositive() const { return mBrushPositive; }$/;"	f	class:QCPFinancial	typeref:typename:QBrush
brushPositive	qcustomplot.h	/^  Q_PROPERTY(QBrush brushPositive READ brushPositive WRITE setBrushPositive)$/;"	p	class:QCPFinancial	typeref:typename:QBrush
bsCalligraphic	qcustomplot.h	/^                      ,bsCalligraphic \/\/\/< A curly brace with varying stroke width giving a c/;"	e	enum:QCPItemBracket::BracketStyle
bsCurly	qcustomplot.h	/^                      ,bsCurly  \/\/\/< A curly brace$/;"	e	enum:QCPItemBracket::BracketStyle
bsEllipse	qcustomplot.h	/^                      ,bsEllipse       \/\/\/< An ellipse is drawn. The size of the ellipse is g/;"	e	enum:QCPSelectionDecoratorBracket::BracketStyle
bsHalfEllipse	qcustomplot.h	/^                      ,bsHalfEllipse   \/\/\/< A half ellipse is drawn. The size of the ellipse /;"	e	enum:QCPSelectionDecoratorBracket::BracketStyle
bsPlus	qcustomplot.h	/^                      ,bsPlus         \/\/\/< A plus is drawn.$/;"	e	enum:QCPSelectionDecoratorBracket::BracketStyle
bsRound	qcustomplot.h	/^                      ,bsRound  \/\/\/< A brace with round edges$/;"	e	enum:QCPItemBracket::BracketStyle
bsSquare	qcustomplot.h	/^  enum BracketStyle { bsSquare  \/\/\/< A brace with angled edges$/;"	e	enum:QCPItemBracket::BracketStyle
bsSquareBracket	qcustomplot.h	/^  enum BracketStyle { bsSquareBracket \/\/\/< A square bracket is drawn.$/;"	e	enum:QCPSelectionDecoratorBracket::BracketStyle
bsUserStyle	qcustomplot.h	/^                      ,bsUserStyle    \/\/\/< Start custom bracket styles at this index when sub/;"	e	enum:QCPSelectionDecoratorBracket::BracketStyle
buffer	spdlog/fmt/bundled/core.h	/^typedef basic_buffer<char> buffer;$/;"	t	namespace:internal	typeref:typename:basic_buffer<char>
buffer	spdlog/fmt/bundled/format.h	/^    Buffer<Char> &buffer() FMT_NOEXCEPT$/;"	f	class:fmt::BasicWriter	typeref:typename:Buffer<Char> &
bufferDevicePixelRatio	qcustomplot.h	/^  double bufferDevicePixelRatio() const { return mBufferDevicePixelRatio; }$/;"	f	class:QCustomPlot	typeref:typename:double
buffer_	http-request.h	/^    boost::beast::flat_buffer buffer_; \/\/ (Must persist between reads)$/;"	m	class:HTTPSession	typeref:typename:boost::beast::flat_buffer
buffer_	packet-buffer.h	/^  boost::asio::const_buffer buffer_;$/;"	m	class:shared_const_buffer	typeref:typename:boost::asio::const_buffer
buffer_	spdlog/fmt/bundled/format-inl.h	/^        char *&buffer_;$/;"	m	class:__anonb519b34f0110::safe_strerror::dispatcher	typeref:typename:char * &
buffer_	spdlog/fmt/bundled/format.cc	/^    char *&buffer_;$/;"	m	class:fmt::__anonf3b7881d0110::safe_strerror::StrError	typeref:typename:char * &	file:
buffer_	spdlog/fmt/bundled/format.h	/^    Buffer<Char> &buffer_;$/;"	m	class:fmt::BasicWriter	typeref:typename:Buffer<Char> &
buffer_	spdlog/fmt/bundled/format.h	/^    MemoryBuffer<char, INLINE_BUFFER_SIZE> buffer_;$/;"	m	class:fmt::internal::UTF16ToUTF8	typeref:typename:MemoryBuffer<char,INLINE_BUFFER_SIZE>
buffer_	spdlog/fmt/bundled/format.h	/^    MemoryBuffer<wchar_t, INLINE_BUFFER_SIZE> buffer_;$/;"	m	class:fmt::internal::UTF8ToUTF16	typeref:typename:MemoryBuffer<wchar_t,INLINE_BUFFER_SIZE>
buffer_	spdlog/fmt/bundled/format.h	/^    internal::FixedBuffer<Char> buffer_;$/;"	m	class:fmt::BasicArrayWriter	typeref:typename:internal::FixedBuffer<Char>
buffer_	spdlog/fmt/bundled/format.h	/^    internal::MemoryBuffer<Char, internal::INLINE_BUFFER_SIZE, Allocator> buffer_;$/;"	m	class:fmt::BasicMemoryWriter	typeref:typename:internal::MemoryBuffer<Char,internal::INLINE_BUFFER_SIZE,Allocator>
buffer_	spdlog/fmt/bundled/format.h	/^    mutable char buffer_[BUFFER_SIZE];$/;"	m	class:fmt::FormatInt	typeref:typename:char[]
buffer_	spdlog/fmt/bundled/ostream.h	/^    Buffer<Char> &buffer_;$/;"	m	class:fmt::internal::FormatBuf	typeref:typename:Buffer<Char> &
buffer_context	spdlog/fmt/bundled/core.h	/^struct buffer_context$/;"	s
buffer_size_	spdlog/fmt/bundled/format-inl.h	/^        std::size_t buffer_size_;$/;"	m	class:__anonb519b34f0110::safe_strerror::dispatcher	typeref:typename:std::size_t
buffer_size_	spdlog/fmt/bundled/format.cc	/^    std::size_t buffer_size_;$/;"	m	class:fmt::__anonf3b7881d0110::safe_strerror::StrError	typeref:typename:std::size_t	file:
buffer_start	stb_image.h	/^   stbi_uc buffer_start[128];$/;"	m	struct:__anon84e4e8860308	typeref:typename:stbi_uc[128]
buffers	mdi-child.h	/^    std::queue<QBuffer*> buffers;$/;"	m	class:MdiChild	typeref:typename:std::queue<QBuffer * >
buflen	stb_image.h	/^   int buflen;$/;"	m	struct:__anon84e4e8860308	typeref:typename:int
burly_wood	spdlog/fmt/bundled/colors.h	/^    burly_wood = 0xDEB887,              \/\/ rgb(222,184,135)$/;"	e	enum:color
byte	json.hpp	/^    const std::size_t byte;$/;"	m	class:nlohmann::detail::parse_error	typeref:typename:const std::size_t
c_name	protobuf-c/protobuf-c.h	/^	const char			*c_name;$/;"	m	struct:ProtobufCEnumDescriptor	typeref:typename:const char *
c_name	protobuf-c/protobuf-c.h	/^	const char			*c_name;$/;"	m	struct:ProtobufCMessageDescriptor	typeref:typename:const char *
c_name	protobuf-c/protobuf-c.h	/^	const char			*c_name;$/;"	m	struct:ProtobufCServiceDescriptor	typeref:typename:const char *
c_name	protobuf-c/protobuf-c.h	/^	const char	*c_name;$/;"	m	struct:ProtobufCEnumValue	typeref:typename:const char *
c_str	spdlog/fmt/bundled/format.h	/^    const Char *c_str() const$/;"	f	class:fmt::BasicCStringRef	typeref:typename:const Char *
c_str	spdlog/fmt/bundled/format.h	/^    const Char *c_str() const$/;"	f	class:fmt::BasicWriter	typeref:typename:const Char *
c_str	spdlog/fmt/bundled/format.h	/^    const char *c_str() const$/;"	f	class:fmt::FormatInt	typeref:typename:const char *
c_str	spdlog/fmt/bundled/format.h	/^    const char *c_str() const$/;"	f	class:fmt::internal::UTF16ToUTF8	typeref:typename:const char *
c_str	spdlog/fmt/bundled/format.h	/^    const wchar_t *c_str() const$/;"	f	class:fmt::internal::UTF8ToUTF16	typeref:typename:const wchar_t *
cache_refresh	spdlog/details/pattern_formatter.h	/^    const std::chrono::seconds cache_refresh = std::chrono::seconds(5);$/;"	m	class:spdlog::details::SPDLOG_FINAL	typeref:typename:const std::chrono::seconds
cache_refresh	spdlog/details/pattern_formatter_impl.h	/^    const std::chrono::seconds cache_refresh = std::chrono::seconds(5);$/;"	m	class:spdlog::details::SPDLOG_FINAL	typeref:typename:const std::chrono::seconds
cache_timestamp_	spdlog/details/pattern_formatter.h	/^    std::chrono::seconds cache_timestamp_{0};$/;"	m	class:spdlog::details::SPDLOG_FINAL	typeref:typename:std::chrono::seconds
cached_datetime_	spdlog/details/pattern_formatter.h	/^    fmt::basic_memory_buffer<char, 128> cached_datetime_;$/;"	m	class:spdlog::details::SPDLOG_FINAL	typeref:typename:fmt::basic_memory_buffer<char,128>
cached_millis_	spdlog/details/pattern_formatter.h	/^    fmt::basic_memory_buffer<char, 8> cached_millis_;$/;"	m	class:spdlog::details::SPDLOG_FINAL	typeref:typename:fmt::basic_memory_buffer<char,8>
cached_power	json.hpp	/^struct cached_power \/\/ c = f * 2^e ~= 10^k$/;"	s	namespace:nlohmann::detail::dtoa_impl
cached_tm_	spdlog/details/pattern_formatter.h	/^    std::tm cached_tm_;$/;"	m	class:spdlog::SPDLOG_FINAL	typeref:typename:std::tm
cadet_blue	spdlog/fmt/bundled/colors.h	/^    cadet_blue = 0x5F9EA0,              \/\/ rgb(95,158,160)$/;"	e	enum:color
calc_filename	spdlog/contrib/sinks/step_file_sink.h	/^    static std::tuple<filename_t, filename_t> calc_filename(const filename_t &filename, const fi/;"	f	struct:spdlog::sinks::default_step_file_name_calculator	typeref:typename:std::tuple<filename_t,filename_t>
calc_filename	spdlog/sinks/daily_file_sink.h	/^    static filename_t calc_filename(const filename_t &filename, const tm &now_tm)$/;"	f	struct:spdlog::sinks::daily_filename_calculator	typeref:typename:filename_t
calc_filename	spdlog/sinks/file_sinks.h	/^    static filename_t calc_filename(const filename_t &filename)$/;"	f	struct:spdlog::sinks::dateonly_daily_file_name_calculator	typeref:typename:filename_t
calc_filename	spdlog/sinks/file_sinks.h	/^    static filename_t calc_filename(const filename_t &filename)$/;"	f	struct:spdlog::sinks::default_daily_file_name_calculator	typeref:typename:filename_t
calc_filename	spdlog/sinks/file_sinks.h	/^    static filename_t calc_filename(const filename_t &filename, std::size_t index)$/;"	f	class:spdlog::sinks::SPDLOG_FINAL	typeref:typename:filename_t
calc_filename	spdlog/sinks/rotating_file_sink.h	/^    static filename_t calc_filename(const filename_t &filename, std::size_t index)$/;"	f	class:spdlog::sinks::SPDLOG_FINAL	typeref:typename:filename_t
calculateAutoMargin	qcustomplot.cpp	/^int QCPAxisRect::calculateAutoMargin(QCP::MarginSide side)$/;"	f	class:QCPAxisRect	typeref:typename:int
calculateAutoMargin	qcustomplot.cpp	/^int QCPLayoutElement::calculateAutoMargin(QCP::MarginSide side)$/;"	f	class:QCPLayoutElement	typeref:typename:int
calculateAutoMargin	qcustomplot.h	/^  virtual int calculateAutoMargin(QCP::MarginSide side) Q_DECL_OVERRIDE;$/;"	p	class:QCPAxisRect	typeref:typename:int
calculateAutoMargin	qcustomplot.h	/^  virtual int calculateAutoMargin(QCP::MarginSide side);$/;"	p	class:QCPLayoutElement	typeref:typename:int
calculateMargin	qcustomplot.cpp	/^int QCPAxis::calculateMargin()$/;"	f	class:QCPAxis	typeref:typename:int
calculateMargin	qcustomplot.h	/^  virtual int calculateMargin();$/;"	p	class:QCPAxis	typeref:typename:int
call	json.hpp	/^    auto call(BasicJsonType& j, T&& val, priority_tag<1> \/*unused*\/) const noexcept(noexcept(t/;"	f	struct:nlohmann::detail::to_json_fn	typeref:typename:auto
call	json.hpp	/^    auto call(const BasicJsonType& j, T& val, priority_tag<1> \/*unused*\/) const$/;"	f	struct:nlohmann::detail::from_json_fn	typeref:typename:auto
call	json.hpp	/^    void call(BasicJsonType& \/*unused*\/, T&& \/*unused*\/, priority_tag<0> \/*unused*\/) const/;"	f	struct:nlohmann::detail::to_json_fn	typeref:typename:void
call	json.hpp	/^    void call(const BasicJsonType& \/*unused*\/, T& \/*unused*\/, priority_tag<0> \/*unused*\/) /;"	f	struct:nlohmann::detail::from_json_fn	typeref:typename:void
callback	json.hpp	/^    const parser_callback_t callback = nullptr;$/;"	m	class:nlohmann::detail::parser	typeref:typename:const parser_callback_t
cancel	qcustomplot.cpp	/^void QCPSelectionRect::cancel()$/;"	f	class:QCPSelectionRect	typeref:typename:void
cancel	qcustomplot.h	/^  Q_SLOT void cancel();$/;"	p	class:QCPSelectionRect	typeref:typename:Q_SLOT void
canceled	qcustomplot.h	/^  void canceled(const QRect &rect, QInputEvent *event);$/;"	S	class:QCPSelectionRect	typeref:typename:void
canceled	qcustomplot.h	/^  void canceled(const QRect &rect, QInputEvent *event);$/;"	p	class:QCPSelectionRect	typeref:typename:void
candlestickSelectTest	qcustomplot.cpp	/^double QCPFinancial::candlestickSelectTest(const QPointF &pos, const QCPFinancialDataContainer::/;"	f	class:QCPFinancial	typeref:typename:double
candlestickSelectTest	qcustomplot.h	/^  double candlestickSelectTest(const QPointF &pos, const QCPFinancialDataContainer::const_iterat/;"	p	class:QCPFinancial	typeref:typename:double
capacity	circular-buffer.h	/^    size_t capacity() const { return data_.size(); }$/;"	f	class:CircularBuffer	typeref:typename:size_t
capacity	spdlog/fmt/bundled/core.h	/^    std::size_t capacity() const FMT_NOEXCEPT$/;"	f	class:internal::basic_buffer	typeref:typename:std::size_t
capacity	spdlog/fmt/bundled/format.h	/^    std::size_t capacity() const$/;"	f	class:fmt::Buffer	typeref:typename:std::size_t
capacity_	spdlog/fmt/bundled/core.h	/^    std::size_t capacity_;$/;"	m	class:internal::basic_buffer	typeref:typename:std::size_t
capacity_	spdlog/fmt/bundled/format.h	/^    std::size_t capacity_;$/;"	m	class:fmt::Buffer	typeref:typename:std::size_t
cast	spdlog/fmt/bundled/format.h	/^    static Char cast(int value)$/;"	f	class:fmt::internal::BasicCharTraits	typeref:typename:Char
cbegin	json.hpp	/^    const_iterator cbegin() const noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:const_iterator
cell	qcustomplot.cpp	/^double QCPColorMapData::cell(int keyIndex, int valueIndex)$/;"	f	class:QCPColorMapData	typeref:typename:double
cell	qcustomplot.h	/^  double cell(int keyIndex, int valueIndex);$/;"	p	class:QCPColorMapData	typeref:typename:double
cellToCoord	qcustomplot.cpp	/^void QCPColorMapData::cellToCoord(int keyIndex, int valueIndex, double *key, double *value) cons/;"	f	class:QCPColorMapData	typeref:typename:void
cellToCoord	qcustomplot.h	/^  void cellToCoord(int keyIndex, int valueIndex, double *key, double *value) const;$/;"	p	class:QCPColorMapData	typeref:typename:void
cend	json.hpp	/^    const_iterator cend() const noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:const_iterator
center	qcustomplot.h	/^  QCPItemAnchor * const center;$/;"	m	class:QCPItemBracket	typeref:typename:QCPItemAnchor * const
center	qcustomplot.h	/^  QCPItemAnchor * const center;$/;"	m	class:QCPItemEllipse	typeref:typename:QCPItemAnchor * const
center	qcustomplot.h	/^  QPoint center() const { return mRect.center(); }$/;"	f	class:QCPAxisRect	typeref:typename:QPoint
center	qcustomplot.h	/^  double center() const { return (upper+lower)*0.5; }$/;"	f	class:QCPRange	typeref:typename:double
ch_	spdlog/details/pattern_formatter.h	/^    char ch_;$/;"	m	class:spdlog::details::SPDLOG_FINAL	typeref:typename:char
ch_formatter	spdlog/details/pattern_formatter.h	/^    explicit ch_formatter(char ch)$/;"	f	class:spdlog::details::SPDLOG_FINAL
ch_formatter	spdlog/details/pattern_formatter_impl.h	/^    explicit ch_formatter(char ch)$/;"	f	class:spdlog::details::SPDLOG_FINAL
changeImage	gui.h	/^    void changeImage(uint8_t* buffer, size_t length) {$/;"	f	class:ClientWindow	typeref:typename:void
changed	qcustomplot.h	/^  void changed(const QRect &rect, QMouseEvent *event);$/;"	S	class:QCPSelectionRect	typeref:typename:void
changed	qcustomplot.h	/^  void changed(const QRect &rect, QMouseEvent *event);$/;"	p	class:QCPSelectionRect	typeref:typename:void
channel	stb_image.h	/^   stbi_uc size,type,channel;$/;"	m	struct:__anon84e4e8860f08	typeref:typename:stbi_uc
channelFillGraph	qcustomplot.h	/^  QCPGraph *channelFillGraph() const { return mChannelFillGraph.data(); }$/;"	f	class:QCPGraph	typeref:typename:QCPGraph *
char_type	spdlog/fmt/bundled/core.h	/^    char_type,$/;"	e	enum:internal::type
char_type	spdlog/fmt/bundled/core.h	/^    typedef Char char_type;$/;"	t	class:basic_format_context	typeref:typename:Char
char_type	spdlog/fmt/bundled/core.h	/^    typedef Char char_type;$/;"	t	class:basic_parse_context	typeref:typename:Char
char_type	spdlog/fmt/bundled/core.h	/^    typedef Char char_type;$/;"	t	class:basic_string_view	typeref:typename:Char
char_type	spdlog/fmt/bundled/core.h	/^    typedef Char char_type;$/;"	t	class:internal::context_base	typeref:typename:Char
char_type	spdlog/fmt/bundled/core.h	/^    typedef typename Context::char_type char_type;$/;"	t	class:basic_format_arg	typeref:typename:Context::char_type
char_type	spdlog/fmt/bundled/core.h	/^    typedef typename Context::char_type char_type;$/;"	t	class:internal::arg_map	typeref:typename:Context::char_type
char_type	spdlog/fmt/bundled/core.h	/^    typedef typename Context::char_type char_type;$/;"	t	class:internal::value	typeref:typename:Context::char_type
charge_complete	simple.pb-c.h	/^  protobuf_c_boolean charge_complete;$/;"	m	struct:_ToHi	typeref:typename:protobuf_c_boolean
charge_complete	simple.proto	/^    optional bool charge_complete = 23;$/;"	f
chars_read	json.hpp	/^    std::size_t chars_read = 0;$/;"	m	class:nlohmann::detail::binary_reader	typeref:typename:std::size_t
chars_read	json.hpp	/^    std::size_t chars_read = 0;$/;"	m	class:nlohmann::detail::lexer	typeref:typename:std::size_t
chartStyle	qcustomplot.h	/^  ChartStyle chartStyle() const { return mChartStyle; }$/;"	f	class:QCPFinancial	typeref:typename:ChartStyle
chartStyle	qcustomplot.h	/^  Q_PROPERTY(ChartStyle chartStyle READ chartStyle WRITE setChartStyle)$/;"	p	class:QCPFinancial	typeref:typename:ChartStyle
chartreuse	spdlog/fmt/bundled/colors.h	/^    chartreuse = 0x7FFF00,              \/\/ rgb(127,255,0)$/;"	e	enum:color
check	spdlog/fmt/bundled/ranges.h	/^    static auto check(U *p) -> decltype(p->find('a'), p->length(), p->data(), int());$/;"	p	class:internal::is_like_std_string	typeref:typename:decltype (p->find ('a'),p->length (),p->data (),int ())
check	spdlog/fmt/bundled/ranges.h	/^    static auto check(U *p) -> decltype(std::tuple_size<U>::value, internal::declval<typename st/;"	p	class:internal::is_tuple_like_	typeref:typename:decltype (std::tuple_size<U>::value,internal::declval<typename std::tuple_element<0,U>::type> (),int ())
check	spdlog/fmt/bundled/ranges.h	/^    static void check(...);$/;"	p	class:internal::is_like_std_string	typeref:typename:void
check	spdlog/fmt/bundled/ranges.h	/^    static void check(...);$/;"	p	class:internal::is_tuple_like_	typeref:typename:void
check_arg_id	spdlog/fmt/bundled/core.h	/^    FMT_CONSTEXPR bool check_arg_id(unsigned)$/;"	f	class:basic_parse_context	typeref:typename:FMT_CONSTEXPR bool
check_arg_id	spdlog/fmt/bundled/core.h	/^    void check_arg_id(basic_string_view<Char>) {}$/;"	f	class:basic_parse_context	typeref:typename:void
check_no_auto_index	spdlog/fmt/bundled/format.h	/^    bool check_no_auto_index(const char *&error)$/;"	f	class:fmt::internal::FormatterBase	typeref:typename:bool
check_sign	spdlog/fmt/bundled/format.h	/^void check_sign(const Char *&s, const Arg &arg)$/;"	f	namespace:fmt::internal	typeref:typename:void
children	qcustomplot.h	/^  QList<QCPLayerable*> children() const { return mChildren; }$/;"	f	class:QCPLayer	typeref:typename:QList<QCPLayerable * >
chocolate	spdlog/fmt/bundled/colors.h	/^    chocolate = 0xD2691E,               \/\/ rgb(210,105,30)$/;"	e	enum:color
ciHSV	qcustomplot.h	/^                            ,ciHSV \/\/\/< Color channels hue, saturation and value are linearly/;"	e	enum:QCPColorGradient::ColorInterpolation
ciRGB	qcustomplot.h	/^  enum ColorInterpolation { ciRGB  \/\/\/< Color channels red, green and blue are linearly inter/;"	e	enum:QCPColorGradient::ColorInterpolation
circular_q	spdlog/details/circular_q.h	/^    explicit circular_q(size_t max_items)$/;"	f	class:spdlog::details::circular_q
circular_q	spdlog/details/circular_q.h	/^class circular_q$/;"	c	namespace:spdlog::details
cleanMantissa	qcustomplot.cpp	/^double QCPAxisTicker::cleanMantissa(double input) const$/;"	f	class:QCPAxisTicker	typeref:typename:double
cleanMantissa	qcustomplot.h	/^  double cleanMantissa(double input) const;$/;"	p	class:QCPAxisTicker	typeref:typename:double
clear	circular-buffer.cpp	/^void CircularBuffer::clear() {$/;"	f	class:CircularBuffer	typeref:typename:void
clear	circular-buffer.h	/^    void clear();$/;"	p	class:CircularBuffer	typeref:typename:void
clear	json.hpp	/^    void clear() noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:void
clear	qcustomplot.cpp	/^void QCPAxisTickerText::clear()$/;"	f	class:QCPAxisTickerText	typeref:typename:void
clear	qcustomplot.cpp	/^void QCPBarsGroup::clear()$/;"	f	class:QCPBarsGroup	typeref:typename:void
clear	qcustomplot.cpp	/^void QCPColorMapData::clear()$/;"	f	class:QCPColorMapData	typeref:typename:void
clear	qcustomplot.cpp	/^void QCPDataSelection::clear()$/;"	f	class:QCPDataSelection	typeref:typename:void
clear	qcustomplot.cpp	/^void QCPLayout::clear()$/;"	f	class:QCPLayout	typeref:typename:void
clear	qcustomplot.cpp	/^void QCPMarginGroup::clear()$/;"	f	class:QCPMarginGroup	typeref:typename:void
clear	qcustomplot.cpp	/^void QCPPaintBufferGlFbo::clear(const QColor &color)$/;"	f	class:QCPPaintBufferGlFbo	typeref:typename:void
clear	qcustomplot.cpp	/^void QCPPaintBufferGlPbuffer::clear(const QColor &color)$/;"	f	class:QCPPaintBufferGlPbuffer	typeref:typename:void
clear	qcustomplot.cpp	/^void QCPPaintBufferPixmap::clear(const QColor &color)$/;"	f	class:QCPPaintBufferPixmap	typeref:typename:void
clear	qcustomplot.h	/^  virtual void clear(const QColor &color) = 0;$/;"	p	class:QCPAbstractPaintBuffer	typeref:typename:void
clear	qcustomplot.h	/^  void clear();$/;"	p	class:QCPAxisTickerText	typeref:typename:void
clear	qcustomplot.h	/^  void clear();$/;"	p	class:QCPBarsGroup	typeref:typename:void
clear	qcustomplot.h	/^  void clear();$/;"	p	class:QCPColorMapData	typeref:typename:void
clear	qcustomplot.h	/^  void clear();$/;"	p	class:QCPDataContainer	typeref:typename:void
clear	qcustomplot.h	/^  void clear();$/;"	p	class:QCPDataSelection	typeref:typename:void
clear	qcustomplot.h	/^  void clear();$/;"	p	class:QCPLayout	typeref:typename:void
clear	qcustomplot.h	/^  void clear();$/;"	p	class:QCPMarginGroup	typeref:typename:void
clear	qcustomplot.h	/^  void clear(const QColor &color) Q_DECL_OVERRIDE;$/;"	p	class:QCPPaintBufferGlFbo	typeref:typename:void
clear	qcustomplot.h	/^  void clear(const QColor &color) Q_DECL_OVERRIDE;$/;"	p	class:QCPPaintBufferGlPbuffer	typeref:typename:void
clear	qcustomplot.h	/^  void clear(const QColor &color) Q_DECL_OVERRIDE;$/;"	p	class:QCPPaintBufferPixmap	typeref:typename:void
clear	qcustomplot.h	/^void QCPDataContainer<DataType>::clear()$/;"	f	class:QCPDataContainer	typeref:typename:void
clear	spdlog/fmt/bundled/format.h	/^    void clear() FMT_NOEXCEPT$/;"	f	class:fmt::BasicWriter	typeref:typename:void
clear	spdlog/fmt/bundled/format.h	/^    void clear() FMT_NOEXCEPT$/;"	f	class:fmt::Buffer	typeref:typename:void
clearAlpha	qcustomplot.cpp	/^void QCPColorMapData::clearAlpha()$/;"	f	class:QCPColorMapData	typeref:typename:void
clearAlpha	qcustomplot.h	/^  void clearAlpha();$/;"	p	class:QCPColorMapData	typeref:typename:void
clearCache	qcustomplot.cpp	/^void QCPAxisPainterPrivate::clearCache()$/;"	f	class:QCPAxisPainterPrivate	typeref:typename:void
clearCache	qcustomplot.h	/^  void clearCache();$/;"	p	class:QCPAxisPainterPrivate	typeref:typename:void
clearColorStops	qcustomplot.cpp	/^void QCPColorGradient::clearColorStops()$/;"	f	class:QCPColorGradient	typeref:typename:void
clearColorStops	qcustomplot.h	/^  void clearColorStops();$/;"	p	class:QCPColorGradient	typeref:typename:void
clearGraphs	qcustomplot.cpp	/^int QCustomPlot::clearGraphs()$/;"	f	class:QCustomPlot	typeref:typename:int
clearGraphs	qcustomplot.h	/^  int clearGraphs();$/;"	p	class:QCustomPlot	typeref:typename:int
clearItems	qcustomplot.cpp	/^int QCustomPlot::clearItems()$/;"	f	class:QCustomPlot	typeref:typename:int
clearItems	qcustomplot.cpp	/^void QCPLegend::clearItems()$/;"	f	class:QCPLegend	typeref:typename:void
clearItems	qcustomplot.h	/^  int clearItems();$/;"	p	class:QCustomPlot	typeref:typename:int
clearItems	qcustomplot.h	/^  void clearItems();$/;"	p	class:QCPLegend	typeref:typename:void
clearPlottables	qcustomplot.cpp	/^int QCustomPlot::clearPlottables()$/;"	f	class:QCustomPlot	typeref:typename:int
clearPlottables	qcustomplot.h	/^  int clearPlottables();$/;"	p	class:QCustomPlot	typeref:typename:int
clear_audio	qc-message.pb.h	/^  void clear_audio();$/;"	p	class:Protocol	typeref:typename:void
clear_audio	qc-message.pb.h	/^inline void Protocol::clear_audio() {$/;"	f	class:Protocol	typeref:typename:void
clear_color	gui-session.h	/^        ImVec4 clear_color = ImVec4(0.45f, 0.55f, 0.60f, 1.00f);$/;"	m	class:GuiSession_depre	typeref:typename:ImVec4
clear_has_audio	qc-message.pb.h	/^  void clear_has_audio();$/;"	p	class:Protocol	typeref:typename:void
clear_has_audio	qc-message.pb.h	/^inline void Protocol::clear_has_audio() {$/;"	f	class:Protocol	typeref:typename:void
clear_has_imu	qc-message.pb.h	/^  void clear_has_imu();$/;"	p	class:Protocol	typeref:typename:void
clear_has_imu	qc-message.pb.h	/^inline void Protocol::clear_has_imu() {$/;"	f	class:Protocol	typeref:typename:void
clear_has_ksoo	qc-message.pb.h	/^  void clear_has_ksoo();$/;"	p	class:Protocol	typeref:typename:void
clear_has_ksoo	qc-message.pb.h	/^inline void Protocol::clear_has_ksoo() {$/;"	f	class:Protocol	typeref:typename:void
clear_has_left_motor	qc-message.pb.h	/^  void clear_has_left_motor();$/;"	p	class:Protocol	typeref:typename:void
clear_has_left_motor	qc-message.pb.h	/^inline void Protocol::clear_has_left_motor() {$/;"	f	class:Protocol	typeref:typename:void
clear_has_right_motor	qc-message.pb.h	/^  void clear_has_right_motor();$/;"	p	class:Protocol	typeref:typename:void
clear_has_right_motor	qc-message.pb.h	/^inline void Protocol::clear_has_right_motor() {$/;"	f	class:Protocol	typeref:typename:void
clear_has_video	qc-message.pb.h	/^  void clear_has_video();$/;"	p	class:Protocol	typeref:typename:void
clear_has_video	qc-message.pb.h	/^inline void Protocol::clear_has_video() {$/;"	f	class:Protocol	typeref:typename:void
clear_has_x	qc-message.pb.h	/^  void clear_has_x();$/;"	p	class:Imu	typeref:typename:void
clear_has_x	qc-message.pb.h	/^inline void Imu::clear_has_x() {$/;"	f	class:Imu	typeref:typename:void
clear_has_y	qc-message.pb.h	/^  void clear_has_y();$/;"	p	class:Imu	typeref:typename:void
clear_has_y	qc-message.pb.h	/^inline void Imu::clear_has_y() {$/;"	f	class:Imu	typeref:typename:void
clear_imu	qc-message.pb.h	/^  void clear_imu();$/;"	p	class:Protocol	typeref:typename:void
clear_imu	qc-message.pb.h	/^inline void Protocol::clear_imu() {$/;"	f	class:Protocol	typeref:typename:void
clear_ksoo	qc-message.pb.h	/^  void clear_ksoo();$/;"	p	class:Protocol	typeref:typename:void
clear_ksoo	qc-message.pb.h	/^inline void Protocol::clear_ksoo() {$/;"	f	class:Protocol	typeref:typename:void
clear_left_motor	qc-message.pb.h	/^  void clear_left_motor();$/;"	p	class:Protocol	typeref:typename:void
clear_left_motor	qc-message.pb.h	/^inline void Protocol::clear_left_motor() {$/;"	f	class:Protocol	typeref:typename:void
clear_line	spdlog/sinks/ansicolor_sink.h	/^    const std::string clear_line = "\\033[K";$/;"	m	class:spdlog::sinks::ansicolor_sink	typeref:typename:const std::string
clear_right_motor	qc-message.pb.h	/^  void clear_right_motor();$/;"	p	class:Protocol	typeref:typename:void
clear_right_motor	qc-message.pb.h	/^inline void Protocol::clear_right_motor() {$/;"	f	class:Protocol	typeref:typename:void
clear_video	qc-message.pb.h	/^  void clear_video();$/;"	p	class:Protocol	typeref:typename:void
clear_video	qc-message.pb.h	/^inline void Protocol::clear_video() {$/;"	f	class:Protocol	typeref:typename:void
clear_x	qc-message.pb.h	/^  void clear_x();$/;"	p	class:Imu	typeref:typename:void
clear_x	qc-message.pb.h	/^inline void Imu::clear_x() {$/;"	f	class:Imu	typeref:typename:void
clear_y	qc-message.pb.h	/^  void clear_y();$/;"	p	class:Imu	typeref:typename:void
clear_y	qc-message.pb.h	/^inline void Imu::clear_y() {$/;"	f	class:Imu	typeref:typename:void
clicked	qcustomplot.h	/^  void clicked(QMouseEvent *event);$/;"	S	class:QCPTextElement	typeref:typename:void
clicked	qcustomplot.h	/^  void clicked(QMouseEvent *event);$/;"	p	class:QCPTextElement	typeref:typename:void
clientWindow	gui.h	/^    bool clientWindow = false;$/;"	m	class:ClientWindow	typeref:typename:bool
clipAxisRect	qcustomplot.cpp	/^QCPAxisRect *QCPAbstractItem::clipAxisRect() const$/;"	f	class:QCPAbstractItem	typeref:typename:QCPAxisRect *
clipAxisRect	qcustomplot.h	/^  QCPAxisRect *clipAxisRect() const;$/;"	p	class:QCPAbstractItem	typeref:typename:QCPAxisRect *
clipRect	qcustomplot.cpp	/^QRect QCPAbstractItem::clipRect() const$/;"	f	class:QCPAbstractItem	typeref:typename:QRect
clipRect	qcustomplot.cpp	/^QRect QCPAbstractLegendItem::clipRect() const$/;"	f	class:QCPAbstractLegendItem	typeref:typename:QRect
clipRect	qcustomplot.cpp	/^QRect QCPAbstractPlottable::clipRect() const$/;"	f	class:QCPAbstractPlottable	typeref:typename:QRect
clipRect	qcustomplot.cpp	/^QRect QCPLayerable::clipRect() const$/;"	f	class:QCPLayerable	typeref:typename:QRect
clipRect	qcustomplot.h	/^  virtual QRect clipRect() const Q_DECL_OVERRIDE;$/;"	p	class:QCPAbstractItem	typeref:typename:QRect
clipRect	qcustomplot.h	/^  virtual QRect clipRect() const Q_DECL_OVERRIDE;$/;"	p	class:QCPAbstractLegendItem	typeref:typename:QRect
clipRect	qcustomplot.h	/^  virtual QRect clipRect() const Q_DECL_OVERRIDE;$/;"	p	class:QCPAbstractPlottable	typeref:typename:QRect
clipRect	qcustomplot.h	/^  virtual QRect clipRect() const;$/;"	p	class:QCPLayerable	typeref:typename:QRect
clipToAxisRect	qcustomplot.h	/^  Q_PROPERTY(bool clipToAxisRect READ clipToAxisRect WRITE setClipToAxisRect)$/;"	p	class:QCPAbstractItem	typeref:typename:bool
clipToAxisRect	qcustomplot.h	/^  bool clipToAxisRect() const { return mClipToAxisRect; }$/;"	f	class:QCPAbstractItem	typeref:typename:bool
clock	spdlog/details/async_log_helper.h	/^    using clock = std::chrono::steady_clock;$/;"	t	class:spdlog::details::async_log_helper	typeref:typename:std::chrono::steady_clock
clock_type	spdlog/details/thread_pool.h	/^    using clock_type = std::chrono::steady_clock;$/;"	t	class:spdlog::details::thread_pool	typeref:typename:std::chrono::steady_clock
close	qcustomplot.h	/^  double key, open, high, low, close;$/;"	m	class:QCPFinancialData	typeref:typename:double
close	spdlog/details/file_helper.h	/^    void close()$/;"	f	class:spdlog::details::file_helper	typeref:typename:void
close	spdlog/fmt/bundled/posix.cc	/^void fmt::BufferedFile::close() {$/;"	f	class:fmt::BufferedFile	typeref:typename:void
close	spdlog/fmt/bundled/posix.cc	/^void fmt::File::close() {$/;"	f	class:fmt::File	typeref:typename:void
close	spdlog/fmt/bundled/posix.h	/^    FMT_API void close();$/;"	p	class:fmt::BufferedFile	typeref:typename:FMT_API void
close	spdlog/fmt/bundled/posix.h	/^    FMT_API void close();$/;"	p	class:fmt::File	typeref:typename:FMT_API void
close_current_file	spdlog/contrib/sinks/step_file_sink.h	/^    void close_current_file()$/;"	f	class:spdlog::sinks::SPDLOG_FINAL	typeref:typename:void
clz	spdlog/fmt/bundled/format.h	/^inline uint32_t clz(uint32_t x)$/;"	f	namespace:fmt::internal	typeref:typename:uint32_t
clzll	spdlog/fmt/bundled/format.h	/^inline uint32_t clzll(uint64_t x)$/;"	f	namespace:fmt::internal	typeref:typename:uint32_t
cmdType	tcp-packet.h	/^	u16	cmdType;	\/\/ 명령의 종류$/;"	m	struct:__anonce98fa070308	typeref:typename:u16
cmdType	tcp-packet.h	/^	u16	cmdType;	\/\/ 명령의 종류$/;"	m	struct:__anonce98fa070408	typeref:typename:u16
code	stb_image.h	/^   stbi__uint16 code[256];$/;"	m	struct:__anon84e4e8860508	typeref:typename:stbi__uint16[256]
code_bits	stb_image.h	/^   int            code_bits;   \/\/ number of valid bits$/;"	m	struct:__anon84e4e8860608	typeref:typename:int
code_buffer	stb_image.h	/^   stbi__uint32   code_buffer; \/\/ jpeg entropy-coded buffer$/;"	m	struct:__anon84e4e8860608	typeref:typename:stbi__uint32
code_buffer	stb_image.h	/^   stbi__uint32 code_buffer;$/;"	m	struct:__anon84e4e8860a08	typeref:typename:stbi__uint32
codes	stb_image.h	/^   stbi__gif_lzw codes[4096];$/;"	m	struct:__anon84e4e8861108	typeref:typename:stbi__gif_lzw[4096]
coeff	stb_image.h	/^      short   *coeff;   \/\/ progressive only$/;"	m	struct:__anon84e4e8860608::__anon84e4e8860708	typeref:typename:short *
coeff_h	stb_image.h	/^      int      coeff_w, coeff_h; \/\/ number of 8x8 coefficient blocks$/;"	m	struct:__anon84e4e8860608::__anon84e4e8860708	typeref:typename:int
coeff_w	stb_image.h	/^      int      coeff_w, coeff_h; \/\/ number of 8x8 coefficient blocks$/;"	m	struct:__anon84e4e8860608::__anon84e4e8860708	typeref:typename:int
color	qcustomplot.cpp	/^QRgb QCPColorGradient::color(double position, const QCPRange &range, bool logarithmic)$/;"	f	class:QCPColorGradient	typeref:typename:QRgb
color	qcustomplot.h	/^  QColor color() const { return mColor; }$/;"	f	class:QCPItemText	typeref:typename:QColor
color	qcustomplot.h	/^  QRgb color(double position, const QCPRange &range, bool logarithmic=false);$/;"	p	class:QCPColorGradient	typeref:typename:QRgb
color	qcustomplot.h	/^  Q_PROPERTY(QColor color READ color WRITE setColor)$/;"	p	class:QCPItemText	typeref:typename:QColor
color	spdlog/fmt/bundled/colors.h	/^enum class color : uint32_t$/;"	g	typeref:typename:uint32_t
color	spdlog/fmt/bundled/core.h	/^enum color$/;"	g
colorInterpolation	qcustomplot.h	/^  ColorInterpolation colorInterpolation() const { return mColorInterpolation; }$/;"	f	class:QCPColorGradient	typeref:typename:ColorInterpolation
colorMaps	qcustomplot.cpp	/^QList<QCPColorMap*> QCPColorScale::colorMaps() const$/;"	f	class:QCPColorScale	typeref:typename:QList<QCPColorMap * >
colorMaps	qcustomplot.h	/^  QList<QCPColorMap*> colorMaps() const;$/;"	p	class:QCPColorScale	typeref:typename:QList<QCPColorMap * >
colorScale	qcustomplot.h	/^  QCPColorScale *colorScale() const { return mColorScale.data(); }$/;"	f	class:QCPColorMap	typeref:typename:QCPColorScale *
colorStops	qcustomplot.h	/^  QMap<double, QColor> colorStops() const { return mColorStops; }$/;"	f	class:QCPColorGradient	typeref:typename:QMap<double,QColor>
color_range_end	spdlog/details/log_msg.h	/^    size_t color_range_end{0};$/;"	m	struct:spdlog::details::log_msg	typeref:typename:size_t
color_range_start	spdlog/details/log_msg.h	/^    size_t color_range_start{0};$/;"	m	struct:spdlog::details::log_msg	typeref:typename:size_t
color_table	stb_image.h	/^   stbi_uc *color_table;$/;"	m	struct:__anon84e4e8861108	typeref:typename:stbi_uc *
colorize	qcustomplot.cpp	/^void QCPColorGradient::colorize(const double *data, const QCPRange &range, QRgb *scanLine, int n/;"	f	class:QCPColorGradient	typeref:typename:void
colorize	qcustomplot.cpp	/^void QCPColorGradient::colorize(const double *data, const unsigned char *alpha, const QCPRange &/;"	f	class:QCPColorGradient	typeref:typename:void
colorize	qcustomplot.h	/^  void colorize(const double *data, const QCPRange &range, QRgb *scanLine, int n, int dataIndexF/;"	p	class:QCPColorGradient	typeref:typename:void
colorize	qcustomplot.h	/^  void colorize(const double *data, const unsigned char *alpha, const QCPRange &range, QRgb *sca/;"	p	class:QCPColorGradient	typeref:typename:void
colors_	spdlog/sinks/ansicolor_sink.h	/^    std::unordered_map<level::level_enum, std::string, level::level_hasher> colors_;$/;"	m	class:spdlog::sinks::ansicolor_sink	typeref:typename:std::unordered_map<level::level_enum,std::string,level::level_hasher>
colors_	spdlog/sinks/wincolor_sink.h	/^    std::unordered_map<level::level_enum, WORD, level::level_hasher> colors_;$/;"	m	class:spdlog::sinks::wincolor_sink	typeref:typename:std::unordered_map<level::level_enum,WORD,level::level_hasher>
columnCount	qcustomplot.h	/^  Q_PROPERTY(int columnCount READ columnCount)$/;"	p	class:QCPLayoutGrid	typeref:typename:int
columnCount	qcustomplot.h	/^  int columnCount() const { return mElements.size() > 0 ? mElements.first().size() : 0; }$/;"	f	class:QCPLayoutGrid	typeref:typename:int
columnSpacing	qcustomplot.h	/^  Q_PROPERTY(int columnSpacing READ columnSpacing WRITE setColumnSpacing)$/;"	p	class:QCPLayoutGrid	typeref:typename:int
columnSpacing	qcustomplot.h	/^  int columnSpacing() const { return mColumnSpacing; }$/;"	f	class:QCPLayoutGrid	typeref:typename:int
columnStretchFactors	qcustomplot.h	/^  QList<double> columnStretchFactors() const { return mColumnStretchFactors; }$/;"	f	class:QCPLayoutGrid	typeref:typename:QList<double>
command	protocol-struct.h	/^    uint8_t command;$/;"	m	struct:InnerProtocolWithSTM	typeref:typename:uint8_t
command	protocol-struct.h	/^    uint8_t command;$/;"	m	struct:ProtocolWithSTM	typeref:typename:uint8_t
commonMargin	qcustomplot.cpp	/^int QCPMarginGroup::commonMargin(QCP::MarginSide side) const$/;"	f	class:QCPMarginGroup	typeref:typename:int
commonMargin	qcustomplot.h	/^  virtual int commonMargin(QCP::MarginSide side) const;$/;"	p	class:QCPMarginGroup	typeref:typename:int
compare	spdlog/fmt/bundled/core.h	/^    int compare(basic_string_view other) const$/;"	f	class:basic_string_view	typeref:typename:int
compare	spdlog/fmt/bundled/format.h	/^    int compare(BasicStringRef other) const$/;"	f	class:fmt::BasicStringRef	typeref:typename:int
compile_pattern	spdlog/details/pattern_formatter_impl.h	/^inline void spdlog::pattern_formatter::compile_pattern(const std::string &pattern)$/;"	f	class:spdlog::pattern_formatter	typeref:typename:void
compile_pattern	spdlog/formatter.h	/^    void compile_pattern(const std::string &pattern);$/;"	p	class:spdlog::SPDLOG_FINAL	typeref:typename:void
compile_pattern_	spdlog/details/pattern_formatter.h	/^    void compile_pattern_(const std::string &pattern)$/;"	f	class:spdlog::SPDLOG_FINAL	typeref:typename:void
compressString	string-util.cpp	/^std::string compressString(const std::string& str,$/;"	f	typeref:typename:std::string
compressString	string-util.h	/^std::string compressString(const std::string& str,$/;"	p	typeref:typename:std::string
compute_boundaries	json.hpp	/^boundaries compute_boundaries(FloatType value)$/;"	f	namespace:nlohmann::detail::dtoa_impl	typeref:typename:boundaries
concealed	spdlog/sinks/ansicolor_sink.h	/^    const std::string concealed = "\\033[8m";$/;"	m	class:spdlog::sinks::ansicolor_sink	typeref:typename:const std::string
conditional_helper	spdlog/fmt/bundled/ranges.h	/^struct conditional_helper$/;"	s	namespace:internal
conjunction	json.hpp	/^struct conjunction<B1, Bn...> : std::conditional<bool(B1::value), conjunction<Bn...>, B1>::type /;"	s	namespace:nlohmann::detail
conjunction	json.hpp	/^template<class B1> struct conjunction<B1> : B1 {};$/;"	s	namespace:nlohmann::detail
conjunction	json.hpp	/^template<class...> struct conjunction : std::true_type {};$/;"	s	namespace:nlohmann::detail
connectAP	ble.cpp	/^int BLESession::connectAP() {$/;"	f	class:BLESession	typeref:typename:int
connectAP	ble.h	/^    int connectAP();$/;"	p	class:BLESession	typeref:typename:int
connectAuthServer	ble.cpp	/^int BLESession::connectAuthServer() {$/;"	f	class:BLESession	typeref:typename:int
connectAuthServer	ble.h	/^    int connectAuthServer();$/;"	p	class:BLESession	typeref:typename:int
connectBars	qcustomplot.cpp	/^void QCPBars::connectBars(QCPBars *lower, QCPBars *upper)$/;"	f	class:QCPBars	typeref:typename:void
connectBars	qcustomplot.h	/^  static void connectBars(QCPBars* lower, QCPBars* upper);$/;"	p	class:QCPBars	typeref:typename:void
console_mutex	spdlog/details/console_globals.h	/^struct console_mutex$/;"	s	namespace:spdlog::details
console_nullmutex	spdlog/details/console_globals.h	/^struct console_nullmutex$/;"	s	namespace:spdlog::details
console_stderr	spdlog/details/console_globals.h	/^struct console_stderr$/;"	s	namespace:spdlog::details
console_stdout	spdlog/details/console_globals.h	/^struct console_stdout$/;"	s	namespace:spdlog::details
constBegin	qcustomplot.h	/^  const_iterator constBegin() const { return mData.constBegin()+mPreallocSize; }$/;"	f	class:QCPDataContainer	typeref:typename:const_iterator
constEnd	qcustomplot.h	/^  const_iterator constEnd() const { return mData.constEnd(); }$/;"	f	class:QCPDataContainer	typeref:typename:const_iterator
const_check	spdlog/fmt/bundled/format.h	/^inline T const_check(T value)$/;"	f	namespace:fmt::internal	typeref:typename:T
const_iterator	json.hpp	/^    using const_iterator = iter_impl<const basic_json>;$/;"	t	class:nlohmann::basic_json	typeref:typename:iter_impl<const basic_json>
const_iterator	packet-buffer.h	/^  typedef const boost::asio::const_buffer* const_iterator;$/;"	t	class:shared_const_buffer	typeref:typename:const boost::asio::const_buffer *
const_iterator	qcustomplot.h	/^  typedef typename QVector<DataType>::const_iterator const_iterator;$/;"	t	class:QCPDataContainer	typeref:typename:QVector<DataType>::const_iterator
const_pointer	json.hpp	/^    using const_pointer = typename std::allocator_traits<allocator_type>::const_pointer;$/;"	t	class:nlohmann::basic_json	typeref:typename:std::allocator_traits<allocator_type>::const_pointer
const_reference	json.hpp	/^    using const_reference = const value_type&;$/;"	t	class:nlohmann::basic_json	typeref:typename:const value_type &
const_reference	spdlog/fmt/bundled/core.h	/^    typedef const T &const_reference;$/;"	t	class:internal::basic_buffer	typeref:typename:const T &
const_reverse_iterator	json.hpp	/^    using const_reverse_iterator = json_reverse_iterator<typename basic_json::const_iterator>;$/;"	t	class:nlohmann::basic_json	typeref:typename:json_reverse_iterator<typename basic_json::const_iterator>
construct	json.hpp	/^    static void construct(BasicJsonType& j, const CompatibleArrayType& arr)$/;"	f	struct:nlohmann::detail::external_constructor	typeref:typename:void
construct	json.hpp	/^    static void construct(BasicJsonType& j, const CompatibleObjectType& obj)$/;"	f	struct:nlohmann::detail::external_constructor	typeref:typename:void
construct	json.hpp	/^    static void construct(BasicJsonType& j, const std::valarray<T>& arr)$/;"	f	struct:nlohmann::detail::external_constructor	typeref:typename:void
construct	json.hpp	/^    static void construct(BasicJsonType& j, const std::vector<bool>& arr)$/;"	f	struct:nlohmann::detail::external_constructor	typeref:typename:void
construct	json.hpp	/^    static void construct(BasicJsonType& j, const typename BasicJsonType::array_t& arr)$/;"	f	struct:nlohmann::detail::external_constructor	typeref:typename:void
construct	json.hpp	/^    static void construct(BasicJsonType& j, const typename BasicJsonType::object_t& obj)$/;"	f	struct:nlohmann::detail::external_constructor	typeref:typename:void
construct	json.hpp	/^    static void construct(BasicJsonType& j, const typename BasicJsonType::string_t& s)$/;"	f	struct:nlohmann::detail::external_constructor	typeref:typename:void
construct	json.hpp	/^    static void construct(BasicJsonType& j, typename BasicJsonType::array_t&& arr)$/;"	f	struct:nlohmann::detail::external_constructor	typeref:typename:void
construct	json.hpp	/^    static void construct(BasicJsonType& j, typename BasicJsonType::boolean_t b) noexcept$/;"	f	struct:nlohmann::detail::external_constructor	typeref:typename:void
construct	json.hpp	/^    static void construct(BasicJsonType& j, typename BasicJsonType::number_float_t val) noexcept$/;"	f	struct:nlohmann::detail::external_constructor	typeref:typename:void
construct	json.hpp	/^    static void construct(BasicJsonType& j, typename BasicJsonType::number_integer_t val) noexce/;"	f	struct:nlohmann::detail::external_constructor	typeref:typename:void
construct	json.hpp	/^    static void construct(BasicJsonType& j, typename BasicJsonType::number_unsigned_t val) noexc/;"	f	struct:nlohmann::detail::external_constructor	typeref:typename:void
construct	json.hpp	/^    static void construct(BasicJsonType& j, typename BasicJsonType::object_t&& obj)$/;"	f	struct:nlohmann::detail::external_constructor	typeref:typename:void
construct	json.hpp	/^    static void construct(BasicJsonType& j, typename BasicJsonType::string_t&& s)$/;"	f	struct:nlohmann::detail::external_constructor	typeref:typename:void
container	json.hpp	/^    typename IteratorType::reference container;$/;"	m	class:nlohmann::detail::iteration_proxy	typeref:typename:IteratorType::reference
container_	spdlog/fmt/bundled/core.h	/^    Container &container_;$/;"	m	class:internal::container_buffer	typeref:typename:Container &
container_buffer	spdlog/fmt/bundled/core.h	/^    explicit container_buffer(Container &c)$/;"	f	class:internal::container_buffer
container_buffer	spdlog/fmt/bundled/core.h	/^class container_buffer : public basic_buffer<typename Container::value_type>$/;"	c	namespace:internal
contains	qcustomplot.cpp	/^bool QCPDataRange::contains(const QCPDataRange &other) const$/;"	f	class:QCPDataRange	typeref:typename:bool
contains	qcustomplot.cpp	/^bool QCPDataSelection::contains(const QCPDataSelection &other) const$/;"	f	class:QCPDataSelection	typeref:typename:bool
contains	qcustomplot.h	/^  bool contains(QCPBars *bars) const { return mBars.contains(bars); }$/;"	f	class:QCPBarsGroup	typeref:typename:bool
contains	qcustomplot.h	/^  bool contains(const QCPDataRange &other) const;$/;"	p	class:QCPDataRange	typeref:typename:bool
contains	qcustomplot.h	/^  bool contains(const QCPDataSelection &other) const;$/;"	p	class:QCPDataSelection	typeref:typename:bool
contains	qcustomplot.h	/^  bool contains(double value) const { return value >= lower && value <= upper; }$/;"	f	class:QCPRange	typeref:typename:bool
context_base	spdlog/fmt/bundled/core.h	/^    context_base(OutputIt out, basic_string_view<char_type> format_str, basic_format_args<Contex/;"	f	class:internal::context_base
context_base	spdlog/fmt/bundled/core.h	/^class context_base$/;"	c	namespace:internal
convert	spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC int internal::utf16_to_utf8::convert(wstring_view s)$/;"	f	class:internal::utf16_to_utf8	typeref:typename:FMT_FUNC int
convert	spdlog/fmt/bundled/format.cc	/^FMT_FUNC int internal::UTF16ToUTF8::convert(WStringRef s) {$/;"	f	class:fmt::internal::UTF16ToUTF8	typeref:typename:FMT_FUNC int
convert	spdlog/fmt/bundled/format.h	/^    FMT_API int convert(WStringRef s);$/;"	p	class:fmt::internal::UTF16ToUTF8	typeref:typename:FMT_API int
convert	spdlog/fmt/bundled/format.h	/^    static char convert(char value)$/;"	f	class:fmt::internal::CharTraits	typeref:typename:char
convert	spdlog/fmt/bundled/format.h	/^    static char convert(wchar_t);$/;"	p	class:fmt::internal::CharTraits	typeref:typename:char
convert	spdlog/fmt/bundled/format.h	/^    static wchar_t convert(char value)$/;"	f	class:fmt::internal::CharTraits	typeref:typename:wchar_t
convert	spdlog/fmt/bundled/format.h	/^    static wchar_t convert(wchar_t value)$/;"	f	class:fmt::internal::CharTraits	typeref:typename:wchar_t
convert	spdlog/fmt/bundled/format.h	/^No &convert(...);$/;"	p	namespace:fmt::internal	typeref:typename:No &
convert	spdlog/fmt/bundled/format.h	/^Yes &convert(fmt::ULongLong);$/;"	p	namespace:fmt::internal	typeref:typename:Yes &
convert	spdlog/fmt/bundled/ostream.h	/^Yes &convert(std::ostream &);$/;"	p	namespace:fmt::internal	typeref:typename:Yes &
convert_rwcount	spdlog/fmt/bundled/posix.cc	/^inline unsigned convert_rwcount(std::size_t count) {$/;"	f	namespace:__anon5b5309a70110	typeref:typename:unsigned
convert_to_android	spdlog/sinks/android_sink.h	/^    static android_LogPriority convert_to_android(spdlog::level::level_enum level)$/;"	f	class:spdlog::sinks::android_sink	typeref:typename:android_LogPriority
convert_to_int	spdlog/fmt/bundled/core.h	/^struct convert_to_int$/;"	s	namespace:internal
coordToCell	qcustomplot.cpp	/^void QCPColorMapData::coordToCell(double key, double value, int *keyIndex, int *valueIndex) cons/;"	f	class:QCPColorMapData	typeref:typename:void
coordToCell	qcustomplot.h	/^  void coordToCell(double key, double value, int *keyIndex, int *valueIndex) const;$/;"	p	class:QCPColorMapData	typeref:typename:void
coordToPixel	qcustomplot.cpp	/^double QCPAxis::coordToPixel(double value) const$/;"	f	class:QCPAxis	typeref:typename:double
coordToPixel	qcustomplot.h	/^  double coordToPixel(double value) const;$/;"	p	class:QCPAxis	typeref:typename:double
coords	qcustomplot.h	/^  QPointF coords() const { return QPointF(mKey, mValue); }$/;"	f	class:QCPItemPosition	typeref:typename:QPointF
coordsToPixels	qcustomplot.cpp	/^const QPointF QCPAbstractPlottable::coordsToPixels(double key, double value) const$/;"	f	class:QCPAbstractPlottable	typeref:typename:const QPointF
coordsToPixels	qcustomplot.cpp	/^void QCPAbstractPlottable::coordsToPixels(double key, double value, double &x, double &y) const$/;"	f	class:QCPAbstractPlottable	typeref:typename:void
coordsToPixels	qcustomplot.h	/^  const QPointF coordsToPixels(double key, double value) const;$/;"	p	class:QCPAbstractPlottable	typeref:typename:const QPointF
coordsToPixels	qcustomplot.h	/^  void coordsToPixels(double key, double value, double &x, double &y) const;$/;"	p	class:QCPAbstractPlottable	typeref:typename:void
copy	json.hpp	/^        enum class patch_operations {add, remove, replace, move, copy, test, invalid};$/;"	e	enum:nlohmann::basic_json::patch::patch_operations
copy	spdlog/fmt/bundled/ranges.h	/^void copy(char ch, OutputIterator out)$/;"	f	namespace:internal	typeref:typename:void
copy	spdlog/fmt/bundled/ranges.h	/^void copy(const RangeT &range, OutputIterator out)$/;"	f	namespace:internal	typeref:typename:void
copy	spdlog/fmt/bundled/ranges.h	/^void copy(const char *str, OutputIterator out)$/;"	f	namespace:internal	typeref:typename:void
copyFrom	qcustomplot.cpp	/^void QCPSelectionDecorator::copyFrom(const QCPSelectionDecorator *other)$/;"	f	class:QCPSelectionDecorator	typeref:typename:void
copyFrom	qcustomplot.h	/^  virtual void copyFrom(const QCPSelectionDecorator *other);$/;"	p	class:QCPSelectionDecorator	typeref:typename:void
copy_to_little_endian_32	protobuf-c/protobuf-c.c	/^copy_to_little_endian_32(void *out, const void *in, const unsigned n)$/;"	f	typeref:typename:void	file:
copy_to_little_endian_64	protobuf-c/protobuf-c.c	/^copy_to_little_endian_64(void *out, const void *in, const unsigned n)$/;"	f	typeref:typename:void	file:
coral	spdlog/fmt/bundled/colors.h	/^    coral = 0xFF7F50,                   \/\/ rgb(255,127,80)$/;"	e	enum:color
cornflower_blue	spdlog/fmt/bundled/colors.h	/^    cornflower_blue = 0x6495ED,         \/\/ rgb(100,149,237)$/;"	e	enum:color
cornsilk	spdlog/fmt/bundled/colors.h	/^    cornsilk = 0xFFF8DC,                \/\/ rgb(255,248,220)$/;"	e	enum:color
count	json.hpp	/^    size_type count(KeyT&& key) const$/;"	f	class:nlohmann::basic_json	typeref:typename:size_type
count_digits	spdlog/fmt/bundled/format.h	/^inline unsigned count_digits(uint32_t n)$/;"	f	namespace:fmt::internal	typeref:typename:unsigned
count_digits	spdlog/fmt/bundled/format.h	/^inline unsigned count_digits(uint64_t n)$/;"	f	namespace:fmt::internal	typeref:typename:unsigned
count_packed_elements	protobuf-c/protobuf-c.c	/^count_packed_elements(ProtobufCType type,$/;"	f	typeref:typename:protobuf_c_boolean	file:
crbegin	json.hpp	/^    const_reverse_iterator crbegin() const noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:const_reverse_iterator
crc	protocol-struct.h	/^    uint8_t crc;$/;"	m	struct:ModernProtocolWithSTM	typeref:typename:uint8_t
crc	protocol-struct.h	/^    uint8_t crc;$/;"	m	struct:ProtocolWithSTM	typeref:typename:uint8_t
crc	simple.pb-c.h	/^  uint32_t crc;$/;"	m	struct:_FirmwareUpdateFeedback	typeref:typename:uint32_t
crc	simple.proto	/^    optional uint32 crc = 6;$/;"	f
crc32	protocol-struct.h	/^    uint32_t crc32; $/;"	m	struct:FirmwareUpgradeResponse	typeref:typename:uint32_t
create	json.hpp	/^    static T* create(Args&& ... args)$/;"	f	class:nlohmann::basic_json	typeref:typename:T *
create	json.hpp	/^    static invalid_iterator create(int id_, const std::string& what_arg)$/;"	f	class:nlohmann::detail::invalid_iterator	typeref:typename:invalid_iterator
create	json.hpp	/^    static other_error create(int id_, const std::string& what_arg)$/;"	f	class:nlohmann::detail::other_error	typeref:typename:other_error
create	json.hpp	/^    static out_of_range create(int id_, const std::string& what_arg)$/;"	f	class:nlohmann::detail::out_of_range	typeref:typename:out_of_range
create	json.hpp	/^    static parse_error create(int id_, std::size_t byte_, const std::string& what_arg)$/;"	f	class:nlohmann::detail::parse_error	typeref:typename:parse_error
create	json.hpp	/^    static type_error create(int id_, const std::string& what_arg)$/;"	f	class:nlohmann::detail::type_error	typeref:typename:type_error
create	license-session.h	/^        static pointer create(boost::asio::io_service& io_service)$/;"	f	class:LicenseSession	typeref:typename:pointer
create	qc-session.h	/^        static pointer create(boost::asio::io_service& io_service)$/;"	f	class:QcSession	typeref:typename:pointer
create	spdlog/async.h	/^    static std::shared_ptr<async_logger> create(const std::string &logger_name, SinkArgs &&... a/;"	f	struct:spdlog::async_factory	typeref:typename:std::shared_ptr<async_logger>
create	spdlog/details/registry.h	/^    std::shared_ptr<logger> create(const std::string &logger_name, const It &sinks_begin, const /;"	f	class:spdlog::details::registry_t	typeref:typename:std::shared_ptr<logger>
create	spdlog/details/registry.h	/^    std::shared_ptr<logger> create(const std::string &logger_name, sink_ptr sink)$/;"	f	class:spdlog::details::registry_t	typeref:typename:std::shared_ptr<logger>
create	spdlog/details/registry.h	/^    std::shared_ptr<logger> create(const std::string &logger_name, sinks_init_list sinks)$/;"	f	class:spdlog::details::registry_t	typeref:typename:std::shared_ptr<logger>
create	spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::create(const std::string &logger_name, Args... ar/;"	f	class:spdlog	typeref:typename:std::shared_ptr<spdlog::logger>
create	spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::create(const std::string &logger_name, const It &/;"	f	class:spdlog	typeref:typename:std::shared_ptr<spdlog::logger>
create	spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::create(const std::string &logger_name, const spdl/;"	f	class:spdlog	typeref:typename:std::shared_ptr<spdlog::logger>
create	spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::create(const std::string &logger_name, spdlog::si/;"	f	class:spdlog	typeref:typename:std::shared_ptr<spdlog::logger>
create	spdlog/spdlog.h	/^std::shared_ptr<logger> create(const std::string &logger_name, const It &sinks_begin, const It &/;"	p	namespace:spdlog	typeref:typename:std::shared_ptr<logger>
create	spdlog/spdlog.h	/^std::shared_ptr<logger> create(const std::string &logger_name, const sink_ptr &sink);$/;"	p	namespace:spdlog	typeref:typename:std::shared_ptr<logger>
create	spdlog/spdlog.h	/^std::shared_ptr<logger> create(const std::string &logger_name, sinks_init_list sinks);$/;"	p	namespace:spdlog	typeref:typename:std::shared_ptr<logger>
create	spdlog/spdlog.h	/^std::shared_ptr<spdlog::logger> create(const std::string &logger_name, Args... args);$/;"	p	namespace:spdlog	typeref:typename:std::shared_ptr<spdlog::logger>
createAlpha	qcustomplot.cpp	/^bool QCPColorMapData::createAlpha(bool initializeOpaque)$/;"	f	class:QCPColorMapData	typeref:typename:bool
createAlpha	qcustomplot.h	/^  bool createAlpha(bool initializeOpaque=true);$/;"	p	class:QCPColorMapData	typeref:typename:bool
createAnchor	qcustomplot.cpp	/^QCPItemAnchor *QCPAbstractItem::createAnchor(const QString &name, int anchorId)$/;"	f	class:QCPAbstractItem	typeref:typename:QCPItemAnchor *
createAnchor	qcustomplot.h	/^  QCPItemAnchor *createAnchor(const QString &name, int anchorId);$/;"	p	class:QCPAbstractItem	typeref:typename:QCPItemAnchor *
createLabelVector	qcustomplot.cpp	/^QVector<QString> QCPAxisTicker::createLabelVector(const QVector<double> &ticks, const QLocale &l/;"	f	class:QCPAxisTicker	typeref:typename:QVector<QString>
createLabelVector	qcustomplot.h	/^  virtual QVector<QString> createLabelVector(const QVector<double> &ticks, const QLocale &locale/;"	p	class:QCPAxisTicker	typeref:typename:QVector<QString>
createPaintBuffer	qcustomplot.cpp	/^QCPAbstractPaintBuffer *QCustomPlot::createPaintBuffer()$/;"	f	class:QCustomPlot	typeref:typename:QCPAbstractPaintBuffer *
createPaintBuffer	qcustomplot.h	/^  QCPAbstractPaintBuffer *createPaintBuffer();$/;"	p	class:QCustomPlot	typeref:typename:QCPAbstractPaintBuffer *
createPosition	qcustomplot.cpp	/^QCPItemPosition *QCPAbstractItem::createPosition(const QString &name)$/;"	f	class:QCPAbstractItem	typeref:typename:QCPItemPosition *
createPosition	qcustomplot.h	/^  QCPItemPosition *createPosition(const QString &name);$/;"	p	class:QCPAbstractItem	typeref:typename:QCPItemPosition *
createSubTickVector	qcustomplot.cpp	/^QVector<double> QCPAxisTicker::createSubTickVector(int subTickCount, const QVector<double> &tick/;"	f	class:QCPAxisTicker	typeref:typename:QVector<double>
createSubTickVector	qcustomplot.h	/^  virtual QVector<double> createSubTickVector(int subTickCount, const QVector<double> &ticks);$/;"	p	class:QCPAxisTicker	typeref:typename:QVector<double>
createTickVector	qcustomplot.cpp	/^QVector<double> QCPAxisTicker::createTickVector(double tickStep, const QCPRange &range)$/;"	f	class:QCPAxisTicker	typeref:typename:QVector<double>
createTickVector	qcustomplot.cpp	/^QVector<double> QCPAxisTickerDateTime::createTickVector(double tickStep, const QCPRange &range)$/;"	f	class:QCPAxisTickerDateTime	typeref:typename:QVector<double>
createTickVector	qcustomplot.cpp	/^QVector<double> QCPAxisTickerLog::createTickVector(double tickStep, const QCPRange &range)$/;"	f	class:QCPAxisTickerLog	typeref:typename:QVector<double>
createTickVector	qcustomplot.cpp	/^QVector<double> QCPAxisTickerText::createTickVector(double tickStep, const QCPRange &range)$/;"	f	class:QCPAxisTickerText	typeref:typename:QVector<double>
createTickVector	qcustomplot.h	/^  virtual QVector<double> createTickVector(double tickStep, const QCPRange &range) Q_DECL_OVERRI/;"	p	class:QCPAxisTickerDateTime	typeref:typename:QVector<double>
createTickVector	qcustomplot.h	/^  virtual QVector<double> createTickVector(double tickStep, const QCPRange &range) Q_DECL_OVERRI/;"	p	class:QCPAxisTickerLog	typeref:typename:QVector<double>
createTickVector	qcustomplot.h	/^  virtual QVector<double> createTickVector(double tickStep, const QCPRange &range) Q_DECL_OVERRI/;"	p	class:QCPAxisTickerText	typeref:typename:QVector<double>
createTickVector	qcustomplot.h	/^  virtual QVector<double> createTickVector(double tickStep, const QCPRange &range);$/;"	p	class:QCPAxisTicker	typeref:typename:QVector<double>
create_async	spdlog/async.h	/^inline std::shared_ptr<spdlog::logger> create_async(const std::string &logger_name, SinkArgs &&./;"	f	namespace:spdlog	typeref:typename:std::shared_ptr<spdlog::logger>
create_async	spdlog/details/registry.h	/^    std::shared_ptr<async_logger> create_async(const std::string &logger_name, size_t queue_size/;"	f	class:spdlog::details::registry_t	typeref:typename:std::shared_ptr<async_logger>
create_async	spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::create_async(const std::string &logger_name, cons/;"	f	class:spdlog	typeref:typename:std::shared_ptr<spdlog::logger>
create_async	spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::create_async(const std::string &logger_name, sink/;"	f	class:spdlog	typeref:typename:std::shared_ptr<spdlog::logger>
create_async	spdlog/spdlog.h	/^std::shared_ptr<logger> create_async(const std::string &logger_name, const It &sinks_begin, cons/;"	p	namespace:spdlog	typeref:typename:std::shared_ptr<logger>
create_async	spdlog/spdlog.h	/^std::shared_ptr<logger> create_async(const std::string &logger_name, const sink_ptr &sink, size_/;"	p	namespace:spdlog	typeref:typename:std::shared_ptr<logger>
create_async	spdlog/spdlog.h	/^std::shared_ptr<logger> create_async(const std::string &logger_name, sinks_init_list sinks, size/;"	p	namespace:spdlog	typeref:typename:std::shared_ptr<logger>
crend	json.hpp	/^    const_reverse_iterator crend() const noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:const_reverse_iterator
crimson	spdlog/fmt/bundled/colors.h	/^    crimson = 0xDC143C,                 \/\/ rgb(220,20,60)$/;"	e	enum:color
critical	spdlog/common.h	/^    critical = 5,$/;"	e	enum:spdlog::level::level_enum
critical	spdlog/details/logger_impl.h	/^inline void spdlog::logger::critical(const T &msg)$/;"	f	class:spdlog::logger	typeref:typename:void
critical	spdlog/details/logger_impl.h	/^inline void spdlog::logger::critical(const char *fmt, const Arg1 &arg1, const Args &... args)$/;"	f	class:spdlog::logger	typeref:typename:void
critical	spdlog/details/logger_impl.h	/^inline void spdlog::logger::critical(const wchar_t *fmt, const Args &... args)$/;"	f	class:spdlog::logger	typeref:typename:void
critical	spdlog/logger.h	/^    void critical(const T &msg);$/;"	p	class:spdlog::logger	typeref:typename:void
critical	spdlog/logger.h	/^    void critical(const char *fmt, const Arg1 &, const Args &... args);$/;"	p	class:spdlog::logger	typeref:typename:void
critical	spdlog/logger.h	/^    void critical(const wchar_t *fmt, const Args &... args);$/;"	p	class:spdlog::logger	typeref:typename:void
critical	spdlogger.h	/^		void critical(const char* message, const Args&... args)$/;"	f	class:util::Log	typeref:typename:void
csCandlestick	qcustomplot.h	/^                   ,csCandlestick  \/\/\/< Candlestick representation$/;"	e	enum:QCPFinancial::ChartStyle
csOhlc	qcustomplot.h	/^  enum ChartStyle { csOhlc         \/\/\/< Open-High-Low-Close bar representation$/;"	e	enum:QCPFinancial::ChartStyle
cstring_type	spdlog/fmt/bundled/core.h	/^    cstring_type,$/;"	e	enum:internal::type
cur_x	stb_image.h	/^   int cur_x, cur_y;$/;"	m	struct:__anon84e4e8861108	typeref:typename:int
cur_y	stb_image.h	/^   int cur_x, cur_y;$/;"	m	struct:__anon84e4e8861108	typeref:typename:int
current	json.hpp	/^    int current = std::char_traits<char>::eof();$/;"	m	class:nlohmann::detail::binary_reader	typeref:typename:int
current	json.hpp	/^    std::char_traits<char>::int_type current = std::char_traits<char>::eof();$/;"	m	class:nlohmann::detail::lexer	typeref:typename:std::char_traits<char>::int_type
currentLayer	qcustomplot.cpp	/^QCPLayer *QCustomPlot::currentLayer() const$/;"	f	class:QCustomPlot	typeref:typename:QCPLayer *
currentLayer	qcustomplot.h	/^  QCPLayer *currentLayer() const;$/;"	p	class:QCustomPlot	typeref:typename:QCPLayer *
current_size_	spdlog/sinks/rotating_file_sink.h	/^    std::size_t current_size_;$/;"	m	class:spdlog::sinks::SPDLOG_FINAL	typeref:typename:std::size_t
cursor	json.hpp	/^    const char* cursor;$/;"	m	class:nlohmann::detail::input_buffer_adapter	typeref:typename:const char *
custom	spdlog/fmt/bundled/core.h	/^        custom_value<Context> custom;$/;"	m	union:internal::value::__anonef64315f020a	typeref:typename:custom_value<Context>
custom	spdlog/fmt/bundled/format.h	/^        CustomValue custom;$/;"	m	union:fmt::internal::Value::__anon1ea8787f020a	typeref:typename:CustomValue
customPath	qcustomplot.h	/^  QPainterPath customPath() const { return mCustomPath; }$/;"	f	class:QCPScatterStyle	typeref:typename:QPainterPath
custom_	spdlog/fmt/bundled/core.h	/^        internal::custom_value<Context> custom_;$/;"	m	class:basic_format_arg::handle	typeref:typename:internal::custom_value<Context>
custom_type	spdlog/fmt/bundled/core.h	/^    custom_type$/;"	e	enum:internal::type
custom_value	spdlog/fmt/bundled/core.h	/^struct custom_value$/;"	s	namespace:internal
cyan	spdlog/fmt/bundled/colors.h	/^    cyan = 0x00FFFF,                    \/\/ rgb(0,255,255)$/;"	e	enum:color
cyan	spdlog/fmt/bundled/core.h	/^    cyan,$/;"	e	enum:color
cyan	spdlog/sinks/ansicolor_sink.h	/^    const std::string cyan = "\\033[36m";$/;"	m	class:spdlog::sinks::ansicolor_sink	typeref:typename:const std::string
daily_file_sink	spdlog/sinks/daily_file_sink.h	/^    daily_file_sink(filename_t base_filename, int rotation_hour, int rotation_minute)$/;"	f	class:spdlog::sinks::SPDLOG_FINAL
daily_file_sink	spdlog/sinks/file_sinks.h	/^    daily_file_sink(filename_t base_filename, int rotation_hour, int rotation_minute)$/;"	f	class:spdlog::sinks::SPDLOG_FINAL
daily_file_sink_mt	spdlog/sinks/daily_file_sink.h	/^using daily_file_sink_mt = daily_file_sink<std::mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:daily_file_sink<std::mutex>
daily_file_sink_mt	spdlog/sinks/file_sinks.h	/^using daily_file_sink_mt = daily_file_sink<std::mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:daily_file_sink<std::mutex>
daily_file_sink_st	spdlog/sinks/daily_file_sink.h	/^using daily_file_sink_st = daily_file_sink<details::null_mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:daily_file_sink<details::null_mutex>
daily_file_sink_st	spdlog/sinks/file_sinks.h	/^using daily_file_sink_st = daily_file_sink<details::null_mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:daily_file_sink<details::null_mutex>
daily_filename_calculator	spdlog/sinks/daily_file_sink.h	/^struct daily_filename_calculator$/;"	s	namespace:spdlog::sinks
daily_logger_mt	spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::daily_logger_mt($/;"	f	class:spdlog	typeref:typename:std::shared_ptr<spdlog::logger>
daily_logger_mt	spdlog/sinks/daily_file_sink.h	/^inline std::shared_ptr<logger> daily_logger_mt(const std::string &logger_name, const filename_t /;"	f	namespace:spdlog	typeref:typename:std::shared_ptr<logger>
daily_logger_mt	spdlog/spdlog.h	/^std::shared_ptr<logger> daily_logger_mt(const std::string &logger_name, const filename_t &filena/;"	p	namespace:spdlog	typeref:typename:std::shared_ptr<logger>
daily_logger_st	spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::daily_logger_st($/;"	f	class:spdlog	typeref:typename:std::shared_ptr<spdlog::logger>
daily_logger_st	spdlog/sinks/daily_file_sink.h	/^inline std::shared_ptr<logger> daily_logger_st(const std::string &logger_name, const filename_t /;"	f	namespace:spdlog	typeref:typename:std::shared_ptr<logger>
daily_logger_st	spdlog/spdlog.h	/^std::shared_ptr<logger> daily_logger_st(const std::string &logger_name, const filename_t &filena/;"	p	namespace:spdlog	typeref:typename:std::shared_ptr<logger>
dark	spdlog/sinks/ansicolor_sink.h	/^    const std::string dark = "\\033[2m";$/;"	m	class:spdlog::sinks::ansicolor_sink	typeref:typename:const std::string
dark_blue	spdlog/fmt/bundled/colors.h	/^    dark_blue = 0x00008B,               \/\/ rgb(0,0,139)$/;"	e	enum:color
dark_cyan	spdlog/fmt/bundled/colors.h	/^    dark_cyan = 0x008B8B,               \/\/ rgb(0,139,139)$/;"	e	enum:color
dark_golden_rod	spdlog/fmt/bundled/colors.h	/^    dark_golden_rod = 0xB8860B,         \/\/ rgb(184,134,11)$/;"	e	enum:color
dark_gray	spdlog/fmt/bundled/colors.h	/^    dark_gray = 0xA9A9A9,               \/\/ rgb(169,169,169)$/;"	e	enum:color
dark_green	spdlog/fmt/bundled/colors.h	/^    dark_green = 0x006400,              \/\/ rgb(0,100,0)$/;"	e	enum:color
dark_khaki	spdlog/fmt/bundled/colors.h	/^    dark_khaki = 0xBDB76B,              \/\/ rgb(189,183,107)$/;"	e	enum:color
dark_magenta	spdlog/fmt/bundled/colors.h	/^    dark_magenta = 0x8B008B,            \/\/ rgb(139,0,139)$/;"	e	enum:color
dark_olive_green	spdlog/fmt/bundled/colors.h	/^    dark_olive_green = 0x556B2F,        \/\/ rgb(85,107,47)$/;"	e	enum:color
dark_orange	spdlog/fmt/bundled/colors.h	/^    dark_orange = 0xFF8C00,             \/\/ rgb(255,140,0)$/;"	e	enum:color
dark_orchid	spdlog/fmt/bundled/colors.h	/^    dark_orchid = 0x9932CC,             \/\/ rgb(153,50,204)$/;"	e	enum:color
dark_red	spdlog/fmt/bundled/colors.h	/^    dark_red = 0x8B0000,                \/\/ rgb(139,0,0)$/;"	e	enum:color
dark_salmon	spdlog/fmt/bundled/colors.h	/^    dark_salmon = 0xE9967A,             \/\/ rgb(233,150,122)$/;"	e	enum:color
dark_sea_green	spdlog/fmt/bundled/colors.h	/^    dark_sea_green = 0x8FBC8F,          \/\/ rgb(143,188,143)$/;"	e	enum:color
dark_slate_blue	spdlog/fmt/bundled/colors.h	/^    dark_slate_blue = 0x483D8B,         \/\/ rgb(72,61,139)$/;"	e	enum:color
dark_slate_gray	spdlog/fmt/bundled/colors.h	/^    dark_slate_gray = 0x2F4F4F,         \/\/ rgb(47,79,79)$/;"	e	enum:color
dark_turquoise	spdlog/fmt/bundled/colors.h	/^    dark_turquoise = 0x00CED1,          \/\/ rgb(0,206,209)$/;"	e	enum:color
dark_violet	spdlog/fmt/bundled/colors.h	/^    dark_violet = 0x9400D3,             \/\/ rgb(148,0,211)$/;"	e	enum:color
data	protobuf-c/protobuf-c.c	/^	const uint8_t *data;       \/**< Pointer to field data. *\/$/;"	m	struct:_ScannedMember	typeref:typename:const uint8_t *	file:
data	protobuf-c/protobuf-c.h	/^	uint8_t			*data;$/;"	m	struct:ProtobufCBufferSimple	typeref:typename:uint8_t *
data	protobuf-c/protobuf-c.h	/^	uint8_t			*data;$/;"	m	struct:ProtobufCMessageUnknownField	typeref:typename:uint8_t *
data	protobuf-c/protobuf-c.h	/^	uint8_t	*data;      \/**< Data bytes. *\/$/;"	m	struct:ProtobufCBinaryData	typeref:typename:uint8_t *
data	protocol-struct.h	/^    uint8_t data[0];$/;"	m	struct:FirmwareUpgradeDetail	typeref:typename:uint8_t[0]
data	protocol-struct.h	/^    uint8_t data[0];$/;"	m	struct:InnerProtocolWithSTM	typeref:typename:uint8_t[0]
data	protocol-struct.h	/^    uint8_t data[0];$/;"	m	struct:ModernProtocolWithSTM	typeref:typename:uint8_t[0]
data	protocol-struct.h	/^    uint8_t data[0];$/;"	m	struct:ProtocolWithSTM	typeref:typename:uint8_t[0]
data	qcustomplot.cpp	/^double QCPColorMapData::data(double key, double value)$/;"	f	class:QCPColorMapData	typeref:typename:double
data	qcustomplot.h	/^  QCPColorMapData *data() const { return mMapData; }$/;"	f	class:QCPColorMap	typeref:typename:QCPColorMapData *
data	qcustomplot.h	/^  QSharedPointer<QCPBarsDataContainer> data() const { return mDataContainer; }$/;"	f	class:QCPBars	typeref:typename:QSharedPointer<QCPBarsDataContainer>
data	qcustomplot.h	/^  QSharedPointer<QCPCurveDataContainer> data() const { return mDataContainer; }$/;"	f	class:QCPCurve	typeref:typename:QSharedPointer<QCPCurveDataContainer>
data	qcustomplot.h	/^  QSharedPointer<QCPErrorBarsDataContainer> data() const { return mDataContainer; }$/;"	f	class:QCPErrorBars	typeref:typename:QSharedPointer<QCPErrorBarsDataContainer>
data	qcustomplot.h	/^  QSharedPointer<QCPFinancialDataContainer> data() const { return mDataContainer; }$/;"	f	class:QCPFinancial	typeref:typename:QSharedPointer<QCPFinancialDataContainer>
data	qcustomplot.h	/^  QSharedPointer<QCPGraphDataContainer> data() const { return mDataContainer; }$/;"	f	class:QCPGraph	typeref:typename:QSharedPointer<QCPGraphDataContainer>
data	qcustomplot.h	/^  QSharedPointer<QCPStatisticalBoxDataContainer> data() const { return mDataContainer; }$/;"	f	class:QCPStatisticalBox	typeref:typename:QSharedPointer<QCPStatisticalBoxDataContainer>
data	qcustomplot.h	/^  double data(double key, double value);$/;"	p	class:QCPColorMapData	typeref:typename:double
data	simple.pb-c.h	/^  ProtobufCBinaryData data;$/;"	m	struct:_BandwidthTest	typeref:typename:ProtobufCBinaryData
data	simple.pb-c.h	/^  ProtobufCBinaryData data;$/;"	m	struct:_FirmwareUpdate	typeref:typename:ProtobufCBinaryData
data	simple.pb-c.h	/^  uint32_t data;$/;"	m	struct:_FirmwareUpdateFeedback	typeref:typename:uint32_t
data	simple.proto	/^    optional bytes data = 1;$/;"	f
data	simple.proto	/^    optional bytes data = 2;$/;"	f
data	simple.proto	/^    optional uint32 data = 2;$/;"	f
data	spdlog/fmt/bundled/core.h	/^        const char *data() const$/;"	f	struct:basic_string_view::type	typeref:typename:const char *
data	spdlog/fmt/bundled/core.h	/^    T *data() FMT_NOEXCEPT$/;"	f	class:internal::basic_buffer	typeref:typename:T *
data	spdlog/fmt/bundled/core.h	/^    const Char *data() const$/;"	f	class:basic_string_view	typeref:typename:const Char *
data	spdlog/fmt/bundled/core.h	/^    const T *data() const FMT_NOEXCEPT$/;"	f	class:internal::basic_buffer	typeref:typename:const T *
data	spdlog/fmt/bundled/core.h	/^    mutable char data[sizeof(basic_format_arg<format_context>)];$/;"	m	struct:internal::named_arg_base	typeref:typename:char[]
data	spdlog/fmt/bundled/format.h	/^    const Char *data() const FMT_NOEXCEPT$/;"	f	class:fmt::BasicWriter	typeref:typename:const Char *
data	spdlog/fmt/bundled/format.h	/^    const Char *data() const$/;"	f	class:fmt::BasicStringRef	typeref:typename:const Char *
data	spdlog/fmt/bundled/format.h	/^    const char *data() const$/;"	f	class:fmt::FormatInt	typeref:typename:const char *
data	spdlog/fmt/bundled/format.h	/^    int data[2];$/;"	m	struct:fmt::internal::DummyInt	typeref:typename:int[2]
data	stb_image.h	/^      stbi_uc *data;$/;"	m	struct:__anon84e4e8860608::__anon84e4e8860708	typeref:typename:stbi_uc *
data	tcp-packet.h	/^    u8 data[0];$/;"	m	struct:__anonce98fa070308	typeref:typename:u8[0]
data	tcp-packet.h	/^    u8 data[0];$/;"	m	struct:__anonce98fa070408	typeref:typename:u8[0]
dataBounds	qcustomplot.h	/^  QCPRange dataBounds() const { return mDataBounds; }$/;"	f	class:QCPColorMapData	typeref:typename:QCPRange
dataCount	qcustomplot.cpp	/^int QCPErrorBars::dataCount() const$/;"	f	class:QCPErrorBars	typeref:typename:int
dataCount	qcustomplot.h	/^  virtual int dataCount() const = 0;$/;"	p	class:QCPPlottableInterface1D	typeref:typename:int
dataCount	qcustomplot.h	/^  virtual int dataCount() const Q_DECL_OVERRIDE;$/;"	p	class:QCPAbstractPlottable1D	typeref:typename:int
dataCount	qcustomplot.h	/^  virtual int dataCount() const Q_DECL_OVERRIDE;$/;"	p	class:QCPErrorBars	typeref:typename:int
dataCount	qcustomplot.h	/^int QCPAbstractPlottable1D<DataType>::dataCount() const$/;"	f	class:QCPAbstractPlottable1D	typeref:typename:int
dataLen	tcp-packet.h	/^	u32	dataLen;	\/\/ 본 패킷의 총 전송 길이$/;"	m	struct:__anonce98fa070308	typeref:typename:u32
dataLen	tcp-packet.h	/^	u32	dataLen;	\/\/ 본 패킷의 총 전송 길이$/;"	m	struct:__anonce98fa070408	typeref:typename:u32
dataMainKey	qcustomplot.cpp	/^double QCPErrorBars::dataMainKey(int index) const$/;"	f	class:QCPErrorBars	typeref:typename:double
dataMainKey	qcustomplot.h	/^  virtual double dataMainKey(int index) const = 0;$/;"	p	class:QCPPlottableInterface1D	typeref:typename:double
dataMainKey	qcustomplot.h	/^  virtual double dataMainKey(int index) const Q_DECL_OVERRIDE;$/;"	p	class:QCPAbstractPlottable1D	typeref:typename:double
dataMainKey	qcustomplot.h	/^  virtual double dataMainKey(int index) const Q_DECL_OVERRIDE;$/;"	p	class:QCPErrorBars	typeref:typename:double
dataMainKey	qcustomplot.h	/^double QCPAbstractPlottable1D<DataType>::dataMainKey(int index) const$/;"	f	class:QCPAbstractPlottable1D	typeref:typename:double
dataMainValue	qcustomplot.cpp	/^double QCPErrorBars::dataMainValue(int index) const$/;"	f	class:QCPErrorBars	typeref:typename:double
dataMainValue	qcustomplot.h	/^  virtual double dataMainValue(int index) const = 0;$/;"	p	class:QCPPlottableInterface1D	typeref:typename:double
dataMainValue	qcustomplot.h	/^  virtual double dataMainValue(int index) const Q_DECL_OVERRIDE;$/;"	p	class:QCPAbstractPlottable1D	typeref:typename:double
dataMainValue	qcustomplot.h	/^  virtual double dataMainValue(int index) const Q_DECL_OVERRIDE;$/;"	p	class:QCPErrorBars	typeref:typename:double
dataMainValue	qcustomplot.h	/^double QCPAbstractPlottable1D<DataType>::dataMainValue(int index) const$/;"	f	class:QCPAbstractPlottable1D	typeref:typename:double
dataPixelPosition	qcustomplot.cpp	/^QPointF QCPBars::dataPixelPosition(int index) const$/;"	f	class:QCPBars	typeref:typename:QPointF
dataPixelPosition	qcustomplot.cpp	/^QPointF QCPErrorBars::dataPixelPosition(int index) const$/;"	f	class:QCPErrorBars	typeref:typename:QPointF
dataPixelPosition	qcustomplot.h	/^  virtual QPointF dataPixelPosition(int index) const = 0;$/;"	p	class:QCPPlottableInterface1D	typeref:typename:QPointF
dataPixelPosition	qcustomplot.h	/^  virtual QPointF dataPixelPosition(int index) const Q_DECL_OVERRIDE;$/;"	p	class:QCPAbstractPlottable1D	typeref:typename:QPointF
dataPixelPosition	qcustomplot.h	/^  virtual QPointF dataPixelPosition(int index) const Q_DECL_OVERRIDE;$/;"	p	class:QCPBars	typeref:typename:QPointF
dataPixelPosition	qcustomplot.h	/^  virtual QPointF dataPixelPosition(int index) const Q_DECL_OVERRIDE;$/;"	p	class:QCPErrorBars	typeref:typename:QPointF
dataPixelPosition	qcustomplot.h	/^QPointF QCPAbstractPlottable1D<DataType>::dataPixelPosition(int index) const$/;"	f	class:QCPAbstractPlottable1D	typeref:typename:QPointF
dataPlottable	qcustomplot.h	/^  QCPAbstractPlottable *dataPlottable() const { return mDataPlottable.data(); }$/;"	f	class:QCPErrorBars	typeref:typename:QCPAbstractPlottable *
dataPointCount	qcustomplot.cpp	/^int QCPDataSelection::dataPointCount() const$/;"	f	class:QCPDataSelection	typeref:typename:int
dataPointCount	qcustomplot.h	/^  int dataPointCount() const;$/;"	p	class:QCPDataSelection	typeref:typename:int
dataRange	qcustomplot.cpp	/^QCPDataRange QCPDataSelection::dataRange(int index) const$/;"	f	class:QCPDataSelection	typeref:typename:QCPDataRange
dataRange	qcustomplot.h	/^  QCPDataRange dataRange() const { return QCPDataRange(0, size()); }$/;"	f	class:QCPDataContainer	typeref:typename:QCPDataRange
dataRange	qcustomplot.h	/^  QCPDataRange dataRange(int index=0) const;$/;"	p	class:QCPDataSelection	typeref:typename:QCPDataRange
dataRange	qcustomplot.h	/^  QCPRange dataRange() const { return mDataRange; }$/;"	f	class:QCPColorMap	typeref:typename:QCPRange
dataRange	qcustomplot.h	/^  QCPRange dataRange() const { return mDataRange; }$/;"	f	class:QCPColorScale	typeref:typename:QCPRange
dataRange	qcustomplot.h	/^  Q_PROPERTY(QCPRange dataRange READ dataRange WRITE setDataRange NOTIFY dataRangeChanged)$/;"	p	class:QCPColorMap	typeref:typename:QCPRange
dataRange	qcustomplot.h	/^  Q_PROPERTY(QCPRange dataRange READ dataRange WRITE setDataRange NOTIFY dataRangeChanged)$/;"	p	class:QCPColorScale	typeref:typename:QCPRange
dataRangeChanged	qcustomplot.h	/^  void dataRangeChanged(const QCPRange &newRange);$/;"	S	class:QCPColorMap	typeref:typename:void
dataRangeChanged	qcustomplot.h	/^  void dataRangeChanged(const QCPRange &newRange);$/;"	S	class:QCPColorScale	typeref:typename:void
dataRangeChanged	qcustomplot.h	/^  void dataRangeChanged(const QCPRange &newRange);$/;"	p	class:QCPColorMap	typeref:typename:void
dataRangeChanged	qcustomplot.h	/^  void dataRangeChanged(const QCPRange &newRange);$/;"	p	class:QCPColorScale	typeref:typename:void
dataRangeCount	qcustomplot.h	/^  int dataRangeCount() const { return mDataRanges.size(); }$/;"	f	class:QCPDataSelection	typeref:typename:int
dataRanges	qcustomplot.h	/^  QList<QCPDataRange> dataRanges() const { return mDataRanges; }$/;"	f	class:QCPDataSelection	typeref:typename:QList<QCPDataRange>
dataScaleType	qcustomplot.h	/^  QCPAxis::ScaleType dataScaleType() const { return mDataScaleType; }$/;"	f	class:QCPColorMap	typeref:typename:QCPAxis::ScaleType
dataScaleType	qcustomplot.h	/^  QCPAxis::ScaleType dataScaleType() const { return mDataScaleType; }$/;"	f	class:QCPColorScale	typeref:typename:QCPAxis::ScaleType
dataScaleTypeChanged	qcustomplot.h	/^  void dataScaleTypeChanged(QCPAxis::ScaleType scaleType);$/;"	S	class:QCPColorMap	typeref:typename:void
dataScaleTypeChanged	qcustomplot.h	/^  void dataScaleTypeChanged(QCPAxis::ScaleType scaleType);$/;"	S	class:QCPColorScale	typeref:typename:void
dataScaleTypeChanged	qcustomplot.h	/^  void dataScaleTypeChanged(QCPAxis::ScaleType scaleType);$/;"	p	class:QCPColorMap	typeref:typename:void
dataScaleTypeChanged	qcustomplot.h	/^  void dataScaleTypeChanged(QCPAxis::ScaleType scaleType);$/;"	p	class:QCPColorScale	typeref:typename:void
dataSortKey	qcustomplot.cpp	/^double QCPErrorBars::dataSortKey(int index) const$/;"	f	class:QCPErrorBars	typeref:typename:double
dataSortKey	qcustomplot.h	/^  virtual double dataSortKey(int index) const = 0;$/;"	p	class:QCPPlottableInterface1D	typeref:typename:double
dataSortKey	qcustomplot.h	/^  virtual double dataSortKey(int index) const Q_DECL_OVERRIDE;$/;"	p	class:QCPAbstractPlottable1D	typeref:typename:double
dataSortKey	qcustomplot.h	/^  virtual double dataSortKey(int index) const Q_DECL_OVERRIDE;$/;"	p	class:QCPErrorBars	typeref:typename:double
dataSortKey	qcustomplot.h	/^double QCPAbstractPlottable1D<DataType>::dataSortKey(int index) const$/;"	f	class:QCPAbstractPlottable1D	typeref:typename:double
dataToImpulseLines	qcustomplot.cpp	/^QVector<QPointF> QCPGraph::dataToImpulseLines(const QVector<QCPGraphData> &data) const$/;"	f	class:QCPGraph	typeref:typename:QVector<QPointF>
dataToImpulseLines	qcustomplot.h	/^  QVector<QPointF> dataToImpulseLines(const QVector<QCPGraphData> &data) const;$/;"	p	class:QCPGraph	typeref:typename:QVector<QPointF>
dataToLines	qcustomplot.cpp	/^QVector<QPointF> QCPGraph::dataToLines(const QVector<QCPGraphData> &data) const$/;"	f	class:QCPGraph	typeref:typename:QVector<QPointF>
dataToLines	qcustomplot.h	/^  QVector<QPointF> dataToLines(const QVector<QCPGraphData> &data) const;$/;"	p	class:QCPGraph	typeref:typename:QVector<QPointF>
dataToStepCenterLines	qcustomplot.cpp	/^QVector<QPointF> QCPGraph::dataToStepCenterLines(const QVector<QCPGraphData> &data) const$/;"	f	class:QCPGraph	typeref:typename:QVector<QPointF>
dataToStepCenterLines	qcustomplot.h	/^  QVector<QPointF> dataToStepCenterLines(const QVector<QCPGraphData> &data) const;$/;"	p	class:QCPGraph	typeref:typename:QVector<QPointF>
dataToStepLeftLines	qcustomplot.cpp	/^QVector<QPointF> QCPGraph::dataToStepLeftLines(const QVector<QCPGraphData> &data) const$/;"	f	class:QCPGraph	typeref:typename:QVector<QPointF>
dataToStepLeftLines	qcustomplot.h	/^  QVector<QPointF> dataToStepLeftLines(const QVector<QCPGraphData> &data) const;$/;"	p	class:QCPGraph	typeref:typename:QVector<QPointF>
dataToStepRightLines	qcustomplot.cpp	/^QVector<QPointF> QCPGraph::dataToStepRightLines(const QVector<QCPGraphData> &data) const$/;"	f	class:QCPGraph	typeref:typename:QVector<QPointF>
dataToStepRightLines	qcustomplot.h	/^  QVector<QPointF> dataToStepRightLines(const QVector<QCPGraphData> &data) const;$/;"	p	class:QCPGraph	typeref:typename:QVector<QPointF>
dataValueRange	qcustomplot.cpp	/^QCPRange QCPErrorBars::dataValueRange(int index) const$/;"	f	class:QCPErrorBars	typeref:typename:QCPRange
dataValueRange	qcustomplot.h	/^  virtual QCPRange dataValueRange(int index) const = 0;$/;"	p	class:QCPPlottableInterface1D	typeref:typename:QCPRange
dataValueRange	qcustomplot.h	/^  virtual QCPRange dataValueRange(int index) const Q_DECL_OVERRIDE;$/;"	p	class:QCPAbstractPlottable1D	typeref:typename:QCPRange
dataValueRange	qcustomplot.h	/^  virtual QCPRange dataValueRange(int index) const Q_DECL_OVERRIDE;$/;"	p	class:QCPErrorBars	typeref:typename:QCPRange
dataValueRange	qcustomplot.h	/^QCPRange QCPAbstractPlottable1D<DataType>::dataValueRange(int index) const$/;"	f	class:QCPAbstractPlottable1D	typeref:typename:QCPRange
data_	circular-buffer.h	/^    std::vector<uint8_t> data_; $/;"	m	class:CircularBuffer	typeref:typename:std::vector<uint8_t>
data_	license-session.h	/^        uint8_t data_[1024*1024];\/\/\/< [수신]$/;"	m	class:LicenseSession	typeref:typename:uint8_t[]
data_	packet-buffer.h	/^  boost::shared_ptr<std::vector<char> > data_;$/;"	m	class:shared_const_buffer	typeref:typename:boost::shared_ptr<std::vector<char>>
data_	qc-session.h	/^        char data_[max_length];$/;"	m	class:QcSession	typeref:typename:char[]
data_	spdlog/fmt/bundled/core.h	/^    const Char *data_;$/;"	m	class:basic_string_view	typeref:typename:const Char *
data_	spdlog/fmt/bundled/core.h	/^    value_type data_[DATA_SIZE];$/;"	m	class:format_arg_store	typeref:typename:value_type[]
data_	spdlog/fmt/bundled/format.h	/^    T data_[SIZE];$/;"	m	class:fmt::internal::MemoryBuffer	typeref:typename:T[]
data_	spdlog/fmt/bundled/format.h	/^    const Char *data_;$/;"	m	class:fmt::BasicCStringRef	typeref:typename:const Char *
data_	spdlog/fmt/bundled/format.h	/^    const Char *data_;$/;"	m	class:fmt::BasicStringRef	typeref:typename:const Char *
dateTimeFormat	qcustomplot.h	/^  QString dateTimeFormat() const { return mDateTimeFormat; }$/;"	f	class:QCPAxisTickerDateTime	typeref:typename:QString
dateTimeSpec	qcustomplot.h	/^  Qt::TimeSpec dateTimeSpec() const { return mDateTimeSpec; }$/;"	f	class:QCPAxisTickerDateTime	typeref:typename:Qt::TimeSpec
dateTimeToKey	qcustomplot.cpp	/^double QCPAxisTickerDateTime::dateTimeToKey(const QDate date)$/;"	f	class:QCPAxisTickerDateTime	typeref:typename:double
dateTimeToKey	qcustomplot.cpp	/^double QCPAxisTickerDateTime::dateTimeToKey(const QDateTime dateTime)$/;"	f	class:QCPAxisTickerDateTime	typeref:typename:double
dateTimeToKey	qcustomplot.h	/^  static double dateTimeToKey(const QDate date);$/;"	p	class:QCPAxisTickerDateTime	typeref:typename:double
dateTimeToKey	qcustomplot.h	/^  static double dateTimeToKey(const QDateTime dateTime);$/;"	p	class:QCPAxisTickerDateTime	typeref:typename:double
dateonly_daily_file_name_calculator	spdlog/sinks/file_sinks.h	/^struct dateonly_daily_file_name_calculator$/;"	s	namespace:spdlog::sinks
days	spdlog/details/pattern_formatter.h	/^static const std::string days[]{"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"};$/;"	v	namespace:spdlog::details	typeref:typename:const std::string[]
days	spdlog/details/pattern_formatter_impl.h	/^static const std::string days[]{"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"};$/;"	v	namespace:spdlog::details	typeref:typename:const std::string[]
dc_pred	stb_image.h	/^      int dc_pred;$/;"	m	struct:__anon84e4e8860608::__anon84e4e8860708	typeref:typename:int
dct_bfly32o	stb_image.h	/^   #define dct_bfly32o(/;"	d
dct_bfly32o	stb_image.h	/^#define dct_bfly32o(/;"	d
dct_const	stb_image.h	/^   #define dct_const(/;"	d
dct_interleave16	stb_image.h	/^   #define dct_interleave16(/;"	d
dct_interleave8	stb_image.h	/^   #define dct_interleave8(/;"	d
dct_long_mac	stb_image.h	/^#define dct_long_mac(/;"	d
dct_long_mul	stb_image.h	/^#define dct_long_mul(/;"	d
dct_pass	stb_image.h	/^   #define dct_pass(/;"	d
dct_pass	stb_image.h	/^#define dct_pass(/;"	d
dct_rot	stb_image.h	/^   #define dct_rot(/;"	d
dct_trn16	stb_image.h	/^#define dct_trn16(/;"	d
dct_trn32	stb_image.h	/^#define dct_trn32(/;"	d
dct_trn64	stb_image.h	/^#define dct_trn64(/;"	d
dct_trn8_16	stb_image.h	/^#define dct_trn8_16(/;"	d
dct_trn8_32	stb_image.h	/^#define dct_trn8_32(/;"	d
dct_trn8_8	stb_image.h	/^#define dct_trn8_8(/;"	d
dct_wadd	stb_image.h	/^   #define dct_wadd(/;"	d
dct_wadd	stb_image.h	/^#define dct_wadd(/;"	d
dct_widen	stb_image.h	/^   #define dct_widen(/;"	d
dct_widen	stb_image.h	/^#define dct_widen(/;"	d
dct_wsub	stb_image.h	/^   #define dct_wsub(/;"	d
dct_wsub	stb_image.h	/^#define dct_wsub(/;"	d
deallocate	spdlog/fmt/bundled/format.h	/^    void deallocate()$/;"	f	class:fmt::internal::MemoryBuffer	typeref:typename:void
debug	spdlog/common.h	/^    debug = 1,$/;"	e	enum:spdlog::level::level_enum
debug	spdlog/details/logger_impl.h	/^inline void spdlog::logger::debug(const T &msg)$/;"	f	class:spdlog::logger	typeref:typename:void
debug	spdlog/details/logger_impl.h	/^inline void spdlog::logger::debug(const char *fmt, const Arg1 &arg1, const Args &... args)$/;"	f	class:spdlog::logger	typeref:typename:void
debug	spdlog/details/logger_impl.h	/^inline void spdlog::logger::debug(const wchar_t *fmt, const Args &... args)$/;"	f	class:spdlog::logger	typeref:typename:void
debug	spdlog/logger.h	/^    void debug(const T &msg);$/;"	p	class:spdlog::logger	typeref:typename:void
debug	spdlog/logger.h	/^    void debug(const char *fmt, const Arg1 &, const Args &... args);$/;"	p	class:spdlog::logger	typeref:typename:void
debug	spdlog/logger.h	/^    void debug(const wchar_t *fmt, const Args &... args);$/;"	p	class:spdlog::logger	typeref:typename:void
debug	spdlogger.h	/^		void debug(const char* message, const Args&... args)$/;"	f	class:util::Log	typeref:typename:void
debugging_info	simple.pb-c.h	/^  char *debugging_info;$/;"	m	struct:_ToHost	typeref:typename:char *
debugging_info	simple.proto	/^    optional string debugging_info = 12;  \/\/\/&lt; 보고 싶은 디버깅 문자열 $/;"	f
decayed	json.hpp	/^        using decayed = uncvref_t<T>;$/;"	t	function:nlohmann::detail::from_json_fn::call	typeref:typename:uncvref_t<T>
decayed	json.hpp	/^        using decayed = uncvref_t<T>;$/;"	t	function:nlohmann::detail::to_json_fn::call	typeref:typename:uncvref_t<T>
decimal_point	json.hpp	/^    const char decimal_point = '\\0';$/;"	m	class:nlohmann::detail::serializer	typeref:typename:const char
decimal_point_char	json.hpp	/^    const char decimal_point_char = '.';$/;"	m	class:nlohmann::detail::lexer	typeref:typename:const char
declval	spdlog/fmt/bundled/core.h	/^typename std::add_rvalue_reference<T>::type declval() FMT_NOEXCEPT;$/;"	p	namespace:internal	typeref:typename:std::add_rvalue_reference<T>::type
decode	json.hpp	/^    static uint8_t decode(uint8_t& state, uint32_t& codep, const uint8_t byte) noexcept$/;"	f	class:nlohmann::detail::serializer	typeref:typename:uint8_t
decompressString	string-util.cpp	/^std::string decompressString(const std::string& str)$/;"	f	typeref:typename:std::string
decompressString	string-util.h	/^std::string decompressString(const std::string& str);$/;"	p	typeref:typename:std::string
deep_pink	spdlog/fmt/bundled/colors.h	/^    deep_pink = 0xFF1493,               \/\/ rgb(255,20,147)$/;"	e	enum:color
deep_sky_blue	spdlog/fmt/bundled/colors.h	/^    deep_sky_blue = 0x00BFFF,           \/\/ rgb(0,191,255)$/;"	e	enum:color
default_daily_file_name_calculator	spdlog/sinks/file_sinks.h	/^struct default_daily_file_name_calculator$/;"	s	namespace:spdlog::sinks
default_eol	spdlog/details/os.h	/^SPDLOG_CONSTEXPR static const char *default_eol = SPDLOG_EOL;$/;"	v	namespace:spdlog::details::os	typeref:typename:SPDLOG_CONSTEXPR const char *
default_instance	qc-message.pb.cc	/^const Imu& Imu::default_instance() {$/;"	f	class:Imu	typeref:typename:const Imu &
default_instance	qc-message.pb.cc	/^const Protocol& Protocol::default_instance() {$/;"	f	class:Protocol	typeref:typename:const Protocol &
default_instance	qc-message.pb.h	/^  static const Imu& default_instance();$/;"	p	class:Imu	typeref:typename:const Imu &
default_instance	qc-message.pb.h	/^  static const Protocol& default_instance();$/;"	p	class:Protocol	typeref:typename:const Protocol &
default_step_file_name_calculator	spdlog/contrib/sinks/step_file_sink.h	/^struct default_step_file_name_calculator$/;"	s	namespace:spdlog::sinks
default_value	protobuf-c/protobuf-c.h	/^	const void		*default_value;$/;"	m	struct:ProtobufCFieldDescriptor	typeref:typename:const void *
delay	stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags, delay;$/;"	m	struct:__anon84e4e8861108	typeref:typename:int
delimiter	spdlog/fmt/bundled/ranges.h	/^    Char delimiter;$/;"	m	struct:formatting_range	typeref:typename:Char
delimiter	spdlog/fmt/bundled/ranges.h	/^    Char delimiter;$/;"	m	struct:formatting_tuple	typeref:typename:Char
delta	stb_image.h	/^   int    delta[17];   \/\/ old 'firstsymbol' - old 'firstcode'$/;"	m	struct:__anon84e4e8860508	typeref:typename:int[17]
depth	json.hpp	/^    int depth = 0;$/;"	m	class:nlohmann::detail::parser	typeref:typename:int
dequant	stb_image.h	/^   stbi_uc dequant[4][64];$/;"	m	struct:__anon84e4e8860608	typeref:typename:stbi_uc[4][64]
dequeue_for	spdlog/details/mpmc_blocking_q.h	/^    bool dequeue_for(T &popped_item, std::chrono::milliseconds wait_duration)$/;"	f	class:spdlog::details::mpmc_bounded_queue	typeref:typename:bool
descriptor	protobuf-c/protobuf-c.h	/^	const ProtobufCMessageDescriptor	*descriptor;$/;"	m	struct:ProtobufCMessage	typeref:typename:const ProtobufCMessageDescriptor *
descriptor	protobuf-c/protobuf-c.h	/^	const ProtobufCServiceDescriptor *descriptor;$/;"	m	struct:ProtobufCService	typeref:typename:const ProtobufCServiceDescriptor *
descriptor	protobuf-c/protobuf-c.h	/^	const void		*descriptor; \/* for MESSAGE and ENUM types *\/$/;"	m	struct:ProtobufCFieldDescriptor	typeref:typename:const void *
descriptor	qc-message.pb.cc	/^const ::google::protobuf::Descriptor* Imu::descriptor() {$/;"	f	class:Imu	typeref:typename:const::google::protobuf::Descriptor *
descriptor	qc-message.pb.cc	/^const ::google::protobuf::Descriptor* Protocol::descriptor() {$/;"	f	class:Protocol	typeref:typename:const::google::protobuf::Descriptor *
descriptor	qc-message.pb.h	/^  static const ::google::protobuf::Descriptor* descriptor();$/;"	p	class:Imu	typeref:typename:const::google::protobuf::Descriptor *
descriptor	qc-message.pb.h	/^  static const ::google::protobuf::Descriptor* descriptor();$/;"	p	class:Protocol	typeref:typename:const::google::protobuf::Descriptor *
descriptor	spdlog/fmt/bundled/posix.h	/^    int descriptor() const FMT_NOEXCEPT$/;"	f	class:fmt::File	typeref:typename:int
deselectAll	qcustomplot.cpp	/^void QCustomPlot::deselectAll()$/;"	f	class:QCustomPlot	typeref:typename:void
deselectAll	qcustomplot.h	/^  Q_SLOT void deselectAll();$/;"	p	class:QCustomPlot	typeref:typename:Q_SLOT void
deselectEvent	qcustomplot.cpp	/^void QCPAbstractItem::deselectEvent(bool *selectionStateChanged)$/;"	f	class:QCPAbstractItem	typeref:typename:void
deselectEvent	qcustomplot.cpp	/^void QCPAbstractLegendItem::deselectEvent(bool *selectionStateChanged)$/;"	f	class:QCPAbstractLegendItem	typeref:typename:void
deselectEvent	qcustomplot.cpp	/^void QCPAbstractPlottable::deselectEvent(bool *selectionStateChanged)$/;"	f	class:QCPAbstractPlottable	typeref:typename:void
deselectEvent	qcustomplot.cpp	/^void QCPAxis::deselectEvent(bool *selectionStateChanged)$/;"	f	class:QCPAxis	typeref:typename:void
deselectEvent	qcustomplot.cpp	/^void QCPLayerable::deselectEvent(bool *selectionStateChanged)$/;"	f	class:QCPLayerable	typeref:typename:void
deselectEvent	qcustomplot.cpp	/^void QCPLegend::deselectEvent(bool *selectionStateChanged)$/;"	f	class:QCPLegend	typeref:typename:void
deselectEvent	qcustomplot.cpp	/^void QCPTextElement::deselectEvent(bool *selectionStateChanged)$/;"	f	class:QCPTextElement	typeref:typename:void
deselectEvent	qcustomplot.h	/^  virtual void deselectEvent(bool *selectionStateChanged) Q_DECL_OVERRIDE;$/;"	p	class:QCPAbstractItem	typeref:typename:void
deselectEvent	qcustomplot.h	/^  virtual void deselectEvent(bool *selectionStateChanged) Q_DECL_OVERRIDE;$/;"	p	class:QCPAbstractLegendItem	typeref:typename:void
deselectEvent	qcustomplot.h	/^  virtual void deselectEvent(bool *selectionStateChanged) Q_DECL_OVERRIDE;$/;"	p	class:QCPAbstractPlottable	typeref:typename:void
deselectEvent	qcustomplot.h	/^  virtual void deselectEvent(bool *selectionStateChanged) Q_DECL_OVERRIDE;$/;"	p	class:QCPAxis	typeref:typename:void
deselectEvent	qcustomplot.h	/^  virtual void deselectEvent(bool *selectionStateChanged) Q_DECL_OVERRIDE;$/;"	p	class:QCPLegend	typeref:typename:void
deselectEvent	qcustomplot.h	/^  virtual void deselectEvent(bool *selectionStateChanged) Q_DECL_OVERRIDE;$/;"	p	class:QCPTextElement	typeref:typename:void
deselectEvent	qcustomplot.h	/^  virtual void deselectEvent(bool *selectionStateChanged);$/;"	p	class:QCPLayerable	typeref:typename:void
deserialize	spdlog/fmt/bundled/core.h	/^    basic_format_arg<Context> deserialize() const$/;"	f	struct:internal::named_arg_base	typeref:typename:basic_format_arg<Context>
destroy	json.hpp	/^        void destroy(value_t t) noexcept$/;"	f	union:nlohmann::basic_json::json_value	typeref:typename:void
destroy	protobuf-c/protobuf-c.h	/^	void (*destroy)(ProtobufCService *service);$/;"	m	struct:ProtobufCService	typeref:typename:void (*)(ProtobufCService * service)
detail	json.hpp	/^namespace detail$/;"	n	namespace:nlohmann
details	spdlog/async_logger.h	/^namespace details {$/;"	n	namespace:spdlog
details	spdlog/common.h	/^namespace details {$/;"	n	namespace:spdlog
details	spdlog/details/async_log_helper.h	/^namespace details {$/;"	n	namespace:spdlog
details	spdlog/details/circular_q.h	/^namespace details {$/;"	n	namespace:spdlog
details	spdlog/details/console_globals.h	/^namespace details {$/;"	n	namespace:spdlog
details	spdlog/details/file_helper.h	/^namespace details {$/;"	n	namespace:spdlog
details	spdlog/details/fmt_helper.h	/^namespace details {$/;"	n	namespace:spdlog
details	spdlog/details/log_msg.h	/^namespace details {$/;"	n	namespace:spdlog
details	spdlog/details/mpmc_blocking_q.h	/^namespace details {$/;"	n	namespace:spdlog
details	spdlog/details/null_mutex.h	/^namespace details {$/;"	n	namespace:spdlog
details	spdlog/details/os.h	/^namespace details {$/;"	n	namespace:spdlog
details	spdlog/details/pattern_formatter.h	/^namespace details {$/;"	n	namespace:spdlog
details	spdlog/details/pattern_formatter_impl.h	/^namespace details {$/;"	n	namespace:spdlog
details	spdlog/details/registry.h	/^namespace details {$/;"	n	namespace:spdlog
details	spdlog/details/thread_pool.h	/^namespace details {$/;"	n	namespace:spdlog
details	spdlog/formatter.h	/^namespace details {$/;"	n	namespace:spdlog
detect	json.hpp	/^    static int detect(U&&);$/;"	p	struct:nlohmann::detail::has_to_json	typeref:typename:int
detect	json.hpp	/^    static void detect(...);$/;"	p	struct:nlohmann::detail::has_from_json	typeref:typename:void
detect	json.hpp	/^    static void detect(...);$/;"	p	struct:nlohmann::detail::has_non_default_from_json	typeref:typename:void
detect	json.hpp	/^    static void detect(...);$/;"	p	struct:nlohmann::detail::has_to_json	typeref:typename:void
devicePixelRatio	qcustomplot.h	/^  double devicePixelRatio() const { return mDevicePixelRatio; }$/;"	f	class:QCPAbstractPaintBuffer	typeref:typename:double
device_id	simple.pb-c.h	/^  char *device_id;$/;"	m	struct:_ReqCompleteSetup	typeref:typename:char *
device_id	simple.proto	/^    optional string device_id = 2;$/;"	f
diff	json.hpp	/^    static basic_json diff(const basic_json& source, const basic_json& target,$/;"	f	class:nlohmann::basic_json	typeref:typename:basic_json
difference_type	json.hpp	/^    using difference_type = std::ptrdiff_t;$/;"	t	class:nlohmann::basic_json	typeref:typename:std::ptrdiff_t
difference_type	json.hpp	/^    using difference_type = std::ptrdiff_t;$/;"	t	class:nlohmann::detail::json_reverse_iterator	typeref:typename:std::ptrdiff_t
difference_type	json.hpp	/^    using difference_type = std::ptrdiff_t;$/;"	t	class:nlohmann::detail::primitive_iterator_t	typeref:typename:std::ptrdiff_t
difference_type	json.hpp	/^    using difference_type = typename BasicJsonType::difference_type;$/;"	t	class:nlohmann::detail::iter_impl	typeref:typename:BasicJsonType::difference_type
digit_index_	spdlog/fmt/bundled/format.h	/^    unsigned digit_index_;$/;"	m	class:fmt::internal::ThousandsSep	typeref:typename:unsigned
dim_gray	spdlog/fmt/bundled/colors.h	/^    dim_gray = 0x696969,                \/\/ rgb(105,105,105)$/;"	e	enum:color
discard_log_msg	spdlog/common.h	/^    discard_log_msg \/\/ Discard the message it enqueue fails$/;"	e	enum:spdlog::async_overflow_policy
discarded	json.hpp	/^    discarded         \/\/\/< discarded by the the parser callback function$/;"	e	enum:nlohmann::detail::value_t
dispatcher	spdlog/fmt/bundled/format-inl.h	/^        dispatcher(int err_code, char *&buf, std::size_t buf_size)$/;"	f	class:__anonb519b34f0110::safe_strerror::dispatcher
dispatcher	spdlog/fmt/bundled/format-inl.h	/^    class dispatcher$/;"	c	function:__anonb519b34f0110::safe_strerror
dist_sink	spdlog/sinks/dist_sink.h	/^    dist_sink(const dist_sink &) = delete;$/;"	p	class:spdlog::sinks::dist_sink
dist_sink	spdlog/sinks/dist_sink.h	/^    explicit dist_sink()$/;"	f	class:spdlog::sinks::dist_sink
dist_sink	spdlog/sinks/dist_sink.h	/^class dist_sink : public base_sink<Mutex>$/;"	c	namespace:spdlog::sinks
dist_sink_mt	spdlog/sinks/dist_sink.h	/^using dist_sink_mt = dist_sink<std::mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:dist_sink<std::mutex>
dist_sink_st	spdlog/sinks/dist_sink.h	/^using dist_sink_st = dist_sink<details::null_mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:dist_sink<details::null_mutex>
distanceSquaredToLine	qcustomplot.cpp	/^double QCPVector2D::distanceSquaredToLine(const QCPVector2D &start, const QCPVector2D &end) cons/;"	f	class:QCPVector2D	typeref:typename:double
distanceSquaredToLine	qcustomplot.cpp	/^double QCPVector2D::distanceSquaredToLine(const QLineF &line) const$/;"	f	class:QCPVector2D	typeref:typename:double
distanceSquaredToLine	qcustomplot.h	/^  double distanceSquaredToLine(const QCPVector2D &start, const QCPVector2D &end) const;$/;"	p	class:QCPVector2D	typeref:typename:double
distanceSquaredToLine	qcustomplot.h	/^  double distanceSquaredToLine(const QLineF &line) const;$/;"	p	class:QCPVector2D	typeref:typename:double
distanceToStraightLine	qcustomplot.cpp	/^double QCPVector2D::distanceToStraightLine(const QCPVector2D &base, const QCPVector2D &direction/;"	f	class:QCPVector2D	typeref:typename:double
distanceToStraightLine	qcustomplot.h	/^  double distanceToStraightLine(const QCPVector2D &base, const QCPVector2D &direction) const;$/;"	p	class:QCPVector2D	typeref:typename:double
diyfp	json.hpp	/^    constexpr diyfp() noexcept : f(0), e(0) {}$/;"	f	struct:nlohmann::detail::dtoa_impl::diyfp
diyfp	json.hpp	/^    constexpr diyfp(uint64_t f_, int e_) noexcept : f(f_), e(e_) {}$/;"	f	struct:nlohmann::detail::dtoa_impl::diyfp
diyfp	json.hpp	/^struct diyfp \/\/ f * 2^e$/;"	s	namespace:nlohmann::detail::dtoa_impl
do_alloc	protobuf-c/protobuf-c.c	/^do_alloc(ProtobufCAllocator *allocator, size_t size)$/;"	f	typeref:typename:void *	file:
do_charge	simple.pb-c.h	/^  uint32_t do_charge;$/;"	m	struct:_ToHi	typeref:typename:uint32_t
do_charge	simple.pb-c.h	/^  uint32_t do_charge;$/;"	m	struct:_ToSt	typeref:typename:uint32_t
do_charge	simple.proto	/^    optional uint32 do_charge = 101;$/;"	f
do_charge	simple.proto	/^    optional uint32 do_charge = 9; \/\/ 충전해라.$/;"	f
do_free	protobuf-c/protobuf-c.c	/^do_free(ProtobufCAllocator *allocator, void *data)$/;"	f	typeref:typename:void	file:
do_get	spdlog/fmt/bundled/core.h	/^    format_arg do_get(size_type index) const$/;"	f	class:basic_format_args	typeref:typename:format_arg
do_get_arg	spdlog/fmt/bundled/core.h	/^    format_arg do_get_arg(unsigned arg_id)$/;"	f	class:internal::context_base	typeref:typename:format_arg
do_get_arg	spdlog/fmt/bundled/format.cc	/^FMT_FUNC internal::Arg internal::FormatterBase::do_get_arg($/;"	f	class:fmt::internal::FormatterBase	typeref:typename:FMT_FUNC internal::Arg
do_get_arg	spdlog/fmt/bundled/format.h	/^    FMT_API Arg do_get_arg(unsigned arg_index, const char *&error);$/;"	p	class:fmt::internal::FormatterBase	typeref:typename:FMT_API Arg
dodger_blue	spdlog/fmt/bundled/colors.h	/^    dodger_blue = 0x1E90FF,             \/\/ rgb(30,144,255)$/;"	e	enum:color
donePainting	qcustomplot.cpp	/^void QCPPaintBufferGlFbo::donePainting()$/;"	f	class:QCPPaintBufferGlFbo	typeref:typename:void
donePainting	qcustomplot.h	/^  virtual void donePainting() Q_DECL_OVERRIDE;$/;"	p	class:QCPPaintBufferGlFbo	typeref:typename:void
donePainting	qcustomplot.h	/^  virtual void donePainting() {}$/;"	f	class:QCPAbstractPaintBuffer	typeref:typename:void
dot	qcustomplot.h	/^  double dot(const QCPVector2D &vec) const { return mX*vec.mX+mY*vec.mY; }$/;"	f	class:QCPVector2D	typeref:typename:double
doubleClicked	qcustomplot.h	/^  void doubleClicked(QMouseEvent *event);$/;"	S	class:QCPTextElement	typeref:typename:void
doubleClicked	qcustomplot.h	/^  void doubleClicked(QMouseEvent *event);$/;"	p	class:QCPTextElement	typeref:typename:void
double_type	spdlog/fmt/bundled/core.h	/^    double_type,$/;"	e	enum:internal::type
double_value	spdlog/fmt/bundled/core.h	/^        double double_value;$/;"	m	union:internal::value::__anonef64315f020a	typeref:typename:double
double_value	spdlog/fmt/bundled/format.h	/^        double double_value;$/;"	m	union:fmt::internal::Value::__anon1ea8787f020a	typeref:typename:double
doublemillisec	chrono-util.cpp	/^    typedef typename chrono::duration<double, milli> doublemillisec;$/;"	t	function:ChronoDuration::duration	typeref:typename:chrono::duration<double,milli>	file:
doublemillisec	chrono-util.cpp	/^    typedef typename chrono::duration<double, milli> doublemillisec;$/;"	t	function:ChronoDuration::durationWithBaseTime	typeref:typename:chrono::duration<double,milli>	file:
draw	gui.h	/^    void draw() {$/;"	f	class:ClientWindow	typeref:typename:void
draw	qcustomplot.cpp	/^void QCPAxis::draw(QCPPainter *painter)$/;"	f	class:QCPAxis	typeref:typename:void
draw	qcustomplot.cpp	/^void QCPAxisPainterPrivate::draw(QCPPainter *painter)$/;"	f	class:QCPAxisPainterPrivate	typeref:typename:void
draw	qcustomplot.cpp	/^void QCPAxisRect::draw(QCPPainter *painter)$/;"	f	class:QCPAxisRect	typeref:typename:void
draw	qcustomplot.cpp	/^void QCPBars::draw(QCPPainter *painter)$/;"	f	class:QCPBars	typeref:typename:void
draw	qcustomplot.cpp	/^void QCPColorMap::draw(QCPPainter *painter)$/;"	f	class:QCPColorMap	typeref:typename:void
draw	qcustomplot.cpp	/^void QCPColorScaleAxisRectPrivate::draw(QCPPainter *painter)$/;"	f	class:QCPColorScaleAxisRectPrivate	typeref:typename:void
draw	qcustomplot.cpp	/^void QCPCurve::draw(QCPPainter *painter)$/;"	f	class:QCPCurve	typeref:typename:void
draw	qcustomplot.cpp	/^void QCPErrorBars::draw(QCPPainter *painter)$/;"	f	class:QCPErrorBars	typeref:typename:void
draw	qcustomplot.cpp	/^void QCPFinancial::draw(QCPPainter *painter)$/;"	f	class:QCPFinancial	typeref:typename:void
draw	qcustomplot.cpp	/^void QCPGraph::draw(QCPPainter *painter)$/;"	f	class:QCPGraph	typeref:typename:void
draw	qcustomplot.cpp	/^void QCPGrid::draw(QCPPainter *painter)$/;"	f	class:QCPGrid	typeref:typename:void
draw	qcustomplot.cpp	/^void QCPItemBracket::draw(QCPPainter *painter)$/;"	f	class:QCPItemBracket	typeref:typename:void
draw	qcustomplot.cpp	/^void QCPItemCurve::draw(QCPPainter *painter)$/;"	f	class:QCPItemCurve	typeref:typename:void
draw	qcustomplot.cpp	/^void QCPItemEllipse::draw(QCPPainter *painter)$/;"	f	class:QCPItemEllipse	typeref:typename:void
draw	qcustomplot.cpp	/^void QCPItemLine::draw(QCPPainter *painter)$/;"	f	class:QCPItemLine	typeref:typename:void
draw	qcustomplot.cpp	/^void QCPItemPixmap::draw(QCPPainter *painter)$/;"	f	class:QCPItemPixmap	typeref:typename:void
draw	qcustomplot.cpp	/^void QCPItemRect::draw(QCPPainter *painter)$/;"	f	class:QCPItemRect	typeref:typename:void
draw	qcustomplot.cpp	/^void QCPItemStraightLine::draw(QCPPainter *painter)$/;"	f	class:QCPItemStraightLine	typeref:typename:void
draw	qcustomplot.cpp	/^void QCPItemText::draw(QCPPainter *painter)$/;"	f	class:QCPItemText	typeref:typename:void
draw	qcustomplot.cpp	/^void QCPItemTracer::draw(QCPPainter *painter)$/;"	f	class:QCPItemTracer	typeref:typename:void
draw	qcustomplot.cpp	/^void QCPLayer::draw(QCPPainter *painter)$/;"	f	class:QCPLayer	typeref:typename:void
draw	qcustomplot.cpp	/^void QCPLegend::draw(QCPPainter *painter)$/;"	f	class:QCPLegend	typeref:typename:void
draw	qcustomplot.cpp	/^void QCPLineEnding::draw(QCPPainter *painter, const QCPVector2D &pos, const QCPVector2D &dir) co/;"	f	class:QCPLineEnding	typeref:typename:void
draw	qcustomplot.cpp	/^void QCPLineEnding::draw(QCPPainter *painter, const QCPVector2D &pos, double angle) const$/;"	f	class:QCPLineEnding	typeref:typename:void
draw	qcustomplot.cpp	/^void QCPPaintBufferGlFbo::draw(QCPPainter *painter) const$/;"	f	class:QCPPaintBufferGlFbo	typeref:typename:void
draw	qcustomplot.cpp	/^void QCPPaintBufferGlPbuffer::draw(QCPPainter *painter) const$/;"	f	class:QCPPaintBufferGlPbuffer	typeref:typename:void
draw	qcustomplot.cpp	/^void QCPPaintBufferPixmap::draw(QCPPainter *painter) const$/;"	f	class:QCPPaintBufferPixmap	typeref:typename:void
draw	qcustomplot.cpp	/^void QCPPlottableLegendItem::draw(QCPPainter *painter)$/;"	f	class:QCPPlottableLegendItem	typeref:typename:void
draw	qcustomplot.cpp	/^void QCPSelectionRect::draw(QCPPainter *painter)$/;"	f	class:QCPSelectionRect	typeref:typename:void
draw	qcustomplot.cpp	/^void QCPStatisticalBox::draw(QCPPainter *painter)$/;"	f	class:QCPStatisticalBox	typeref:typename:void
draw	qcustomplot.cpp	/^void QCPTextElement::draw(QCPPainter *painter)$/;"	f	class:QCPTextElement	typeref:typename:void
draw	qcustomplot.cpp	/^void QCustomPlot::draw(QCPPainter *painter)$/;"	f	class:QCustomPlot	typeref:typename:void
draw	qcustomplot.h	/^  virtual void draw(QCPPainter *painter) = 0;$/;"	p	class:QCPLayerable	typeref:typename:void
draw	qcustomplot.h	/^  virtual void draw(QCPPainter *painter) Q_DECL_OVERRIDE = 0;$/;"	p	class:QCPAbstractItem	typeref:typename:void
draw	qcustomplot.h	/^  virtual void draw(QCPPainter *painter) Q_DECL_OVERRIDE = 0;$/;"	p	class:QCPAbstractLegendItem	typeref:typename:void
draw	qcustomplot.h	/^  virtual void draw(QCPPainter *painter) Q_DECL_OVERRIDE = 0;$/;"	p	class:QCPAbstractPlottable	typeref:typename:void
draw	qcustomplot.h	/^  virtual void draw(QCPPainter *painter) Q_DECL_OVERRIDE { Q_UNUSED(painter) }$/;"	f	class:QCPLayoutElement	typeref:typename:void
draw	qcustomplot.h	/^  virtual void draw(QCPPainter *painter) Q_DECL_OVERRIDE;$/;"	p	class:QCPAxis	typeref:typename:void
draw	qcustomplot.h	/^  virtual void draw(QCPPainter *painter) Q_DECL_OVERRIDE;$/;"	p	class:QCPAxisRect	typeref:typename:void
draw	qcustomplot.h	/^  virtual void draw(QCPPainter *painter) Q_DECL_OVERRIDE;$/;"	p	class:QCPBars	typeref:typename:void
draw	qcustomplot.h	/^  virtual void draw(QCPPainter *painter) Q_DECL_OVERRIDE;$/;"	p	class:QCPColorMap	typeref:typename:void
draw	qcustomplot.h	/^  virtual void draw(QCPPainter *painter) Q_DECL_OVERRIDE;$/;"	p	class:QCPColorScaleAxisRectPrivate	typeref:typename:void
draw	qcustomplot.h	/^  virtual void draw(QCPPainter *painter) Q_DECL_OVERRIDE;$/;"	p	class:QCPCurve	typeref:typename:void
draw	qcustomplot.h	/^  virtual void draw(QCPPainter *painter) Q_DECL_OVERRIDE;$/;"	p	class:QCPErrorBars	typeref:typename:void
draw	qcustomplot.h	/^  virtual void draw(QCPPainter *painter) Q_DECL_OVERRIDE;$/;"	p	class:QCPFinancial	typeref:typename:void
draw	qcustomplot.h	/^  virtual void draw(QCPPainter *painter) Q_DECL_OVERRIDE;$/;"	p	class:QCPGraph	typeref:typename:void
draw	qcustomplot.h	/^  virtual void draw(QCPPainter *painter) Q_DECL_OVERRIDE;$/;"	p	class:QCPGrid	typeref:typename:void
draw	qcustomplot.h	/^  virtual void draw(QCPPainter *painter) Q_DECL_OVERRIDE;$/;"	p	class:QCPItemBracket	typeref:typename:void
draw	qcustomplot.h	/^  virtual void draw(QCPPainter *painter) Q_DECL_OVERRIDE;$/;"	p	class:QCPItemCurve	typeref:typename:void
draw	qcustomplot.h	/^  virtual void draw(QCPPainter *painter) Q_DECL_OVERRIDE;$/;"	p	class:QCPItemEllipse	typeref:typename:void
draw	qcustomplot.h	/^  virtual void draw(QCPPainter *painter) Q_DECL_OVERRIDE;$/;"	p	class:QCPItemLine	typeref:typename:void
draw	qcustomplot.h	/^  virtual void draw(QCPPainter *painter) Q_DECL_OVERRIDE;$/;"	p	class:QCPItemPixmap	typeref:typename:void
draw	qcustomplot.h	/^  virtual void draw(QCPPainter *painter) Q_DECL_OVERRIDE;$/;"	p	class:QCPItemRect	typeref:typename:void
draw	qcustomplot.h	/^  virtual void draw(QCPPainter *painter) Q_DECL_OVERRIDE;$/;"	p	class:QCPItemStraightLine	typeref:typename:void
draw	qcustomplot.h	/^  virtual void draw(QCPPainter *painter) Q_DECL_OVERRIDE;$/;"	p	class:QCPItemText	typeref:typename:void
draw	qcustomplot.h	/^  virtual void draw(QCPPainter *painter) Q_DECL_OVERRIDE;$/;"	p	class:QCPItemTracer	typeref:typename:void
draw	qcustomplot.h	/^  virtual void draw(QCPPainter *painter) Q_DECL_OVERRIDE;$/;"	p	class:QCPLegend	typeref:typename:void
draw	qcustomplot.h	/^  virtual void draw(QCPPainter *painter) Q_DECL_OVERRIDE;$/;"	p	class:QCPPlottableLegendItem	typeref:typename:void
draw	qcustomplot.h	/^  virtual void draw(QCPPainter *painter) Q_DECL_OVERRIDE;$/;"	p	class:QCPSelectionRect	typeref:typename:void
draw	qcustomplot.h	/^  virtual void draw(QCPPainter *painter) Q_DECL_OVERRIDE;$/;"	p	class:QCPStatisticalBox	typeref:typename:void
draw	qcustomplot.h	/^  virtual void draw(QCPPainter *painter) Q_DECL_OVERRIDE;$/;"	p	class:QCPTextElement	typeref:typename:void
draw	qcustomplot.h	/^  virtual void draw(QCPPainter *painter) const = 0;$/;"	p	class:QCPAbstractPaintBuffer	typeref:typename:void
draw	qcustomplot.h	/^  virtual void draw(QCPPainter *painter) const Q_DECL_OVERRIDE;$/;"	p	class:QCPPaintBufferGlFbo	typeref:typename:void
draw	qcustomplot.h	/^  virtual void draw(QCPPainter *painter) const Q_DECL_OVERRIDE;$/;"	p	class:QCPPaintBufferGlPbuffer	typeref:typename:void
draw	qcustomplot.h	/^  virtual void draw(QCPPainter *painter) const Q_DECL_OVERRIDE;$/;"	p	class:QCPPaintBufferPixmap	typeref:typename:void
draw	qcustomplot.h	/^  virtual void draw(QCPPainter *painter);$/;"	p	class:QCPAxisPainterPrivate	typeref:typename:void
draw	qcustomplot.h	/^  virtual void draw(QCPPainter *painter);$/;"	p	class:QCustomPlot	typeref:typename:void
draw	qcustomplot.h	/^  void draw(QCPPainter *painter);$/;"	p	class:QCPLayer	typeref:typename:void
draw	qcustomplot.h	/^  void draw(QCPPainter *painter, const QCPVector2D &pos, const QCPVector2D &dir) const;$/;"	p	class:QCPLineEnding	typeref:typename:void
draw	qcustomplot.h	/^  void draw(QCPPainter *painter, const QCPVector2D &pos, double angle) const;$/;"	p	class:QCPLineEnding	typeref:typename:void
drawBackground	qcustomplot.cpp	/^void QCPAxisRect::drawBackground(QCPPainter *painter)$/;"	f	class:QCPAxisRect	typeref:typename:void
drawBackground	qcustomplot.cpp	/^void QCustomPlot::drawBackground(QCPPainter *painter)$/;"	f	class:QCustomPlot	typeref:typename:void
drawBackground	qcustomplot.h	/^  void drawBackground(QCPPainter *painter);$/;"	p	class:QCPAxisRect	typeref:typename:void
drawBackground	qcustomplot.h	/^  void drawBackground(QCPPainter *painter);$/;"	p	class:QCustomPlot	typeref:typename:void
drawBracket	qcustomplot.cpp	/^void QCPSelectionDecoratorBracket::drawBracket(QCPPainter *painter, int direction) const$/;"	f	class:QCPSelectionDecoratorBracket	typeref:typename:void
drawBracket	qcustomplot.h	/^  virtual void drawBracket(QCPPainter *painter, int direction) const;$/;"	p	class:QCPSelectionDecoratorBracket	typeref:typename:void
drawCandlestickPlot	qcustomplot.cpp	/^void QCPFinancial::drawCandlestickPlot(QCPPainter *painter, const QCPFinancialDataContainer::con/;"	f	class:QCPFinancial	typeref:typename:void
drawCandlestickPlot	qcustomplot.h	/^  void drawCandlestickPlot(QCPPainter *painter, const QCPFinancialDataContainer::const_iterator /;"	p	class:QCPFinancial	typeref:typename:void
drawCurveLine	qcustomplot.cpp	/^void QCPCurve::drawCurveLine(QCPPainter *painter, const QVector<QPointF> &lines) const$/;"	f	class:QCPCurve	typeref:typename:void
drawCurveLine	qcustomplot.h	/^  virtual void drawCurveLine(QCPPainter *painter, const QVector<QPointF> &lines) const;$/;"	p	class:QCPCurve	typeref:typename:void
drawDecoration	qcustomplot.cpp	/^void QCPSelectionDecorator::drawDecoration(QCPPainter *painter, QCPDataSelection selection)$/;"	f	class:QCPSelectionDecorator	typeref:typename:void
drawDecoration	qcustomplot.cpp	/^void QCPSelectionDecoratorBracket::drawDecoration(QCPPainter *painter, QCPDataSelection selectio/;"	f	class:QCPSelectionDecoratorBracket	typeref:typename:void
drawDecoration	qcustomplot.h	/^  virtual void drawDecoration(QCPPainter *painter, QCPDataSelection selection) Q_DECL_OVERRIDE;$/;"	p	class:QCPSelectionDecoratorBracket	typeref:typename:void
drawDecoration	qcustomplot.h	/^  virtual void drawDecoration(QCPPainter *painter, QCPDataSelection selection);$/;"	p	class:QCPSelectionDecorator	typeref:typename:void
drawFill	qcustomplot.cpp	/^void QCPGraph::drawFill(QCPPainter *painter, QVector<QPointF> *lines) const$/;"	f	class:QCPGraph	typeref:typename:void
drawFill	qcustomplot.h	/^  virtual void drawFill(QCPPainter *painter, QVector<QPointF> *lines) const;$/;"	p	class:QCPGraph	typeref:typename:void
drawGridLines	qcustomplot.cpp	/^void QCPGrid::drawGridLines(QCPPainter *painter) const$/;"	f	class:QCPGrid	typeref:typename:void
drawGridLines	qcustomplot.h	/^  void drawGridLines(QCPPainter *painter) const;$/;"	p	class:QCPGrid	typeref:typename:void
drawImpulsePlot	qcustomplot.cpp	/^void QCPGraph::drawImpulsePlot(QCPPainter *painter, const QVector<QPointF> &lines) const$/;"	f	class:QCPGraph	typeref:typename:void
drawImpulsePlot	qcustomplot.h	/^  virtual void drawImpulsePlot(QCPPainter *painter, const QVector<QPointF> &lines) const;$/;"	p	class:QCPGraph	typeref:typename:void
drawLegendIcon	qcustomplot.cpp	/^void QCPBars::drawLegendIcon(QCPPainter *painter, const QRectF &rect) const$/;"	f	class:QCPBars	typeref:typename:void
drawLegendIcon	qcustomplot.cpp	/^void QCPColorMap::drawLegendIcon(QCPPainter *painter, const QRectF &rect) const$/;"	f	class:QCPColorMap	typeref:typename:void
drawLegendIcon	qcustomplot.cpp	/^void QCPCurve::drawLegendIcon(QCPPainter *painter, const QRectF &rect) const$/;"	f	class:QCPCurve	typeref:typename:void
drawLegendIcon	qcustomplot.cpp	/^void QCPErrorBars::drawLegendIcon(QCPPainter *painter, const QRectF &rect) const$/;"	f	class:QCPErrorBars	typeref:typename:void
drawLegendIcon	qcustomplot.cpp	/^void QCPFinancial::drawLegendIcon(QCPPainter *painter, const QRectF &rect) const$/;"	f	class:QCPFinancial	typeref:typename:void
drawLegendIcon	qcustomplot.cpp	/^void QCPGraph::drawLegendIcon(QCPPainter *painter, const QRectF &rect) const$/;"	f	class:QCPGraph	typeref:typename:void
drawLegendIcon	qcustomplot.cpp	/^void QCPStatisticalBox::drawLegendIcon(QCPPainter *painter, const QRectF &rect) const$/;"	f	class:QCPStatisticalBox	typeref:typename:void
drawLegendIcon	qcustomplot.h	/^  virtual void drawLegendIcon(QCPPainter *painter, const QRectF &rect) const = 0;$/;"	p	class:QCPAbstractPlottable	typeref:typename:void
drawLegendIcon	qcustomplot.h	/^  virtual void drawLegendIcon(QCPPainter *painter, const QRectF &rect) const Q_DECL_OVERRIDE;$/;"	p	class:QCPBars	typeref:typename:void
drawLegendIcon	qcustomplot.h	/^  virtual void drawLegendIcon(QCPPainter *painter, const QRectF &rect) const Q_DECL_OVERRIDE;$/;"	p	class:QCPColorMap	typeref:typename:void
drawLegendIcon	qcustomplot.h	/^  virtual void drawLegendIcon(QCPPainter *painter, const QRectF &rect) const Q_DECL_OVERRIDE;$/;"	p	class:QCPCurve	typeref:typename:void
drawLegendIcon	qcustomplot.h	/^  virtual void drawLegendIcon(QCPPainter *painter, const QRectF &rect) const Q_DECL_OVERRIDE;$/;"	p	class:QCPErrorBars	typeref:typename:void
drawLegendIcon	qcustomplot.h	/^  virtual void drawLegendIcon(QCPPainter *painter, const QRectF &rect) const Q_DECL_OVERRIDE;$/;"	p	class:QCPFinancial	typeref:typename:void
drawLegendIcon	qcustomplot.h	/^  virtual void drawLegendIcon(QCPPainter *painter, const QRectF &rect) const Q_DECL_OVERRIDE;$/;"	p	class:QCPGraph	typeref:typename:void
drawLegendIcon	qcustomplot.h	/^  virtual void drawLegendIcon(QCPPainter *painter, const QRectF &rect) const Q_DECL_OVERRIDE;$/;"	p	class:QCPStatisticalBox	typeref:typename:void
drawLine	qcustomplot.cpp	/^void QCPPainter::drawLine(const QLineF &line)$/;"	f	class:QCPPainter	typeref:typename:void
drawLine	qcustomplot.h	/^  void drawLine(const QLineF &line);$/;"	p	class:QCPPainter	typeref:typename:void
drawLine	qcustomplot.h	/^  void drawLine(const QPointF &p1, const QPointF &p2) {drawLine(QLineF(p1, p2));}$/;"	f	class:QCPPainter	typeref:typename:void
drawLinePlot	qcustomplot.cpp	/^void QCPGraph::drawLinePlot(QCPPainter *painter, const QVector<QPointF> &lines) const$/;"	f	class:QCPGraph	typeref:typename:void
drawLinePlot	qcustomplot.h	/^  virtual void drawLinePlot(QCPPainter *painter, const QVector<QPointF> &lines) const;$/;"	p	class:QCPGraph	typeref:typename:void
drawOhlcPlot	qcustomplot.cpp	/^void QCPFinancial::drawOhlcPlot(QCPPainter *painter, const QCPFinancialDataContainer::const_iter/;"	f	class:QCPFinancial	typeref:typename:void
drawOhlcPlot	qcustomplot.h	/^  void drawOhlcPlot(QCPPainter *painter, const QCPFinancialDataContainer::const_iterator &begin,/;"	p	class:QCPFinancial	typeref:typename:void
drawPolyline	qcustomplot.h	/^  void drawPolyline(QCPPainter *painter, const QVector<QPointF> &lineData) const;$/;"	p	class:QCPAbstractPlottable1D	typeref:typename:void
drawPolyline	qcustomplot.h	/^void QCPAbstractPlottable1D<DataType>::drawPolyline(QCPPainter *painter, const QVector<QPointF> /;"	f	class:QCPAbstractPlottable1D	typeref:typename:void
drawScatterPlot	qcustomplot.cpp	/^void QCPCurve::drawScatterPlot(QCPPainter *painter, const QVector<QPointF> &points, const QCPSca/;"	f	class:QCPCurve	typeref:typename:void
drawScatterPlot	qcustomplot.cpp	/^void QCPGraph::drawScatterPlot(QCPPainter *painter, const QVector<QPointF> &scatters, const QCPS/;"	f	class:QCPGraph	typeref:typename:void
drawScatterPlot	qcustomplot.h	/^  virtual void drawScatterPlot(QCPPainter *painter, const QVector<QPointF> &points, const QCPSca/;"	p	class:QCPCurve	typeref:typename:void
drawScatterPlot	qcustomplot.h	/^  virtual void drawScatterPlot(QCPPainter *painter, const QVector<QPointF> &scatters, const QCPS/;"	p	class:QCPGraph	typeref:typename:void
drawShape	qcustomplot.cpp	/^void QCPScatterStyle::drawShape(QCPPainter *painter, const QPointF &pos) const$/;"	f	class:QCPScatterStyle	typeref:typename:void
drawShape	qcustomplot.cpp	/^void QCPScatterStyle::drawShape(QCPPainter *painter, double x, double y) const$/;"	f	class:QCPScatterStyle	typeref:typename:void
drawShape	qcustomplot.h	/^  void drawShape(QCPPainter *painter, const QPointF &pos) const;$/;"	p	class:QCPScatterStyle	typeref:typename:void
drawShape	qcustomplot.h	/^  void drawShape(QCPPainter *painter, double x, double y) const;$/;"	p	class:QCPScatterStyle	typeref:typename:void
drawStatisticalBox	qcustomplot.cpp	/^void QCPStatisticalBox::drawStatisticalBox(QCPPainter *painter, QCPStatisticalBoxDataContainer::/;"	f	class:QCPStatisticalBox	typeref:typename:void
drawStatisticalBox	qcustomplot.h	/^  virtual void drawStatisticalBox(QCPPainter *painter, QCPStatisticalBoxDataContainer::const_ite/;"	p	class:QCPStatisticalBox	typeref:typename:void
drawSubGridLines	qcustomplot.cpp	/^void QCPGrid::drawSubGridLines(QCPPainter *painter) const$/;"	f	class:QCPGrid	typeref:typename:void
drawSubGridLines	qcustomplot.h	/^  void drawSubGridLines(QCPPainter *painter) const;$/;"	p	class:QCPGrid	typeref:typename:void
drawTickLabel	qcustomplot.cpp	/^void QCPAxisPainterPrivate::drawTickLabel(QCPPainter *painter, double x, double y, const TickLab/;"	f	class:QCPAxisPainterPrivate	typeref:typename:void
drawTickLabel	qcustomplot.h	/^  virtual void drawTickLabel(QCPPainter *painter, double x, double y, const TickLabelData &label/;"	p	class:QCPAxisPainterPrivate	typeref:typename:void
drawToPaintBuffer	qcustomplot.cpp	/^void QCPLayer::drawToPaintBuffer()$/;"	f	class:QCPLayer	typeref:typename:void
drawToPaintBuffer	qcustomplot.h	/^  void drawToPaintBuffer();$/;"	p	class:QCPLayer	typeref:typename:void
drop	spdlog/details/registry.h	/^    void drop(const std::string &logger_name)$/;"	f	class:spdlog::details::registry_t	typeref:typename:void
drop	spdlog/details/spdlog_impl.h	/^inline void spdlog::drop(const std::string &name)$/;"	f	class:spdlog	typeref:typename:void
drop	spdlog/spdlog.h	/^void drop(const std::string &name);$/;"	p	namespace:spdlog	typeref:typename:void
drop_all	spdlog/details/registry.h	/^    void drop_all()$/;"	f	class:spdlog::details::registry_t	typeref:typename:void
drop_all	spdlog/details/spdlog_impl.h	/^inline void spdlog::drop_all()$/;"	f	class:spdlog	typeref:typename:void
drop_all	spdlog/spdlog.h	/^void drop_all();$/;"	p	namespace:spdlog	typeref:typename:void
dsNone	qcustomplot.h	/^  enum DateStrategy {dsNone, dsUniformTimeInDay, dsUniformDayInMonth} mDateStrategy;$/;"	e	enum:QCPAxisTickerDateTime::DateStrategy
dsUniformDayInMonth	qcustomplot.h	/^  enum DateStrategy {dsNone, dsUniformTimeInDay, dsUniformDayInMonth} mDateStrategy;$/;"	e	enum:QCPAxisTickerDateTime::DateStrategy
dsUniformTimeInDay	qcustomplot.h	/^  enum DateStrategy {dsNone, dsUniformTimeInDay, dsUniformDayInMonth} mDateStrategy;$/;"	e	enum:QCPAxisTickerDateTime::DateStrategy
dtoa_impl	json.hpp	/^namespace dtoa_impl$/;"	n	namespace:nlohmann::detail
dump	json.hpp	/^    string_t dump(const int indent = -1, const char indent_char = ' ',$/;"	f	class:nlohmann::basic_json	typeref:typename:string_t
dump	json.hpp	/^    void dump(const BasicJsonType& val, const bool pretty_print,$/;"	f	class:nlohmann::detail::serializer	typeref:typename:void
dump_escaped	json.hpp	/^    void dump_escaped(const string_t& s, const bool ensure_ascii)$/;"	f	class:nlohmann::detail::serializer	typeref:typename:void
dump_float	json.hpp	/^    void dump_float(number_float_t x)$/;"	f	class:nlohmann::detail::serializer	typeref:typename:void
dump_float	json.hpp	/^    void dump_float(number_float_t x, std::false_type \/*is_ieee_single_or_double*\/)$/;"	f	class:nlohmann::detail::serializer	typeref:typename:void
dump_float	json.hpp	/^    void dump_float(number_float_t x, std::true_type \/*is_ieee_single_or_double*\/)$/;"	f	class:nlohmann::detail::serializer	typeref:typename:void
dump_integer	json.hpp	/^    void dump_integer(NumberType x)$/;"	f	class:nlohmann::detail::serializer	typeref:typename:void
dup	spdlog/fmt/bundled/posix.cc	/^fmt::File fmt::File::dup(int fd) {$/;"	f	class:fmt::File	typeref:typename:fmt::File
dup	spdlog/fmt/bundled/posix.h	/^    FMT_API static File dup(int fd);$/;"	p	class:fmt::File	typeref:typename:FMT_API File
dup2	spdlog/fmt/bundled/posix.cc	/^void fmt::File::dup2(int fd) {$/;"	f	class:fmt::File	typeref:typename:void
dup2	spdlog/fmt/bundled/posix.cc	/^void fmt::File::dup2(int fd, ErrorCode &ec) FMT_NOEXCEPT {$/;"	f	class:fmt::File	typeref:typename:void
dup2	spdlog/fmt/bundled/posix.h	/^    FMT_API void dup2(int fd);$/;"	p	class:fmt::File	typeref:typename:FMT_API void
dup2	spdlog/fmt/bundled/posix.h	/^    FMT_API void dup2(int fd, ErrorCode &ec) FMT_NOEXCEPT;$/;"	p	class:fmt::File	typeref:typename:FMT_API void
duration	chrono-util.cpp	/^double ChronoDuration::duration() {$/;"	f	class:ChronoDuration	typeref:typename:double
duration	chrono-util.h	/^    double duration();$/;"	p	class:ChronoDuration	typeref:typename:double
durationWithBaseTime	chrono-util.cpp	/^double ChronoDuration::durationWithBaseTime() {$/;"	f	class:ChronoDuration	typeref:typename:double
durationWithBaseTime	chrono-util.h	/^    double durationWithBaseTime();$/;"	p	class:ChronoDuration	typeref:typename:double
e	json.hpp	/^    int e;$/;"	m	struct:nlohmann::detail::dtoa_impl::cached_power	typeref:typename:int
e	json.hpp	/^    int e;$/;"	m	struct:nlohmann::detail::dtoa_impl::diyfp	typeref:typename:int
eflags	stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags, delay;$/;"	m	struct:__anon84e4e8861108	typeref:typename:int
element	qcustomplot.cpp	/^QCPLayoutElement *QCPLayoutGrid::element(int row, int column) const$/;"	f	class:QCPLayoutGrid	typeref:typename:QCPLayoutElement *
element	qcustomplot.h	/^  QCPLayoutElement *element(int row, int column) const;$/;"	p	class:QCPLayoutGrid	typeref:typename:QCPLayoutElement *
elementAt	qcustomplot.cpp	/^QCPLayoutElement *QCPLayoutGrid::elementAt(int index) const$/;"	f	class:QCPLayoutGrid	typeref:typename:QCPLayoutElement *
elementAt	qcustomplot.cpp	/^QCPLayoutElement *QCPLayoutInset::elementAt(int index) const$/;"	f	class:QCPLayoutInset	typeref:typename:QCPLayoutElement *
elementAt	qcustomplot.h	/^  virtual QCPLayoutElement* elementAt(int index) const = 0;$/;"	p	class:QCPLayout	typeref:typename:QCPLayoutElement *
elementAt	qcustomplot.h	/^  virtual QCPLayoutElement* elementAt(int index) const Q_DECL_OVERRIDE;$/;"	p	class:QCPLayoutGrid	typeref:typename:QCPLayoutElement *
elementAt	qcustomplot.h	/^  virtual QCPLayoutElement* elementAt(int index) const Q_DECL_OVERRIDE;$/;"	p	class:QCPLayoutInset	typeref:typename:QCPLayoutElement *
elementCount	qcustomplot.cpp	/^int QCPLayoutInset::elementCount() const$/;"	f	class:QCPLayoutInset	typeref:typename:int
elementCount	qcustomplot.h	/^  virtual int elementCount() const = 0;$/;"	p	class:QCPLayout	typeref:typename:int
elementCount	qcustomplot.h	/^  virtual int elementCount() const Q_DECL_OVERRIDE { return rowCount()*columnCount(); }$/;"	f	class:QCPLayoutGrid	typeref:typename:int
elementCount	qcustomplot.h	/^  virtual int elementCount() const Q_DECL_OVERRIDE;$/;"	p	class:QCPLayoutInset	typeref:typename:int
elements	qcustomplot.cpp	/^QList<QCPLayoutElement*> QCPAxisRect::elements(bool recursive) const$/;"	f	class:QCPAxisRect	typeref:typename:QList<QCPLayoutElement * >
elements	qcustomplot.cpp	/^QList<QCPLayoutElement*> QCPLayout::elements(bool recursive) const$/;"	f	class:QCPLayout	typeref:typename:QList<QCPLayoutElement * >
elements	qcustomplot.cpp	/^QList<QCPLayoutElement*> QCPLayoutElement::elements(bool recursive) const$/;"	f	class:QCPLayoutElement	typeref:typename:QList<QCPLayoutElement * >
elements	qcustomplot.cpp	/^QList<QCPLayoutElement*> QCPLayoutGrid::elements(bool recursive) const$/;"	f	class:QCPLayoutGrid	typeref:typename:QList<QCPLayoutElement * >
elements	qcustomplot.h	/^  QList<QCPLayoutElement*> elements(QCP::MarginSide side) const { return mChildren.value(side); /;"	f	class:QCPMarginGroup	typeref:typename:QList<QCPLayoutElement * >
elements	qcustomplot.h	/^  virtual QList<QCPLayoutElement*> elements(bool recursive) const Q_DECL_OVERRIDE;$/;"	p	class:QCPAxisRect	typeref:typename:QList<QCPLayoutElement * >
elements	qcustomplot.h	/^  virtual QList<QCPLayoutElement*> elements(bool recursive) const Q_DECL_OVERRIDE;$/;"	p	class:QCPLayout	typeref:typename:QList<QCPLayoutElement * >
elements	qcustomplot.h	/^  virtual QList<QCPLayoutElement*> elements(bool recursive) const Q_DECL_OVERRIDE;$/;"	p	class:QCPLayoutGrid	typeref:typename:QList<QCPLayoutElement * >
elements	qcustomplot.h	/^  virtual QList<QCPLayoutElement*> elements(bool recursive) const;$/;"	p	class:QCPLayoutElement	typeref:typename:QList<QCPLayoutElement * >
emplace	json.hpp	/^    std::pair<iterator, bool> emplace(Args&& ... args)$/;"	f	class:nlohmann::basic_json	typeref:typename:std::pair<iterator,bool>
emplace_back	json.hpp	/^    void emplace_back(Args&& ... args)$/;"	f	class:nlohmann::basic_json	typeref:typename:void
empty	json.hpp	/^    bool empty() const noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:bool
empty	spdlog/details/circular_q.h	/^    bool empty()$/;"	f	class:spdlog::details::circular_q	typeref:typename:bool
enable_conversion	spdlog/fmt/bundled/format.h	/^        enable_conversion = sizeof(fmt::internal::convert(get<T>())) == sizeof(Yes)$/;"	e	enum:fmt::internal::ConvertToInt::__anon1ea8787f0603
enable_conversion	spdlog/fmt/bundled/format.h	/^        value = ConvertToIntImpl2<T, enable_conversion>::value$/;"	e	enum:fmt::internal::ConvertToInt::__anon1ea8787f0703
enable_if_t	json.hpp	/^using enable_if_t = typename std::enable_if<B, T>::type;$/;"	t	namespace:nlohmann::detail	typeref:typename:std::enable_if<B,T>::type
encoder_control	simple.pb-c.h	/^  EncoderControl *encoder_control;$/;"	m	struct:_ToSt	typeref:typename:EncoderControl *
encoder_control	simple.proto	/^    optional EncoderControl encoder_control = 3;$/;"	f
encoder_control__descriptor	simple.pb-c.c	/^const ProtobufCMessageDescriptor encoder_control__descriptor =$/;"	v	typeref:typename:const ProtobufCMessageDescriptor
encoder_control__field_descriptors	simple.pb-c.c	/^static const ProtobufCFieldDescriptor encoder_control__field_descriptors[2] =$/;"	v	typeref:typename:const ProtobufCFieldDescriptor[2]	file:
encoder_control__field_indices_by_name	simple.pb-c.c	/^static const unsigned encoder_control__field_indices_by_name[] = {$/;"	v	typeref:typename:const unsigned[]	file:
encoder_control__free_unpacked	simple.pb-c.c	/^void   encoder_control__free_unpacked$/;"	f	typeref:typename:void
encoder_control__free_unpacked	simple.pb-c.h	/^void   encoder_control__free_unpacked$/;"	p	typeref:typename:void
encoder_control__get_packed_size	simple.pb-c.c	/^size_t encoder_control__get_packed_size$/;"	f	typeref:typename:size_t
encoder_control__get_packed_size	simple.pb-c.h	/^size_t encoder_control__get_packed_size$/;"	p	typeref:typename:size_t
encoder_control__init	simple.pb-c.c	/^void   encoder_control__init$/;"	f	typeref:typename:void
encoder_control__init	simple.pb-c.h	/^void   encoder_control__init$/;"	p	typeref:typename:void
encoder_control__number_ranges	simple.pb-c.c	/^static const ProtobufCIntRange encoder_control__number_ranges[1 + 1] =$/;"	v	typeref:typename:const ProtobufCIntRange[]	file:
encoder_control__pack	simple.pb-c.c	/^size_t encoder_control__pack$/;"	f	typeref:typename:size_t
encoder_control__pack	simple.pb-c.h	/^size_t encoder_control__pack$/;"	p	typeref:typename:size_t
encoder_control__pack_to_buffer	simple.pb-c.c	/^size_t encoder_control__pack_to_buffer$/;"	f	typeref:typename:size_t
encoder_control__pack_to_buffer	simple.pb-c.h	/^size_t encoder_control__pack_to_buffer$/;"	p	typeref:typename:size_t
encoder_control__unpack	simple.pb-c.c	/^       encoder_control__unpack$/;"	f	typeref:typename:EncoderControl *
encoder_control__unpack	simple.pb-c.h	/^       encoder_control__unpack$/;"	p	typeref:typename:EncoderControl *
encrypted_secret_key	simple.pb-c.h	/^  ProtobufCBinaryData encrypted_secret_key;$/;"	m	struct:_ToHost	typeref:typename:ProtobufCBinaryData
encrypted_secret_key	simple.proto	/^    optional bytes encrypted_secret_key = 3; \/\/ Hi 가 phone public key 로 암호화한 aes k/;"	f
end	json.hpp	/^    const_iterator end() const noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:const_iterator
end	json.hpp	/^    iteration_proxy_internal end() noexcept$/;"	f	class:nlohmann::detail::iteration_proxy	typeref:typename:iteration_proxy_internal
end	json.hpp	/^    iterator end() noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:iterator
end	packet-buffer.h	/^  const boost::asio::const_buffer* end() const { return &buffer_ + 1; }$/;"	f	class:shared_const_buffer	typeref:typename:const boost::asio::const_buffer *
end	qcustomplot.h	/^  QCPItemPosition * const end;$/;"	m	class:QCPItemCurve	typeref:typename:QCPItemPosition * const
end	qcustomplot.h	/^  QCPItemPosition * const end;$/;"	m	class:QCPItemLine	typeref:typename:QCPItemPosition * const
end	qcustomplot.h	/^  int end() const { return mEnd; }$/;"	f	class:QCPDataRange	typeref:typename:int
end	qcustomplot.h	/^  iterator end() { return mData.end(); }$/;"	f	class:QCPDataContainer	typeref:typename:iterator
end	simple.pb-c.h	/^  uint32_t end;$/;"	m	struct:_FirmwareUpdate	typeref:typename:uint32_t
end	simple.pb-c.h	/^  uint32_t end;$/;"	m	struct:_FirmwareUpdateFeedback	typeref:typename:uint32_t
end	simple.proto	/^    optional uint32 end = 5; $/;"	f
end	spdlog/fmt/bundled/core.h	/^    FMT_CONSTEXPR iterator end() const FMT_NOEXCEPT$/;"	f	class:basic_parse_context	typeref:typename:FMT_CONSTEXPR iterator
end	spdlog/fmt/bundled/core.h	/^    FMT_CONSTEXPR iterator end() const$/;"	f	class:basic_string_view	typeref:typename:FMT_CONSTEXPR iterator
end	spdlog/fmt/bundled/core.h	/^    T *end() FMT_NOEXCEPT$/;"	f	class:internal::basic_buffer	typeref:typename:T *
endDir	qcustomplot.h	/^  QCPItemPosition * const endDir;$/;"	m	class:QCPItemCurve	typeref:typename:QCPItemPosition * const
endOffset	protocol-struct.h	/^    uint32_t endOffset;$/;"	m	struct:FirmwareUpgradeDetail	typeref:typename:uint32_t
endOffset	protocol-struct.h	/^    uint32_t endOffset;$/;"	m	struct:FirmwareUpgradeVerify	typeref:typename:uint32_t
endSelection	qcustomplot.cpp	/^void QCPSelectionRect::endSelection(QMouseEvent *event)$/;"	f	class:QCPSelectionRect	typeref:typename:void
endSelection	qcustomplot.h	/^  virtual void endSelection(QMouseEvent *event);$/;"	p	class:QCPSelectionRect	typeref:typename:void
end_array	json.hpp	/^        end_array,        \/\/\/< the character for array end `]`$/;"	e	enum:nlohmann::detail::lexer::token_type
end_index_	circular-buffer.h	/^    size_t beg_index_, end_index_, size_;$/;"	m	class:CircularBuffer	typeref:typename:size_t
end_object	json.hpp	/^        end_object,       \/\/\/< the character for object end `}`$/;"	e	enum:nlohmann::detail::lexer::token_type
end_of_input	json.hpp	/^        end_of_input,     \/\/\/< indicating the end of the input buffer$/;"	e	enum:nlohmann::detail::lexer::token_type
end_offset	simple.pb-c.h	/^  uint32_t end_offset;$/;"	m	struct:_FirmwareUpdate	typeref:typename:uint32_t
end_offset	simple.proto	/^    optional uint32 end_offset = 7;$/;"	f
end_value	json.hpp	/^    static constexpr difference_type end_value = begin_value + 1;$/;"	m	class:nlohmann::detail::primitive_iterator_t	typeref:typename:difference_type
enforceType	qcustomplot.cpp	/^void QCPDataSelection::enforceType(QCP::SelectionType type)$/;"	f	class:QCPDataSelection	typeref:typename:void
enforceType	qcustomplot.h	/^  void enforceType(QCP::SelectionType type);$/;"	p	class:QCPDataSelection	typeref:typename:void
enqueue	spdlog/details/mpmc_blocking_q.h	/^    void enqueue(T &&item)$/;"	f	class:spdlog::details::mpmc_bounded_queue	typeref:typename:void
enqueue_msg	spdlog/details/async_log_helper.h	/^    void enqueue_msg(async_msg &&new_msg, async_overflow_policy policy);$/;"	p	class:spdlog::details::async_log_helper	typeref:typename:void
enqueue_msg	spdlog/details/async_log_helper.h	/^inline void spdlog::details::async_log_helper::enqueue_msg(details::async_log_helper::async_msg /;"	f	class:spdlog::details::async_log_helper	typeref:typename:void
enqueue_nowait	spdlog/details/mpmc_blocking_q.h	/^    bool enqueue_nowait(T &&item)$/;"	f	class:spdlog::details::mpmc_bounded_queue	typeref:typename:bool
entries	qc-message.pb.h	/^  static const ::google::protobuf::internal::ParseTableField entries[];$/;"	m	struct:protobuf_qc_2dmessage_2eproto::TableStruct	typeref:typename:const::google::protobuf::internal::ParseTableField[]
entry	spdlog/fmt/bundled/core.h	/^    struct entry$/;"	s	class:internal::arg_map
eob_run	stb_image.h	/^   int            eob_run;$/;"	m	struct:__anon84e4e8860608	typeref:typename:int
eof	stb_image.h	/^   int      (*eof)   (void *user);                       \/\/ returns nonzero if we are at end o/;"	m	struct:__anon84e4e8860208	typeref:typename:int (*)(void * user)
eol_	spdlog/details/pattern_formatter.h	/^    const std::string eol_;$/;"	m	class:spdlog::SPDLOG_FINAL	typeref:typename:const std::string
epAllowCosmetic	qcustomplot.h	/^                 ,epAllowCosmetic \/\/\/< Cosmetic pens are exported normally (e.g. in PDF expor/;"	e	enum:QCP::ExportPen
epNoCosmetic	qcustomplot.h	/^enum ExportPen { epNoCosmetic     \/\/\/< Cosmetic pens are converted to pens with pixel width 1/;"	e	enum:QCP::ExportPen
erase	json.hpp	/^    IteratorType erase(IteratorType first, IteratorType last)$/;"	f	class:nlohmann::basic_json	typeref:typename:IteratorType
erase	json.hpp	/^    IteratorType erase(IteratorType pos)$/;"	f	class:nlohmann::basic_json	typeref:typename:IteratorType
erase	json.hpp	/^    size_type erase(const typename object_t::key_type& key)$/;"	f	class:nlohmann::basic_json	typeref:typename:size_type
erase	json.hpp	/^    void erase(const size_type idx)$/;"	f	class:nlohmann::basic_json	typeref:typename:void
err	spdlog/common.h	/^    err = 4,$/;"	e	enum:spdlog::level::level_enum
errno_str	spdlog/common.h	/^std::string errno_str(int err_num);$/;"	p	namespace:spdlog::details::os	typeref:typename:std::string
errno_str	spdlog/details/os.h	/^inline std::string errno_str(int err_num)$/;"	f	namespace:spdlog::details::os	typeref:typename:std::string
errno_to_string	spdlog/details/os.h	/^inline std::string errno_to_string(char buf[256], int res)$/;"	f	namespace:spdlog::details::os	typeref:typename:std::string
errno_to_string	spdlog/details/os.h	/^inline std::string errno_to_string(char[256], char *res)$/;"	f	namespace:spdlog::details::os	typeref:typename:std::string
error	spdlog/details/logger_impl.h	/^inline void spdlog::logger::error(const T &msg)$/;"	f	class:spdlog::logger	typeref:typename:void
error	spdlog/details/logger_impl.h	/^inline void spdlog::logger::error(const char *fmt, const Arg1 &arg1, const Args &... args)$/;"	f	class:spdlog::logger	typeref:typename:void
error	spdlog/details/logger_impl.h	/^inline void spdlog::logger::error(const wchar_t *fmt, const Args &... args)$/;"	f	class:spdlog::logger	typeref:typename:void
error	spdlog/logger.h	/^    void error(const T &msg);$/;"	p	class:spdlog::logger	typeref:typename:void
error	spdlog/logger.h	/^    void error(const char *fmt, const Arg1 &, const Args &... args);$/;"	p	class:spdlog::logger	typeref:typename:void
error	spdlog/logger.h	/^    void error(const wchar_t *fmt, const Args &... args);$/;"	p	class:spdlog::logger	typeref:typename:void
errorBarVisible	qcustomplot.cpp	/^bool QCPErrorBars::errorBarVisible(int index) const$/;"	f	class:QCPErrorBars	typeref:typename:bool
errorBarVisible	qcustomplot.h	/^  bool errorBarVisible(int index) const;$/;"	p	class:QCPErrorBars	typeref:typename:bool
errorMinus	qcustomplot.h	/^  double errorMinus, errorPlus;$/;"	m	class:QCPErrorBarsData	typeref:typename:double
errorPlus	qcustomplot.h	/^  double errorMinus, errorPlus;$/;"	m	class:QCPErrorBarsData	typeref:typename:double
errorType	qcustomplot.h	/^  ErrorType errorType() const { return mErrorType; }$/;"	f	class:QCPErrorBars	typeref:typename:ErrorType
errorType	qcustomplot.h	/^  Q_PROPERTY(ErrorType errorType READ errorType WRITE setErrorType)$/;"	p	class:QCPErrorBars	typeref:typename:ErrorType
error_code	spdlog/fmt/bundled/format.h	/^    int error_code() const$/;"	f	class:fmt::SystemError	typeref:typename:int
error_code_	spdlog/fmt/bundled/format-inl.h	/^        int error_code_;$/;"	m	class:__anonb519b34f0110::safe_strerror::dispatcher	typeref:typename:int
error_code_	spdlog/fmt/bundled/format.cc	/^    int error_code_;$/;"	m	class:fmt::__anonf3b7881d0110::safe_strerror::StrError	typeref:typename:int	file:
error_code_	spdlog/fmt/bundled/format.h	/^    int error_code_;$/;"	m	class:fmt::SystemError	typeref:typename:int
error_handler	spdlog/async_logger.h	/^    log_err_handler error_handler() override;$/;"	p	class:spdlog::SPDLOG_FINAL	typeref:typename:log_err_handler
error_handler	spdlog/details/async_logger_impl.h	/^inline spdlog::log_err_handler spdlog::async_logger::error_handler()$/;"	f	class:spdlog::async_logger	typeref:typename:spdlog::log_err_handler
error_handler	spdlog/details/logger_impl.h	/^inline spdlog::log_err_handler spdlog::logger::error_handler()$/;"	f	class:spdlog::logger	typeref:typename:spdlog::log_err_handler
error_handler	spdlog/fmt/bundled/core.h	/^    FMT_CONSTEXPR ErrorHandler error_handler() const$/;"	f	class:basic_parse_context	typeref:typename:FMT_CONSTEXPR ErrorHandler
error_handler	spdlog/fmt/bundled/core.h	/^    FMT_CONSTEXPR error_handler() {}$/;"	f	struct:internal::error_handler	typeref:typename:FMT_CONSTEXPR
error_handler	spdlog/fmt/bundled/core.h	/^    FMT_CONSTEXPR error_handler(const error_handler &) {}$/;"	f	struct:internal::error_handler	typeref:typename:FMT_CONSTEXPR
error_handler	spdlog/fmt/bundled/core.h	/^    internal::error_handler error_handler()$/;"	f	class:internal::context_base	typeref:typename:internal::error_handler
error_handler	spdlog/fmt/bundled/core.h	/^struct error_handler$/;"	s	namespace:internal
error_handler	spdlog/logger.h	/^    virtual log_err_handler error_handler();$/;"	p	class:spdlog::logger	typeref:typename:log_err_handler
error_message	json.hpp	/^    const char* error_message = "";$/;"	m	class:nlohmann::detail::lexer	typeref:typename:const char *
errored	json.hpp	/^    bool errored = false;$/;"	m	class:nlohmann::detail::parser	typeref:typename:bool
esBar	qcustomplot.h	/^                     ,esBar          \/\/\/< A bar perpendicular to the line$/;"	e	enum:QCPLineEnding::EndingStyle
esDiamond	qcustomplot.h	/^                     ,esDiamond      \/\/\/< A filled diamond (45 degrees rotated square)$/;"	e	enum:QCPLineEnding::EndingStyle
esDisc	qcustomplot.h	/^                     ,esDisc         \/\/\/< A filled circle$/;"	e	enum:QCPLineEnding::EndingStyle
esFlatArrow	qcustomplot.h	/^                     ,esFlatArrow    \/\/\/< A filled arrow head with a straight\/flat back (a t/;"	e	enum:QCPLineEnding::EndingStyle
esHalfBar	qcustomplot.h	/^                     ,esHalfBar      \/\/\/< A bar perpendicular to the line, pointing out to on/;"	e	enum:QCPLineEnding::EndingStyle
esLineArrow	qcustomplot.h	/^                     ,esLineArrow    \/\/\/< A non-filled arrow head with open back$/;"	e	enum:QCPLineEnding::EndingStyle
esNone	qcustomplot.h	/^  enum EndingStyle { esNone          \/\/\/< No ending decoration$/;"	e	enum:QCPLineEnding::EndingStyle
esSkewedBar	qcustomplot.h	/^                     ,esSkewedBar    \/\/\/< A bar that is skewed (skew controllable via \\ref s/;"	e	enum:QCPLineEnding::EndingStyle
esSpikeArrow	qcustomplot.h	/^                     ,esSpikeArrow   \/\/\/< A filled arrow head with an indented back$/;"	e	enum:QCPLineEnding::EndingStyle
esSquare	qcustomplot.h	/^                     ,esSquare       \/\/\/< A filled square$/;"	e	enum:QCPLineEnding::EndingStyle
escape	json.hpp	/^    static std::string escape(std::string s)$/;"	f	class:nlohmann::json_pointer	typeref:typename:std::string
etKeyError	qcustomplot.h	/^  enum ErrorType { etKeyError    \/\/\/< The errors are for the key dimension (bars appear paral/;"	e	enum:QCPErrorBars::ErrorType
etValueError	qcustomplot.h	/^                   ,etValueError \/\/\/< The errors are for the value dimension (bars appear par/;"	e	enum:QCPErrorBars::ErrorType
exception	json.hpp	/^    exception(int id_, const char* what_arg) : id(id_), m(what_arg) {}$/;"	f	class:nlohmann::detail::exception
exception	json.hpp	/^    using exception = detail::exception;$/;"	t	class:nlohmann::basic_json	typeref:typename:detail::exception
exception	json.hpp	/^class exception : public std::exception$/;"	c	namespace:nlohmann::detail
expBounds	qcustomplot.h	/^    QRect baseBounds, expBounds, suffixBounds, totalBounds, rotatedTotalBounds;$/;"	m	struct:QCPAxisPainterPrivate::TickLabelData	typeref:typename:QRect
expFont	qcustomplot.h	/^    QFont baseFont, expFont;$/;"	m	struct:QCPAxisPainterPrivate::TickLabelData	typeref:typename:QFont
expPart	qcustomplot.h	/^    QString basePart, expPart, suffixPart;$/;"	m	struct:QCPAxisPainterPrivate::TickLabelData	typeref:typename:QString
expand	qcustomplot.cpp	/^void QCPRange::expand(const QCPRange &otherRange)$/;"	f	class:QCPRange	typeref:typename:void
expand	qcustomplot.cpp	/^void QCPRange::expand(double includeCoord)$/;"	f	class:QCPRange	typeref:typename:void
expand	qcustomplot.h	/^  void expand(const QCPRange &otherRange);$/;"	p	class:QCPRange	typeref:typename:void
expand	qcustomplot.h	/^  void expand(double includeCoord);$/;"	p	class:QCPRange	typeref:typename:void
expandTo	qcustomplot.cpp	/^void QCPLayoutGrid::expandTo(int newRowCount, int newColumnCount)$/;"	f	class:QCPLayoutGrid	typeref:typename:void
expandTo	qcustomplot.h	/^  void expandTo(int newRowCount, int newColumnCount);$/;"	p	class:QCPLayoutGrid	typeref:typename:void
expanded	qcustomplot.cpp	/^QCPDataRange QCPDataRange::expanded(const QCPDataRange &other) const$/;"	f	class:QCPDataRange	typeref:typename:QCPDataRange
expanded	qcustomplot.cpp	/^QCPRange QCPRange::expanded(const QCPRange &otherRange) const$/;"	f	class:QCPRange	typeref:typename:QCPRange
expanded	qcustomplot.cpp	/^QCPRange QCPRange::expanded(double includeCoord) const$/;"	f	class:QCPRange	typeref:typename:QCPRange
expanded	qcustomplot.h	/^  QCPDataRange expanded(const QCPDataRange &other) const;$/;"	p	class:QCPDataRange	typeref:typename:QCPDataRange
expanded	qcustomplot.h	/^  QCPRange expanded(const QCPRange &otherRange) const;$/;"	p	class:QCPRange	typeref:typename:QCPRange
expanded	qcustomplot.h	/^  QCPRange expanded(double includeCoord) const;$/;"	p	class:QCPRange	typeref:typename:QCPRange
expanded	stb_image.h	/^   stbi_uc *idata, *expanded, *out;$/;"	m	struct:__anon84e4e8860c08	typeref:typename:stbi_uc **
expect	json.hpp	/^    bool expect(token_type t)$/;"	f	class:nlohmann::detail::parser	typeref:typename:bool
expect_eof	json.hpp	/^    void expect_eof() const$/;"	f	class:nlohmann::detail::binary_reader	typeref:typename:void
expected	json.hpp	/^    token_type expected = token_type::uninitialized;$/;"	m	class:nlohmann::detail::parser	typeref:typename:token_type
external_constructor	json.hpp	/^struct external_constructor<value_t::array>$/;"	s	namespace:nlohmann::detail
external_constructor	json.hpp	/^struct external_constructor<value_t::boolean>$/;"	s	namespace:nlohmann::detail
external_constructor	json.hpp	/^struct external_constructor<value_t::number_float>$/;"	s	namespace:nlohmann::detail
external_constructor	json.hpp	/^struct external_constructor<value_t::number_integer>$/;"	s	namespace:nlohmann::detail
external_constructor	json.hpp	/^struct external_constructor<value_t::number_unsigned>$/;"	s	namespace:nlohmann::detail
external_constructor	json.hpp	/^struct external_constructor<value_t::object>$/;"	s	namespace:nlohmann::detail
external_constructor	json.hpp	/^struct external_constructor<value_t::string>$/;"	s	namespace:nlohmann::detail
f	json.hpp	/^    uint64_t f;$/;"	m	struct:nlohmann::detail::dtoa_impl::cached_power	typeref:typename:uint64_t
f	json.hpp	/^    uint64_t f;$/;"	m	struct:nlohmann::detail::dtoa_impl::diyfp	typeref:typename:uint64_t
fail	http-request.h	/^    void fail(boost::system::error_code ec, char const* what)$/;"	f	class:HTTPSession	typeref:typename:void
fallback	spdlog/fmt/bundled/format-inl.h	/^        int fallback(int result)$/;"	f	class:__anonb519b34f0110::safe_strerror::dispatcher	typeref:typename:int
fallback	spdlog/fmt/bundled/format-inl.h	/^        int fallback(internal::null<>)$/;"	f	class:__anonb519b34f0110::safe_strerror::dispatcher	typeref:typename:int
fallback	spdlog/fmt/bundled/format.cc	/^    int fallback(int result) {$/;"	f	class:fmt::__anonf3b7881d0110::safe_strerror::StrError	typeref:typename:int	file:
fallback	spdlog/fmt/bundled/format.cc	/^    int fallback(internal::Null<>) {$/;"	f	class:fmt::__anonf3b7881d0110::safe_strerror::StrError	typeref:typename:int	file:
fallback	spdlog/fmt/bundled/time.h	/^        bool fallback(int res)$/;"	f	struct:fmt::gmtime::GMTime	typeref:typename:bool
fallback	spdlog/fmt/bundled/time.h	/^        bool fallback(int res)$/;"	f	struct:fmt::localtime::LocalTime	typeref:typename:bool
fallback	spdlog/fmt/bundled/time.h	/^        bool fallback(internal::Null<>)$/;"	f	struct:fmt::gmtime::GMTime	typeref:typename:bool
fallback	spdlog/fmt/bundled/time.h	/^        bool fallback(internal::Null<>)$/;"	f	struct:fmt::localtime::LocalTime	typeref:typename:bool
fast	stb_image.h	/^   stbi__uint16 fast[1 << STBI__ZFAST_BITS];$/;"	m	struct:__anon84e4e8860908	typeref:typename:stbi__uint16[]
fast	stb_image.h	/^   stbi_uc  fast[1 << FAST_BITS];$/;"	m	struct:__anon84e4e8860508	typeref:typename:stbi_uc[]
fast_ac	stb_image.h	/^   stbi__int16 fast_ac[4][1 << FAST_BITS];$/;"	m	struct:__anon84e4e8860608	typeref:typename:stbi__int16[4][]
fd	spdlog/fmt/bundled/posix.h	/^        int fd;$/;"	m	struct:fmt::File::Proxy	typeref:typename:int
fd_	spdlog/fmt/bundled/posix.h	/^    int fd_; \/\/ File descriptor.$/;"	m	class:fmt::File	typeref:typename:int
fdopen	spdlog/fmt/bundled/posix.cc	/^fmt::BufferedFile fmt::File::fdopen(const char *mode) {$/;"	f	class:fmt::File	typeref:typename:fmt::BufferedFile
fdopen	spdlog/fmt/bundled/posix.h	/^    FMT_API BufferedFile fdopen(const char *mode);$/;"	p	class:fmt::File	typeref:typename:FMT_API BufferedFile
field	protobuf-c/protobuf-c.c	/^	const ProtobufCFieldDescriptor *field; \/**< Field descriptor. *\/$/;"	m	struct:_ScannedMember	typeref:typename:const ProtobufCFieldDescriptor *	file:
fieldWidth	qcustomplot.h	/^  int fieldWidth(TimeUnit unit) const { return mFieldWidth.value(unit); }$/;"	f	class:QCPAxisTickerTime	typeref:typename:int
field_is_zeroish	protobuf-c/protobuf-c.c	/^field_is_zeroish(const ProtobufCFieldDescriptor *field,$/;"	f	typeref:typename:protobuf_c_boolean	file:
field_metadata	qc-message.pb.h	/^  static const ::google::protobuf::internal::FieldMetadata field_metadata[];$/;"	m	struct:protobuf_qc_2dmessage_2eproto::TableStruct	typeref:typename:const::google::protobuf::internal::FieldMetadata[]
field_ranges	protobuf-c/protobuf-c.h	/^	const ProtobufCIntRange		*field_ranges;$/;"	m	struct:ProtobufCMessageDescriptor	typeref:typename:const ProtobufCIntRange *
fields	protobuf-c/protobuf-c.h	/^	const ProtobufCFieldDescriptor	*fields;$/;"	m	struct:ProtobufCMessageDescriptor	typeref:typename:const ProtobufCFieldDescriptor *
fields_sorted_by_name	protobuf-c/protobuf-c.h	/^	const unsigned			*fields_sorted_by_name;$/;"	m	struct:ProtobufCMessageDescriptor	typeref:typename:const unsigned *
file	spdlog/fmt/bundled/posix.h	/^        FILE *file;$/;"	m	struct:fmt::BufferedFile::Proxy	typeref:typename:FILE *
file_	spdlog/fmt/bundled/posix.h	/^    FILE *file_;$/;"	m	class:fmt::BufferedFile	typeref:typename:FILE *
file_exists	spdlog/details/file_helper.h	/^    static bool file_exists(const filename_t &fname)$/;"	f	class:spdlog::details::file_helper	typeref:typename:bool
file_exists	spdlog/details/os.h	/^inline bool file_exists(const filename_t &filename)$/;"	f	namespace:spdlog::details::os	typeref:typename:bool
file_helper	spdlog/details/file_helper.h	/^    explicit file_helper() = default;$/;"	p	class:spdlog::details::file_helper
file_helper	spdlog/details/file_helper.h	/^    file_helper(const file_helper &) = delete;$/;"	p	class:spdlog::details::file_helper
file_helper	spdlog/details/file_helper.h	/^class file_helper$/;"	c	namespace:spdlog::details
file_helper_	spdlog/sinks/basic_file_sink.h	/^    details::file_helper file_helper_;$/;"	m	class:spdlog::sinks::SPDLOG_FINAL	typeref:typename:details::file_helper
file_helper_	spdlog/sinks/daily_file_sink.h	/^    details::file_helper file_helper_;$/;"	m	class:spdlog::sinks::SPDLOG_FINAL	typeref:typename:details::file_helper
file_helper_	spdlog/sinks/rotating_file_sink.h	/^    details::file_helper file_helper_;$/;"	m	class:spdlog::sinks::SPDLOG_FINAL	typeref:typename:details::file_helper
filename	spdlog/details/file_helper.h	/^    const filename_t &filename() const$/;"	f	class:spdlog::details::file_helper	typeref:typename:const filename_t &
filename_t	spdlog/common.h	/^using filename_t = std::string;$/;"	t	namespace:spdlog	typeref:typename:std::string
filename_t	spdlog/common.h	/^using filename_t = std::wstring;$/;"	t	namespace:spdlog	typeref:typename:std::wstring
filename_to_str	spdlog/details/os.h	/^inline std::string filename_to_str(const filename_t &filename)$/;"	f	namespace:spdlog::details::os	typeref:typename:std::string
fileno	spdlog/fmt/bundled/posix.cc	/^int fmt::BufferedFile::fileno() const {$/;"	f	class:fmt::BufferedFile	typeref:typename:int
fileno	spdlog/fmt/bundled/posix.h	/^    FMT_API int(fileno)() const;$/;"	m	class:fmt::BufferedFile	typeref:typename:FMT_API int ()()
filesize	spdlog/details/os.h	/^inline size_t filesize(FILE *f)$/;"	f	namespace:spdlog::details::os	typeref:typename:size_t
fill	qcustomplot.cpp	/^void QCPColorMapData::fill(double z)$/;"	f	class:QCPColorMapData	typeref:typename:void
fill	qcustomplot.h	/^  void fill(double z);$/;"	p	class:QCPColorMapData	typeref:typename:void
fill	spdlog/fmt/bundled/format.h	/^    char fill() const$/;"	f	struct:fmt::TypeSpec	typeref:typename:char
fill	spdlog/fmt/bundled/format.h	/^    wchar_t fill() const$/;"	f	struct:fmt::WidthSpec	typeref:typename:wchar_t
fillAlpha	qcustomplot.cpp	/^void QCPColorMapData::fillAlpha(unsigned char alpha)$/;"	f	class:QCPColorMapData	typeref:typename:void
fillAlpha	qcustomplot.h	/^  void fillAlpha(unsigned char alpha);$/;"	p	class:QCPColorMapData	typeref:typename:void
fillOrder	qcustomplot.h	/^  FillOrder fillOrder() const { return mFillOrder; }$/;"	f	class:QCPLayoutGrid	typeref:typename:FillOrder
fillOrder	qcustomplot.h	/^  Q_PROPERTY(FillOrder fillOrder READ fillOrder WRITE setFillOrder)$/;"	p	class:QCPLayoutGrid	typeref:typename:FillOrder
fill_	spdlog/fmt/bundled/format.h	/^    wchar_t fill_;$/;"	m	struct:fmt::WidthSpec	typeref:typename:wchar_t
fill_log_msg	spdlog/details/async_log_helper.h	/^        void fill_log_msg(log_msg &msg, std::string* logger_name)$/;"	f	struct:spdlog::details::async_log_helper::async_msg	typeref:typename:void
fill_padding	spdlog/fmt/bundled/format.h	/^    static CharPtr fill_padding(CharPtr buffer, unsigned total_size, std::size_t content_size, w/;"	p	class:fmt::BasicWriter	typeref:typename:CharPtr
fill_padding	spdlog/fmt/bundled/format.h	/^typename BasicWriter<Char>::CharPtr BasicWriter<Char>::fill_padding($/;"	f	class:fmt::BasicWriter	typeref:typename:BasicWriter<Char>::CharPtr
find	json.hpp	/^    const_iterator find(KeyT&& key) const$/;"	f	class:nlohmann::basic_json	typeref:typename:const_iterator
find	json.hpp	/^    iterator find(KeyT&& key)$/;"	f	class:nlohmann::basic_json	typeref:typename:iterator
find	spdlog/fmt/bundled/core.h	/^    basic_format_arg<Context> find(basic_string_view<char_type> name) const$/;"	f	class:internal::arg_map	typeref:typename:basic_format_arg<Context>
find	spdlog/fmt/bundled/format.h	/^    const internal::Arg *find(const fmt::BasicStringRef<Char> &name) const$/;"	f	class:fmt::internal::ArgMap	typeref:typename:const internal::Arg *
findBegin	qcustomplot.cpp	/^int QCPErrorBars::findBegin(double sortKey, bool expandedRange) const$/;"	f	class:QCPErrorBars	typeref:typename:int
findBegin	qcustomplot.h	/^  const_iterator findBegin(double sortKey, bool expandedRange=true) const;$/;"	p	class:QCPDataContainer	typeref:typename:const_iterator
findBegin	qcustomplot.h	/^  virtual int findBegin(double sortKey, bool expandedRange=true) const = 0;$/;"	p	class:QCPPlottableInterface1D	typeref:typename:int
findBegin	qcustomplot.h	/^  virtual int findBegin(double sortKey, bool expandedRange=true) const Q_DECL_OVERRIDE;$/;"	p	class:QCPAbstractPlottable1D	typeref:typename:int
findBegin	qcustomplot.h	/^  virtual int findBegin(double sortKey, bool expandedRange=true) const Q_DECL_OVERRIDE;$/;"	p	class:QCPErrorBars	typeref:typename:int
findBegin	qcustomplot.h	/^int QCPAbstractPlottable1D<DataType>::findBegin(double sortKey, bool expandedRange) const$/;"	f	class:QCPAbstractPlottable1D	typeref:typename:int
findBegin	qcustomplot.h	/^typename QCPDataContainer<DataType>::const_iterator QCPDataContainer<DataType>::findBegin(double/;"	f	class:QCPDataContainer	typeref:typename:QCPDataContainer<DataType>::const_iterator
findEnd	qcustomplot.cpp	/^int QCPErrorBars::findEnd(double sortKey, bool expandedRange) const$/;"	f	class:QCPErrorBars	typeref:typename:int
findEnd	qcustomplot.h	/^  const_iterator findEnd(double sortKey, bool expandedRange=true) const;$/;"	p	class:QCPDataContainer	typeref:typename:const_iterator
findEnd	qcustomplot.h	/^  virtual int findEnd(double sortKey, bool expandedRange=true) const = 0;$/;"	p	class:QCPPlottableInterface1D	typeref:typename:int
findEnd	qcustomplot.h	/^  virtual int findEnd(double sortKey, bool expandedRange=true) const Q_DECL_OVERRIDE;$/;"	p	class:QCPAbstractPlottable1D	typeref:typename:int
findEnd	qcustomplot.h	/^  virtual int findEnd(double sortKey, bool expandedRange=true) const Q_DECL_OVERRIDE;$/;"	p	class:QCPErrorBars	typeref:typename:int
findEnd	qcustomplot.h	/^int QCPAbstractPlottable1D<DataType>::findEnd(double sortKey, bool expandedRange) const$/;"	f	class:QCPAbstractPlottable1D	typeref:typename:int
findEnd	qcustomplot.h	/^typename QCPDataContainer<DataType>::const_iterator QCPDataContainer<DataType>::findEnd(double s/;"	f	class:QCPDataContainer	typeref:typename:QCPDataContainer<DataType>::const_iterator
findIndexAboveX	qcustomplot.cpp	/^int QCPGraph::findIndexAboveX(const QVector<QPointF> *data, double x) const$/;"	f	class:QCPGraph	typeref:typename:int
findIndexAboveX	qcustomplot.h	/^  int findIndexAboveX(const QVector<QPointF> *data, double x) const;$/;"	p	class:QCPGraph	typeref:typename:int
findIndexAboveY	qcustomplot.cpp	/^int QCPGraph::findIndexAboveY(const QVector<QPointF> *data, double y) const$/;"	f	class:QCPGraph	typeref:typename:int
findIndexAboveY	qcustomplot.h	/^  int findIndexAboveY(const QVector<QPointF> *data, double y) const;$/;"	p	class:QCPGraph	typeref:typename:int
findIndexBelowX	qcustomplot.cpp	/^int QCPGraph::findIndexBelowX(const QVector<QPointF> *data, double x) const$/;"	f	class:QCPGraph	typeref:typename:int
findIndexBelowX	qcustomplot.h	/^  int findIndexBelowX(const QVector<QPointF> *data, double x) const;$/;"	p	class:QCPGraph	typeref:typename:int
findIndexBelowY	qcustomplot.cpp	/^int QCPGraph::findIndexBelowY(const QVector<QPointF> *data, double y) const$/;"	f	class:QCPGraph	typeref:typename:int
findIndexBelowY	qcustomplot.h	/^  int findIndexBelowY(const QVector<QPointF> *data, double y) const;$/;"	p	class:QCPGraph	typeref:typename:int
find_largest_pow10	json.hpp	/^inline int find_largest_pow10(const uint32_t n, uint32_t& pow10)$/;"	f	namespace:nlohmann::detail::dtoa_impl	typeref:typename:int
finishedPlaying	mdi-child.cpp	/^void MdiChild::finishedPlaying(QAudio::State state) {$/;"	f	class:MdiChild	typeref:typename:void
finishedPlaying	mdi-child.h	/^    void finishedPlaying(QAudio::State state);$/;"	p	class:MdiChild	typeref:typename:void
finishedPlaying	mdi-child.h	/^    void finishedPlaying(QAudio::State state);$/;"	s	class:MdiChild	typeref:typename:void
fire_brick	spdlog/fmt/bundled/colors.h	/^    fire_brick = 0xB22222,              \/\/ rgb(178,34,34)$/;"	e	enum:color
firmwareId	protocol-struct.h	/^    uint8_t firmwareId;$/;"	m	struct:FirmwareUpgradeDetail	typeref:typename:uint8_t
firmwareId	protocol-struct.h	/^    uint8_t firmwareId;$/;"	m	struct:FirmwareUpgradeResponse	typeref:typename:uint8_t
firmwareId	protocol-struct.h	/^    uint8_t firmwareId;$/;"	m	struct:FirmwareUpgradeSimple	typeref:typename:uint8_t
firmwareId	protocol-struct.h	/^    uint8_t firmwareId;$/;"	m	struct:FirmwareUpgradeVerify	typeref:typename:uint8_t
firmware_update__descriptor	simple.pb-c.c	/^const ProtobufCMessageDescriptor firmware_update__descriptor =$/;"	v	typeref:typename:const ProtobufCMessageDescriptor
firmware_update__field_descriptors	simple.pb-c.c	/^static const ProtobufCFieldDescriptor firmware_update__field_descriptors[6] =$/;"	v	typeref:typename:const ProtobufCFieldDescriptor[6]	file:
firmware_update__field_indices_by_name	simple.pb-c.c	/^static const unsigned firmware_update__field_indices_by_name[] = {$/;"	v	typeref:typename:const unsigned[]	file:
firmware_update__free_unpacked	simple.pb-c.c	/^void   firmware_update__free_unpacked$/;"	f	typeref:typename:void
firmware_update__free_unpacked	simple.pb-c.h	/^void   firmware_update__free_unpacked$/;"	p	typeref:typename:void
firmware_update__get_packed_size	simple.pb-c.c	/^size_t firmware_update__get_packed_size$/;"	f	typeref:typename:size_t
firmware_update__get_packed_size	simple.pb-c.h	/^size_t firmware_update__get_packed_size$/;"	p	typeref:typename:size_t
firmware_update__init	simple.pb-c.c	/^void   firmware_update__init$/;"	f	typeref:typename:void
firmware_update__init	simple.pb-c.h	/^void   firmware_update__init$/;"	p	typeref:typename:void
firmware_update__number_ranges	simple.pb-c.c	/^static const ProtobufCIntRange firmware_update__number_ranges[1 + 1] =$/;"	v	typeref:typename:const ProtobufCIntRange[]	file:
firmware_update__pack	simple.pb-c.c	/^size_t firmware_update__pack$/;"	f	typeref:typename:size_t
firmware_update__pack	simple.pb-c.h	/^size_t firmware_update__pack$/;"	p	typeref:typename:size_t
firmware_update__pack_to_buffer	simple.pb-c.c	/^size_t firmware_update__pack_to_buffer$/;"	f	typeref:typename:size_t
firmware_update__pack_to_buffer	simple.pb-c.h	/^size_t firmware_update__pack_to_buffer$/;"	p	typeref:typename:size_t
firmware_update__unpack	simple.pb-c.c	/^       firmware_update__unpack$/;"	f	typeref:typename:FirmwareUpdate *
firmware_update__unpack	simple.pb-c.h	/^       firmware_update__unpack$/;"	p	typeref:typename:FirmwareUpdate *
firmware_update_feedback	simple.pb-c.h	/^  FirmwareUpdateFeedback *firmware_update_feedback;$/;"	m	struct:_ToHi	typeref:typename:FirmwareUpdateFeedback *
firmware_update_feedback	simple.proto	/^    optional FirmwareUpdateFeedback firmware_update_feedback = 26;$/;"	f
firmware_update_feedback__descriptor	simple.pb-c.c	/^const ProtobufCMessageDescriptor firmware_update_feedback__descriptor =$/;"	v	typeref:typename:const ProtobufCMessageDescriptor
firmware_update_feedback__field_descriptors	simple.pb-c.c	/^static const ProtobufCFieldDescriptor firmware_update_feedback__field_descriptors[5] =$/;"	v	typeref:typename:const ProtobufCFieldDescriptor[5]	file:
firmware_update_feedback__field_indices_by_name	simple.pb-c.c	/^static const unsigned firmware_update_feedback__field_indices_by_name[] = {$/;"	v	typeref:typename:const unsigned[]	file:
firmware_update_feedback__free_unpacked	simple.pb-c.c	/^void   firmware_update_feedback__free_unpacked$/;"	f	typeref:typename:void
firmware_update_feedback__free_unpacked	simple.pb-c.h	/^void   firmware_update_feedback__free_unpacked$/;"	p	typeref:typename:void
firmware_update_feedback__get_packed_size	simple.pb-c.c	/^size_t firmware_update_feedback__get_packed_size$/;"	f	typeref:typename:size_t
firmware_update_feedback__get_packed_size	simple.pb-c.h	/^size_t firmware_update_feedback__get_packed_size$/;"	p	typeref:typename:size_t
firmware_update_feedback__init	simple.pb-c.c	/^void   firmware_update_feedback__init$/;"	f	typeref:typename:void
firmware_update_feedback__init	simple.pb-c.h	/^void   firmware_update_feedback__init$/;"	p	typeref:typename:void
firmware_update_feedback__number_ranges	simple.pb-c.c	/^static const ProtobufCIntRange firmware_update_feedback__number_ranges[1 + 1] =$/;"	v	typeref:typename:const ProtobufCIntRange[]	file:
firmware_update_feedback__pack	simple.pb-c.c	/^size_t firmware_update_feedback__pack$/;"	f	typeref:typename:size_t
firmware_update_feedback__pack	simple.pb-c.h	/^size_t firmware_update_feedback__pack$/;"	p	typeref:typename:size_t
firmware_update_feedback__pack_to_buffer	simple.pb-c.c	/^size_t firmware_update_feedback__pack_to_buffer$/;"	f	typeref:typename:size_t
firmware_update_feedback__pack_to_buffer	simple.pb-c.h	/^size_t firmware_update_feedback__pack_to_buffer$/;"	p	typeref:typename:size_t
firmware_update_feedback__unpack	simple.pb-c.c	/^       firmware_update_feedback__unpack$/;"	f	typeref:typename:FirmwareUpdateFeedback *
firmware_update_feedback__unpack	simple.pb-c.h	/^       firmware_update_feedback__unpack$/;"	p	typeref:typename:FirmwareUpdateFeedback *
first	spdlog/fmt/bundled/format.h	/^    It first;$/;"	m	struct:fmt::ArgJoin	typeref:typename:It
first	stb_image.h	/^   stbi_uc first;$/;"	m	struct:__anon84e4e8861008	typeref:typename:stbi_uc
first_row_filter	stb_image.h	/^static stbi_uc first_row_filter[5] =$/;"	v	typeref:typename:stbi_uc[5]
firstcode	stb_image.h	/^   stbi__uint16 firstcode[16];$/;"	m	struct:__anon84e4e8860908	typeref:typename:stbi__uint16[16]
firstsymbol	stb_image.h	/^   stbi__uint16 firstsymbol[16];$/;"	m	struct:__anon84e4e8860908	typeref:typename:stbi__uint16[16]
fits_in_int	spdlog/fmt/bundled/printf.h	/^    static bool fits_in_int(T value)$/;"	f	struct:fmt::internal::IntChecker	typeref:typename:bool
fits_in_int	spdlog/fmt/bundled/printf.h	/^    static bool fits_in_int(bool)$/;"	f	struct:fmt::internal::IntChecker	typeref:typename:bool
fits_in_int	spdlog/fmt/bundled/printf.h	/^    static bool fits_in_int(int)$/;"	f	struct:fmt::internal::IntChecker	typeref:typename:bool
fixed32_pack	protobuf-c/protobuf-c.c	/^fixed32_pack(uint32_t value, void *out)$/;"	f	typeref:typename:size_t	file:
fixed64_pack	protobuf-c/protobuf-c.c	/^fixed64_pack(uint64_t value, void *out)$/;"	f	typeref:typename:size_t	file:
flag	spdlog/fmt/bundled/format.h	/^    bool flag(unsigned f) const$/;"	f	struct:fmt::FormatSpec	typeref:typename:bool
flag	spdlog/fmt/bundled/format.h	/^    bool flag(unsigned) const$/;"	f	struct:fmt::AlignTypeSpec	typeref:typename:bool
flag	spdlog/fmt/bundled/format.h	/^    bool flag(unsigned) const$/;"	f	struct:fmt::TypeSpec	typeref:typename:bool
flag_formatter	spdlog/details/pattern_formatter.h	/^class flag_formatter$/;"	c	namespace:spdlog::details
flag_formatter	spdlog/details/pattern_formatter_impl.h	/^class flag_formatter$/;"	c	namespace:spdlog::details
flags	protobuf-c/protobuf-c.h	/^	uint32_t		flags;$/;"	m	struct:ProtobufCFieldDescriptor	typeref:typename:uint32_t
flags	stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags, delay;$/;"	m	struct:__anon84e4e8861108	typeref:typename:int
flags_	spdlog/fmt/bundled/format.h	/^    unsigned flags_;$/;"	m	struct:fmt::FormatSpec	typeref:typename:unsigned
flatten	json.hpp	/^    basic_json flatten() const$/;"	f	class:nlohmann::basic_json	typeref:typename:basic_json
flatten	json.hpp	/^    static void flatten(const std::string& reference_string,$/;"	f	class:nlohmann::json_pointer	typeref:typename:void
float2fixed	stb_image.h	/^#define float2fixed(/;"	d
floral_white	spdlog/fmt/bundled/colors.h	/^    floral_white = 0xFFFAF0,            \/\/ rgb(255,250,240)$/;"	e	enum:color
flush	spdlog/async_logger.h	/^    void flush() override;$/;"	p	class:spdlog::SPDLOG_FINAL	typeref:typename:void
flush	spdlog/details/async_log_helper.h	/^        flush,$/;"	e	enum:spdlog::details::async_log_helper::async_msg_type
flush	spdlog/details/async_log_helper.h	/^    void flush();$/;"	p	class:spdlog::details::async_log_helper	typeref:typename:void
flush	spdlog/details/async_log_helper.h	/^inline void spdlog::details::async_log_helper::flush()$/;"	f	class:spdlog::details::async_log_helper	typeref:typename:void
flush	spdlog/details/async_logger_impl.h	/^inline void spdlog::async_logger::flush()$/;"	f	class:spdlog::async_logger	typeref:typename:void
flush	spdlog/details/file_helper.h	/^    void flush()$/;"	f	class:spdlog::details::file_helper	typeref:typename:void
flush	spdlog/details/logger_impl.h	/^inline void spdlog::logger::flush()$/;"	f	class:spdlog::logger	typeref:typename:void
flush	spdlog/details/thread_pool.h	/^    flush,$/;"	e	enum:spdlog::details::async_msg_type
flush	spdlog/logger.h	/^    virtual void flush();$/;"	p	class:spdlog::logger	typeref:typename:void
flush	spdlog/sinks/android_sink.h	/^    void flush() override {}$/;"	f	class:spdlog::sinks::android_sink	typeref:typename:void
flush	spdlog/sinks/base_sink.h	/^    void flush() SPDLOG_FINAL override$/;"	f	class:spdlog::sinks::base_sink	typeref:typename:void
flush	spdlog/sinks/sink.h	/^    virtual void flush() = 0;$/;"	p	class:spdlog::sinks::sink	typeref:typename:void
flush	spdlog/sinks/syslog_sink.h	/^    void flush() override {}$/;"	f	class:spdlog::sinks::syslog_sink	typeref:typename:void
flushBuffer	circular-buffer.cpp	/^size_t CircularBuffer::flushBuffer(size_t bytes) {$/;"	f	class:CircularBuffer	typeref:typename:size_t
flushBuffer	circular-buffer.h	/^    size_t flushBuffer(size_t bytes);$/;"	p	class:CircularBuffer	typeref:typename:size_t
flush_	spdlog/sinks/basic_file_sink.h	/^    void flush_() override$/;"	f	class:spdlog::sinks::SPDLOG_FINAL	typeref:typename:void
flush_	spdlog/sinks/daily_file_sink.h	/^    void flush_() override$/;"	f	class:spdlog::sinks::SPDLOG_FINAL	typeref:typename:void
flush_	spdlog/sinks/rotating_file_sink.h	/^    void flush_() override$/;"	f	class:spdlog::sinks::SPDLOG_FINAL	typeref:typename:void
flush_on	spdlog/details/logger_impl.h	/^inline void spdlog::logger::flush_on(level::level_enum log_level)$/;"	f	class:spdlog::logger	typeref:typename:void
flush_on	spdlog/details/registry.h	/^    void flush_on(level::level_enum log_level)$/;"	f	class:spdlog::details::registry_t	typeref:typename:void
flush_on	spdlog/details/spdlog_impl.h	/^inline void spdlog::flush_on(level::level_enum log_level)$/;"	f	class:spdlog	typeref:typename:void
flush_on	spdlog/logger.h	/^    void flush_on(level::level_enum log_level);$/;"	p	class:spdlog::logger	typeref:typename:void
flush_on	spdlog/spdlog.h	/^void flush_on(level::level_enum log_level);$/;"	p	namespace:spdlog	typeref:typename:void
flush_sinks	spdlog/details/async_log_helper.h	/^    void flush_sinks();$/;"	p	class:spdlog::details::async_log_helper	typeref:typename:void
flush_sinks	spdlog/details/async_log_helper.h	/^inline void spdlog::details::async_log_helper::flush_sinks()$/;"	f	class:spdlog::details::async_log_helper	typeref:typename:void
fmt	spdlog/fmt/bundled/format.cc	/^namespace fmt {$/;"	n	file:
fmt	spdlog/fmt/bundled/format.h	/^namespace fmt {$/;"	n
fmt	spdlog/fmt/bundled/locale.h	/^namespace fmt {$/;"	n
fmt	spdlog/fmt/bundled/ostream.cc	/^namespace fmt {$/;"	n	file:
fmt	spdlog/fmt/bundled/ostream.h	/^namespace fmt {$/;"	n
fmt	spdlog/fmt/bundled/posix.h	/^namespace fmt {$/;"	n
fmt	spdlog/fmt/bundled/printf.cc	/^namespace fmt {$/;"	n	file:
fmt	spdlog/fmt/bundled/printf.h	/^namespace fmt {$/;"	n
fmt	spdlog/fmt/bundled/time.h	/^namespace fmt {$/;"	n
fmt_helper	spdlog/details/fmt_helper.h	/^namespace fmt_helper {$/;"	n	namespace:spdlog::details
foColumnsFirst	qcustomplot.h	/^                  ,foColumnsFirst \/\/\/< Columns are filled first, and a new element is wrapped/;"	e	enum:QCPLayoutGrid::FillOrder
foRowsFirst	qcustomplot.h	/^  enum FillOrder { foRowsFirst    \/\/\/< Rows are filled first, and a new element is wrapped to/;"	e	enum:QCPLayoutGrid::FillOrder
folder_sep	spdlog/details/os.h	/^SPDLOG_CONSTEXPR static const char folder_sep = '\/';$/;"	v	namespace:spdlog::details::os	typeref:typename:SPDLOG_CONSTEXPR const char
folder_sep	spdlog/details/os.h	/^SPDLOG_CONSTEXPR static const char folder_sep = '\\\\';$/;"	v	namespace:spdlog::details::os	typeref:typename:SPDLOG_CONSTEXPR const char
font	qcustomplot.h	/^  QFont font() const { return mFont; }$/;"	f	class:QCPAbstractLegendItem	typeref:typename:QFont
font	qcustomplot.h	/^  QFont font() const { return mFont; }$/;"	f	class:QCPItemText	typeref:typename:QFont
font	qcustomplot.h	/^  QFont font() const { return mFont; }$/;"	f	class:QCPLegend	typeref:typename:QFont
font	qcustomplot.h	/^  QFont font() const { return mFont; }$/;"	f	class:QCPTextElement	typeref:typename:QFont
font	qcustomplot.h	/^  Q_PROPERTY(QFont font READ font WRITE setFont)$/;"	p	class:QCPAbstractLegendItem	typeref:typename:QFont
font	qcustomplot.h	/^  Q_PROPERTY(QFont font READ font WRITE setFont)$/;"	p	class:QCPItemText	typeref:typename:QFont
font	qcustomplot.h	/^  Q_PROPERTY(QFont font READ font WRITE setFont)$/;"	p	class:QCPLegend	typeref:typename:QFont
font	qcustomplot.h	/^  Q_PROPERTY(QFont font READ font WRITE setFont)$/;"	p	class:QCPTextElement	typeref:typename:QFont
fopen_s	spdlog/details/os.h	/^inline bool fopen_s(FILE **fp, const filename_t &filename, const filename_t &mode)$/;"	f	namespace:spdlog::details::os	typeref:typename:bool
for_each	spdlog/fmt/bundled/ranges.h	/^void for_each(Tuple &&tup, F &&f)$/;"	f	namespace:internal	typeref:typename:void
for_each	spdlog/fmt/bundled/ranges.h	/^void for_each(index_sequence<Is...>, Tuple &&tup, F &&f) FMT_NOEXCEPT$/;"	f	namespace:internal	typeref:typename:void
forest_green	spdlog/fmt/bundled/colors.h	/^    forest_green = 0x228B22,            \/\/ rgb(34,139,34)$/;"	e	enum:color
format	spdlog/details/pattern_formatter.h	/^    virtual void format(const details::log_msg &msg, const std::tm &tm_time, fmt::memory_buffer /;"	p	class:spdlog::details::flag_formatter	typeref:typename:void
format	spdlog/details/pattern_formatter.h	/^    void format(const details::log_msg &, const std::tm &, fmt::memory_buffer &dest) override$/;"	f	class:spdlog::details::SPDLOG_FINAL	typeref:typename:void
format	spdlog/details/pattern_formatter.h	/^    void format(const details::log_msg &, const std::tm &tm_time, fmt::memory_buffer &dest) over/;"	f	class:spdlog::details::A_formatter	typeref:typename:void
format	spdlog/details/pattern_formatter.h	/^    void format(const details::log_msg &, const std::tm &tm_time, fmt::memory_buffer &dest) over/;"	f	class:spdlog::details::B_formatter	typeref:typename:void
format	spdlog/details/pattern_formatter.h	/^    void format(const details::log_msg &, const std::tm &tm_time, fmt::memory_buffer &dest) over/;"	f	class:spdlog::details::SPDLOG_FINAL	typeref:typename:void
format	spdlog/details/pattern_formatter.h	/^    void format(const details::log_msg &, const std::tm &tm_time, fmt::memory_buffer &dest) over/;"	f	class:spdlog::details::a_formatter	typeref:typename:void
format	spdlog/details/pattern_formatter.h	/^    void format(const details::log_msg &, const std::tm &tm_time, fmt::memory_buffer &dest) over/;"	f	class:spdlog::details::b_formatter	typeref:typename:void
format	spdlog/details/pattern_formatter.h	/^    void format(const details::log_msg &msg, const std::tm &, fmt::memory_buffer &dest) override$/;"	f	class:spdlog::details::SPDLOG_FINAL	typeref:typename:void
format	spdlog/details/pattern_formatter.h	/^    void format(const details::log_msg &msg, const std::tm &, fmt::memory_buffer &dest) override$/;"	f	class:spdlog::details::level_formatter	typeref:typename:void
format	spdlog/details/pattern_formatter.h	/^    void format(const details::log_msg &msg, const std::tm &, fmt::memory_buffer &dest) override$/;"	f	class:spdlog::details::name_formatter	typeref:typename:void
format	spdlog/details/pattern_formatter.h	/^    void format(const details::log_msg &msg, const std::tm &, fmt::memory_buffer &dest) override$/;"	f	class:spdlog::details::short_level_formatter	typeref:typename:void
format	spdlog/details/pattern_formatter.h	/^    void format(const details::log_msg &msg, const std::tm &tm_time, fmt::memory_buffer &dest) o/;"	f	class:spdlog::details::SPDLOG_FINAL	typeref:typename:void
format	spdlog/details/pattern_formatter.h	/^    void format(const details::log_msg &msg, fmt::memory_buffer &dest) override$/;"	f	class:spdlog::SPDLOG_FINAL	typeref:typename:void
format	spdlog/details/pattern_formatter_impl.h	/^    virtual void format(details::log_msg &msg, const std::tm &tm_time) = 0;$/;"	p	class:spdlog::details::flag_formatter	typeref:typename:void
format	spdlog/details/pattern_formatter_impl.h	/^    void format(details::log_msg &msg, const std::tm &) override$/;"	f	class:spdlog::details::SPDLOG_FINAL	typeref:typename:void
format	spdlog/details/pattern_formatter_impl.h	/^    void format(details::log_msg &msg, const std::tm &) override$/;"	f	class:spdlog::details::level_formatter	typeref:typename:void
format	spdlog/details/pattern_formatter_impl.h	/^    void format(details::log_msg &msg, const std::tm &) override$/;"	f	class:spdlog::details::name_formatter	typeref:typename:void
format	spdlog/details/pattern_formatter_impl.h	/^    void format(details::log_msg &msg, const std::tm &) override$/;"	f	class:spdlog::details::short_level_formatter	typeref:typename:void
format	spdlog/details/pattern_formatter_impl.h	/^    void format(details::log_msg &msg, const std::tm &tm_time) override$/;"	f	class:spdlog::details::A_formatter	typeref:typename:void
format	spdlog/details/pattern_formatter_impl.h	/^    void format(details::log_msg &msg, const std::tm &tm_time) override$/;"	f	class:spdlog::details::B_formatter	typeref:typename:void
format	spdlog/details/pattern_formatter_impl.h	/^    void format(details::log_msg &msg, const std::tm &tm_time) override$/;"	f	class:spdlog::details::SPDLOG_FINAL	typeref:typename:void
format	spdlog/details/pattern_formatter_impl.h	/^    void format(details::log_msg &msg, const std::tm &tm_time) override$/;"	f	class:spdlog::details::a_formatter	typeref:typename:void
format	spdlog/details/pattern_formatter_impl.h	/^    void format(details::log_msg &msg, const std::tm &tm_time) override$/;"	f	class:spdlog::details::b_formatter	typeref:typename:void
format	spdlog/details/pattern_formatter_impl.h	/^inline void spdlog::pattern_formatter::format(details::log_msg &msg)$/;"	f	class:spdlog::pattern_formatter	typeref:typename:void
format	spdlog/fmt/bundled/core.h	/^        void format(Context &ctx) const$/;"	f	class:basic_format_arg::handle	typeref:typename:void
format	spdlog/fmt/bundled/core.h	/^    void (*format)(const void *arg, Context &ctx);$/;"	m	struct:internal::custom_value	typeref:typename:void (*)(const void * arg,Context & ctx)
format	spdlog/fmt/bundled/core.h	/^inline std::string format(string_view format_str, const Args &... args)$/;"	f	typeref:typename:std::string
format	spdlog/fmt/bundled/core.h	/^inline std::wstring format(wstring_view format_str, const Args &... args)$/;"	f	typeref:typename:std::wstring
format	spdlog/fmt/bundled/format.h	/^        FormatFunc format;$/;"	m	struct:fmt::internal::Value::CustomValue	typeref:typename:FormatFunc
format	spdlog/fmt/bundled/format.h	/^    const Char *format(const Char *&format_str, const internal::Arg &arg);$/;"	p	class:fmt::BasicFormatter	typeref:typename:const Char *
format	spdlog/fmt/bundled/format.h	/^    void format(BasicCStringRef<Char> format_str);$/;"	p	class:fmt::BasicFormatter	typeref:typename:void
format	spdlog/fmt/bundled/format.h	/^const Char *BasicFormatter<Char, ArgFormatter>::format(const Char *&format_str, const internal::/;"	f	class:fmt::BasicFormatter	typeref:typename:const Char *
format	spdlog/fmt/bundled/format.h	/^inline std::string format(CStringRef format_str, ArgList args)$/;"	f	namespace:fmt	typeref:typename:std::string
format	spdlog/fmt/bundled/format.h	/^inline std::wstring format(WCStringRef format_str, ArgList args)$/;"	f	namespace:fmt	typeref:typename:std::wstring
format	spdlog/fmt/bundled/format.h	/^void BasicFormatter<Char, AF>::format(BasicCStringRef<Char> format_str)$/;"	f	class:fmt::BasicFormatter	typeref:typename:void
format	spdlog/fmt/bundled/printf.cc	/^template void PrintfFormatter<char>::format(CStringRef format);$/;"	p	class:fmt::PrintfFormatter	typeref:typename:void	file:
format	spdlog/fmt/bundled/printf.cc	/^template void PrintfFormatter<wchar_t>::format(WCStringRef format);$/;"	p	class:fmt::PrintfFormatter	typeref:typename:void	file:
format	spdlog/fmt/bundled/printf.h	/^    void format(BasicCStringRef<Char> format_str);$/;"	p	class:fmt::PrintfFormatter	typeref:typename:void
format	spdlog/fmt/bundled/printf.h	/^void PrintfFormatter<Char, AF>::format(BasicCStringRef<Char> format_str)$/;"	f	class:fmt::PrintfFormatter	typeref:typename:void
format	spdlog/fmt/bundled/ranges.h	/^    auto format(const TupleT &values, FormatContext &ctx) -> decltype(ctx.out())$/;"	f	struct:formatter	typeref:typename:decltype (ctx.out ())
format	spdlog/fmt/bundled/ranges.h	/^    typename FormatContext::iterator format(const RangeT &values, FormatContext &ctx)$/;"	f	struct:formatter	typeref:typename:FormatContext::iterator
format	spdlog/formatter.h	/^    virtual void format(details::log_msg &msg) = 0;$/;"	p	class:spdlog::formatter	typeref:typename:void
format	spdlog/formatter.h	/^    void format(details::log_msg &msg) override;$/;"	p	class:spdlog::SPDLOG_FINAL	typeref:typename:void
format_	spdlog/fmt/bundled/format.h	/^    const Char *format_;$/;"	m	class:fmt::BasicArgFormatter	typeref:typename:const Char *
format_arg	spdlog/fmt/bundled/core.h	/^    typedef basic_format_arg<Context> format_arg;$/;"	t	class:basic_format_args	typeref:typename:basic_format_arg<Context>
format_arg	spdlog/fmt/bundled/core.h	/^    typedef basic_format_arg<Context> format_arg;$/;"	t	class:internal::context_base	typeref:typename:basic_format_arg<Context>
format_arg	spdlog/fmt/bundled/core.h	/^    typedef typename base::format_arg format_arg;$/;"	t	class:basic_format_context	typeref:typename:base::format_arg
format_arg	spdlog/fmt/bundled/format.h	/^void format_arg(Formatter &, ...)$/;"	f	namespace:fmt::internal	typeref:typename:void
format_arg	spdlog/fmt/bundled/format.h	/^void format_arg(fmt::BasicFormatter<Char, ArgFormatter> &f, const Char *&format_str, const ArgJo/;"	f	namespace:fmt	typeref:typename:void
format_arg	spdlog/fmt/bundled/ostream.h	/^void format_arg(BasicFormatter<Char, ArgFormatter_> &f, const Char *&format_str, const T &value)$/;"	f	namespace:fmt	typeref:typename:void
format_arg	spdlog/fmt/bundled/time.h	/^void format_arg(BasicFormatter<char, ArgFormatter> &f, const char *&format_str, const std::tm &t/;"	f	namespace:fmt	typeref:typename:void
format_arg_store	spdlog/fmt/bundled/core.h	/^    format_arg_store(const Args &... args)$/;"	f	class:format_arg_store
format_arg_store	spdlog/fmt/bundled/core.h	/^class format_arg_store$/;"	c
format_args	spdlog/fmt/bundled/core.h	/^    format_args(Args &&... arg)$/;"	f	struct:format_args
format_args	spdlog/fmt/bundled/core.h	/^struct format_args : basic_format_args<format_context>$/;"	s
format_buffer	json.hpp	/^inline char* format_buffer(char* buf, int len, int decimal_exponent,$/;"	f	namespace:nlohmann::detail::dtoa_impl	typeref:typename:char *
format_context	spdlog/fmt/bundled/core.h	/^typedef buffer_context<char>::type format_context;$/;"	t	typeref:typename:buffer_context<char>::type
format_custom_arg	spdlog/fmt/bundled/core.h	/^    static void format_custom_arg(const void *arg, Context &ctx)$/;"	f	class:internal::value	typeref:typename:void
format_custom_arg	spdlog/fmt/bundled/format.h	/^    static void format_custom_arg(void *formatter, const void *arg, void *format_str_ptr)$/;"	f	class:fmt::internal::MakeValue	typeref:typename:void
format_decimal	spdlog/fmt/bundled/format.h	/^    char *format_decimal(ULongLong value)$/;"	f	class:fmt::FormatInt	typeref:typename:char *
format_decimal	spdlog/fmt/bundled/format.h	/^inline void format_decimal(Char *buffer, UInt value, unsigned num_digits)$/;"	f	namespace:fmt::internal	typeref:typename:void
format_decimal	spdlog/fmt/bundled/format.h	/^inline void format_decimal(Char *buffer, UInt value, unsigned num_digits, ThousandsSep thousands/;"	f	namespace:fmt::internal	typeref:typename:void
format_decimal	spdlog/fmt/bundled/format.h	/^inline void format_decimal(char *&buffer, T value)$/;"	f	namespace:fmt	typeref:typename:void
format_each	spdlog/fmt/bundled/ranges.h	/^    struct format_each$/;"	s	struct:formatter
format_error_code	spdlog/fmt/bundled/format-inl.h	/^void format_error_code(internal::buffer &out, int error_code, string_view message) FMT_NOEXCEPT$/;"	f	namespace:__anonb519b34f0110	typeref:typename:void
format_error_code	spdlog/fmt/bundled/format.cc	/^void format_error_code(Writer &out, int error_code,$/;"	f	namespace:fmt::__anonf3b7881d0110	typeref:typename:void
format_float	spdlog/fmt/bundled/format-inl.h	/^int char_traits<char>::format_float(char *buffer, std::size_t size, const char *format, int prec/;"	f	class:internal::char_traits	typeref:typename:int
format_float	spdlog/fmt/bundled/format-inl.h	/^int char_traits<wchar_t>::format_float(wchar_t *buffer, std::size_t size, const wchar_t *format,/;"	f	class:internal::char_traits	typeref:typename:int
format_float	spdlog/fmt/bundled/format.cc	/^int internal::CharTraits<char>::format_float($/;"	f	class:fmt::internal::CharTraits	typeref:typename:int
format_float	spdlog/fmt/bundled/format.cc	/^int internal::CharTraits<wchar_t>::format_float($/;"	f	class:fmt::internal::CharTraits	typeref:typename:int
format_float	spdlog/fmt/bundled/format.cc	/^template FMT_API int internal::CharTraits<char>::format_float($/;"	p	class:fmt::internal::CharTraits	typeref:typename:FMT_API int	file:
format_float	spdlog/fmt/bundled/format.cc	/^template FMT_API int internal::CharTraits<wchar_t>::format_float($/;"	p	class:fmt::internal::CharTraits	typeref:typename:FMT_API int	file:
format_float	spdlog/fmt/bundled/format.h	/^    FMT_API static int format_float(char *buffer, std::size_t size, const char *format, unsigned/;"	p	class:fmt::internal::CharTraits	typeref:typename:FMT_API int
format_float	spdlog/fmt/bundled/format.h	/^    FMT_API static int format_float(wchar_t *buffer, std::size_t size, const wchar_t *format, un/;"	p	class:fmt::internal::CharTraits	typeref:typename:FMT_API int
format_str_	spdlog/fmt/bundled/core.h	/^    basic_string_view<Char> format_str_;$/;"	m	class:basic_parse_context	typeref:typename:basic_string_view<Char>
format_str_quoted	spdlog/fmt/bundled/ranges.h	/^FMT_CONSTEXPR const char *format_str_quoted($/;"	f	namespace:internal	typeref:typename:FMT_CONSTEXPR const char *
format_str_quoted	spdlog/fmt/bundled/ranges.h	/^FMT_CONSTEXPR const char *format_str_quoted(bool add_space, const char *)$/;"	f	namespace:internal	typeref:typename:FMT_CONSTEXPR const char *
format_str_quoted	spdlog/fmt/bundled/ranges.h	/^FMT_CONSTEXPR const char *format_str_quoted(bool add_space, const char)$/;"	f	namespace:internal	typeref:typename:FMT_CONSTEXPR const char *
format_str_quoted	spdlog/fmt/bundled/ranges.h	/^FMT_CONSTEXPR const wchar_t *format_str_quoted(bool add_space, const wchar_t *)$/;"	f	namespace:internal	typeref:typename:FMT_CONSTEXPR const wchar_t *
format_str_quoted	spdlog/fmt/bundled/ranges.h	/^FMT_CONSTEXPR const wchar_t *format_str_quoted(bool add_space, const wchar_t)$/;"	f	namespace:internal	typeref:typename:FMT_CONSTEXPR const wchar_t *
format_system_error	spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC void format_system_error(internal::buffer &out, int error_code, string_view message) FM/;"	f	typeref:typename:FMT_FUNC void
format_system_error	spdlog/fmt/bundled/format.cc	/^FMT_FUNC void format_system_error($/;"	f	namespace:fmt	typeref:typename:FMT_FUNC void
format_system_error	spdlog/fmt/bundled/format.h	/^FMT_API void format_system_error(fmt::Writer &out, int error_code, fmt::StringRef message) FMT_N/;"	p	namespace:fmt	typeref:typename:FMT_API void
format_windows_error	spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC void internal::format_windows_error(internal::buffer &out, int error_code, string_view /;"	f	class:internal	typeref:typename:FMT_FUNC void
format_windows_error	spdlog/fmt/bundled/format.cc	/^FMT_FUNC void internal::format_windows_error($/;"	f	class:fmt::internal	typeref:typename:FMT_FUNC void
format_windows_error	spdlog/fmt/bundled/format.h	/^FMT_API void format_windows_error(fmt::Writer &out, int error_code, fmt::StringRef message) FMT_/;"	p	namespace:fmt::internal	typeref:typename:FMT_API void
formatted	spdlog/details/log_msg.h	/^    fmt::MemoryWriter formatted;$/;"	m	struct:spdlog::details::log_msg	typeref:typename:fmt::MemoryWriter
formatter	spdlog/details/registry.h	/^    void formatter(formatter_ptr f)$/;"	f	class:spdlog::details::registry_t	typeref:typename:void
formatter	spdlog/fmt/bundled/ranges.h	/^struct formatter<RangeT, Char, typename std::enable_if<fmt::is_range<RangeT>::value>::type>$/;"	s
formatter	spdlog/fmt/bundled/ranges.h	/^struct formatter<TupleT, Char, typename std::enable_if<fmt::is_tuple_like<TupleT>::value>::type>$/;"	s
formatter	spdlog/formatter.h	/^class formatter$/;"	c	namespace:spdlog
formatter_	spdlog/fmt/bundled/format.h	/^    BasicFormatter<Char, Impl> &formatter_;$/;"	m	class:fmt::BasicArgFormatter	typeref:typename:BasicFormatter<Char,Impl> &
formatter_ptr	spdlog/common.h	/^using formatter_ptr = std::shared_ptr<spdlog::formatter>;$/;"	t	namespace:spdlog	typeref:typename:std::shared_ptr<spdlog::formatter>
formatter_type	spdlog/fmt/bundled/core.h	/^    struct formatter_type$/;"	s	class:basic_format_context
formatters_	spdlog/details/pattern_formatter.h	/^    std::vector<std::unique_ptr<details::flag_formatter>> formatters_;$/;"	m	class:spdlog::SPDLOG_FINAL	typeref:typename:std::vector<std::unique_ptr<details::flag_formatter>>
formatting	spdlog/fmt/bundled/ranges.h	/^        formatting_tuple<Char> &formatting;$/;"	m	struct:formatter::format_each	typeref:typename:formatting_tuple<Char> &
formatting	spdlog/fmt/bundled/ranges.h	/^    formatting_range<Char> formatting;$/;"	m	struct:formatter	typeref:typename:formatting_range<Char>
formatting	spdlog/fmt/bundled/ranges.h	/^    formatting_tuple<Char> formatting;$/;"	m	struct:formatter	typeref:typename:formatting_tuple<Char>
formatting_base	spdlog/fmt/bundled/ranges.h	/^struct formatting_base$/;"	s
formatting_range	spdlog/fmt/bundled/ranges.h	/^    formatting_range()$/;"	f	struct:formatting_range
formatting_range	spdlog/fmt/bundled/ranges.h	/^struct formatting_range : formatting_base<Char>$/;"	s
formatting_tuple	spdlog/fmt/bundled/ranges.h	/^    formatting_tuple()$/;"	f	struct:formatting_tuple
formatting_tuple	spdlog/fmt/bundled/ranges.h	/^struct formatting_tuple : formatting_base<Char>$/;"	s
fprintf	spdlog/fmt/bundled/printf.cc	/^FMT_FUNC int fprintf(std::FILE *f, CStringRef format, ArgList args) {$/;"	f	namespace:fmt	typeref:typename:FMT_FUNC int
fractionStyle	qcustomplot.h	/^  FractionStyle fractionStyle() const { return mFractionStyle; }$/;"	f	class:QCPAxisTickerPi	typeref:typename:FractionStyle
fractionToString	qcustomplot.cpp	/^QString QCPAxisTickerPi::fractionToString(int numerator, int denominator) const$/;"	f	class:QCPAxisTickerPi	typeref:typename:QString
fractionToString	qcustomplot.h	/^  QString fractionToString(int numerator, int denominator) const;$/;"	p	class:QCPAxisTickerPi	typeref:typename:QString
free	protobuf-c/protobuf-c.h	/^	void		(*free)(void *allocator_data, void *pointer);$/;"	m	struct:ProtobufCAllocator	typeref:typename:void (*)(void * allocator_data,void * pointer)
freeOpenGl	qcustomplot.cpp	/^void QCustomPlot::freeOpenGl()$/;"	f	class:QCustomPlot	typeref:typename:void
freeOpenGl	qcustomplot.h	/^  void freeOpenGl();$/;"	p	class:QCustomPlot	typeref:typename:void
freelocale	spdlog/fmt/bundled/posix.h	/^    static void freelocale(locale_t locale)$/;"	f	class:fmt::Locale	typeref:typename:void
fromSortKey	qcustomplot.h	/^  inline static QCPBarsData fromSortKey(double sortKey) { return QCPBarsData(sortKey, 0); }$/;"	f	class:QCPBarsData	typeref:typename:QCPBarsData
fromSortKey	qcustomplot.h	/^  inline static QCPCurveData fromSortKey(double sortKey) { return QCPCurveData(sortKey, 0, 0); }$/;"	f	class:QCPCurveData	typeref:typename:QCPCurveData
fromSortKey	qcustomplot.h	/^  inline static QCPFinancialData fromSortKey(double sortKey) { return QCPFinancialData(sortKey, /;"	f	class:QCPFinancialData	typeref:typename:QCPFinancialData
fromSortKey	qcustomplot.h	/^  inline static QCPGraphData fromSortKey(double sortKey) { return QCPGraphData(sortKey, 0); }$/;"	f	class:QCPGraphData	typeref:typename:QCPGraphData
fromSortKey	qcustomplot.h	/^  inline static QCPStatisticalBoxData fromSortKey(double sortKey) { return QCPStatisticalBoxData/;"	f	class:QCPStatisticalBoxData	typeref:typename:QCPStatisticalBoxData
from_cbor	json.hpp	/^    static basic_json from_cbor(A1 && a1, A2 && a2, const bool strict = true)$/;"	f	class:nlohmann::basic_json	typeref:typename:basic_json
from_cbor	json.hpp	/^    static basic_json from_cbor(detail::input_adapter i,$/;"	f	class:nlohmann::basic_json	typeref:typename:basic_json
from_json	json.hpp	/^    static void from_json(BasicJsonType&& j, ValueType& val) noexcept($/;"	f	struct:nlohmann::adl_serializer	typeref:typename:void
from_json	json.hpp	/^constexpr const auto& from_json = detail::static_const<detail::from_json_fn>::value;$/;"	v	namespace:nlohmann::__anonee2ce1d50510	typeref:typename:const auto &
from_json	json.hpp	/^void from_json(const BasicJsonType& j, ArithmeticType& val)$/;"	f	namespace:nlohmann::detail	typeref:typename:void
from_json	json.hpp	/^void from_json(const BasicJsonType& j, CompatibleArrayType& arr)$/;"	f	namespace:nlohmann::detail	typeref:typename:void
from_json	json.hpp	/^void from_json(const BasicJsonType& j, CompatibleObjectType& obj)$/;"	f	namespace:nlohmann::detail	typeref:typename:void
from_json	json.hpp	/^void from_json(const BasicJsonType& j, EnumType& e)$/;"	f	namespace:nlohmann::detail	typeref:typename:void
from_json	json.hpp	/^void from_json(const BasicJsonType& j, std::forward_list<T, Allocator>& l)$/;"	f	namespace:nlohmann::detail	typeref:typename:void
from_json	json.hpp	/^void from_json(const BasicJsonType& j, std::pair<A1, A2>& p)$/;"	f	namespace:nlohmann::detail	typeref:typename:void
from_json	json.hpp	/^void from_json(const BasicJsonType& j, std::tuple<Args...>& t)$/;"	f	namespace:nlohmann::detail	typeref:typename:void
from_json	json.hpp	/^void from_json(const BasicJsonType& j, std::valarray<T>& l)$/;"	f	namespace:nlohmann::detail	typeref:typename:void
from_json	json.hpp	/^void from_json(const BasicJsonType& j, typename BasicJsonType::array_t& arr)$/;"	f	namespace:nlohmann::detail	typeref:typename:void
from_json	json.hpp	/^void from_json(const BasicJsonType& j, typename BasicJsonType::boolean_t& b)$/;"	f	namespace:nlohmann::detail	typeref:typename:void
from_json	json.hpp	/^void from_json(const BasicJsonType& j, typename BasicJsonType::number_float_t& val)$/;"	f	namespace:nlohmann::detail	typeref:typename:void
from_json	json.hpp	/^void from_json(const BasicJsonType& j, typename BasicJsonType::number_integer_t& val)$/;"	f	namespace:nlohmann::detail	typeref:typename:void
from_json	json.hpp	/^void from_json(const BasicJsonType& j, typename BasicJsonType::number_unsigned_t& val)$/;"	f	namespace:nlohmann::detail	typeref:typename:void
from_json	json.hpp	/^void from_json(const BasicJsonType& j, typename BasicJsonType::string_t& s)$/;"	f	namespace:nlohmann::detail	typeref:typename:void
from_json_array_impl	json.hpp	/^auto from_json_array_impl(const BasicJsonType& j, CompatibleArrayType& arr, priority_tag<1> \/*u/;"	f	namespace:nlohmann::detail	typeref:typename:decltype (arr.reserve (std::declval<typename CompatibleArrayType::size_type> ()),void ())
from_json_array_impl	json.hpp	/^void from_json_array_impl(const BasicJsonType& j, CompatibleArrayType& arr, priority_tag<0> \/*u/;"	f	namespace:nlohmann::detail	typeref:typename:void
from_json_array_impl	json.hpp	/^void from_json_array_impl(const BasicJsonType& j, std::array<T, N>& arr, priority_tag<2> \/*unus/;"	f	namespace:nlohmann::detail	typeref:typename:void
from_json_fn	json.hpp	/^struct from_json_fn$/;"	s	namespace:nlohmann::detail
from_json_tuple_impl	json.hpp	/^void from_json_tuple_impl(const BasicJsonType& j, Tuple& t, index_sequence<Idx...>)$/;"	f	namespace:nlohmann::detail	typeref:typename:void
from_msgpack	json.hpp	/^    static basic_json from_msgpack(A1 && a1, A2 && a2, const bool strict = true)$/;"	f	class:nlohmann::basic_json	typeref:typename:basic_json
from_msgpack	json.hpp	/^    static basic_json from_msgpack(detail::input_adapter i,$/;"	f	class:nlohmann::basic_json	typeref:typename:basic_json
from_str	spdlog/common.h	/^inline spdlog::level::level_enum from_str(const std::string &name)$/;"	f	namespace:spdlog::level	typeref:typename:spdlog::level::level_enum
from_ubjson	json.hpp	/^    static basic_json from_ubjson(A1 && a1, A2 && a2, const bool strict = true)$/;"	f	class:nlohmann::basic_json	typeref:typename:basic_json
from_ubjson	json.hpp	/^    static basic_json from_ubjson(detail::input_adapter i,$/;"	f	class:nlohmann::basic_json	typeref:typename:basic_json
front	json.hpp	/^    const_reference front() const$/;"	f	class:nlohmann::basic_json	typeref:typename:const_reference
front	json.hpp	/^    reference front()$/;"	f	class:nlohmann::basic_json	typeref:typename:reference
fsAsciiFractions	qcustomplot.h	/^                       ,fsAsciiFractions   \/\/\/< Fractions are written as rationals using ASCI/;"	e	enum:QCPAxisTickerPi::FractionStyle
fsFloatingPoint	qcustomplot.h	/^  enum FractionStyle { fsFloatingPoint     \/\/\/< Fractions are displayed as regular decimal fl/;"	e	enum:QCPAxisTickerPi::FractionStyle
fsUnicodeFractions	qcustomplot.h	/^                       ,fsUnicodeFractions \/\/\/< Fractions are written using sub- and superscr/;"	e	enum:QCPAxisTickerPi::FractionStyle
fuchsia	spdlog/fmt/bundled/colors.h	/^    fuchsia = 0xFF00FF,                 \/\/ rgb(255,0,255)$/;"	e	enum:color
full	spdlog/details/circular_q.h	/^    bool full()$/;"	f	class:spdlog::details::circular_q	typeref:typename:bool
full_days	spdlog/details/pattern_formatter.h	/^static const std::string full_days[]{"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Fr/;"	v	namespace:spdlog::details	typeref:typename:const std::string[]
full_days	spdlog/details/pattern_formatter_impl.h	/^static const std::string full_days[]{"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Fr/;"	v	namespace:spdlog::details	typeref:typename:const std::string[]
full_months	spdlog/details/pattern_formatter.h	/^static const std::string full_months[]{$/;"	v	namespace:spdlog::details	typeref:typename:const std::string[]
full_months	spdlog/details/pattern_formatter_impl.h	/^static const std::string full_months[]{$/;"	v	namespace:spdlog::details	typeref:typename:const std::string[]
g	spdlog/fmt/bundled/colors.h	/^    uint8_t g;$/;"	m	struct:rgb	typeref:typename:uint8_t
gainsboro	spdlog/fmt/bundled/colors.h	/^    gainsboro = 0xDCDCDC,               \/\/ rgb(220,220,220)$/;"	e	enum:color
generate	qcustomplot.cpp	/^void QCPAxisTicker::generate(const QCPRange &range, const QLocale &locale, QChar formatChar, int/;"	f	class:QCPAxisTicker	typeref:typename:void
generate	qcustomplot.h	/^  virtual void generate(const QCPRange &range, const QLocale &locale, QChar formatChar, int prec/;"	p	class:QCPAxisTicker	typeref:typename:void
generateLabelParameterHash	qcustomplot.cpp	/^QByteArray QCPAxisPainterPrivate::generateLabelParameterHash() const$/;"	f	class:QCPAxisPainterPrivate	typeref:typename:QByteArray
generateLabelParameterHash	qcustomplot.h	/^  virtual QByteArray generateLabelParameterHash() const;$/;"	p	class:QCPAxisPainterPrivate	typeref:typename:QByteArray
get	gui.h	/^        static GUI* get() {$/;"	f	class:GUI	typeref:typename:GUI *
get	json.hpp	/^    BasicJsonType get() const$/;"	f	class:nlohmann::basic_json	typeref:typename:BasicJsonType
get	json.hpp	/^    PointerType get() noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:PointerType
get	json.hpp	/^    ValueType get() const noexcept(noexcept($/;"	f	class:nlohmann::basic_json	typeref:typename:ValueType
get	json.hpp	/^    basic_json get() const$/;"	f	class:nlohmann::basic_json	typeref:typename:basic_json
get	json.hpp	/^    constexpr const PointerType get() const noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:const PointerType
get	json.hpp	/^    int get()$/;"	f	class:nlohmann::detail::binary_reader	typeref:typename:int
get	json.hpp	/^    std::char_traits<char>::int_type get()$/;"	f	class:nlohmann::detail::lexer	typeref:typename:std::char_traits<char>::int_type
get	ks19937.h	/^	static uint64_t get() {$/;"	f	struct:ks19937	typeref:typename:uint64_t
get	spdlog/details/registry.h	/^    std::shared_ptr<logger> get(const std::string &logger_name)$/;"	f	class:spdlog::details::registry_t	typeref:typename:std::shared_ptr<logger>
get	spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::get(const std::string &name)$/;"	f	class:spdlog	typeref:typename:std::shared_ptr<spdlog::logger>
get	spdlog/fmt/bundled/core.h	/^    format_arg get(size_type index) const$/;"	f	class:basic_format_args	typeref:typename:format_arg
get	spdlog/fmt/bundled/format-inl.h	/^    std::locale get()$/;"	f	class:locale	typeref:typename:std::locale
get	spdlog/fmt/bundled/format.h	/^    static Char *get(Char *p)$/;"	f	class:fmt::BasicWriter	typeref:typename:Char *
get	spdlog/fmt/bundled/format.h	/^    static Char *get(CharPtr p)$/;"	f	class:fmt::BasicWriter	typeref:typename:Char *
get	spdlog/fmt/bundled/format.h	/^T &get();$/;"	p	namespace:fmt::internal	typeref:typename:T &
get	spdlog/fmt/bundled/locale.h	/^    std::locale get()$/;"	f	class:fmt::locale	typeref:typename:std::locale
get	spdlog/fmt/bundled/posix.h	/^    FILE *get() const FMT_NOEXCEPT$/;"	f	class:fmt::BufferedFile	typeref:typename:FILE *
get	spdlog/fmt/bundled/posix.h	/^    Type get() const$/;"	f	class:fmt::Locale	typeref:typename:Type
get	spdlog/fmt/bundled/posix.h	/^    int get() const FMT_NOEXCEPT$/;"	f	class:fmt::ErrorCode	typeref:typename:int
get	spdlog/spdlog.h	/^std::shared_ptr<logger> get(const std::string &name);$/;"	p	namespace:spdlog	typeref:typename:std::shared_ptr<logger>
getBarRect	qcustomplot.cpp	/^QRectF QCPBars::getBarRect(double key, double value) const$/;"	f	class:QCPBars	typeref:typename:QRectF
getBarRect	qcustomplot.h	/^  QRectF getBarRect(double key, double value) const;$/;"	p	class:QCPBars	typeref:typename:QRectF
getBasePen	qcustomplot.cpp	/^QPen QCPAxis::getBasePen() const$/;"	f	class:QCPAxis	typeref:typename:QPen
getBasePen	qcustomplot.h	/^  QPen getBasePen() const;$/;"	p	class:QCPAxis	typeref:typename:QPen
getBorderPen	qcustomplot.cpp	/^QPen QCPLegend::getBorderPen() const$/;"	f	class:QCPLegend	typeref:typename:QPen
getBorderPen	qcustomplot.h	/^  QPen getBorderPen() const;$/;"	p	class:QCPLegend	typeref:typename:QPen
getBrush	qcustomplot.cpp	/^QBrush QCPLegend::getBrush() const$/;"	f	class:QCPLegend	typeref:typename:QBrush
getBrush	qcustomplot.h	/^  QBrush getBrush() const;$/;"	p	class:QCPLegend	typeref:typename:QBrush
getChannelFillPolygon	qcustomplot.cpp	/^const QPolygonF QCPGraph::getChannelFillPolygon(const QVector<QPointF> *thisData, QCPDataRange t/;"	f	class:QCPGraph	typeref:typename:const QPolygonF
getChannelFillPolygon	qcustomplot.h	/^  const QPolygonF getChannelFillPolygon(const QVector<QPointF> *lineData, QCPDataRange thisSegme/;"	p	class:QCPGraph	typeref:typename:const QPolygonF
getCurveLines	qcustomplot.cpp	/^void QCPCurve::getCurveLines(QVector<QPointF> *lines, const QCPDataRange &dataRange, double penW/;"	f	class:QCPCurve	typeref:typename:void
getCurveLines	qcustomplot.h	/^  void getCurveLines(QVector<QPointF> *lines, const QCPDataRange &dataRange, double penWidth) co/;"	p	class:QCPCurve	typeref:typename:void
getDataSegments	qcustomplot.cpp	/^void QCPErrorBars::getDataSegments(QList<QCPDataRange> &selectedSegments, QList<QCPDataRange> &u/;"	f	class:QCPErrorBars	typeref:typename:void
getDataSegments	qcustomplot.h	/^  void getDataSegments(QList<QCPDataRange> &selectedSegments, QList<QCPDataRange> &unselectedSeg/;"	p	class:QCPAbstractPlottable1D	typeref:typename:void
getDataSegments	qcustomplot.h	/^  void getDataSegments(QList<QCPDataRange> &selectedSegments, QList<QCPDataRange> &unselectedSeg/;"	p	class:QCPErrorBars	typeref:typename:void
getDataSegments	qcustomplot.h	/^void QCPAbstractPlottable1D<DataType>::getDataSegments(QList<QCPDataRange> &selectedSegments, QL/;"	f	class:QCPAbstractPlottable1D	typeref:typename:void
getDoubleValue	ks19937.h	/^	static double getDoubleValue(double minValue, double maxValue)$/;"	f	struct:ks19937	typeref:typename:double
getErrorBarLines	qcustomplot.cpp	/^void QCPErrorBars::getErrorBarLines(QCPErrorBarsDataContainer::const_iterator it, QVector<QLineF/;"	f	class:QCPErrorBars	typeref:typename:void
getErrorBarLines	qcustomplot.h	/^  void getErrorBarLines(QCPErrorBarsDataContainer::const_iterator it, QVector<QLineF> &backbones/;"	p	class:QCPErrorBars	typeref:typename:void
getFillBasePoint	qcustomplot.cpp	/^QPointF QCPGraph::getFillBasePoint(QPointF matchingDataPoint) const$/;"	f	class:QCPGraph	typeref:typename:QPointF
getFillBasePoint	qcustomplot.h	/^  QPointF getFillBasePoint(QPointF matchingDataPoint) const;$/;"	p	class:QCPGraph	typeref:typename:QPointF
getFillPolygon	qcustomplot.cpp	/^const QPolygonF QCPGraph::getFillPolygon(const QVector<QPointF> *lineData, QCPDataRange segment)/;"	f	class:QCPGraph	typeref:typename:const QPolygonF
getFillPolygon	qcustomplot.h	/^  const QPolygonF getFillPolygon(const QVector<QPointF> *lineData, QCPDataRange segment) const;$/;"	p	class:QCPGraph	typeref:typename:const QPolygonF
getFinalMaximumOuterSize	qcustomplot.cpp	/^QSize QCPLayout::getFinalMaximumOuterSize(const QCPLayoutElement *el)$/;"	f	class:QCPLayout	typeref:typename:QSize
getFinalMaximumOuterSize	qcustomplot.h	/^  static QSize getFinalMaximumOuterSize(const QCPLayoutElement *el);$/;"	p	class:QCPLayout	typeref:typename:QSize
getFinalMinimumOuterSize	qcustomplot.cpp	/^QSize QCPLayout::getFinalMinimumOuterSize(const QCPLayoutElement *el)$/;"	f	class:QCPLayout	typeref:typename:QSize
getFinalMinimumOuterSize	qcustomplot.h	/^  static QSize getFinalMinimumOuterSize(const QCPLayoutElement *el);$/;"	p	class:QCPLayout	typeref:typename:QSize
getFinalRect	qcustomplot.cpp	/^QRect QCPItemPixmap::getFinalRect(bool *flippedHorz, bool *flippedVert) const$/;"	f	class:QCPItemPixmap	typeref:typename:QRect
getFinalRect	qcustomplot.h	/^  QRect getFinalRect(bool *flippedHorz=0, bool *flippedVert=0) const;$/;"	p	class:QCPItemPixmap	typeref:typename:QRect
getFinalScatterStyle	qcustomplot.cpp	/^QCPScatterStyle QCPSelectionDecorator::getFinalScatterStyle(const QCPScatterStyle &unselectedSty/;"	f	class:QCPSelectionDecorator	typeref:typename:QCPScatterStyle
getFinalScatterStyle	qcustomplot.h	/^  QCPScatterStyle getFinalScatterStyle(const QCPScatterStyle &unselectedStyle) const;$/;"	p	class:QCPSelectionDecorator	typeref:typename:QCPScatterStyle
getFloatValue	ks19937.h	/^	static float getFloatValue(float minValue, float maxValue)$/;"	f	struct:ks19937	typeref:typename:float
getFont	qcustomplot.cpp	/^QFont QCPPlottableLegendItem::getFont() const$/;"	f	class:QCPPlottableLegendItem	typeref:typename:QFont
getFont	qcustomplot.h	/^  QFont getFont() const;$/;"	p	class:QCPPlottableLegendItem	typeref:typename:QFont
getIconBorderPen	qcustomplot.cpp	/^QPen QCPPlottableLegendItem::getIconBorderPen() const$/;"	f	class:QCPPlottableLegendItem	typeref:typename:QPen
getIconBorderPen	qcustomplot.h	/^  QPen getIconBorderPen() const;$/;"	p	class:QCPPlottableLegendItem	typeref:typename:QPen
getInstance	spdlogger.h	/^		static Log* getInstance()$/;"	f	class:util::Log	typeref:typename:Log *
getIntValue	ks19937.h	/^	static int getIntValue(int minValue, int maxValue)$/;"	f	struct:ks19937	typeref:typename:int
getKeyRange	qcustomplot.cpp	/^QCPRange QCPBars::getKeyRange(bool &foundRange, QCP::SignDomain inSignDomain) const$/;"	f	class:QCPBars	typeref:typename:QCPRange
getKeyRange	qcustomplot.cpp	/^QCPRange QCPColorMap::getKeyRange(bool &foundRange, QCP::SignDomain inSignDomain) const$/;"	f	class:QCPColorMap	typeref:typename:QCPRange
getKeyRange	qcustomplot.cpp	/^QCPRange QCPCurve::getKeyRange(bool &foundRange, QCP::SignDomain inSignDomain) const$/;"	f	class:QCPCurve	typeref:typename:QCPRange
getKeyRange	qcustomplot.cpp	/^QCPRange QCPErrorBars::getKeyRange(bool &foundRange, QCP::SignDomain inSignDomain) const$/;"	f	class:QCPErrorBars	typeref:typename:QCPRange
getKeyRange	qcustomplot.cpp	/^QCPRange QCPFinancial::getKeyRange(bool &foundRange, QCP::SignDomain inSignDomain) const$/;"	f	class:QCPFinancial	typeref:typename:QCPRange
getKeyRange	qcustomplot.cpp	/^QCPRange QCPGraph::getKeyRange(bool &foundRange, QCP::SignDomain inSignDomain) const$/;"	f	class:QCPGraph	typeref:typename:QCPRange
getKeyRange	qcustomplot.cpp	/^QCPRange QCPStatisticalBox::getKeyRange(bool &foundRange, QCP::SignDomain inSignDomain) const$/;"	f	class:QCPStatisticalBox	typeref:typename:QCPRange
getKeyRange	qcustomplot.h	/^  virtual QCPRange getKeyRange(bool &foundRange, QCP::SignDomain inSignDomain=QCP::sdBoth) const/;"	p	class:QCPAbstractPlottable	typeref:typename:QCPRange
getKeyRange	qcustomplot.h	/^  virtual QCPRange getKeyRange(bool &foundRange, QCP::SignDomain inSignDomain=QCP::sdBoth) const/;"	p	class:QCPBars	typeref:typename:QCPRange
getKeyRange	qcustomplot.h	/^  virtual QCPRange getKeyRange(bool &foundRange, QCP::SignDomain inSignDomain=QCP::sdBoth) const/;"	p	class:QCPColorMap	typeref:typename:QCPRange
getKeyRange	qcustomplot.h	/^  virtual QCPRange getKeyRange(bool &foundRange, QCP::SignDomain inSignDomain=QCP::sdBoth) const/;"	p	class:QCPCurve	typeref:typename:QCPRange
getKeyRange	qcustomplot.h	/^  virtual QCPRange getKeyRange(bool &foundRange, QCP::SignDomain inSignDomain=QCP::sdBoth) const/;"	p	class:QCPErrorBars	typeref:typename:QCPRange
getKeyRange	qcustomplot.h	/^  virtual QCPRange getKeyRange(bool &foundRange, QCP::SignDomain inSignDomain=QCP::sdBoth) const/;"	p	class:QCPFinancial	typeref:typename:QCPRange
getKeyRange	qcustomplot.h	/^  virtual QCPRange getKeyRange(bool &foundRange, QCP::SignDomain inSignDomain=QCP::sdBoth) const/;"	p	class:QCPGraph	typeref:typename:QCPRange
getKeyRange	qcustomplot.h	/^  virtual QCPRange getKeyRange(bool &foundRange, QCP::SignDomain inSignDomain=QCP::sdBoth) const/;"	p	class:QCPStatisticalBox	typeref:typename:QCPRange
getLabelColor	qcustomplot.cpp	/^QColor QCPAxis::getLabelColor() const$/;"	f	class:QCPAxis	typeref:typename:QColor
getLabelColor	qcustomplot.h	/^  QColor getLabelColor() const;$/;"	p	class:QCPAxis	typeref:typename:QColor
getLabelFont	qcustomplot.cpp	/^QFont QCPAxis::getLabelFont() const$/;"	f	class:QCPAxis	typeref:typename:QFont
getLabelFont	qcustomplot.h	/^  QFont getLabelFont() const;$/;"	p	class:QCPAxis	typeref:typename:QFont
getLines	qcustomplot.cpp	/^void QCPGraph::getLines(QVector<QPointF> *lines, const QCPDataRange &dataRange) const$/;"	f	class:QCPGraph	typeref:typename:void
getLines	qcustomplot.h	/^  void getLines(QVector<QPointF> *lines, const QCPDataRange &dataRange) const;$/;"	p	class:QCPGraph	typeref:typename:void
getMantissa	qcustomplot.cpp	/^double QCPAxisTicker::getMantissa(double input, double *magnitude) const$/;"	f	class:QCPAxisTicker	typeref:typename:double
getMantissa	qcustomplot.h	/^  double getMantissa(double input, double *magnitude=0) const;$/;"	p	class:QCPAxisTicker	typeref:typename:double
getMarginValue	qcustomplot.h	/^inline int getMarginValue(const QMargins &margins, QCP::MarginSide side)$/;"	f	namespace:QCP	typeref:typename:int
getMaxTickLabelSize	qcustomplot.cpp	/^void QCPAxisPainterPrivate::getMaxTickLabelSize(const QFont &font, const QString &text,  QSize */;"	f	class:QCPAxisPainterPrivate	typeref:typename:void
getMaxTickLabelSize	qcustomplot.h	/^  virtual void getMaxTickLabelSize(const QFont &font, const QString &text, QSize *tickLabelsSize/;"	p	class:QCPAxisPainterPrivate	typeref:typename:void
getMaximumRowColSizes	qcustomplot.cpp	/^void QCPLayoutGrid::getMaximumRowColSizes(QVector<int> *maxColWidths, QVector<int> *maxRowHeight/;"	f	class:QCPLayoutGrid	typeref:typename:void
getMaximumRowColSizes	qcustomplot.h	/^  void getMaximumRowColSizes(QVector<int> *maxColWidths, QVector<int> *maxRowHeights) const;$/;"	p	class:QCPLayoutGrid	typeref:typename:void
getMinimumRowColSizes	qcustomplot.cpp	/^void QCPLayoutGrid::getMinimumRowColSizes(QVector<int> *minColWidths, QVector<int> *minRowHeight/;"	f	class:QCPLayoutGrid	typeref:typename:void
getMinimumRowColSizes	qcustomplot.h	/^  void getMinimumRowColSizes(QVector<int> *minColWidths, QVector<int> *minRowHeights) const;$/;"	p	class:QCPLayoutGrid	typeref:typename:void
getNonNanSegments	qcustomplot.cpp	/^QVector<QCPDataRange> QCPGraph::getNonNanSegments(const QVector<QPointF> *lineData, Qt::Orientat/;"	f	class:QCPGraph	typeref:typename:QVector<QCPDataRange>
getNonNanSegments	qcustomplot.h	/^  QVector<QCPDataRange> getNonNanSegments(const QVector<QPointF> *lineData, Qt::Orientation keyO/;"	p	class:QCPGraph	typeref:typename:QVector<QCPDataRange>
getOptimizedCornerPoints	qcustomplot.cpp	/^QVector<QPointF> QCPCurve::getOptimizedCornerPoints(int prevRegion, int currentRegion, double pr/;"	f	class:QCPCurve	typeref:typename:QVector<QPointF>
getOptimizedCornerPoints	qcustomplot.h	/^  QVector<QPointF> getOptimizedCornerPoints(int prevRegion, int currentRegion, double prevKey, d/;"	p	class:QCPCurve	typeref:typename:QVector<QPointF>
getOptimizedLineData	qcustomplot.cpp	/^void QCPGraph::getOptimizedLineData(QVector<QCPGraphData> *lineData, const QCPGraphDataContainer/;"	f	class:QCPGraph	typeref:typename:void
getOptimizedLineData	qcustomplot.h	/^  virtual void getOptimizedLineData(QVector<QCPGraphData> *lineData, const QCPGraphDataContainer/;"	p	class:QCPGraph	typeref:typename:void
getOptimizedPoint	qcustomplot.cpp	/^QPointF QCPCurve::getOptimizedPoint(int otherRegion, double otherKey, double otherValue, double /;"	f	class:QCPCurve	typeref:typename:QPointF
getOptimizedPoint	qcustomplot.h	/^  QPointF getOptimizedPoint(int prevRegion, double prevKey, double prevValue, double key, double/;"	p	class:QCPCurve	typeref:typename:QPointF
getOptimizedScatterData	qcustomplot.cpp	/^void QCPGraph::getOptimizedScatterData(QVector<QCPGraphData> *scatterData, QCPGraphDataContainer/;"	f	class:QCPGraph	typeref:typename:void
getOptimizedScatterData	qcustomplot.h	/^  virtual void getOptimizedScatterData(QVector<QCPGraphData> *scatterData, QCPGraphDataContainer/;"	p	class:QCPGraph	typeref:typename:void
getOuterPacket	ble.cpp	/^void BLESession::getOuterPacket(const boost::system::error_code& error, size_t bytes_transferred/;"	f	class:BLESession	typeref:typename:void
getOuterPacket	ble.h	/^    void getOuterPacket(const boost::system::error_code& error, size_t bytes_transferred);$/;"	p	class:BLESession	typeref:typename:void
getOverlappingSegments	qcustomplot.cpp	/^QVector<QPair<QCPDataRange, QCPDataRange> > QCPGraph::getOverlappingSegments(QVector<QCPDataRang/;"	f	class:QCPGraph	typeref:typename:QVector<QPair<QCPDataRange,QCPDataRange>>
getOverlappingSegments	qcustomplot.h	/^  QVector<QPair<QCPDataRange, QCPDataRange> > getOverlappingSegments(QVector<QCPDataRange> thisS/;"	p	class:QCPGraph	typeref:typename:QVector<QPair<QCPDataRange,QCPDataRange>>
getPartAt	qcustomplot.cpp	/^QCPAxis::SelectablePart QCPAxis::getPartAt(const QPointF &pos) const$/;"	f	class:QCPAxis	typeref:typename:QCPAxis::SelectablePart
getPartAt	qcustomplot.h	/^  SelectablePart getPartAt(const QPointF &pos) const;$/;"	p	class:QCPAxis	typeref:typename:SelectablePart
getPixelCoordinates	qcustomplot.cpp	/^QPointF QCPSelectionDecoratorBracket::getPixelCoordinates(const QCPPlottableInterface1D *interfa/;"	f	class:QCPSelectionDecoratorBracket	typeref:typename:QPointF
getPixelCoordinates	qcustomplot.h	/^  QPointF getPixelCoordinates(const QCPPlottableInterface1D *interface1d, int dataIndex) const;$/;"	p	class:QCPSelectionDecoratorBracket	typeref:typename:QPointF
getPixelSpacing	qcustomplot.cpp	/^double QCPBarsGroup::getPixelSpacing(const QCPBars *bars, double keyCoord)$/;"	f	class:QCPBarsGroup	typeref:typename:double
getPixelSpacing	qcustomplot.h	/^  double getPixelSpacing(const QCPBars *bars, double keyCoord);$/;"	p	class:QCPBarsGroup	typeref:typename:double
getPixelWidth	qcustomplot.cpp	/^double QCPFinancial::getPixelWidth(double key, double keyPixel) const$/;"	f	class:QCPFinancial	typeref:typename:double
getPixelWidth	qcustomplot.cpp	/^void QCPBars::getPixelWidth(double key, double &lower, double &upper) const$/;"	f	class:QCPBars	typeref:typename:void
getPixelWidth	qcustomplot.h	/^  double getPixelWidth(double key, double keyPixel) const;$/;"	p	class:QCPFinancial	typeref:typename:double
getPixelWidth	qcustomplot.h	/^  void getPixelWidth(double key, double &lower, double &upper) const;$/;"	p	class:QCPBars	typeref:typename:void
getQuartileBox	qcustomplot.cpp	/^QRectF QCPStatisticalBox::getQuartileBox(QCPStatisticalBoxDataContainer::const_iterator it) cons/;"	f	class:QCPStatisticalBox	typeref:typename:QRectF
getQuartileBox	qcustomplot.h	/^  QRectF getQuartileBox(QCPStatisticalBoxDataContainer::const_iterator it) const;$/;"	p	class:QCPStatisticalBox	typeref:typename:QRectF
getRectClippedLine	qcustomplot.cpp	/^QLineF QCPItemLine::getRectClippedLine(const QCPVector2D &start, const QCPVector2D &end, const Q/;"	f	class:QCPItemLine	typeref:typename:QLineF
getRectClippedLine	qcustomplot.h	/^  QLineF getRectClippedLine(const QCPVector2D &start, const QCPVector2D &end, const QRect &rect)/;"	p	class:QCPItemLine	typeref:typename:QLineF
getRectClippedStraightLine	qcustomplot.cpp	/^QLineF QCPItemStraightLine::getRectClippedStraightLine(const QCPVector2D &base, const QCPVector2/;"	f	class:QCPItemStraightLine	typeref:typename:QLineF
getRectClippedStraightLine	qcustomplot.h	/^  QLineF getRectClippedStraightLine(const QCPVector2D &point1, const QCPVector2D &vec, const QRe/;"	p	class:QCPItemStraightLine	typeref:typename:QLineF
getRegion	qcustomplot.cpp	/^int QCPCurve::getRegion(double key, double value, double keyMin, double valueMax, double keyMax,/;"	f	class:QCPCurve	typeref:typename:int
getRegion	qcustomplot.h	/^  int getRegion(double key, double value, double keyMin, double valueMax, double keyMax, double /;"	p	class:QCPCurve	typeref:typename:int
getScatters	qcustomplot.cpp	/^void QCPCurve::getScatters(QVector<QPointF> *scatters, const QCPDataRange &dataRange, double sca/;"	f	class:QCPCurve	typeref:typename:void
getScatters	qcustomplot.cpp	/^void QCPGraph::getScatters(QVector<QPointF> *scatters, const QCPDataRange &dataRange) const$/;"	f	class:QCPGraph	typeref:typename:void
getScatters	qcustomplot.h	/^  void getScatters(QVector<QPointF> *scatters, const QCPDataRange &dataRange) const;$/;"	p	class:QCPGraph	typeref:typename:void
getScatters	qcustomplot.h	/^  void getScatters(QVector<QPointF> *scatters, const QCPDataRange &dataRange, double scatterWidt/;"	p	class:QCPCurve	typeref:typename:void
getSectionSizes	qcustomplot.cpp	/^QVector<int> QCPLayout::getSectionSizes(QVector<int> maxSizes, QVector<int> minSizes, QVector<do/;"	f	class:QCPLayout	typeref:typename:QVector<int>
getSectionSizes	qcustomplot.h	/^  QVector<int> getSectionSizes(QVector<int> maxSizes, QVector<int> minSizes, QVector<double> str/;"	p	class:QCPLayout	typeref:typename:QVector<int>
getStackedBaseValue	qcustomplot.cpp	/^double QCPBars::getStackedBaseValue(double key, bool positive) const$/;"	f	class:QCPBars	typeref:typename:double
getStackedBaseValue	qcustomplot.h	/^  double getStackedBaseValue(double key, bool positive) const;$/;"	p	class:QCPBars	typeref:typename:double
getSubTickCount	qcustomplot.cpp	/^int QCPAxisTicker::getSubTickCount(double tickStep)$/;"	f	class:QCPAxisTicker	typeref:typename:int
getSubTickCount	qcustomplot.cpp	/^int QCPAxisTickerDateTime::getSubTickCount(double tickStep)$/;"	f	class:QCPAxisTickerDateTime	typeref:typename:int
getSubTickCount	qcustomplot.cpp	/^int QCPAxisTickerLog::getSubTickCount(double tickStep)$/;"	f	class:QCPAxisTickerLog	typeref:typename:int
getSubTickCount	qcustomplot.cpp	/^int QCPAxisTickerPi::getSubTickCount(double tickStep)$/;"	f	class:QCPAxisTickerPi	typeref:typename:int
getSubTickCount	qcustomplot.cpp	/^int QCPAxisTickerText::getSubTickCount(double tickStep)$/;"	f	class:QCPAxisTickerText	typeref:typename:int
getSubTickCount	qcustomplot.cpp	/^int QCPAxisTickerTime::getSubTickCount(double tickStep)$/;"	f	class:QCPAxisTickerTime	typeref:typename:int
getSubTickCount	qcustomplot.h	/^  virtual int getSubTickCount(double tickStep) Q_DECL_OVERRIDE;$/;"	p	class:QCPAxisTickerDateTime	typeref:typename:int
getSubTickCount	qcustomplot.h	/^  virtual int getSubTickCount(double tickStep) Q_DECL_OVERRIDE;$/;"	p	class:QCPAxisTickerLog	typeref:typename:int
getSubTickCount	qcustomplot.h	/^  virtual int getSubTickCount(double tickStep) Q_DECL_OVERRIDE;$/;"	p	class:QCPAxisTickerPi	typeref:typename:int
getSubTickCount	qcustomplot.h	/^  virtual int getSubTickCount(double tickStep) Q_DECL_OVERRIDE;$/;"	p	class:QCPAxisTickerText	typeref:typename:int
getSubTickCount	qcustomplot.h	/^  virtual int getSubTickCount(double tickStep) Q_DECL_OVERRIDE;$/;"	p	class:QCPAxisTickerTime	typeref:typename:int
getSubTickCount	qcustomplot.h	/^  virtual int getSubTickCount(double tickStep);$/;"	p	class:QCPAxisTicker	typeref:typename:int
getSubTickPen	qcustomplot.cpp	/^QPen QCPAxis::getSubTickPen() const$/;"	f	class:QCPAxis	typeref:typename:QPen
getSubTickPen	qcustomplot.h	/^  QPen getSubTickPen() const;$/;"	p	class:QCPAxis	typeref:typename:QPen
getTangentAngle	qcustomplot.cpp	/^double QCPSelectionDecoratorBracket::getTangentAngle(const QCPPlottableInterface1D *interface1d,/;"	f	class:QCPSelectionDecoratorBracket	typeref:typename:double
getTangentAngle	qcustomplot.h	/^  double getTangentAngle(const QCPPlottableInterface1D *interface1d, int dataIndex, int directio/;"	p	class:QCPSelectionDecoratorBracket	typeref:typename:double
getTextColor	qcustomplot.cpp	/^QColor QCPPlottableLegendItem::getTextColor() const$/;"	f	class:QCPPlottableLegendItem	typeref:typename:QColor
getTextColor	qcustomplot.h	/^  QColor getTextColor() const;$/;"	p	class:QCPPlottableLegendItem	typeref:typename:QColor
getTextDrawPoint	qcustomplot.cpp	/^QPointF QCPItemText::getTextDrawPoint(const QPointF &pos, const QRectF &rect, Qt::Alignment posi/;"	f	class:QCPItemText	typeref:typename:QPointF
getTextDrawPoint	qcustomplot.h	/^  QPointF getTextDrawPoint(const QPointF &pos, const QRectF &rect, Qt::Alignment positionAlignme/;"	p	class:QCPItemText	typeref:typename:QPointF
getTickLabel	qcustomplot.cpp	/^QString QCPAxisTicker::getTickLabel(double tick, const QLocale &locale, QChar formatChar, int pr/;"	f	class:QCPAxisTicker	typeref:typename:QString
getTickLabel	qcustomplot.cpp	/^QString QCPAxisTickerDateTime::getTickLabel(double tick, const QLocale &locale, QChar formatChar/;"	f	class:QCPAxisTickerDateTime	typeref:typename:QString
getTickLabel	qcustomplot.cpp	/^QString QCPAxisTickerPi::getTickLabel(double tick, const QLocale &locale, QChar formatChar, int /;"	f	class:QCPAxisTickerPi	typeref:typename:QString
getTickLabel	qcustomplot.cpp	/^QString QCPAxisTickerText::getTickLabel(double tick, const QLocale &locale, QChar formatChar, in/;"	f	class:QCPAxisTickerText	typeref:typename:QString
getTickLabel	qcustomplot.cpp	/^QString QCPAxisTickerTime::getTickLabel(double tick, const QLocale &locale, QChar formatChar, in/;"	f	class:QCPAxisTickerTime	typeref:typename:QString
getTickLabel	qcustomplot.h	/^  virtual QString getTickLabel(double tick, const QLocale &locale, QChar formatChar, int precisi/;"	p	class:QCPAxisTicker	typeref:typename:QString
getTickLabel	qcustomplot.h	/^  virtual QString getTickLabel(double tick, const QLocale &locale, QChar formatChar, int precisi/;"	p	class:QCPAxisTickerDateTime	typeref:typename:QString
getTickLabel	qcustomplot.h	/^  virtual QString getTickLabel(double tick, const QLocale &locale, QChar formatChar, int precisi/;"	p	class:QCPAxisTickerPi	typeref:typename:QString
getTickLabel	qcustomplot.h	/^  virtual QString getTickLabel(double tick, const QLocale &locale, QChar formatChar, int precisi/;"	p	class:QCPAxisTickerText	typeref:typename:QString
getTickLabel	qcustomplot.h	/^  virtual QString getTickLabel(double tick, const QLocale &locale, QChar formatChar, int precisi/;"	p	class:QCPAxisTickerTime	typeref:typename:QString
getTickLabelColor	qcustomplot.cpp	/^QColor QCPAxis::getTickLabelColor() const$/;"	f	class:QCPAxis	typeref:typename:QColor
getTickLabelColor	qcustomplot.h	/^  QColor getTickLabelColor() const;$/;"	p	class:QCPAxis	typeref:typename:QColor
getTickLabelData	qcustomplot.cpp	/^QCPAxisPainterPrivate::TickLabelData QCPAxisPainterPrivate::getTickLabelData(const QFont &font, /;"	f	class:QCPAxisPainterPrivate	typeref:typename:QCPAxisPainterPrivate::TickLabelData
getTickLabelData	qcustomplot.h	/^  virtual TickLabelData getTickLabelData(const QFont &font, const QString &text) const;$/;"	p	class:QCPAxisPainterPrivate	typeref:typename:TickLabelData
getTickLabelDrawOffset	qcustomplot.cpp	/^QPointF QCPAxisPainterPrivate::getTickLabelDrawOffset(const TickLabelData &labelData) const$/;"	f	class:QCPAxisPainterPrivate	typeref:typename:QPointF
getTickLabelDrawOffset	qcustomplot.h	/^  virtual QPointF getTickLabelDrawOffset(const TickLabelData &labelData) const;$/;"	p	class:QCPAxisPainterPrivate	typeref:typename:QPointF
getTickLabelFont	qcustomplot.cpp	/^QFont QCPAxis::getTickLabelFont() const$/;"	f	class:QCPAxis	typeref:typename:QFont
getTickLabelFont	qcustomplot.h	/^  QFont getTickLabelFont() const;$/;"	p	class:QCPAxis	typeref:typename:QFont
getTickPen	qcustomplot.cpp	/^QPen QCPAxis::getTickPen() const$/;"	f	class:QCPAxis	typeref:typename:QPen
getTickPen	qcustomplot.h	/^  QPen getTickPen() const;$/;"	p	class:QCPAxis	typeref:typename:QPen
getTickStep	qcustomplot.cpp	/^double QCPAxisTicker::getTickStep(const QCPRange &range)$/;"	f	class:QCPAxisTicker	typeref:typename:double
getTickStep	qcustomplot.cpp	/^double QCPAxisTickerDateTime::getTickStep(const QCPRange &range)$/;"	f	class:QCPAxisTickerDateTime	typeref:typename:double
getTickStep	qcustomplot.cpp	/^double QCPAxisTickerFixed::getTickStep(const QCPRange &range)$/;"	f	class:QCPAxisTickerFixed	typeref:typename:double
getTickStep	qcustomplot.cpp	/^double QCPAxisTickerLog::getTickStep(const QCPRange &range)$/;"	f	class:QCPAxisTickerLog	typeref:typename:double
getTickStep	qcustomplot.cpp	/^double QCPAxisTickerPi::getTickStep(const QCPRange &range)$/;"	f	class:QCPAxisTickerPi	typeref:typename:double
getTickStep	qcustomplot.cpp	/^double QCPAxisTickerText::getTickStep(const QCPRange &range)$/;"	f	class:QCPAxisTickerText	typeref:typename:double
getTickStep	qcustomplot.cpp	/^double QCPAxisTickerTime::getTickStep(const QCPRange &range)$/;"	f	class:QCPAxisTickerTime	typeref:typename:double
getTickStep	qcustomplot.h	/^  virtual double getTickStep(const QCPRange &range) Q_DECL_OVERRIDE;$/;"	p	class:QCPAxisTickerDateTime	typeref:typename:double
getTickStep	qcustomplot.h	/^  virtual double getTickStep(const QCPRange &range) Q_DECL_OVERRIDE;$/;"	p	class:QCPAxisTickerFixed	typeref:typename:double
getTickStep	qcustomplot.h	/^  virtual double getTickStep(const QCPRange &range) Q_DECL_OVERRIDE;$/;"	p	class:QCPAxisTickerLog	typeref:typename:double
getTickStep	qcustomplot.h	/^  virtual double getTickStep(const QCPRange &range) Q_DECL_OVERRIDE;$/;"	p	class:QCPAxisTickerPi	typeref:typename:double
getTickStep	qcustomplot.h	/^  virtual double getTickStep(const QCPRange &range) Q_DECL_OVERRIDE;$/;"	p	class:QCPAxisTickerText	typeref:typename:double
getTickStep	qcustomplot.h	/^  virtual double getTickStep(const QCPRange &range) Q_DECL_OVERRIDE;$/;"	p	class:QCPAxisTickerTime	typeref:typename:double
getTickStep	qcustomplot.h	/^  virtual double getTickStep(const QCPRange &range);$/;"	p	class:QCPAxisTicker	typeref:typename:double
getTraverse	qcustomplot.cpp	/^bool QCPCurve::getTraverse(double prevKey, double prevValue, double key, double value, double ke/;"	f	class:QCPCurve	typeref:typename:bool
getTraverse	qcustomplot.h	/^  bool getTraverse(double prevKey, double prevValue, double key, double value, double keyMin, do/;"	p	class:QCPCurve	typeref:typename:bool
getTraverseCornerPoints	qcustomplot.cpp	/^void QCPCurve::getTraverseCornerPoints(int prevRegion, int currentRegion, double keyMin, double /;"	f	class:QCPCurve	typeref:typename:void
getTraverseCornerPoints	qcustomplot.h	/^  void getTraverseCornerPoints(int prevRegion, int currentRegion, double keyMin, double valueMax/;"	p	class:QCPCurve	typeref:typename:void
getValueRange	qcustomplot.cpp	/^QCPRange QCPBars::getValueRange(bool &foundRange, QCP::SignDomain inSignDomain, const QCPRange &/;"	f	class:QCPBars	typeref:typename:QCPRange
getValueRange	qcustomplot.cpp	/^QCPRange QCPColorMap::getValueRange(bool &foundRange, QCP::SignDomain inSignDomain, const QCPRan/;"	f	class:QCPColorMap	typeref:typename:QCPRange
getValueRange	qcustomplot.cpp	/^QCPRange QCPCurve::getValueRange(bool &foundRange, QCP::SignDomain inSignDomain, const QCPRange /;"	f	class:QCPCurve	typeref:typename:QCPRange
getValueRange	qcustomplot.cpp	/^QCPRange QCPErrorBars::getValueRange(bool &foundRange, QCP::SignDomain inSignDomain, const QCPRa/;"	f	class:QCPErrorBars	typeref:typename:QCPRange
getValueRange	qcustomplot.cpp	/^QCPRange QCPFinancial::getValueRange(bool &foundRange, QCP::SignDomain inSignDomain, const QCPRa/;"	f	class:QCPFinancial	typeref:typename:QCPRange
getValueRange	qcustomplot.cpp	/^QCPRange QCPGraph::getValueRange(bool &foundRange, QCP::SignDomain inSignDomain, const QCPRange /;"	f	class:QCPGraph	typeref:typename:QCPRange
getValueRange	qcustomplot.cpp	/^QCPRange QCPStatisticalBox::getValueRange(bool &foundRange, QCP::SignDomain inSignDomain, const /;"	f	class:QCPStatisticalBox	typeref:typename:QCPRange
getValueRange	qcustomplot.h	/^  virtual QCPRange getValueRange(bool &foundRange, QCP::SignDomain inSignDomain=QCP::sdBoth, con/;"	p	class:QCPAbstractPlottable	typeref:typename:QCPRange
getValueRange	qcustomplot.h	/^  virtual QCPRange getValueRange(bool &foundRange, QCP::SignDomain inSignDomain=QCP::sdBoth, con/;"	p	class:QCPBars	typeref:typename:QCPRange
getValueRange	qcustomplot.h	/^  virtual QCPRange getValueRange(bool &foundRange, QCP::SignDomain inSignDomain=QCP::sdBoth, con/;"	p	class:QCPColorMap	typeref:typename:QCPRange
getValueRange	qcustomplot.h	/^  virtual QCPRange getValueRange(bool &foundRange, QCP::SignDomain inSignDomain=QCP::sdBoth, con/;"	p	class:QCPCurve	typeref:typename:QCPRange
getValueRange	qcustomplot.h	/^  virtual QCPRange getValueRange(bool &foundRange, QCP::SignDomain inSignDomain=QCP::sdBoth, con/;"	p	class:QCPErrorBars	typeref:typename:QCPRange
getValueRange	qcustomplot.h	/^  virtual QCPRange getValueRange(bool &foundRange, QCP::SignDomain inSignDomain=QCP::sdBoth, con/;"	p	class:QCPFinancial	typeref:typename:QCPRange
getValueRange	qcustomplot.h	/^  virtual QCPRange getValueRange(bool &foundRange, QCP::SignDomain inSignDomain=QCP::sdBoth, con/;"	p	class:QCPGraph	typeref:typename:QCPRange
getValueRange	qcustomplot.h	/^  virtual QCPRange getValueRange(bool &foundRange, QCP::SignDomain inSignDomain=QCP::sdBoth, con/;"	p	class:QCPStatisticalBox	typeref:typename:QCPRange
getVisibleDataBounds	qcustomplot.cpp	/^void QCPBars::getVisibleDataBounds(QCPBarsDataContainer::const_iterator &begin, QCPBarsDataConta/;"	f	class:QCPBars	typeref:typename:void
getVisibleDataBounds	qcustomplot.cpp	/^void QCPErrorBars::getVisibleDataBounds(QCPErrorBarsDataContainer::const_iterator &begin, QCPErr/;"	f	class:QCPErrorBars	typeref:typename:void
getVisibleDataBounds	qcustomplot.cpp	/^void QCPFinancial::getVisibleDataBounds(QCPFinancialDataContainer::const_iterator &begin, QCPFin/;"	f	class:QCPFinancial	typeref:typename:void
getVisibleDataBounds	qcustomplot.cpp	/^void QCPGraph::getVisibleDataBounds(QCPGraphDataContainer::const_iterator &begin, QCPGraphDataCo/;"	f	class:QCPGraph	typeref:typename:void
getVisibleDataBounds	qcustomplot.cpp	/^void QCPStatisticalBox::getVisibleDataBounds(QCPStatisticalBoxDataContainer::const_iterator &beg/;"	f	class:QCPStatisticalBox	typeref:typename:void
getVisibleDataBounds	qcustomplot.h	/^  void getVisibleDataBounds(QCPBarsDataContainer::const_iterator &begin, QCPBarsDataContainer::c/;"	p	class:QCPBars	typeref:typename:void
getVisibleDataBounds	qcustomplot.h	/^  void getVisibleDataBounds(QCPErrorBarsDataContainer::const_iterator &begin, QCPErrorBarsDataCo/;"	p	class:QCPErrorBars	typeref:typename:void
getVisibleDataBounds	qcustomplot.h	/^  void getVisibleDataBounds(QCPFinancialDataContainer::const_iterator &begin, QCPFinancialDataCo/;"	p	class:QCPFinancial	typeref:typename:void
getVisibleDataBounds	qcustomplot.h	/^  void getVisibleDataBounds(QCPGraphDataContainer::const_iterator &begin, QCPGraphDataContainer:/;"	p	class:QCPGraph	typeref:typename:void
getVisibleDataBounds	qcustomplot.h	/^  void getVisibleDataBounds(QCPStatisticalBoxDataContainer::const_iterator &begin, QCPStatistica/;"	p	class:QCPStatisticalBox	typeref:typename:void
getWhiskerBackboneLines	qcustomplot.cpp	/^QVector<QLineF> QCPStatisticalBox::getWhiskerBackboneLines(QCPStatisticalBoxDataContainer::const/;"	f	class:QCPStatisticalBox	typeref:typename:QVector<QLineF>
getWhiskerBackboneLines	qcustomplot.h	/^  QVector<QLineF> getWhiskerBackboneLines(QCPStatisticalBoxDataContainer::const_iterator it) con/;"	p	class:QCPStatisticalBox	typeref:typename:QVector<QLineF>
getWhiskerBarLines	qcustomplot.cpp	/^QVector<QLineF> QCPStatisticalBox::getWhiskerBarLines(QCPStatisticalBoxDataContainer::const_iter/;"	f	class:QCPStatisticalBox	typeref:typename:QVector<QLineF>
getWhiskerBarLines	qcustomplot.h	/^  QVector<QLineF> getWhiskerBarLines(QCPStatisticalBoxDataContainer::const_iterator it) const;$/;"	p	class:QCPStatisticalBox	typeref:typename:QVector<QLineF>
get_allocator	json.hpp	/^    static allocator_type get_allocator()$/;"	f	class:nlohmann::basic_json	typeref:typename:allocator_type
get_allocator	spdlog/fmt/bundled/format.h	/^    Allocator get_allocator() const$/;"	f	class:fmt::internal::MemoryBuffer	typeref:typename:Allocator
get_and_create	json.hpp	/^    BasicJsonType& get_and_create(BasicJsonType& j) const$/;"	f	class:nlohmann::json_pointer	typeref:typename:BasicJsonType &
get_arg	spdlog/fmt/bundled/core.h	/^    format_arg get_arg(basic_string_view<char_type> name);$/;"	p	class:basic_format_context	typeref:typename:format_arg
get_arg	spdlog/fmt/bundled/core.h	/^    format_arg get_arg(unsigned arg_id)$/;"	f	class:basic_format_context	typeref:typename:format_arg
get_arg	spdlog/fmt/bundled/core.h	/^    format_arg get_arg(unsigned arg_id)$/;"	f	class:internal::context_base	typeref:typename:format_arg
get_arg	spdlog/fmt/bundled/format.h	/^    Arg get_arg(unsigned arg_index, const char *&error)$/;"	f	class:fmt::internal::FormatterBase	typeref:typename:Arg
get_arg	spdlog/fmt/bundled/format.h	/^    internal::Arg get_arg(BasicStringRef<Char> arg_name, const char *&error);$/;"	p	class:fmt::BasicFormatter	typeref:typename:internal::Arg
get_arg	spdlog/fmt/bundled/format.h	/^inline internal::Arg BasicFormatter<Char, AF>::get_arg(BasicStringRef<Char> arg_name, const char/;"	f	class:fmt::BasicFormatter	typeref:typename:internal::Arg
get_arg	spdlog/fmt/bundled/printf.h	/^    internal::Arg get_arg(const Char *s, unsigned arg_index = (std::numeric_limits<unsigned>::ma/;"	p	class:fmt::PrintfFormatter	typeref:typename:internal::Arg
get_arg	spdlog/fmt/bundled/printf.h	/^internal::Arg PrintfFormatter<Char, AF>::get_arg(const Char *s, unsigned arg_index)$/;"	f	class:fmt::PrintfFormatter	typeref:typename:internal::Arg
get_arithmetic_value	json.hpp	/^void get_arithmetic_value(const BasicJsonType& j, ArithmeticType& val)$/;"	f	namespace:nlohmann::detail	typeref:typename:void
get_cached_offset	spdlog/details/pattern_formatter.h	/^    int get_cached_offset(const log_msg &msg, const std::tm &tm_time)$/;"	f	class:spdlog::details::SPDLOG_FINAL	typeref:typename:int
get_cached_offset	spdlog/details/pattern_formatter_impl.h	/^    int get_cached_offset(const log_msg &msg, const std::tm &tm_time)$/;"	f	class:spdlog::details::SPDLOG_FINAL	typeref:typename:int
get_cached_power	spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC fp get_cached_power(int min_exponent, int &pow10_exponent)$/;"	f	namespace:internal	typeref:typename:FMT_FUNC fp
get_cached_power_for_binary_exponent	json.hpp	/^inline cached_power get_cached_power_for_binary_exponent(int e)$/;"	f	namespace:nlohmann::detail::dtoa_impl	typeref:typename:cached_power
get_cbor_array	json.hpp	/^    BasicJsonType get_cbor_array(const NumberType len)$/;"	f	class:nlohmann::detail::binary_reader	typeref:typename:BasicJsonType
get_cbor_object	json.hpp	/^    BasicJsonType get_cbor_object(const NumberType len)$/;"	f	class:nlohmann::detail::binary_reader	typeref:typename:BasicJsonType
get_cbor_string	json.hpp	/^    string_t get_cbor_string()$/;"	f	class:nlohmann::detail::binary_reader	typeref:typename:string_t
get_character	json.hpp	/^    std::char_traits<char>::int_type get_character() noexcept override$/;"	f	class:nlohmann::detail::input_buffer_adapter	typeref:typename:std::char_traits<char>::int_type
get_character	json.hpp	/^    std::char_traits<char>::int_type get_character() override$/;"	f	class:nlohmann::detail::input_stream_adapter	typeref:typename:std::char_traits<char>::int_type
get_character	json.hpp	/^    virtual std::char_traits<char>::int_type get_character() = 0;$/;"	p	struct:nlohmann::detail::input_adapter_protocol	typeref:typename:std::char_traits<char>::int_type
get_checked	json.hpp	/^    BasicJsonType& get_checked(BasicJsonType* ptr) const$/;"	f	class:nlohmann::json_pointer	typeref:typename:BasicJsonType &
get_checked	json.hpp	/^    const BasicJsonType& get_checked(const BasicJsonType* ptr) const$/;"	f	class:nlohmann::json_pointer	typeref:typename:const BasicJsonType &
get_codepoint	json.hpp	/^    int get_codepoint()$/;"	f	class:nlohmann::detail::lexer	typeref:typename:int
get_container	spdlog/fmt/bundled/core.h	/^inline Container &get_container(std::back_insert_iterator<Container> it)$/;"	f	namespace:internal	typeref:typename:Container &
get_decimal_point	json.hpp	/^    static char get_decimal_point() noexcept$/;"	f	class:nlohmann::detail::lexer	typeref:typename:char
get_error_message	json.hpp	/^    constexpr const char* get_error_message() const noexcept$/;"	f	class:nlohmann::detail::lexer	typeref:typename:const char *
get_ignore_noop	json.hpp	/^    int get_ignore_noop()$/;"	f	class:nlohmann::detail::binary_reader	typeref:typename:int
get_impl	json.hpp	/^    boolean_t get_impl(boolean_t* \/*unused*\/) const$/;"	f	class:nlohmann::basic_json	typeref:typename:boolean_t
get_impl_ptr	json.hpp	/^    array_t* get_impl_ptr(array_t* \/*unused*\/) noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:array_t *
get_impl_ptr	json.hpp	/^    boolean_t* get_impl_ptr(boolean_t* \/*unused*\/) noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:boolean_t *
get_impl_ptr	json.hpp	/^    constexpr const array_t* get_impl_ptr(const array_t* \/*unused*\/) const noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:const array_t *
get_impl_ptr	json.hpp	/^    constexpr const boolean_t* get_impl_ptr(const boolean_t* \/*unused*\/) const noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:const boolean_t *
get_impl_ptr	json.hpp	/^    constexpr const number_float_t* get_impl_ptr(const number_float_t* \/*unused*\/) const noexc/;"	f	class:nlohmann::basic_json	typeref:typename:const number_float_t *
get_impl_ptr	json.hpp	/^    constexpr const number_integer_t* get_impl_ptr(const number_integer_t* \/*unused*\/) const n/;"	f	class:nlohmann::basic_json	typeref:typename:const number_integer_t *
get_impl_ptr	json.hpp	/^    constexpr const number_unsigned_t* get_impl_ptr(const number_unsigned_t* \/*unused*\/) const/;"	f	class:nlohmann::basic_json	typeref:typename:const number_unsigned_t *
get_impl_ptr	json.hpp	/^    constexpr const object_t* get_impl_ptr(const object_t* \/*unused*\/) const noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:const object_t *
get_impl_ptr	json.hpp	/^    constexpr const string_t* get_impl_ptr(const string_t* \/*unused*\/) const noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:const string_t *
get_impl_ptr	json.hpp	/^    number_float_t* get_impl_ptr(number_float_t* \/*unused*\/) noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:number_float_t *
get_impl_ptr	json.hpp	/^    number_integer_t* get_impl_ptr(number_integer_t* \/*unused*\/) noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:number_integer_t *
get_impl_ptr	json.hpp	/^    number_unsigned_t* get_impl_ptr(number_unsigned_t* \/*unused*\/) noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:number_unsigned_t *
get_impl_ptr	json.hpp	/^    object_t* get_impl_ptr(object_t* \/*unused*\/) noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:object_t *
get_impl_ptr	json.hpp	/^    string_t* get_impl_ptr(string_t* \/*unused*\/) noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:string_t *
get_indexes	spdlog/fmt/bundled/ranges.h	/^FMT_CONSTEXPR make_index_sequence<std::tuple_size<T>::value> get_indexes(T const &)$/;"	f	namespace:internal	typeref:typename:FMT_CONSTEXPR make_index_sequence<std::tuple_size<T>::value>
get_msgpack_array	json.hpp	/^    BasicJsonType get_msgpack_array(const NumberType len)$/;"	f	class:nlohmann::detail::binary_reader	typeref:typename:BasicJsonType
get_msgpack_object	json.hpp	/^    BasicJsonType get_msgpack_object(const NumberType len)$/;"	f	class:nlohmann::detail::binary_reader	typeref:typename:BasicJsonType
get_msgpack_string	json.hpp	/^    string_t get_msgpack_string()$/;"	f	class:nlohmann::detail::binary_reader	typeref:typename:string_t
get_number	json.hpp	/^    template<typename NumberType> NumberType get_number()$/;"	f	class:nlohmann::detail::binary_reader	typeref:typename:NumberType
get_number_float	json.hpp	/^    constexpr number_float_t get_number_float() const noexcept$/;"	f	class:nlohmann::detail::lexer	typeref:typename:number_float_t
get_number_integer	json.hpp	/^    constexpr number_integer_t get_number_integer() const noexcept$/;"	f	class:nlohmann::detail::lexer	typeref:typename:number_integer_t
get_number_unsigned	json.hpp	/^    constexpr number_unsigned_t get_number_unsigned() const noexcept$/;"	f	class:nlohmann::detail::lexer	typeref:typename:number_unsigned_t
get_packed_payload_length	protobuf-c/protobuf-c.c	/^get_packed_payload_length(const ProtobufCFieldDescriptor *field,$/;"	f	typeref:typename:size_t	file:
get_position	json.hpp	/^    constexpr std::size_t get_position() const noexcept$/;"	f	class:nlohmann::detail::lexer	typeref:typename:std::size_t
get_ptr	json.hpp	/^    PointerType get_ptr() noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:PointerType
get_ptr	json.hpp	/^    constexpr const PointerType get_ptr() const noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:const PointerType
get_ref	json.hpp	/^    ReferenceType get_ref() const$/;"	f	class:nlohmann::basic_json	typeref:typename:ReferenceType
get_ref	json.hpp	/^    ReferenceType get_ref()$/;"	f	class:nlohmann::basic_json	typeref:typename:ReferenceType
get_ref_impl	json.hpp	/^    static ReferenceType get_ref_impl(ThisType& obj)$/;"	f	class:nlohmann::basic_json	typeref:typename:ReferenceType
get_string	json.hpp	/^    string_t get_string(const NumberType len)$/;"	f	class:nlohmann::detail::binary_reader	typeref:typename:string_t
get_tag_size	protobuf-c/protobuf-c.c	/^get_tag_size(uint32_t number)$/;"	f	typeref:typename:size_t	file:
get_time	spdlog/details/pattern_formatter_impl.h	/^inline std::tm spdlog::pattern_formatter::get_time(details::log_msg &msg)$/;"	f	class:spdlog::pattern_formatter	typeref:typename:std::tm
get_time	spdlog/formatter.h	/^    std::tm get_time(details::log_msg &msg);$/;"	p	class:spdlog::SPDLOG_FINAL	typeref:typename:std::tm
get_time_	spdlog/details/pattern_formatter.h	/^    std::tm get_time_(const details::log_msg &msg)$/;"	f	class:spdlog::SPDLOG_FINAL	typeref:typename:std::tm
get_token	json.hpp	/^    token_type get_token()$/;"	f	class:nlohmann::detail::parser	typeref:typename:token_type
get_token_string	json.hpp	/^    std::string get_token_string() const$/;"	f	class:nlohmann::detail::lexer	typeref:typename:std::string
get_type	spdlog/fmt/bundled/core.h	/^struct get_type$/;"	s	namespace:internal
get_type_min_size	protobuf-c/protobuf-c.c	/^get_type_min_size(ProtobufCType type)$/;"	f	typeref:typename:unsigned	file:
get_types	spdlog/fmt/bundled/core.h	/^    static FMT_CONSTEXPR long long get_types()$/;"	f	class:format_arg_store	typeref:typename:FMT_CONSTEXPR long long
get_types	spdlog/fmt/bundled/core.h	/^FMT_CONSTEXPR unsigned long long get_types()$/;"	f	namespace:internal	typeref:typename:FMT_CONSTEXPR unsigned long long
get_ubjson_array	json.hpp	/^    BasicJsonType get_ubjson_array()$/;"	f	class:nlohmann::detail::binary_reader	typeref:typename:BasicJsonType
get_ubjson_object	json.hpp	/^    BasicJsonType get_ubjson_object()$/;"	f	class:nlohmann::detail::binary_reader	typeref:typename:BasicJsonType
get_ubjson_size_type	json.hpp	/^    std::pair<std::size_t, int> get_ubjson_size_type()$/;"	f	class:nlohmann::detail::binary_reader	typeref:typename:std::pair<std::size_t,int>
get_ubjson_string	json.hpp	/^    string_t get_ubjson_string(const bool get_char = true)$/;"	f	class:nlohmann::detail::binary_reader	typeref:typename:string_t
get_ubjson_value	json.hpp	/^    BasicJsonType get_ubjson_value(const int prefix)$/;"	f	class:nlohmann::detail::binary_reader	typeref:typename:BasicJsonType
get_unchecked	json.hpp	/^    BasicJsonType& get_unchecked(BasicJsonType* ptr) const$/;"	f	class:nlohmann::json_pointer	typeref:typename:BasicJsonType &
get_unchecked	json.hpp	/^    const BasicJsonType& get_unchecked(const BasicJsonType* ptr) const$/;"	f	class:nlohmann::json_pointer	typeref:typename:const BasicJsonType &
get_value	json.hpp	/^    constexpr difference_type get_value() const noexcept$/;"	f	class:nlohmann::detail::primitive_iterator_t	typeref:typename:difference_type
getpagesize	spdlog/fmt/bundled/posix.cc	/^long fmt::getpagesize() {$/;"	f	class:fmt	typeref:typename:long
getpagesize	spdlog/fmt/bundled/posix.h	/^long getpagesize();$/;"	p	namespace:fmt	typeref:typename:long
ghost_white	spdlog/fmt/bundled/colors.h	/^    ghost_white = 0xF8F8FF,             \/\/ rgb(248,248,255)$/;"	e	enum:color
gmtime	spdlog/details/os.h	/^inline std::tm gmtime()$/;"	f	namespace:spdlog::details::os	typeref:typename:std::tm
gmtime	spdlog/details/os.h	/^inline std::tm gmtime(const std::time_t &time_tt)$/;"	f	namespace:spdlog::details::os	typeref:typename:std::tm
gmtime	spdlog/fmt/bundled/time.h	/^inline std::tm gmtime(std::time_t time)$/;"	f	namespace:fmt	typeref:typename:std::tm
gmtime_r	spdlog/fmt/bundled/time.h	/^inline Null<> gmtime_r(...)$/;"	f	namespace:fmt::internal	typeref:typename:Null<>
gmtime_s	spdlog/fmt/bundled/time.h	/^inline Null<> gmtime_s(...)$/;"	f	namespace:fmt::internal	typeref:typename:Null<>
gold	spdlog/fmt/bundled/colors.h	/^    gold = 0xFFD700,                    \/\/ rgb(255,215,0)$/;"	e	enum:color
golden_rod	spdlog/fmt/bundled/colors.h	/^    golden_rod = 0xDAA520,              \/\/ rgb(218,165,32)$/;"	e	enum:color
google	qc-message.pb.cc	/^namespace google {$/;"	n	file:
google	qc-message.pb.h	/^namespace google {$/;"	n
gpCandy	qcustomplot.h	/^                        ,gpCandy     \/\/\/< Blue over pink to white$/;"	e	enum:QCPColorGradient::GradientPreset
gpCold	qcustomplot.h	/^                        ,gpCold      \/\/\/< Continuous lightness from black over icey colors to/;"	e	enum:QCPColorGradient::GradientPreset
gpGeography	qcustomplot.h	/^                        ,gpGeography \/\/\/< Colors suitable to represent different elevations o/;"	e	enum:QCPColorGradient::GradientPreset
gpGrayscale	qcustomplot.h	/^  enum GradientPreset { gpGrayscale  \/\/\/< Continuous lightness from black to white (suited fo/;"	e	enum:QCPColorGradient::GradientPreset
gpHot	qcustomplot.h	/^                        ,gpHot       \/\/\/< Continuous lightness from black over firey colors t/;"	e	enum:QCPColorGradient::GradientPreset
gpHues	qcustomplot.h	/^                        ,gpHues      \/\/\/< Full hue cycle, with highest and lowest color red (/;"	e	enum:QCPColorGradient::GradientPreset
gpIon	qcustomplot.h	/^                        ,gpIon       \/\/\/< Half hue spectrum from black over purple to blue an/;"	e	enum:QCPColorGradient::GradientPreset
gpJet	qcustomplot.h	/^                        ,gpJet       \/\/\/< Hue variation similar to a spectrum, often used in /;"	e	enum:QCPColorGradient::GradientPreset
gpNight	qcustomplot.h	/^                        ,gpNight     \/\/\/< Continuous lightness from black over weak blueish c/;"	e	enum:QCPColorGradient::GradientPreset
gpPolar	qcustomplot.h	/^                        ,gpPolar     \/\/\/< Colors suitable to emphasize polarity around the ce/;"	e	enum:QCPColorGradient::GradientPreset
gpSpectrum	qcustomplot.h	/^                        ,gpSpectrum  \/\/\/< An approximation of the visible light spectrum (cre/;"	e	enum:QCPColorGradient::GradientPreset
gpThermal	qcustomplot.h	/^                        ,gpThermal   \/\/\/< Colors suitable for thermal imaging, ranging from d/;"	e	enum:QCPColorGradient::GradientPreset
gradient	qcustomplot.h	/^  QCPColorGradient gradient() const { return mGradient; }$/;"	f	class:QCPColorMap	typeref:typename:QCPColorGradient
gradient	qcustomplot.h	/^  QCPColorGradient gradient() const { return mGradient; }$/;"	f	class:QCPColorScale	typeref:typename:QCPColorGradient
gradient	qcustomplot.h	/^  Q_PROPERTY(QCPColorGradient gradient READ gradient WRITE setGradient NOTIFY gradientChanged)$/;"	p	class:QCPColorMap	typeref:typename:QCPColorGradient
gradient	qcustomplot.h	/^  Q_PROPERTY(QCPColorGradient gradient READ gradient WRITE setGradient NOTIFY gradientChanged)$/;"	p	class:QCPColorScale	typeref:typename:QCPColorGradient
gradientChanged	qcustomplot.h	/^  void gradientChanged(const QCPColorGradient &newGradient);$/;"	S	class:QCPColorMap	typeref:typename:void
gradientChanged	qcustomplot.h	/^  void gradientChanged(const QCPColorGradient &newGradient);$/;"	S	class:QCPColorScale	typeref:typename:void
gradientChanged	qcustomplot.h	/^  void gradientChanged(const QCPColorGradient &newGradient);$/;"	p	class:QCPColorMap	typeref:typename:void
gradientChanged	qcustomplot.h	/^  void gradientChanged(const QCPColorGradient &newGradient);$/;"	p	class:QCPColorScale	typeref:typename:void
graph	qcustomplot.cpp	/^QCPGraph *QCustomPlot::graph() const$/;"	f	class:QCustomPlot	typeref:typename:QCPGraph *
graph	qcustomplot.cpp	/^QCPGraph *QCustomPlot::graph(int index) const$/;"	f	class:QCustomPlot	typeref:typename:QCPGraph *
graph	qcustomplot.h	/^  QCPGraph *graph() const { return mGraph; }$/;"	f	class:QCPItemTracer	typeref:typename:QCPGraph *
graph	qcustomplot.h	/^  QCPGraph *graph() const;$/;"	p	class:QCustomPlot	typeref:typename:QCPGraph *
graph	qcustomplot.h	/^  QCPGraph *graph(int index) const;$/;"	p	class:QCustomPlot	typeref:typename:QCPGraph *
graphCount	qcustomplot.cpp	/^int QCustomPlot::graphCount() const$/;"	f	class:QCustomPlot	typeref:typename:int
graphCount	qcustomplot.h	/^  int graphCount() const;$/;"	p	class:QCustomPlot	typeref:typename:int
graphKey	qcustomplot.h	/^  Q_PROPERTY(double graphKey READ graphKey WRITE setGraphKey)$/;"	p	class:QCPItemTracer	typeref:typename:double
graphKey	qcustomplot.h	/^  double graphKey() const { return mGraphKey; }$/;"	f	class:QCPItemTracer	typeref:typename:double
graphs	qcustomplot.cpp	/^QList<QCPGraph*> QCPAxis::graphs() const$/;"	f	class:QCPAxis	typeref:typename:QList<QCPGraph * >
graphs	qcustomplot.cpp	/^QList<QCPGraph*> QCPAxisRect::graphs() const$/;"	f	class:QCPAxisRect	typeref:typename:QList<QCPGraph * >
graphs	qcustomplot.h	/^  QList<QCPGraph*> graphs() const;$/;"	p	class:QCPAxis	typeref:typename:QList<QCPGraph * >
graphs	qcustomplot.h	/^  QList<QCPGraph*> graphs() const;$/;"	p	class:QCPAxisRect	typeref:typename:QList<QCPGraph * >
gray	spdlog/fmt/bundled/colors.h	/^    gray = 0x808080,                    \/\/ rgb(128,128,128)$/;"	e	enum:color
green	spdlog/fmt/bundled/colors.h	/^    green = 0x008000,                   \/\/ rgb(0,128,0)$/;"	e	enum:color
green	spdlog/fmt/bundled/core.h	/^    green,$/;"	e	enum:color
green	spdlog/sinks/ansicolor_sink.h	/^    const std::string green = "\\033[32m";$/;"	m	class:spdlog::sinks::ansicolor_sink	typeref:typename:const std::string
green_yellow	spdlog/fmt/bundled/colors.h	/^    green_yellow = 0xADFF2F,            \/\/ rgb(173,255,47)$/;"	e	enum:color
grid	qcustomplot.h	/^  QCPGrid *grid() const { return mGrid; }$/;"	f	class:QCPAxis	typeref:typename:QCPGrid *
grisu2	json.hpp	/^inline void grisu2(char* buf, int& len, int& decimal_exponent,$/;"	f	namespace:nlohmann::detail::dtoa_impl	typeref:typename:void
grisu2	json.hpp	/^void grisu2(char* buf, int& len, int& decimal_exponent, FloatType value)$/;"	f	namespace:nlohmann::detail::dtoa_impl	typeref:typename:void
grisu2_digit_gen	json.hpp	/^inline void grisu2_digit_gen(char* buffer, int& length, int& decimal_exponent,$/;"	f	namespace:nlohmann::detail::dtoa_impl	typeref:typename:void
grisu2_round	json.hpp	/^inline void grisu2_round(char* buf, int len, uint64_t dist, uint64_t delta,$/;"	f	namespace:nlohmann::detail::dtoa_impl	typeref:typename:void
grow	spdlog/fmt/bundled/core.h	/^    virtual void grow(std::size_t capacity) = 0;$/;"	p	class:internal::basic_buffer	typeref:typename:void
grow	spdlog/fmt/bundled/core.h	/^    void grow(std::size_t capacity) FMT_OVERRIDE$/;"	f	class:internal::container_buffer	typeref:typename:void
grow	spdlog/fmt/bundled/format-inl.h	/^void basic_fixed_buffer<Char>::grow(std::size_t)$/;"	f	class:basic_fixed_buffer	typeref:typename:void
grow	spdlog/fmt/bundled/format.cc	/^template void internal::FixedBuffer<char>::grow(std::size_t);$/;"	p	class:fmt::internal::FixedBuffer	typeref:typename:void	file:
grow	spdlog/fmt/bundled/format.cc	/^template void internal::FixedBuffer<wchar_t>::grow(std::size_t);$/;"	p	class:fmt::internal::FixedBuffer	typeref:typename:void	file:
grow	spdlog/fmt/bundled/format.cc	/^void internal::FixedBuffer<Char>::grow(std::size_t) {$/;"	f	class:fmt::internal::FixedBuffer	typeref:typename:void
grow	spdlog/fmt/bundled/format.h	/^    FMT_API void grow(std::size_t size) FMT_OVERRIDE;$/;"	p	class:fmt::internal::FixedBuffer	typeref:typename:FMT_API void
grow	spdlog/fmt/bundled/format.h	/^    virtual void grow(std::size_t size) = 0;$/;"	p	class:fmt::Buffer	typeref:typename:void
grow	spdlog/fmt/bundled/format.h	/^    void grow(std::size_t size) FMT_OVERRIDE;$/;"	p	class:fmt::internal::MemoryBuffer	typeref:typename:void
grow	spdlog/fmt/bundled/format.h	/^void MemoryBuffer<T, SIZE, Allocator>::grow(std::size_t size)$/;"	f	class:fmt::internal::MemoryBuffer	typeref:typename:void
grow_buffer	spdlog/fmt/bundled/format.h	/^    CharPtr grow_buffer(std::size_t n)$/;"	f	class:fmt::BasicWriter	typeref:typename:CharPtr
gyro_x	simple.pb-c.h	/^  float gyro_x;$/;"	m	struct:_ToHi	typeref:typename:float
gyro_x	simple.proto	/^    optional float gyro_x = 8;$/;"	f
gyro_y	simple.pb-c.h	/^  float gyro_y;$/;"	m	struct:_ToHi	typeref:typename:float
gyro_y	simple.proto	/^    optional float gyro_y = 9;$/;"	f
gyro_z	simple.pb-c.h	/^  float gyro_z;$/;"	m	struct:_ToHi	typeref:typename:float
gyro_z	simple.proto	/^    optional float gyro_z = 10;	$/;"	f
h	stb_image.h	/^      int h,v;$/;"	m	struct:__anon84e4e8860608::__anon84e4e8860708	typeref:typename:int
h	stb_image.h	/^   int w,h;$/;"	m	struct:__anon84e4e8861108	typeref:typename:int
h2	stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon84e4e8860608::__anon84e4e8860708	typeref:typename:int
ha	stb_image.h	/^      int hd,ha;$/;"	m	struct:__anon84e4e8860608::__anon84e4e8860708	typeref:typename:int
handle	spdlog/details/console_globals.h	/^    static HANDLE handle()$/;"	f	struct:spdlog::details::console_stderr	typeref:typename:HANDLE
handle	spdlog/details/console_globals.h	/^    static HANDLE handle()$/;"	f	struct:spdlog::details::console_stdout	typeref:typename:HANDLE
handle	spdlog/fmt/bundled/core.h	/^        explicit handle(internal::custom_value<Context> custom)$/;"	f	class:basic_format_arg::handle
handle	spdlog/fmt/bundled/core.h	/^    class handle$/;"	c	class:basic_format_arg
handle	spdlog/fmt/bundled/format-inl.h	/^        int handle(char *message)$/;"	f	class:__anonb519b34f0110::safe_strerror::dispatcher	typeref:typename:int
handle	spdlog/fmt/bundled/format-inl.h	/^        int handle(int result)$/;"	f	class:__anonb519b34f0110::safe_strerror::dispatcher	typeref:typename:int
handle	spdlog/fmt/bundled/format-inl.h	/^        int handle(internal::null<>)$/;"	f	class:__anonb519b34f0110::safe_strerror::dispatcher	typeref:typename:int
handle	spdlog/fmt/bundled/format.cc	/^    int handle(char *message) {$/;"	f	class:fmt::__anonf3b7881d0110::safe_strerror::StrError	typeref:typename:int	file:
handle	spdlog/fmt/bundled/format.cc	/^    int handle(int result) {$/;"	f	class:fmt::__anonf3b7881d0110::safe_strerror::StrError	typeref:typename:int	file:
handle	spdlog/fmt/bundled/format.cc	/^    int handle(internal::Null<>) {$/;"	f	class:fmt::__anonf3b7881d0110::safe_strerror::StrError	typeref:typename:int	file:
handle	spdlog/fmt/bundled/time.h	/^        bool handle(internal::Null<>)$/;"	f	struct:fmt::gmtime::GMTime	typeref:typename:bool
handle	spdlog/fmt/bundled/time.h	/^        bool handle(internal::Null<>)$/;"	f	struct:fmt::localtime::LocalTime	typeref:typename:bool
handle	spdlog/fmt/bundled/time.h	/^        bool handle(std::tm *tm)$/;"	f	struct:fmt::gmtime::GMTime	typeref:typename:bool
handle	spdlog/fmt/bundled/time.h	/^        bool handle(std::tm *tm)$/;"	f	struct:fmt::localtime::LocalTime	typeref:typename:bool
handle_accept	asio-server.h	/^        void handle_accept(typename T::pointer new_session,$/;"	f	class:ASIOServer	typeref:typename:void
handle_accept	mainwindow.cpp	/^void MainWindow::handle_accept(typename LicenseSession::pointer new_session,$/;"	f	class:MainWindow	typeref:typename:void
handle_accept	mainwindow.h	/^    void handle_accept(typename LicenseSession::pointer new_session,$/;"	p	class:MainWindow	typeref:typename:void
handle_flag	spdlog/details/pattern_formatter_impl.h	/^inline void spdlog::pattern_formatter::handle_flag(char flag)$/;"	f	class:spdlog::pattern_formatter	typeref:typename:void
handle_flag	spdlog/formatter.h	/^    void handle_flag(char flag);$/;"	p	class:spdlog::SPDLOG_FINAL	typeref:typename:void
handle_flag_	spdlog/details/pattern_formatter.h	/^    void handle_flag_(char flag)$/;"	f	class:spdlog::SPDLOG_FINAL	typeref:typename:void
handle_flush_interval	spdlog/details/async_log_helper.h	/^    void handle_flush_interval();$/;"	p	class:spdlog::details::async_log_helper	typeref:typename:void
handle_flush_interval	spdlog/details/async_log_helper.h	/^inline void spdlog::details::async_log_helper::handle_flush_interval()$/;"	f	class:spdlog::details::async_log_helper	typeref:typename:void
hasAnchor	qcustomplot.cpp	/^bool QCPAbstractItem::hasAnchor(const QString &name) const$/;"	f	class:QCPAbstractItem	typeref:typename:bool
hasAnchor	qcustomplot.h	/^  bool hasAnchor(const QString &name) const;$/;"	p	class:QCPAbstractItem	typeref:typename:bool
hasElement	qcustomplot.cpp	/^bool QCPLayoutGrid::hasElement(int row, int column)$/;"	f	class:QCPLayoutGrid	typeref:typename:bool
hasElement	qcustomplot.h	/^  bool hasElement(int row, int column);$/;"	p	class:QCPLayoutGrid	typeref:typename:bool
hasInvalidatedPaintBuffers	qcustomplot.cpp	/^bool QCustomPlot::hasInvalidatedPaintBuffers()$/;"	f	class:QCustomPlot	typeref:typename:bool
hasInvalidatedPaintBuffers	qcustomplot.h	/^  bool hasInvalidatedPaintBuffers();$/;"	p	class:QCustomPlot	typeref:typename:bool
hasItem	qcustomplot.cpp	/^bool QCPLegend::hasItem(QCPAbstractLegendItem *item) const$/;"	f	class:QCPLegend	typeref:typename:bool
hasItem	qcustomplot.cpp	/^bool QCustomPlot::hasItem(QCPAbstractItem *item) const$/;"	f	class:QCustomPlot	typeref:typename:bool
hasItem	qcustomplot.h	/^  bool hasItem(QCPAbstractItem *item) const;$/;"	p	class:QCustomPlot	typeref:typename:bool
hasItem	qcustomplot.h	/^  bool hasItem(QCPAbstractLegendItem *item) const;$/;"	p	class:QCPLegend	typeref:typename:bool
hasItemWithPlottable	qcustomplot.cpp	/^bool QCPLegend::hasItemWithPlottable(const QCPAbstractPlottable *plottable) const$/;"	f	class:QCPLegend	typeref:typename:bool
hasItemWithPlottable	qcustomplot.h	/^  bool hasItemWithPlottable(const QCPAbstractPlottable *plottable) const;$/;"	p	class:QCPLegend	typeref:typename:bool
hasPlottable	qcustomplot.cpp	/^bool QCustomPlot::hasPlottable(QCPAbstractPlottable *plottable) const$/;"	f	class:QCustomPlot	typeref:typename:bool
hasPlottable	qcustomplot.h	/^  bool hasPlottable(QCPAbstractPlottable *plottable) const;$/;"	p	class:QCustomPlot	typeref:typename:bool
has_acc_decrease	simple.pb-c.h	/^  protobuf_c_boolean has_acc_decrease;$/;"	m	struct:_SmoothMotorControlDeprecated	typeref:typename:protobuf_c_boolean
has_accx	simple.pb-c.h	/^  protobuf_c_boolean has_accx;$/;"	m	struct:_ToHi	typeref:typename:protobuf_c_boolean
has_accy	simple.pb-c.h	/^  protobuf_c_boolean has_accy;$/;"	m	struct:_ToHi	typeref:typename:protobuf_c_boolean
has_accz	simple.pb-c.h	/^  protobuf_c_boolean has_accz;$/;"	m	struct:_ToHi	typeref:typename:protobuf_c_boolean
has_adc_interval	simple.pb-c.h	/^  protobuf_c_boolean has_adc_interval;$/;"	m	struct:_SmoothMotorControlDeprecated	typeref:typename:protobuf_c_boolean
has_audio	qc-message.pb.h	/^  bool has_audio() const;$/;"	p	class:Protocol	typeref:typename:bool
has_audio	qc-message.pb.h	/^inline bool Protocol::has_audio() const {$/;"	f	class:Protocol	typeref:typename:bool
has_audio	simple.pb-c.h	/^  protobuf_c_boolean has_audio;$/;"	m	struct:_ToHi	typeref:typename:protobuf_c_boolean
has_audio	simple.pb-c.h	/^  protobuf_c_boolean has_audio;$/;"	m	struct:_ToHost	typeref:typename:protobuf_c_boolean
has_auto_charge_control	simple.pb-c.h	/^  protobuf_c_boolean has_auto_charge_control;$/;"	m	struct:_ToSt	typeref:typename:protobuf_c_boolean
has_auto_charge_step	simple.pb-c.h	/^  protobuf_c_boolean has_auto_charge_step;$/;"	m	struct:_ToHi	typeref:typename:protobuf_c_boolean
has_bandwidth_by_hi	simple.pb-c.h	/^  protobuf_c_boolean has_bandwidth_by_hi;$/;"	m	struct:_BandwidthTest	typeref:typename:protobuf_c_boolean
has_battery	simple.pb-c.h	/^  protobuf_c_boolean has_battery;$/;"	m	struct:_ToHi	typeref:typename:protobuf_c_boolean
has_bitrate	simple.pb-c.h	/^  protobuf_c_boolean has_bitrate;$/;"	m	struct:_ToHost	typeref:typename:protobuf_c_boolean
has_bright	simple.pb-c.h	/^  protobuf_c_boolean has_bright;$/;"	m	struct:_LedControl	typeref:typename:protobuf_c_boolean
has_charge_complete	simple.pb-c.h	/^  protobuf_c_boolean has_charge_complete;$/;"	m	struct:_ToHi	typeref:typename:protobuf_c_boolean
has_crc	simple.pb-c.h	/^  protobuf_c_boolean has_crc;$/;"	m	struct:_FirmwareUpdateFeedback	typeref:typename:protobuf_c_boolean
has_data	simple.pb-c.h	/^  protobuf_c_boolean has_data;$/;"	m	struct:_BandwidthTest	typeref:typename:protobuf_c_boolean
has_data	simple.pb-c.h	/^  protobuf_c_boolean has_data;$/;"	m	struct:_FirmwareUpdate	typeref:typename:protobuf_c_boolean
has_data	simple.pb-c.h	/^  protobuf_c_boolean has_data;$/;"	m	struct:_FirmwareUpdateFeedback	typeref:typename:protobuf_c_boolean
has_do_charge	simple.pb-c.h	/^  protobuf_c_boolean has_do_charge;$/;"	m	struct:_ToHi	typeref:typename:protobuf_c_boolean
has_do_charge	simple.pb-c.h	/^  protobuf_c_boolean has_do_charge;$/;"	m	struct:_ToSt	typeref:typename:protobuf_c_boolean
has_encrypted_secret_key	simple.pb-c.h	/^  protobuf_c_boolean has_encrypted_secret_key;$/;"	m	struct:_ToHost	typeref:typename:protobuf_c_boolean
has_end	simple.pb-c.h	/^  protobuf_c_boolean has_end;$/;"	m	struct:_FirmwareUpdate	typeref:typename:protobuf_c_boolean
has_end	simple.pb-c.h	/^  protobuf_c_boolean has_end;$/;"	m	struct:_FirmwareUpdateFeedback	typeref:typename:protobuf_c_boolean
has_end_offset	simple.pb-c.h	/^  protobuf_c_boolean has_end_offset;$/;"	m	struct:_FirmwareUpdate	typeref:typename:protobuf_c_boolean
has_from_json	json.hpp	/^struct has_from_json$/;"	s	namespace:nlohmann::detail
has_gyro_x	simple.pb-c.h	/^  protobuf_c_boolean has_gyro_x;$/;"	m	struct:_ToHi	typeref:typename:protobuf_c_boolean
has_gyro_y	simple.pb-c.h	/^  protobuf_c_boolean has_gyro_y;$/;"	m	struct:_ToHi	typeref:typename:protobuf_c_boolean
has_gyro_z	simple.pb-c.h	/^  protobuf_c_boolean has_gyro_z;$/;"	m	struct:_ToHi	typeref:typename:protobuf_c_boolean
has_hopadc	simple.pb-c.h	/^  protobuf_c_boolean has_hopadc;$/;"	m	struct:_ToHi	typeref:typename:protobuf_c_boolean
has_imu	qc-message.pb.h	/^  bool has_imu() const;$/;"	p	class:Protocol	typeref:typename:bool
has_imu	qc-message.pb.h	/^inline bool Protocol::has_imu() const {$/;"	f	class:Protocol	typeref:typename:bool
has_interval	simple.pb-c.h	/^  protobuf_c_boolean has_interval;$/;"	m	struct:_ToBle	typeref:typename:protobuf_c_boolean
has_ksoo	qc-message.pb.h	/^  bool has_ksoo() const;$/;"	p	class:Protocol	typeref:typename:bool
has_ksoo	qc-message.pb.h	/^inline bool Protocol::has_ksoo() const {$/;"	f	class:Protocol	typeref:typename:bool
has_latency	simple.pb-c.h	/^  protobuf_c_boolean has_latency;$/;"	m	struct:_ToHost	typeref:typename:protobuf_c_boolean
has_left	simple.pb-c.h	/^  protobuf_c_boolean has_left;$/;"	m	struct:_EncoderControl	typeref:typename:protobuf_c_boolean
has_left	simple.pb-c.h	/^  protobuf_c_boolean has_left;$/;"	m	struct:_LedControl	typeref:typename:protobuf_c_boolean
has_left_motor	qc-message.pb.h	/^  bool has_left_motor() const;$/;"	p	class:Protocol	typeref:typename:bool
has_left_motor	qc-message.pb.h	/^inline bool Protocol::has_left_motor() const {$/;"	f	class:Protocol	typeref:typename:bool
has_left_motor	simple.pb-c.h	/^  protobuf_c_boolean has_left_motor;$/;"	m	struct:_RoughMotorControl	typeref:typename:protobuf_c_boolean
has_left_motor	simple.pb-c.h	/^  protobuf_c_boolean has_left_motor;$/;"	m	struct:_SmoothMotorControlDeprecated	typeref:typename:protobuf_c_boolean
has_lenc	simple.pb-c.h	/^  protobuf_c_boolean has_lenc;$/;"	m	struct:_ToHi	typeref:typename:protobuf_c_boolean
has_loopback	simple.pb-c.h	/^  protobuf_c_boolean has_loopback;$/;"	m	struct:_ToHi	typeref:typename:protobuf_c_boolean
has_loopback	simple.pb-c.h	/^  protobuf_c_boolean has_loopback;$/;"	m	struct:_ToSt	typeref:typename:protobuf_c_boolean
has_lspeed	simple.pb-c.h	/^  protobuf_c_boolean has_lspeed;$/;"	m	struct:_ToHi	typeref:typename:protobuf_c_boolean
has_neck_speed	simple.pb-c.h	/^  protobuf_c_boolean has_neck_speed;$/;"	m	struct:_ToSt	typeref:typename:protobuf_c_boolean
has_non_default_from_json	json.hpp	/^struct has_non_default_from_json$/;"	s	namespace:nlohmann::detail
has_pitch	simple.pb-c.h	/^  protobuf_c_boolean has_pitch;$/;"	m	struct:_ToHi	typeref:typename:protobuf_c_boolean
has_play_pcm	simple.pb-c.h	/^  protobuf_c_boolean has_play_pcm;$/;"	m	struct:_ToHi	typeref:typename:protobuf_c_boolean
has_play_pcm_end	simple.pb-c.h	/^  protobuf_c_boolean has_play_pcm_end;$/;"	m	struct:_ToHost	typeref:typename:protobuf_c_boolean
has_power	simple.pb-c.h	/^  protobuf_c_boolean has_power;$/;"	m	struct:_ToBle	typeref:typename:protobuf_c_boolean
has_power_button_pressed	simple.pb-c.h	/^  protobuf_c_boolean has_power_button_pressed;$/;"	m	struct:_ToHi	typeref:typename:protobuf_c_boolean
has_power_command	simple.pb-c.h	/^  protobuf_c_boolean has_power_command;$/;"	m	struct:_ToSt	typeref:typename:protobuf_c_boolean
has_qc_retry	simple.pb-c.h	/^  protobuf_c_boolean has_qc_retry;$/;"	m	struct:_ToHi	typeref:typename:protobuf_c_boolean
has_renc	simple.pb-c.h	/^  protobuf_c_boolean has_renc;$/;"	m	struct:_ToHi	typeref:typename:protobuf_c_boolean
has_req_service_key	simple.pb-c.h	/^  protobuf_c_boolean has_req_service_key;$/;"	m	struct:_ToHi	typeref:typename:protobuf_c_boolean
has_request_bandwidth	simple.pb-c.h	/^  protobuf_c_boolean has_request_bandwidth;$/;"	m	struct:_ToHost	typeref:typename:protobuf_c_boolean
has_request_mic_loop_back	simple.pb-c.h	/^  protobuf_c_boolean has_request_mic_loop_back;$/;"	m	struct:_ToHi	typeref:typename:protobuf_c_boolean
has_request_st_info	simple.pb-c.h	/^  protobuf_c_boolean has_request_st_info;$/;"	m	struct:_ToSt	typeref:typename:protobuf_c_boolean
has_request_start_qc	simple.pb-c.h	/^  protobuf_c_boolean has_request_start_qc;$/;"	m	struct:_ToHost	typeref:typename:protobuf_c_boolean
has_request_stop_qc	simple.pb-c.h	/^  protobuf_c_boolean has_request_stop_qc;$/;"	m	struct:_ToHi	typeref:typename:protobuf_c_boolean
has_reset_if_no_serial	simple.pb-c.h	/^  protobuf_c_boolean has_reset_if_no_serial;$/;"	m	struct:_ToSt	typeref:typename:protobuf_c_boolean
has_right	simple.pb-c.h	/^  protobuf_c_boolean has_right;$/;"	m	struct:_EncoderControl	typeref:typename:protobuf_c_boolean
has_right	simple.pb-c.h	/^  protobuf_c_boolean has_right;$/;"	m	struct:_LedControl	typeref:typename:protobuf_c_boolean
has_right_motor	qc-message.pb.h	/^  bool has_right_motor() const;$/;"	p	class:Protocol	typeref:typename:bool
has_right_motor	qc-message.pb.h	/^inline bool Protocol::has_right_motor() const {$/;"	f	class:Protocol	typeref:typename:bool
has_right_motor	simple.pb-c.h	/^  protobuf_c_boolean has_right_motor;$/;"	m	struct:_RoughMotorControl	typeref:typename:protobuf_c_boolean
has_right_motor	simple.pb-c.h	/^  protobuf_c_boolean has_right_motor;$/;"	m	struct:_SmoothMotorControlDeprecated	typeref:typename:protobuf_c_boolean
has_roll	simple.pb-c.h	/^  protobuf_c_boolean has_roll;$/;"	m	struct:_ToHi	typeref:typename:protobuf_c_boolean
has_rsp_complete_setup	simple.pb-c.h	/^  protobuf_c_boolean has_rsp_complete_setup;$/;"	m	struct:_ToHost	typeref:typename:protobuf_c_boolean
has_rspeed	simple.pb-c.h	/^  protobuf_c_boolean has_rspeed;$/;"	m	struct:_ToHi	typeref:typename:protobuf_c_boolean
has_set_invert_horiz	simple.pb-c.h	/^  protobuf_c_boolean has_set_invert_horiz;$/;"	m	struct:_ToHi	typeref:typename:protobuf_c_boolean
has_set_invert_vert	simple.pb-c.h	/^  protobuf_c_boolean has_set_invert_vert;$/;"	m	struct:_ToHi	typeref:typename:protobuf_c_boolean
has_set_ir_cut1	simple.pb-c.h	/^  protobuf_c_boolean has_set_ir_cut1;$/;"	m	struct:_ToHi	typeref:typename:protobuf_c_boolean
has_set_ir_cut2	simple.pb-c.h	/^  protobuf_c_boolean has_set_ir_cut2;$/;"	m	struct:_ToHi	typeref:typename:protobuf_c_boolean
has_set_mic_vol	simple.pb-c.h	/^  protobuf_c_boolean has_set_mic_vol;$/;"	m	struct:_ToHi	typeref:typename:protobuf_c_boolean
has_set_mute	simple.pb-c.h	/^  protobuf_c_boolean has_set_mute;$/;"	m	struct:_ToHi	typeref:typename:protobuf_c_boolean
has_set_speaker_vol	simple.pb-c.h	/^  protobuf_c_boolean has_set_speaker_vol;$/;"	m	struct:_ToHi	typeref:typename:protobuf_c_boolean
has_start	simple.pb-c.h	/^  protobuf_c_boolean has_start;$/;"	m	struct:_FirmwareUpdate	typeref:typename:protobuf_c_boolean
has_start	simple.pb-c.h	/^  protobuf_c_boolean has_start;$/;"	m	struct:_FirmwareUpdateFeedback	typeref:typename:protobuf_c_boolean
has_start_offset	simple.pb-c.h	/^  protobuf_c_boolean has_start_offset;$/;"	m	struct:_FirmwareUpdate	typeref:typename:protobuf_c_boolean
has_status	simple.pb-c.h	/^  protobuf_c_boolean has_status;$/;"	m	struct:_ToHi	typeref:typename:protobuf_c_boolean
has_step	simple.pb-c.h	/^  protobuf_c_boolean has_step;$/;"	m	struct:_BandwidthTest	typeref:typename:protobuf_c_boolean
has_t_speed	simple.pb-c.h	/^  protobuf_c_boolean has_t_speed;$/;"	m	struct:_ToHi	typeref:typename:protobuf_c_boolean
has_to_json	json.hpp	/^struct has_to_json$/;"	s	namespace:nlohmann::detail
has_tof	simple.pb-c.h	/^  protobuf_c_boolean has_tof;$/;"	m	struct:_ToHi	typeref:typename:protobuf_c_boolean
has_usb_con	simple.pb-c.h	/^  protobuf_c_boolean has_usb_con;$/;"	m	struct:_ToHi	typeref:typename:protobuf_c_boolean
has_verify	simple.pb-c.h	/^  protobuf_c_boolean has_verify;$/;"	m	struct:_FirmwareUpdate	typeref:typename:protobuf_c_boolean
has_verify	simple.pb-c.h	/^  protobuf_c_boolean has_verify;$/;"	m	struct:_FirmwareUpdateFeedback	typeref:typename:protobuf_c_boolean
has_video	qc-message.pb.h	/^  bool has_video() const;$/;"	p	class:Protocol	typeref:typename:bool
has_video	qc-message.pb.h	/^inline bool Protocol::has_video() const {$/;"	f	class:Protocol	typeref:typename:bool
has_video	simple.pb-c.h	/^  protobuf_c_boolean has_video;$/;"	m	struct:_ToHost	typeref:typename:protobuf_c_boolean
has_video_seq	simple.pb-c.h	/^  protobuf_c_boolean has_video_seq;$/;"	m	struct:_ToHi	typeref:typename:protobuf_c_boolean
has_video_seq	simple.pb-c.h	/^  protobuf_c_boolean has_video_seq;$/;"	m	struct:_ToHost	typeref:typename:protobuf_c_boolean
has_video_ts	simple.pb-c.h	/^  protobuf_c_boolean has_video_ts;$/;"	m	struct:_ToHost	typeref:typename:protobuf_c_boolean
has_x	qc-message.pb.h	/^  bool has_x() const;$/;"	p	class:Imu	typeref:typename:bool
has_x	qc-message.pb.h	/^inline bool Imu::has_x() const {$/;"	f	class:Imu	typeref:typename:bool
has_y	qc-message.pb.h	/^  bool has_y() const;$/;"	p	class:Imu	typeref:typename:bool
has_y	qc-message.pb.h	/^inline bool Imu::has_y() const {$/;"	f	class:Imu	typeref:typename:bool
has_yaw	simple.pb-c.h	/^  protobuf_c_boolean has_yaw;$/;"	m	struct:_ToHi	typeref:typename:protobuf_c_boolean
hash	json.hpp	/^struct hash<nlohmann::json>$/;"	s	namespace:std
hd	stb_image.h	/^      int hd,ha;$/;"	m	struct:__anon84e4e8860608::__anon84e4e8860708	typeref:typename:int
head	qcustomplot.h	/^  QCPLineEnding head() const { return mHead; }$/;"	f	class:QCPItemCurve	typeref:typename:QCPLineEnding
head	qcustomplot.h	/^  QCPLineEnding head() const { return mHead; }$/;"	f	class:QCPItemLine	typeref:typename:QCPLineEnding
head	qcustomplot.h	/^  Q_PROPERTY(QCPLineEnding head READ head WRITE setHead)$/;"	p	class:QCPItemCurve	typeref:typename:QCPLineEnding
head	qcustomplot.h	/^  Q_PROPERTY(QCPLineEnding head READ head WRITE setHead)$/;"	p	class:QCPItemLine	typeref:typename:QCPLineEnding
head_	spdlog/details/circular_q.h	/^    typename std::vector<T>::size_type head_ = 0;$/;"	m	class:spdlog::details::circular_q	typeref:typename:std::vector<T>::size_type
height	gui.h	/^static const int height = 480;$/;"	v	typeref:typename:const int
height	qcustomplot.h	/^  int height() const { return mRect.height(); }$/;"	f	class:QCPAxisRect	typeref:typename:int
helloworld	CMakeLists.txt	/^add_executable(helloworld WIN32 ${helloworld_SRCS})$/;"	t
helloworld_SRCS	CMakeLists.txt	/^set(helloworld_SRCS$/;"	v
hex	spdlog/fmt/bundled/format.h	/^IntFormatSpec<int, TypeSpec<'x'>> hex(int value);$/;"	p	namespace:fmt	typeref:typename:IntFormatSpec<int,TypeSpec<'x'>>
hexu	spdlog/fmt/bundled/format.h	/^IntFormatSpec<int, TypeSpec<'X'>> hexu(int value);$/;"	p	namespace:fmt	typeref:typename:IntFormatSpec<int,TypeSpec<'X'>>
high	qcustomplot.h	/^  double key, open, high, low, close;$/;"	m	class:QCPFinancialData	typeref:typename:double
honey_dew	spdlog/fmt/bundled/colors.h	/^    honey_dew = 0xF0FFF0,               \/\/ rgb(240,255,240)$/;"	e	enum:color
hopadc	simple.pb-c.h	/^  uint32_t hopadc;$/;"	m	struct:_ToHi	typeref:typename:uint32_t
hopadc	simple.proto	/^    optional uint32 hopadc = 15; \/\/ neck position$/;"	f
hot_pink	spdlog/fmt/bundled/colors.h	/^    hot_pink = 0xFF69B4,                \/\/ rgb(255,105,180)$/;"	e	enum:color
hs	stb_image.h	/^   int hs,vs;   \/\/ expansion factor in each axis$/;"	m	struct:__anon84e4e8860808	typeref:typename:int
hsz	stb_image.h	/^   int bpp, offset, hsz;$/;"	m	struct:__anon84e4e8860e08	typeref:typename:int
huff_ac	stb_image.h	/^   stbi__huffman huff_ac[4];$/;"	m	struct:__anon84e4e8860608	typeref:typename:stbi__huffman[4]
huff_dc	stb_image.h	/^   stbi__huffman huff_dc[4];$/;"	m	struct:__anon84e4e8860608	typeref:typename:stbi__huffman[4]
i	spdlog/fmt/bundled/ranges.h	/^        std::size_t &i;$/;"	m	struct:formatter::format_each	typeref:typename:std::size_t &
iMultiSelect	qcustomplot.h	/^                   ,iMultiSelect      = 0x004 \/\/\/< <tt>0x004<\/tt> The user can select multip/;"	e	enum:QCP::Interaction
iRangeDrag	qcustomplot.h	/^enum Interaction { iRangeDrag         = 0x001 \/\/\/< <tt>0x001<\/tt> Axis ranges are draggable /;"	e	enum:QCP::Interaction
iRangeZoom	qcustomplot.h	/^                   ,iRangeZoom        = 0x002 \/\/\/< <tt>0x002<\/tt> Axis ranges are zoomable w/;"	e	enum:QCP::Interaction
iSelectAxes	qcustomplot.h	/^                   ,iSelectAxes       = 0x010 \/\/\/< <tt>0x010<\/tt> Axes are selectable (or pa/;"	e	enum:QCP::Interaction
iSelectItems	qcustomplot.h	/^                   ,iSelectItems      = 0x040 \/\/\/< <tt>0x040<\/tt> Items are selectable (Rect/;"	e	enum:QCP::Interaction
iSelectLegend	qcustomplot.h	/^                   ,iSelectLegend     = 0x020 \/\/\/< <tt>0x020<\/tt> Legends are selectable (or/;"	e	enum:QCP::Interaction
iSelectOther	qcustomplot.h	/^                   ,iSelectOther      = 0x080 \/\/\/< <tt>0x080<\/tt> All other objects are sele/;"	e	enum:QCP::Interaction
iSelectPlottables	qcustomplot.h	/^                   ,iSelectPlottables = 0x008 \/\/\/< <tt>0x008<\/tt> Plottables are selectable /;"	e	enum:QCP::Interaction
ia	json.hpp	/^    detail::input_adapter_t ia = nullptr;$/;"	m	class:nlohmann::detail::lexer	typeref:typename:detail::input_adapter_t
ia	json.hpp	/^    input_adapter_t ia = nullptr;$/;"	m	class:nlohmann::detail::binary_reader	typeref:typename:input_adapter_t
ia	json.hpp	/^    input_adapter_t ia = nullptr;$/;"	m	class:nlohmann::detail::input_adapter	typeref:typename:input_adapter_t
iconBorderPen	qcustomplot.h	/^  QPen iconBorderPen() const { return mIconBorderPen; }$/;"	f	class:QCPLegend	typeref:typename:QPen
iconBorderPen	qcustomplot.h	/^  Q_PROPERTY(QPen iconBorderPen READ iconBorderPen WRITE setIconBorderPen)$/;"	p	class:QCPLegend	typeref:typename:QPen
iconSize	qcustomplot.h	/^  QSize iconSize() const { return mIconSize; }$/;"	f	class:QCPLegend	typeref:typename:QSize
iconSize	qcustomplot.h	/^  Q_PROPERTY(QSize iconSize READ iconSize WRITE setIconSize)$/;"	p	class:QCPLegend	typeref:typename:QSize
iconTextPadding	qcustomplot.h	/^  Q_PROPERTY(int iconTextPadding READ iconTextPadding WRITE setIconTextPadding)$/;"	p	class:QCPLegend	typeref:typename:int
iconTextPadding	qcustomplot.h	/^  int iconTextPadding() const { return mIconTextPadding; }$/;"	f	class:QCPLegend	typeref:typename:int
id	json.hpp	/^    const int id;$/;"	m	class:nlohmann::detail::exception	typeref:typename:const int
id	protobuf-c/protobuf-c.h	/^	uint32_t		id;$/;"	m	struct:ProtobufCFieldDescriptor	typeref:typename:uint32_t
id	stb_image.h	/^      int id;$/;"	m	struct:__anon84e4e8860608::__anon84e4e8860708	typeref:typename:int
idata	stb_image.h	/^   stbi_uc *idata, *expanded, *out;$/;"	m	struct:__anon84e4e8860c08	typeref:typename:stbi_uc *
idct_block_kernel	stb_image.h	/^   void (*idct_block_kernel)(stbi_uc *out, int out_stride, short data[64]);$/;"	m	struct:__anon84e4e8860608	typeref:typename:void (*)(stbi_uc * out,int out_stride,short data[64])
img_buffer	stb_image.h	/^   stbi_uc *img_buffer, *img_buffer_end;$/;"	m	struct:__anon84e4e8860308	typeref:typename:stbi_uc *
img_buffer_end	stb_image.h	/^   stbi_uc *img_buffer, *img_buffer_end;$/;"	m	struct:__anon84e4e8860308	typeref:typename:stbi_uc **
img_buffer_original	stb_image.h	/^   stbi_uc *img_buffer_original, *img_buffer_original_end;$/;"	m	struct:__anon84e4e8860308	typeref:typename:stbi_uc *
img_buffer_original_end	stb_image.h	/^   stbi_uc *img_buffer_original, *img_buffer_original_end;$/;"	m	struct:__anon84e4e8860308	typeref:typename:stbi_uc **
img_comp	stb_image.h	/^   } img_comp[4];$/;"	m	struct:__anon84e4e8860608	typeref:struct:__anon84e4e8860608::__anon84e4e8860708[4]
img_h_max	stb_image.h	/^   int img_h_max, img_v_max;$/;"	m	struct:__anon84e4e8860608	typeref:typename:int
img_mcu_h	stb_image.h	/^   int img_mcu_w, img_mcu_h;$/;"	m	struct:__anon84e4e8860608	typeref:typename:int
img_mcu_w	stb_image.h	/^   int img_mcu_w, img_mcu_h;$/;"	m	struct:__anon84e4e8860608	typeref:typename:int
img_mcu_x	stb_image.h	/^   int img_mcu_x, img_mcu_y;$/;"	m	struct:__anon84e4e8860608	typeref:typename:int
img_mcu_y	stb_image.h	/^   int img_mcu_x, img_mcu_y;$/;"	m	struct:__anon84e4e8860608	typeref:typename:int
img_n	stb_image.h	/^   int img_n, img_out_n;$/;"	m	struct:__anon84e4e8860308	typeref:typename:int
img_out_n	stb_image.h	/^   int img_n, img_out_n;$/;"	m	struct:__anon84e4e8860308	typeref:typename:int
img_v_max	stb_image.h	/^   int img_h_max, img_v_max;$/;"	m	struct:__anon84e4e8860608	typeref:typename:int
img_x	stb_image.h	/^   stbi__uint32 img_x, img_y;$/;"	m	struct:__anon84e4e8860308	typeref:typename:stbi__uint32
img_y	stb_image.h	/^   stbi__uint32 img_x, img_y;$/;"	m	struct:__anon84e4e8860308	typeref:typename:stbi__uint32
imu	qc-message.pb.h	/^  const ::Imu& imu() const;$/;"	p	class:Protocol	typeref:typename:const::Imu &
imu	qc-message.pb.h	/^inline const ::Imu& Protocol::imu() const {$/;"	f	class:Protocol	typeref:typename:const::Imu &
imu	qc-message.proto	/^optional Imu imu = 6;$/;"	f
in_terminal	spdlog/details/os.h	/^inline bool in_terminal(FILE *file)$/;"	f	namespace:spdlog::details::os	typeref:typename:bool
indent_char	json.hpp	/^    const char indent_char;$/;"	m	class:nlohmann::detail::serializer	typeref:typename:const char
indent_string	json.hpp	/^    string_t indent_string;$/;"	m	class:nlohmann::detail::serializer	typeref:typename:string_t
index	protobuf-c/protobuf-c.h	/^	unsigned        index;$/;"	m	struct:ProtobufCEnumValueIndex	typeref:typename:unsigned
index	qcustomplot.h	/^  Q_PROPERTY(int index READ index)$/;"	p	class:QCPLayer	typeref:typename:int
index	qcustomplot.h	/^  int index() const { return mIndex; }$/;"	f	class:QCPLayer	typeref:typename:int
indexToRowCol	qcustomplot.cpp	/^void QCPLayoutGrid::indexToRowCol(int index, int &row, int &column) const$/;"	f	class:QCPLayoutGrid	typeref:typename:void
indexToRowCol	qcustomplot.h	/^  void indexToRowCol(int index, int &row, int &column) const;$/;"	p	class:QCPLayoutGrid	typeref:typename:void
index_sequence	json.hpp	/^struct index_sequence$/;"	s	namespace:nlohmann::detail
index_sequence	spdlog/fmt/bundled/ranges.h	/^using index_sequence = integer_sequence<std::size_t, N...>;$/;"	t	namespace:internal	typeref:typename:integer_sequence<std::size_t,N...>
index_sequence	spdlog/fmt/bundled/ranges.h	/^using index_sequence = std::index_sequence<N...>;$/;"	t	namespace:internal	typeref:typename:std::index_sequence<N...>
index_sequence_for	json.hpp	/^using index_sequence_for = make_index_sequence<sizeof...(Ts)>;$/;"	t	namespace:nlohmann::detail
indian_red	spdlog/fmt/bundled/colors.h	/^    indian_red = 0xCD5C5C,              \/\/ rgb(205,92,92)$/;"	e	enum:color
indigo	spdlog/fmt/bundled/colors.h	/^    indigo = 0x4B0082,                  \/\/ rgb(75,0,130)$/;"	e	enum:color
info	spdlog/common.h	/^    info = 2,$/;"	e	enum:spdlog::level::level_enum
info	spdlog/details/logger_impl.h	/^inline void spdlog::logger::info(const T &msg)$/;"	f	class:spdlog::logger	typeref:typename:void
info	spdlog/details/logger_impl.h	/^inline void spdlog::logger::info(const char *fmt, const Arg1 &arg1, const Args &... args)$/;"	f	class:spdlog::logger	typeref:typename:void
info	spdlog/details/logger_impl.h	/^inline void spdlog::logger::info(const wchar_t *fmt, const Args &... args)$/;"	f	class:spdlog::logger	typeref:typename:void
info	spdlog/logger.h	/^    void info(const T &msg);$/;"	p	class:spdlog::logger	typeref:typename:void
info	spdlog/logger.h	/^    void info(const char *fmt, const Arg1 &, const Args &... args);$/;"	p	class:spdlog::logger	typeref:typename:void
info	spdlog/logger.h	/^    void info(const wchar_t *fmt, const Args &... args);$/;"	p	class:spdlog::logger	typeref:typename:void
info	spdlogger.h	/^		void info(const char* message, const Args&... args)$/;"	f	class:util::Log	typeref:typename:void
init	spdlog/fmt/bundled/core.h	/^    void init(const basic_format_args<Context> &args);$/;"	p	class:internal::arg_map	typeref:typename:void
init	spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC void system_error::init(int err_code, string_view format_str, format_args args)$/;"	f	class:system_error	typeref:typename:FMT_FUNC void
init	spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC void windows_error::init(int err_code, string_view format_str, format_args args)$/;"	f	class:windows_error	typeref:typename:FMT_FUNC void
init	spdlog/fmt/bundled/format.cc	/^FMT_FUNC void SystemError::init($/;"	f	class:fmt::SystemError	typeref:typename:FMT_FUNC void
init	spdlog/fmt/bundled/format.cc	/^FMT_FUNC void WindowsError::init($/;"	f	class:fmt::WindowsError	typeref:typename:FMT_FUNC void
init	spdlog/fmt/bundled/format.h	/^    FMT_API void init(int err_code, CStringRef format_str, ArgList args);$/;"	p	class:fmt::SystemError	typeref:typename:FMT_API void
init	spdlog/fmt/bundled/format.h	/^    FMT_API void init(int error_code, CStringRef format_str, ArgList args);$/;"	p	class:fmt::WindowsError	typeref:typename:FMT_API void
init	spdlog/fmt/bundled/format.h	/^    void init(const ArgList &args);$/;"	p	class:fmt::internal::ArgMap	typeref:typename:void
init	spdlog/fmt/bundled/format.h	/^void ArgMap<Char>::init(const ArgList &args)$/;"	f	class:fmt::internal::ArgMap	typeref:typename:void
initTexture	gui.h	/^    void initTexture() {$/;"	f	class:ClientWindow	typeref:typename:void
init_thread_pool	spdlog/async.h	/^inline void init_thread_pool(size_t q_size, size_t thread_count)$/;"	f	namespace:spdlog	typeref:typename:void
initializeParentPlot	qcustomplot.cpp	/^void QCPLayerable::initializeParentPlot(QCustomPlot *parentPlot)$/;"	f	class:QCPLayerable	typeref:typename:void
initializeParentPlot	qcustomplot.h	/^  void initializeParentPlot(QCustomPlot *parentPlot);$/;"	p	class:QCPLayerable	typeref:typename:void
initializer_list_t	json.hpp	/^    using initializer_list_t = std::initializer_list<detail::json_ref<basic_json>>;$/;"	t	class:nlohmann::basic_json	typeref:typename:std::initializer_list<detail::json_ref<basic_json>>
inline	protobuf-c/protobuf-c.c	/^# define inline /;"	d	file:
innerProtocol	ble.cpp	/^void BLESession::innerProtocol(const std::vector<uint8_t>& innerData) {$/;"	f	class:BLESession	typeref:typename:void
innerProtocol	ble.h	/^    void innerProtocol(const std::vector<uint8_t>& innerData);$/;"	p	class:BLESession	typeref:typename:void
input	protobuf-c/protobuf-c.h	/^	const ProtobufCMessageDescriptor	*input;$/;"	m	struct:ProtobufCMethodDescriptor	typeref:typename:const ProtobufCMessageDescriptor *
input_adapter	json.hpp	/^    input_adapter(CharT b)$/;"	f	class:nlohmann::detail::input_adapter
input_adapter	json.hpp	/^    input_adapter(CharT b, std::size_t l)$/;"	f	class:nlohmann::detail::input_adapter
input_adapter	json.hpp	/^    input_adapter(IteratorType first, IteratorType last)$/;"	f	class:nlohmann::detail::input_adapter
input_adapter	json.hpp	/^    input_adapter(T (&array)[N])$/;"	f	class:nlohmann::detail::input_adapter
input_adapter	json.hpp	/^    input_adapter(const ContiguousContainer& c)$/;"	f	class:nlohmann::detail::input_adapter
input_adapter	json.hpp	/^    input_adapter(std::istream& i)$/;"	f	class:nlohmann::detail::input_adapter
input_adapter	json.hpp	/^    input_adapter(std::istream&& i)$/;"	f	class:nlohmann::detail::input_adapter
input_adapter	json.hpp	/^class input_adapter$/;"	c	namespace:nlohmann::detail
input_adapter_protocol	json.hpp	/^struct input_adapter_protocol$/;"	s	namespace:nlohmann::detail
input_adapter_t	json.hpp	/^using input_adapter_t = std::shared_ptr<input_adapter_protocol>;$/;"	t	namespace:nlohmann::detail	typeref:typename:std::shared_ptr<input_adapter_protocol>
input_buffer_adapter	json.hpp	/^    input_buffer_adapter(const char* b, const std::size_t l)$/;"	f	class:nlohmann::detail::input_buffer_adapter
input_buffer_adapter	json.hpp	/^    input_buffer_adapter(const input_buffer_adapter&) = delete;$/;"	p	class:nlohmann::detail::input_buffer_adapter
input_buffer_adapter	json.hpp	/^class input_buffer_adapter : public input_adapter_protocol$/;"	c	namespace:nlohmann::detail
input_stream_adapter	json.hpp	/^    explicit input_stream_adapter(std::istream& i)$/;"	f	class:nlohmann::detail::input_stream_adapter
input_stream_adapter	json.hpp	/^    input_stream_adapter(const input_stream_adapter&) = delete;$/;"	p	class:nlohmann::detail::input_stream_adapter
input_stream_adapter	json.hpp	/^class input_stream_adapter : public input_adapter_protocol$/;"	c	namespace:nlohmann::detail
insert	json.hpp	/^    iterator insert(const_iterator pos, basic_json&& val)$/;"	f	class:nlohmann::basic_json	typeref:typename:iterator
insert	json.hpp	/^    iterator insert(const_iterator pos, const basic_json& val)$/;"	f	class:nlohmann::basic_json	typeref:typename:iterator
insert	json.hpp	/^    iterator insert(const_iterator pos, const_iterator first, const_iterator last)$/;"	f	class:nlohmann::basic_json	typeref:typename:iterator
insert	json.hpp	/^    iterator insert(const_iterator pos, initializer_list_t ilist)$/;"	f	class:nlohmann::basic_json	typeref:typename:iterator
insert	json.hpp	/^    iterator insert(const_iterator pos, size_type cnt, const basic_json& val)$/;"	f	class:nlohmann::basic_json	typeref:typename:iterator
insert	json.hpp	/^    void insert(const_iterator first, const_iterator last)$/;"	f	class:nlohmann::basic_json	typeref:typename:void
insert	qcustomplot.cpp	/^void QCPBarsGroup::insert(int i, QCPBars *bars)$/;"	f	class:QCPBarsGroup	typeref:typename:void
insert	qcustomplot.h	/^  void insert(int i, QCPBars *bars);$/;"	p	class:QCPBarsGroup	typeref:typename:void
insertColumn	qcustomplot.cpp	/^void QCPLayoutGrid::insertColumn(int newIndex)$/;"	f	class:QCPLayoutGrid	typeref:typename:void
insertColumn	qcustomplot.h	/^  void insertColumn(int newIndex);$/;"	p	class:QCPLayoutGrid	typeref:typename:void
insertRow	qcustomplot.cpp	/^void QCPLayoutGrid::insertRow(int newIndex)$/;"	f	class:QCPLayoutGrid	typeref:typename:void
insertRow	qcustomplot.h	/^  void insertRow(int newIndex);$/;"	p	class:QCPLayoutGrid	typeref:typename:void
insertSeparator	string-util.cpp	/^string insertSeparator(const string& s, char separator, int width)$/;"	f	typeref:typename:string
insertSeparator	string-util.h	/^std::string insertSeparator(const std::string& s, char separator = ',', int width = 3);$/;"	p	typeref:typename:std::string
insetAlignment	qcustomplot.cpp	/^Qt::Alignment QCPLayoutInset::insetAlignment(int index) const$/;"	f	class:QCPLayoutInset	typeref:typename:Qt::Alignment
insetAlignment	qcustomplot.h	/^  Qt::Alignment insetAlignment(int index) const;$/;"	p	class:QCPLayoutInset	typeref:typename:Qt::Alignment
insetLayout	qcustomplot.h	/^  QCPLayoutInset *insetLayout() const { return mInsetLayout; }$/;"	f	class:QCPAxisRect	typeref:typename:QCPLayoutInset *
insetPlacement	qcustomplot.cpp	/^QCPLayoutInset::InsetPlacement QCPLayoutInset::insetPlacement(int index) const$/;"	f	class:QCPLayoutInset	typeref:typename:QCPLayoutInset::InsetPlacement
insetPlacement	qcustomplot.h	/^  InsetPlacement insetPlacement(int index) const;$/;"	p	class:QCPLayoutInset	typeref:typename:InsetPlacement
insetRect	qcustomplot.cpp	/^QRectF QCPLayoutInset::insetRect(int index) const$/;"	f	class:QCPLayoutInset	typeref:typename:QRectF
insetRect	qcustomplot.h	/^  QRectF insetRect(int index) const;$/;"	p	class:QCPLayoutInset	typeref:typename:QRectF
install	README.md	/^# install$/;"	c
instance	spdlog/details/registry.h	/^    static registry_t<Mutex> &instance()$/;"	f	class:spdlog::details::registry_t	typeref:typename:registry_t<Mutex> &
instance	spdlog/sinks/stdout_sinks.h	/^    static std::shared_ptr<MyType> instance()$/;"	f	class:spdlog::sinks::SPDLOG_FINAL	typeref:typename:std::shared_ptr<MyType>
int32_pack	protobuf-c/protobuf-c.c	/^int32_pack(int32_t value, uint8_t *out)$/;"	f	typeref:typename:size_t	file:
int32_size	protobuf-c/protobuf-c.c	/^int32_size(int32_t v)$/;"	f	typeref:typename:size_t	file:
int_range_lookup	protobuf-c/protobuf-c.c	/^int_range_lookup(unsigned n_ranges, const ProtobufCIntRange *ranges, int value)$/;"	f	typeref:typename:int	file:
int_type	spdlog/fmt/bundled/core.h	/^    int_type,$/;"	e	enum:internal::type
int_type	spdlog/fmt/bundled/ostream.h	/^    typedef typename std::basic_streambuf<Char>::int_type int_type;$/;"	t	class:fmt::internal::FormatBuf	typeref:typename:std::basic_streambuf<Char>::int_type
int_value	spdlog/fmt/bundled/core.h	/^        int int_value;$/;"	m	union:internal::value::__anonef64315f020a	typeref:typename:int
int_value	spdlog/fmt/bundled/format.h	/^        int int_value;$/;"	m	union:fmt::internal::Value::__anon1ea8787f020a	typeref:typename:int
integer_sequence	spdlog/fmt/bundled/ranges.h	/^struct integer_sequence$/;"	s	namespace:internal
integer_sequence	spdlog/fmt/bundled/ranges.h	/^using integer_sequence = std::integer_sequence<T, N...>;$/;"	t	namespace:internal	typeref:typename:std::integer_sequence<T,N...>
interactions	qcustomplot.h	/^  const QCP::Interactions interactions() const { return mInteractions; }$/;"	f	class:QCustomPlot	typeref:typename:const QCP::Interactions
interface1D	qcustomplot.h	/^  virtual QCPPlottableInterface1D *interface1D() Q_DECL_OVERRIDE { return this; }$/;"	f	class:QCPAbstractPlottable1D	typeref:typename:QCPPlottableInterface1D *
interface1D	qcustomplot.h	/^  virtual QCPPlottableInterface1D *interface1D() Q_DECL_OVERRIDE { return this; }$/;"	f	class:QCPErrorBars	typeref:typename:QCPPlottableInterface1D *
interface1D	qcustomplot.h	/^  virtual QCPPlottableInterface1D *interface1D() { return 0; }$/;"	f	class:QCPAbstractPlottable	typeref:typename:QCPPlottableInterface1D *
internal	spdlog/fmt/bundled/colors.h	/^namespace internal {$/;"	n
internal	spdlog/fmt/bundled/core.h	/^namespace internal {$/;"	n
internal	spdlog/fmt/bundled/format-inl.h	/^namespace internal {$/;"	n
internal	spdlog/fmt/bundled/format.h	/^namespace internal {$/;"	n	namespace:fmt
internal	spdlog/fmt/bundled/ostream.cc	/^namespace internal {$/;"	n	namespace:fmt	file:
internal	spdlog/fmt/bundled/ostream.h	/^namespace internal {$/;"	n	namespace:fmt
internal	spdlog/fmt/bundled/printf.h	/^namespace internal {$/;"	n	namespace:fmt
internal	spdlog/fmt/bundled/ranges.h	/^namespace internal {$/;"	n
internal	spdlog/fmt/bundled/time.h	/^namespace internal {$/;"	n	namespace:fmt
internal_default_instance	qc-message.pb.h	/^  static inline const Imu* internal_default_instance() {$/;"	f	class:Imu	typeref:typename:const Imu *
internal_default_instance	qc-message.pb.h	/^  static inline const Protocol* internal_default_instance() {$/;"	f	class:Protocol	typeref:typename:const Protocol *
internal_iterator	json.hpp	/^    using internal_iterator = ::nlohmann::detail::internal_iterator<BasicJsonType>;$/;"	t	class:nlohmann::basic_json	typeref:typename:::nlohmann::detail::internal_iterator<BasicJsonType>
internal_iterator	json.hpp	/^template<typename BasicJsonType> struct internal_iterator$/;"	s	namespace:nlohmann::detail
interpolate	qcustomplot.h	/^  Q_PROPERTY(bool interpolate READ interpolate WRITE setInterpolate)$/;"	p	class:QCPColorMap	typeref:typename:bool
interpolate	qcustomplot.h	/^  bool interpolate() const { return mInterpolate; }$/;"	f	class:QCPColorMap	typeref:typename:bool
interpolating	qcustomplot.h	/^  Q_PROPERTY(bool interpolating READ interpolating WRITE setInterpolating)$/;"	p	class:QCPItemTracer	typeref:typename:bool
interpolating	qcustomplot.h	/^  bool interpolating() const { return mInterpolating; }$/;"	f	class:QCPItemTracer	typeref:typename:bool
intersection	qcustomplot.cpp	/^QCPDataRange QCPDataRange::intersection(const QCPDataRange &other) const$/;"	f	class:QCPDataRange	typeref:typename:QCPDataRange
intersection	qcustomplot.cpp	/^QCPDataSelection QCPDataSelection::intersection(const QCPDataRange &other) const$/;"	f	class:QCPDataSelection	typeref:typename:QCPDataSelection
intersection	qcustomplot.cpp	/^QCPDataSelection QCPDataSelection::intersection(const QCPDataSelection &other) const$/;"	f	class:QCPDataSelection	typeref:typename:QCPDataSelection
intersection	qcustomplot.h	/^  QCPDataRange intersection(const QCPDataRange &other) const;$/;"	p	class:QCPDataRange	typeref:typename:QCPDataRange
intersection	qcustomplot.h	/^  QCPDataSelection intersection(const QCPDataRange &other) const;$/;"	p	class:QCPDataSelection	typeref:typename:QCPDataSelection
intersection	qcustomplot.h	/^  QCPDataSelection intersection(const QCPDataSelection &other) const;$/;"	p	class:QCPDataSelection	typeref:typename:QCPDataSelection
intersects	qcustomplot.cpp	/^bool QCPDataRange::intersects(const QCPDataRange &other) const$/;"	f	class:QCPDataRange	typeref:typename:bool
intersects	qcustomplot.h	/^  bool intersects(const QCPDataRange &other) const;$/;"	p	class:QCPDataRange	typeref:typename:bool
interval	license-session.cpp	/^boost::posix_time::milliseconds interval(0);  \/\/ 1 second$/;"	v	typeref:typename:boost::posix_time::milliseconds
interval	simple.pb-c.h	/^  uint32_t interval;$/;"	m	struct:_ToBle	typeref:typename:uint32_t
interval	simple.proto	/^    optional uint32 interval = 1;$/;"	f
intmax_t	spdlog/fmt/bundled/format.h	/^typedef __int64 intmax_t;$/;"	t	typeref:typename:__int64
invalid	json.hpp	/^        enum class patch_operations {add, remove, replace, move, copy, test, invalid};$/;"	e	enum:nlohmann::basic_json::patch::patch_operations
invalid_iterator	json.hpp	/^    invalid_iterator(int id_, const char* what_arg)$/;"	f	class:nlohmann::detail::invalid_iterator
invalid_iterator	json.hpp	/^    using invalid_iterator = detail::invalid_iterator;$/;"	t	class:nlohmann::basic_json	typeref:typename:detail::invalid_iterator
invalid_iterator	json.hpp	/^class invalid_iterator : public exception$/;"	c	namespace:nlohmann::detail
invalidated	qcustomplot.h	/^  bool invalidated() const { return mInvalidated; }$/;"	f	class:QCPAbstractPaintBuffer	typeref:typename:bool
inverse	qcustomplot.cpp	/^QCPDataSelection QCPDataSelection::inverse(const QCPDataRange &outerRange) const$/;"	f	class:QCPDataSelection	typeref:typename:QCPDataSelection
inverse	qcustomplot.h	/^  QCPDataSelection inverse(const QCPDataRange &outerRange) const;$/;"	p	class:QCPDataSelection	typeref:typename:QCPDataSelection
inverted	qcustomplot.cpp	/^QCPColorGradient QCPColorGradient::inverted() const$/;"	f	class:QCPColorGradient	typeref:typename:QCPColorGradient
inverted	qcustomplot.h	/^  QCPColorGradient inverted() const;$/;"	p	class:QCPColorGradient	typeref:typename:QCPColorGradient
inverted	qcustomplot.h	/^  bool inverted() const { return mInverted; }$/;"	f	class:QCPLineEnding	typeref:typename:bool
invoke	protobuf-c/protobuf-c.h	/^	void (*invoke)(ProtobufCService *service,$/;"	m	struct:ProtobufCService	typeref:typename:void (*)(ProtobufCService * service,unsigned method_index,const ProtobufCMessage * input,ProtobufCClosure closure,void * closure_data)
io	stb_image.h	/^   stbi_io_callbacks io;$/;"	m	struct:__anon84e4e8860308	typeref:typename:stbi_io_callbacks
io_service	main.cpp	/^using io_service = boost::asio::io_service;$/;"	t	typeref:typename:boost::asio::io_service	file:
io_service_	asio-server.h	/^        boost::asio::io_service& io_service_;$/;"	m	class:ASIOServer	typeref:typename:boost::asio::io_service &
io_user_data	stb_image.h	/^   void *io_user_data;$/;"	m	struct:__anon84e4e8860308	typeref:typename:void *
ip	ble.cpp	/^            std::string ip;$/;"	m	struct:BLESession::connectAP::IpPing	typeref:typename:std::string	file:
ipBorderAligned	qcustomplot.h	/^                        ,ipBorderAligned  \/\/\/< The element is aligned to one of the layout si/;"	e	enum:QCPLayoutInset::InsetPlacement
ipFree	qcustomplot.h	/^  enum InsetPlacement { ipFree            \/\/\/< The element may be positioned\/sized arbitrari/;"	e	enum:QCPLayoutInset::InsetPlacement
is	json.hpp	/^    std::istream& is;$/;"	m	class:nlohmann::detail::input_stream_adapter	typeref:typename:std::istream &
isActive	qcustomplot.h	/^  bool isActive() const { return mActive; }$/;"	f	class:QCPSelectionRect	typeref:typename:bool
isConnected	mdi-child.h	/^    bool isConnected() {$/;"	f	class:MdiChild	typeref:typename:bool
isEmpty	qcustomplot.cpp	/^bool QCPMarginGroup::isEmpty() const$/;"	f	class:QCPMarginGroup	typeref:typename:bool
isEmpty	qcustomplot.h	/^  bool isEmpty() const { return length() == 0; }$/;"	f	class:QCPDataRange	typeref:typename:bool
isEmpty	qcustomplot.h	/^  bool isEmpty() const { return mBars.isEmpty(); }$/;"	f	class:QCPBarsGroup	typeref:typename:bool
isEmpty	qcustomplot.h	/^  bool isEmpty() const { return mDataRanges.isEmpty(); }$/;"	f	class:QCPDataSelection	typeref:typename:bool
isEmpty	qcustomplot.h	/^  bool isEmpty() const { return mIsEmpty; }$/;"	f	class:QCPColorMapData	typeref:typename:bool
isEmpty	qcustomplot.h	/^  bool isEmpty() const { return size() == 0; }$/;"	f	class:QCPDataContainer	typeref:typename:bool
isEmpty	qcustomplot.h	/^  bool isEmpty() const;$/;"	p	class:QCPMarginGroup	typeref:typename:bool
isInvalidData	qcustomplot.h	/^inline bool isInvalidData(double value)$/;"	f	namespace:QCP	typeref:typename:bool
isInvalidData	qcustomplot.h	/^inline bool isInvalidData(double value1, double value2)$/;"	f	namespace:QCP	typeref:typename:bool
isNone	qcustomplot.h	/^  bool isNone() const { return mShape == ssNone; }$/;"	f	class:QCPScatterStyle	typeref:typename:bool
isNull	qcustomplot.h	/^  bool isNull() const { return qIsNull(mX) && qIsNull(mY); }$/;"	f	class:QCPVector2D	typeref:typename:bool
isPenDefined	qcustomplot.h	/^  bool isPenDefined() const { return mPenDefined; }$/;"	f	class:QCPScatterStyle	typeref:typename:bool
isPlayPcmNow	mdi-child.h	/^    bool isPlayPcmNow = false;$/;"	m	class:MdiChild	typeref:typename:bool
isValid	qcustomplot.h	/^  bool isValid() const { return (mEnd >= mBegin) && (mBegin >= 0); }$/;"	f	class:QCPDataRange	typeref:typename:bool
is_arithmetic	spdlog/fmt/bundled/core.h	/^    bool is_arithmetic() const$/;"	f	class:basic_format_arg	typeref:typename:bool
is_arithmetic	spdlog/fmt/bundled/core.h	/^FMT_CONSTEXPR bool is_arithmetic(type t)$/;"	f	namespace:internal	typeref:typename:FMT_CONSTEXPR bool
is_array	json.hpp	/^    constexpr bool is_array() const noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:bool
is_basic_json	json.hpp	/^struct is_basic_json<NLOHMANN_BASIC_JSON_TPL> : std::true_type {};$/;"	s	namespace:nlohmann::detail
is_basic_json	json.hpp	/^template<typename> struct is_basic_json : std::false_type {};$/;"	s	namespace:nlohmann::detail
is_basic_json_nested_type	json.hpp	/^struct is_basic_json_nested_type$/;"	s	namespace:nlohmann::detail
is_begin	json.hpp	/^    constexpr bool is_begin() const noexcept$/;"	f	class:nlohmann::detail::primitive_iterator_t	typeref:typename:bool
is_boolean	json.hpp	/^    constexpr bool is_boolean() const noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:bool
is_color_terminal	spdlog/details/os.h	/^inline bool is_color_terminal()$/;"	f	namespace:spdlog::details::os	typeref:typename:bool
is_compatible_array_type	json.hpp	/^struct is_compatible_array_type$/;"	s	namespace:nlohmann::detail
is_compatible_complete_type	json.hpp	/^struct is_compatible_complete_type$/;"	s	namespace:nlohmann::detail
is_compatible_integer_type	json.hpp	/^struct is_compatible_integer_type$/;"	s	namespace:nlohmann::detail
is_compatible_integer_type_impl	json.hpp	/^struct is_compatible_integer_type_impl : std::false_type {};$/;"	s	namespace:nlohmann::detail
is_compatible_integer_type_impl	json.hpp	/^struct is_compatible_integer_type_impl<true, RealIntegerType, CompatibleNumberIntegerType>$/;"	s	namespace:nlohmann::detail
is_compatible_object_type	json.hpp	/^struct is_compatible_object_type$/;"	s	namespace:nlohmann::detail
is_compatible_object_type_impl	json.hpp	/^struct is_compatible_object_type_impl : std::false_type {};$/;"	s	namespace:nlohmann::detail
is_compatible_object_type_impl	json.hpp	/^struct is_compatible_object_type_impl<true, RealType, CompatibleObjectType>$/;"	s	namespace:nlohmann::detail
is_compatible_type	json.hpp	/^struct is_compatible_type$/;"	s	namespace:nlohmann::detail
is_complete_type	json.hpp	/^struct is_complete_type : std::false_type {};$/;"	s	namespace:nlohmann::detail
is_complete_type	json.hpp	/^struct is_complete_type<T, decltype(void(sizeof(T)))> : std::true_type {};$/;"	s	namespace:nlohmann::detail
is_contiguous	spdlog/fmt/bundled/core.h	/^struct is_contiguous : std::false_type$/;"	s
is_discarded	json.hpp	/^    constexpr bool is_discarded() const noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:bool
is_end	json.hpp	/^    constexpr bool is_end() const noexcept$/;"	f	class:nlohmann::detail::primitive_iterator_t	typeref:typename:bool
is_error_code_enum	http-request.h	/^        template<> struct is_error_code_enum<HTTPErrors>$/;"	s	namespace:boost::system
is_integral	spdlog/fmt/bundled/core.h	/^    bool is_integral() const$/;"	f	class:basic_format_arg	typeref:typename:bool
is_integral	spdlog/fmt/bundled/core.h	/^FMT_CONSTEXPR bool is_integral(type t)$/;"	f	namespace:internal	typeref:typename:FMT_CONSTEXPR bool
is_like_std_string	spdlog/fmt/bundled/ranges.h	/^class is_like_std_string$/;"	c	namespace:internal
is_little_endian	json.hpp	/^    const bool is_little_endian = binary_reader<BasicJsonType>::little_endianess();$/;"	m	class:nlohmann::detail::binary_writer	typeref:typename:const bool
is_little_endian	json.hpp	/^    const bool is_little_endian = little_endianess();$/;"	m	class:nlohmann::detail::binary_reader	typeref:typename:const bool
is_name_start	spdlog/fmt/bundled/format.h	/^inline bool is_name_start(Char c)$/;"	f	namespace:fmt::internal	typeref:typename:bool
is_named_arg	spdlog/fmt/bundled/core.h	/^struct is_named_arg : std::false_type$/;"	s	namespace:internal
is_negative	spdlog/fmt/bundled/format.h	/^    static bool is_negative(T value)$/;"	f	struct:fmt::internal::SignChecker	typeref:typename:bool
is_negative	spdlog/fmt/bundled/format.h	/^    static bool is_negative(T)$/;"	f	struct:fmt::internal::SignChecker	typeref:typename:bool
is_negative	spdlog/fmt/bundled/format.h	/^inline bool is_negative(T value)$/;"	f	namespace:fmt::internal	typeref:typename:bool
is_null	json.hpp	/^    constexpr bool is_null() const noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:bool
is_number	json.hpp	/^    constexpr bool is_number() const noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:bool
is_number_float	json.hpp	/^    constexpr bool is_number_float() const noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:bool
is_number_integer	json.hpp	/^    constexpr bool is_number_integer() const noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:bool
is_number_unsigned	json.hpp	/^    constexpr bool is_number_unsigned() const noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:bool
is_object	json.hpp	/^    constexpr bool is_object() const noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:bool
is_packable_type	protobuf-c/protobuf-c.c	/^is_packable_type(ProtobufCType type)$/;"	f	typeref:typename:protobuf_c_boolean	file:
is_primitive	json.hpp	/^    constexpr bool is_primitive() const noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:bool
is_range	spdlog/fmt/bundled/ranges.h	/^struct is_range$/;"	s
is_range_	spdlog/fmt/bundled/ranges.h	/^struct is_range_ : std::false_type$/;"	s	namespace:internal
is_range_	spdlog/fmt/bundled/ranges.h	/^struct is_range_<T, typename std::conditional<false,$/;"	s	namespace:internal
is_root	json.hpp	/^    bool is_root() const$/;"	f	class:nlohmann::json_pointer	typeref:typename:bool
is_rvalue	json.hpp	/^    const bool is_rvalue;$/;"	m	class:nlohmann::detail::json_ref	typeref:typename:const bool
is_same	spdlog/fmt/bundled/printf.h	/^struct is_same$/;"	s	namespace:fmt::internal
is_same	spdlog/fmt/bundled/printf.h	/^struct is_same<T, T>$/;"	s	namespace:fmt::internal
is_string	json.hpp	/^    constexpr bool is_string() const noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:bool
is_structured	json.hpp	/^    constexpr bool is_structured() const noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:bool
is_tuple_like	spdlog/fmt/bundled/ranges.h	/^struct is_tuple_like$/;"	s
is_tuple_like_	spdlog/fmt/bundled/ranges.h	/^class is_tuple_like_$/;"	c	namespace:internal
isfinite	json.hpp	/^        if (not std::isfinite(x))$/;"	m	class:nlohmann::detail::serializer::dump_float::std	typeref:typename:not	file:
isinf	spdlog/fmt/bundled/format.h	/^inline DummyInt isinf(...)$/;"	f	namespace:fmt::internal	typeref:typename:DummyInt
isinfinity	spdlog/fmt/bundled/format.h	/^    static bool isinfinity(T x)$/;"	f	class:std::numeric_limits	typeref:typename:bool
isnan	spdlog/fmt/bundled/format.h	/^inline DummyInt isnan(...)$/;"	f	namespace:fmt::internal	typeref:typename:DummyInt
isnegative	spdlog/fmt/bundled/format.h	/^    static bool isnegative(double x)$/;"	f	class:std::numeric_limits	typeref:typename:bool
isnotanumber	spdlog/fmt/bundled/format.h	/^    static bool isnotanumber(T x)$/;"	f	class:std::numeric_limits	typeref:typename:bool
item	qcustomplot.cpp	/^QCPAbstractItem *QCustomPlot::item() const$/;"	f	class:QCustomPlot	typeref:typename:QCPAbstractItem *
item	qcustomplot.cpp	/^QCPAbstractItem *QCustomPlot::item(int index) const$/;"	f	class:QCustomPlot	typeref:typename:QCPAbstractItem *
item	qcustomplot.cpp	/^QCPAbstractLegendItem *QCPLegend::item(int index) const$/;"	f	class:QCPLegend	typeref:typename:QCPAbstractLegendItem *
item	qcustomplot.h	/^  QCPAbstractItem *item() const;$/;"	p	class:QCustomPlot	typeref:typename:QCPAbstractItem *
item	qcustomplot.h	/^  QCPAbstractItem *item(int index) const;$/;"	p	class:QCustomPlot	typeref:typename:QCPAbstractItem *
item	qcustomplot.h	/^  QCPAbstractLegendItem *item(int index) const;$/;"	p	class:QCPLegend	typeref:typename:QCPAbstractLegendItem *
itemAt	qcustomplot.cpp	/^QCPAbstractItem *QCustomPlot::itemAt(const QPointF &pos, bool onlySelectable) const$/;"	f	class:QCustomPlot	typeref:typename:QCPAbstractItem *
itemAt	qcustomplot.h	/^  QCPAbstractItem *itemAt(const QPointF &pos, bool onlySelectable=false) const;$/;"	p	class:QCustomPlot	typeref:typename:QCPAbstractItem *
itemClick	qcustomplot.h	/^  void itemClick(QCPAbstractItem *item, QMouseEvent *event);$/;"	S	class:QCustomPlot	typeref:typename:void
itemClick	qcustomplot.h	/^  void itemClick(QCPAbstractItem *item, QMouseEvent *event);$/;"	p	class:QCustomPlot	typeref:typename:void
itemCount	qcustomplot.cpp	/^int QCPLegend::itemCount() const$/;"	f	class:QCPLegend	typeref:typename:int
itemCount	qcustomplot.cpp	/^int QCustomPlot::itemCount() const$/;"	f	class:QCustomPlot	typeref:typename:int
itemCount	qcustomplot.h	/^  int itemCount() const;$/;"	p	class:QCPLegend	typeref:typename:int
itemCount	qcustomplot.h	/^  int itemCount() const;$/;"	p	class:QCustomPlot	typeref:typename:int
itemDoubleClick	qcustomplot.h	/^  void itemDoubleClick(QCPAbstractItem *item, QMouseEvent *event);$/;"	S	class:QCustomPlot	typeref:typename:void
itemDoubleClick	qcustomplot.h	/^  void itemDoubleClick(QCPAbstractItem *item, QMouseEvent *event);$/;"	p	class:QCustomPlot	typeref:typename:void
itemWithPlottable	qcustomplot.cpp	/^QCPPlottableLegendItem *QCPLegend::itemWithPlottable(const QCPAbstractPlottable *plottable) cons/;"	f	class:QCPLegend	typeref:typename:QCPPlottableLegendItem *
itemWithPlottable	qcustomplot.h	/^  QCPPlottableLegendItem *itemWithPlottable(const QCPAbstractPlottable *plottable) const;$/;"	p	class:QCPLegend	typeref:typename:QCPPlottableLegendItem *
item_type	spdlog/details/async_log_helper.h	/^    using item_type = async_msg;$/;"	t	class:spdlog::details::async_log_helper	typeref:typename:async_msg
item_type	spdlog/details/circular_q.h	/^    using item_type = T;$/;"	t	class:spdlog::details::circular_q	typeref:typename:T
item_type	spdlog/details/mpmc_blocking_q.h	/^    using item_type = T;$/;"	t	class:spdlog::details::mpmc_bounded_queue	typeref:typename:T
item_type	spdlog/details/thread_pool.h	/^    using item_type = async_msg;$/;"	t	class:spdlog::details::thread_pool	typeref:typename:async_msg
items	json.hpp	/^    iteration_proxy<const_iterator> items() const noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:iteration_proxy<const_iterator>
items	json.hpp	/^    iteration_proxy<iterator> items() noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:iteration_proxy<iterator>
items	qcustomplot.cpp	/^QList<QCPAbstractItem *> QCPAxisRect::items() const$/;"	f	class:QCPAxisRect	typeref:typename:QList<QCPAbstractItem * >
items	qcustomplot.cpp	/^QList<QCPAbstractItem*> QCPAxis::items() const$/;"	f	class:QCPAxis	typeref:typename:QList<QCPAbstractItem * >
items	qcustomplot.h	/^  QList<QCPAbstractItem*> items() const;$/;"	p	class:QCPAxis	typeref:typename:QList<QCPAbstractItem * >
items	qcustomplot.h	/^  QList<QCPAbstractItem*> items() const;$/;"	p	class:QCPAxisRect	typeref:typename:QList<QCPAbstractItem * >
iter_impl	json.hpp	/^    explicit iter_impl(pointer object) noexcept : m_object(object)$/;"	f	class:nlohmann::detail::iter_impl
iter_impl	json.hpp	/^    iter_impl() = default;$/;"	p	class:nlohmann::detail::iter_impl
iter_impl	json.hpp	/^    iter_impl(const iter_impl<typename std::remove_const<BasicJsonType>::type>& other) noexcept$/;"	f	class:nlohmann::detail::iter_impl
iter_impl	json.hpp	/^    using iter_impl = ::nlohmann::detail::iter_impl<BasicJsonType>;$/;"	t	class:nlohmann::basic_json	typeref:typename:::nlohmann::detail::iter_impl<BasicJsonType>
iter_impl	json.hpp	/^class iter_impl$/;"	c	namespace:nlohmann::detail
iteration_proxy	json.hpp	/^    explicit iteration_proxy(typename IteratorType::reference cont) noexcept$/;"	f	class:nlohmann::detail::iteration_proxy
iteration_proxy	json.hpp	/^    using iteration_proxy = ::nlohmann::detail::iteration_proxy<Iterator>;$/;"	t	class:nlohmann::basic_json	typeref:typename:::nlohmann::detail::iteration_proxy<Iterator>
iteration_proxy	json.hpp	/^template<typename IteratorType> class iteration_proxy$/;"	c	namespace:nlohmann::detail
iteration_proxy_internal	json.hpp	/^        explicit iteration_proxy_internal(IteratorType it) noexcept : anchor(it) {}$/;"	f	class:nlohmann::detail::iteration_proxy::iteration_proxy_internal
iteration_proxy_internal	json.hpp	/^    class iteration_proxy_internal$/;"	c	class:nlohmann::detail::iteration_proxy
iterator	json.hpp	/^    using iterator = iter_impl<basic_json>;$/;"	t	class:nlohmann::basic_json	typeref:typename:iter_impl<basic_json>
iterator	qcustomplot.h	/^  typedef typename QVector<DataType>::iterator iterator;$/;"	t	class:QCPDataContainer	typeref:typename:QVector<DataType>::iterator
iterator	spdlog/fmt/bundled/core.h	/^    typedef OutputIt iterator;$/;"	t	class:internal::context_base	typeref:typename:OutputIt
iterator	spdlog/fmt/bundled/core.h	/^    typedef const Char *iterator;$/;"	t	class:basic_string_view	typeref:typename:const Char *
iterator	spdlog/fmt/bundled/core.h	/^    typedef typename basic_string_view<Char>::iterator iterator;$/;"	t	class:basic_parse_context	typeref:typename:basic_string_view<Char>::iterator
iterator_category	json.hpp	/^    using iterator_category = std::bidirectional_iterator_tag;$/;"	t	class:nlohmann::detail::iter_impl	typeref:typename:std::bidirectional_iterator_tag
iterator_wrapper	json.hpp	/^    static iteration_proxy<const_iterator> iterator_wrapper(const_reference ref) noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:JSON_DEPRECATED iteration_proxy<const_iterator>
iterator_wrapper	json.hpp	/^    static iteration_proxy<iterator> iterator_wrapper(reference ref) noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:JSON_DEPRECATED iteration_proxy<iterator>
ivory	spdlog/fmt/bundled/colors.h	/^    ivory = 0xFFFFF0,                   \/\/ rgb(255,255,240)$/;"	e	enum:color
join	spdlog/fmt/bundled/format.h	/^ArgJoin<char, It> join(It first, It last, const BasicCStringRef<char> &sep)$/;"	f	namespace:fmt	typeref:typename:ArgJoin<char,It>
join	spdlog/fmt/bundled/format.h	/^ArgJoin<wchar_t, It> join(It first, It last, const BasicCStringRef<wchar_t> &sep)$/;"	f	namespace:fmt	typeref:typename:ArgJoin<wchar_t,It>
join	spdlog/fmt/bundled/format.h	/^auto join(const Range &range, const BasicCStringRef<char> &sep) -> ArgJoin<char, decltype(std::b/;"	f	namespace:fmt	typeref:typename:ArgJoin<char,decltype (std::begin (range))>
join	spdlog/fmt/bundled/format.h	/^auto join(const Range &range, const BasicCStringRef<wchar_t> &sep) -> ArgJoin<wchar_t, decltype(/;"	f	namespace:fmt	typeref:typename:ArgJoin<wchar_t,decltype (std::begin (range))>
json	ble.cpp	/^using json = nlohmann::json;$/;"	t	typeref:typename:nlohmann::json	file:
json	ble.h	/^using json = nlohmann::json;$/;"	t	typeref:typename:nlohmann::json
json	json.hpp	/^using json = basic_json<>;$/;"	t	namespace:nlohmann	typeref:typename:basic_json<>
json	license-session.cpp	/^using json = nlohmann::json;$/;"	t	typeref:typename:nlohmann::json	file:
json	qc-session.cpp	/^using json = nlohmann::json;$/;"	t	typeref:typename:nlohmann::json	file:
json_pointer	json.hpp	/^    explicit json_pointer(const std::string& s = "")$/;"	f	class:nlohmann::json_pointer
json_pointer	json.hpp	/^    using json_pointer = ::nlohmann::json_pointer<basic_json>;$/;"	t	class:nlohmann::basic_json	typeref:typename:::nlohmann::json_pointer<basic_json>
json_pointer	json.hpp	/^class json_pointer$/;"	c	namespace:nlohmann
json_ref	json.hpp	/^    json_ref(Args&& ... args)$/;"	f	class:nlohmann::detail::json_ref
json_ref	json.hpp	/^    json_ref(const json_ref&) = delete;$/;"	p	class:nlohmann::detail::json_ref
json_ref	json.hpp	/^    json_ref(const value_type& value)$/;"	f	class:nlohmann::detail::json_ref
json_ref	json.hpp	/^    json_ref(json_ref&&) = default;$/;"	p	class:nlohmann::detail::json_ref
json_ref	json.hpp	/^    json_ref(std::initializer_list<json_ref> init)$/;"	f	class:nlohmann::detail::json_ref
json_ref	json.hpp	/^    json_ref(value_type&& value)$/;"	f	class:nlohmann::detail::json_ref
json_ref	json.hpp	/^class json_ref$/;"	c	namespace:nlohmann::detail
json_reverse_iterator	json.hpp	/^    json_reverse_iterator(const base_iterator& it) noexcept : base_iterator(it) {}$/;"	f	class:nlohmann::detail::json_reverse_iterator
json_reverse_iterator	json.hpp	/^    json_reverse_iterator(const typename base_iterator::iterator_type& it) noexcept$/;"	f	class:nlohmann::detail::json_reverse_iterator
json_reverse_iterator	json.hpp	/^    template<typename Base> using json_reverse_iterator = ::nlohmann::detail::json_reverse_itera/;"	t	class:nlohmann::basic_json	typeref:typename:::nlohmann::detail::json_reverse_iterator<Base>
json_reverse_iterator	json.hpp	/^class json_reverse_iterator : public std::reverse_iterator<Base>$/;"	c	namespace:nlohmann::detail
json_serializer	json.hpp	/^    using json_serializer = JSONSerializer<T, SFINAE>;$/;"	t	class:nlohmann::basic_json	typeref:typename:JSONSerializer<T,SFINAE>
json_value	json.hpp	/^        json_value() = default;$/;"	p	union:nlohmann::basic_json::json_value
json_value	json.hpp	/^        json_value(array_t&& value)$/;"	f	union:nlohmann::basic_json::json_value
json_value	json.hpp	/^        json_value(boolean_t v) noexcept : boolean(v) {}$/;"	f	union:nlohmann::basic_json::json_value
json_value	json.hpp	/^        json_value(const array_t& value)$/;"	f	union:nlohmann::basic_json::json_value
json_value	json.hpp	/^        json_value(const object_t& value)$/;"	f	union:nlohmann::basic_json::json_value
json_value	json.hpp	/^        json_value(const string_t& value)$/;"	f	union:nlohmann::basic_json::json_value
json_value	json.hpp	/^        json_value(number_float_t v) noexcept : number_float(v) {}$/;"	f	union:nlohmann::basic_json::json_value
json_value	json.hpp	/^        json_value(number_integer_t v) noexcept : number_integer(v) {}$/;"	f	union:nlohmann::basic_json::json_value
json_value	json.hpp	/^        json_value(number_unsigned_t v) noexcept : number_unsigned(v) {}$/;"	f	union:nlohmann::basic_json::json_value
json_value	json.hpp	/^        json_value(object_t&& value)$/;"	f	union:nlohmann::basic_json::json_value
json_value	json.hpp	/^        json_value(string_t&& value)$/;"	f	union:nlohmann::basic_json::json_value
json_value	json.hpp	/^        json_value(value_t t)$/;"	f	union:nlohmann::basic_json::json_value
json_value	json.hpp	/^    union json_value$/;"	u	class:nlohmann::basic_json
k	json.hpp	/^    int k;$/;"	m	struct:nlohmann::detail::dtoa_impl::cached_power	typeref:typename:int
kAlpha	json.hpp	/^constexpr int kAlpha = -60;$/;"	v	namespace:nlohmann::detail::dtoa_impl	typeref:typename:int
kAudioFieldNumber	qc-message.pb.cc	/^const int Protocol::kAudioFieldNumber;$/;"	m	class:Protocol	typeref:typename:const int
kAudioFieldNumber	qc-message.pb.h	/^  static const int kAudioFieldNumber = 5;$/;"	m	class:Protocol	typeref:typename:const int
kGamma	json.hpp	/^constexpr int kGamma = -32;$/;"	v	namespace:nlohmann::detail::dtoa_impl	typeref:typename:int
kImuFieldNumber	qc-message.pb.cc	/^const int Protocol::kImuFieldNumber;$/;"	m	class:Protocol	typeref:typename:const int
kImuFieldNumber	qc-message.pb.h	/^  static const int kImuFieldNumber = 6;$/;"	m	class:Protocol	typeref:typename:const int
kIndexInFileMessages	qc-message.pb.h	/^  static constexpr int kIndexInFileMessages =$/;"	m	class:Imu	typeref:typename:int
kIndexInFileMessages	qc-message.pb.h	/^  static constexpr int kIndexInFileMessages =$/;"	m	class:Protocol	typeref:typename:int
kKsooFieldNumber	qc-message.pb.cc	/^const int Protocol::kKsooFieldNumber;$/;"	m	class:Protocol	typeref:typename:const int
kKsooFieldNumber	qc-message.pb.h	/^  static const int kKsooFieldNumber = 7;$/;"	m	class:Protocol	typeref:typename:const int
kLeftMotorFieldNumber	qc-message.pb.cc	/^const int Protocol::kLeftMotorFieldNumber;$/;"	m	class:Protocol	typeref:typename:const int
kLeftMotorFieldNumber	qc-message.pb.h	/^  static const int kLeftMotorFieldNumber = 2;$/;"	m	class:Protocol	typeref:typename:const int
kPrecision	json.hpp	/^    static constexpr int kPrecision = 64; \/\/ = q$/;"	m	struct:nlohmann::detail::dtoa_impl::diyfp	typeref:typename:int
kRightMotorFieldNumber	qc-message.pb.cc	/^const int Protocol::kRightMotorFieldNumber;$/;"	m	class:Protocol	typeref:typename:const int
kRightMotorFieldNumber	qc-message.pb.h	/^  static const int kRightMotorFieldNumber = 3;$/;"	m	class:Protocol	typeref:typename:const int
kVideoFieldNumber	qc-message.pb.cc	/^const int Protocol::kVideoFieldNumber;$/;"	m	class:Protocol	typeref:typename:const int
kVideoFieldNumber	qc-message.pb.h	/^  static const int kVideoFieldNumber = 4;$/;"	m	class:Protocol	typeref:typename:const int
kXFieldNumber	qc-message.pb.cc	/^const int Imu::kXFieldNumber;$/;"	m	class:Imu	typeref:typename:const int
kXFieldNumber	qc-message.pb.h	/^  static const int kXFieldNumber = 1;$/;"	m	class:Imu	typeref:typename:const int
kYFieldNumber	qc-message.pb.cc	/^const int Imu::kYFieldNumber;$/;"	m	class:Imu	typeref:typename:const int
kYFieldNumber	qc-message.pb.h	/^  static const int kYFieldNumber = 2;$/;"	m	class:Imu	typeref:typename:const int
key	json.hpp	/^        key,$/;"	e	enum:nlohmann::detail::parser::parse_event_t
key	json.hpp	/^        std::string key() const$/;"	f	class:nlohmann::detail::iteration_proxy::iteration_proxy_internal	typeref:typename:std::string
key	json.hpp	/^    auto key() const -> decltype(std::declval<Base>().key())$/;"	f	class:nlohmann::detail::json_reverse_iterator	typeref:typename:decltype (std::declval<Base> ().key ())
key	json.hpp	/^    typename object_t::key_type key() const$/;"	f	class:nlohmann::detail::iter_impl	typeref:typename:object_t::key_type
key	qcustomplot.h	/^  double key() const { return mKey; }$/;"	f	class:QCPItemPosition	typeref:typename:double
key	qcustomplot.h	/^  double key, minimum, lowerQuartile, median, upperQuartile, maximum;$/;"	m	class:QCPStatisticalBoxData	typeref:typename:double
key	qcustomplot.h	/^  double key, open, high, low, close;$/;"	m	class:QCPFinancialData	typeref:typename:double
key	qcustomplot.h	/^  double key, value;$/;"	m	class:QCPBarsData	typeref:typename:double
key	qcustomplot.h	/^  double key, value;$/;"	m	class:QCPGraphData	typeref:typename:double
key	qcustomplot.h	/^  double t, key, value;$/;"	m	class:QCPCurveData	typeref:typename:double
keyAxis	qcustomplot.h	/^  QCPAxis *keyAxis() const { return mKeyAxis.data(); }$/;"	f	class:QCPAbstractPlottable	typeref:typename:QCPAxis *
keyAxis	qcustomplot.h	/^  QCPAxis *keyAxis() const { return mKeyAxis.data(); }$/;"	f	class:QCPItemPosition	typeref:typename:QCPAxis *
keyPixelOffset	qcustomplot.cpp	/^double QCPBarsGroup::keyPixelOffset(const QCPBars *bars, double keyCoord)$/;"	f	class:QCPBarsGroup	typeref:typename:double
keyPixelOffset	qcustomplot.h	/^  double keyPixelOffset(const QCPBars *bars, double keyCoord);$/;"	p	class:QCPBarsGroup	typeref:typename:double
keyPressEvent	qcustomplot.cpp	/^void QCPSelectionRect::keyPressEvent(QKeyEvent *event)$/;"	f	class:QCPSelectionRect	typeref:typename:void
keyPressEvent	qcustomplot.h	/^  virtual void keyPressEvent(QKeyEvent *event);$/;"	p	class:QCPSelectionRect	typeref:typename:void
keyRange	qcustomplot.h	/^  QCPRange keyRange() const { return mKeyRange; }$/;"	f	class:QCPColorMapData	typeref:typename:QCPRange
keyRange	qcustomplot.h	/^  QCPRange keyRange(bool &foundRange, QCP::SignDomain signDomain=QCP::sdBoth);$/;"	p	class:QCPDataContainer	typeref:typename:QCPRange
keyRange	qcustomplot.h	/^QCPRange QCPDataContainer<DataType>::keyRange(bool &foundRange, QCP::SignDomain signDomain)$/;"	f	class:QCPDataContainer	typeref:typename:QCPRange
keySize	qcustomplot.h	/^  int keySize() const { return mKeySize; }$/;"	f	class:QCPColorMapData	typeref:typename:int
keyToDateTime	qcustomplot.cpp	/^QDateTime QCPAxisTickerDateTime::keyToDateTime(double key)$/;"	f	class:QCPAxisTickerDateTime	typeref:typename:QDateTime
keyToDateTime	qcustomplot.h	/^  static QDateTime keyToDateTime(double key);$/;"	p	class:QCPAxisTickerDateTime	typeref:typename:QDateTime
khaki	spdlog/fmt/bundled/colors.h	/^    khaki = 0xF0E68C,                   \/\/ rgb(240,230,140)$/;"	e	enum:color
ks19937	ks19937.h	/^struct ks19937 {$/;"	s
ksoo	qc-message.pb.h	/^inline ::google::protobuf::int32 Protocol::ksoo() const {$/;"	f	class:Protocol	typeref:typename:::google::protobuf::int32
ksoo	qc-message.proto	/^optional int32 ksoo = 7;$/;"	f
label	protobuf-c/protobuf-c.h	/^	ProtobufCLabel		label;$/;"	m	struct:ProtobufCFieldDescriptor	typeref:typename:ProtobufCLabel
label	qcustomplot.cpp	/^QString QCPColorScale::label() const$/;"	f	class:QCPColorScale	typeref:typename:QString
label	qcustomplot.h	/^  QString label() const { return mLabel; }$/;"	f	class:QCPAxis	typeref:typename:QString
label	qcustomplot.h	/^  QString label() const;$/;"	p	class:QCPColorScale	typeref:typename:QString
label	qcustomplot.h	/^  QString label;$/;"	m	class:QCPAxisPainterPrivate	typeref:typename:QString
label	qcustomplot.h	/^  Q_PROPERTY(QString label READ label WRITE setLabel)$/;"	p	class:QCPAxis	typeref:typename:QString
label	qcustomplot.h	/^  Q_PROPERTY(QString label READ label WRITE setLabel)$/;"	p	class:QCPColorScale	typeref:typename:QString
labelColor	qcustomplot.h	/^  QColor labelColor() const { return mLabelColor; }$/;"	f	class:QCPAxis	typeref:typename:QColor
labelColor	qcustomplot.h	/^  QColor labelColor;$/;"	m	class:QCPAxisPainterPrivate	typeref:typename:QColor
labelColor	qcustomplot.h	/^  Q_PROPERTY(QColor labelColor READ labelColor WRITE setLabelColor)$/;"	p	class:QCPAxis	typeref:typename:QColor
labelFont	qcustomplot.h	/^  QFont labelFont() const { return mLabelFont; }$/;"	f	class:QCPAxis	typeref:typename:QFont
labelFont	qcustomplot.h	/^  QFont labelFont;$/;"	m	class:QCPAxisPainterPrivate	typeref:typename:QFont
labelFont	qcustomplot.h	/^  Q_PROPERTY(QFont labelFont READ labelFont WRITE setLabelFont)$/;"	p	class:QCPAxis	typeref:typename:QFont
labelPadding	qcustomplot.cpp	/^int QCPAxis::labelPadding() const$/;"	f	class:QCPAxis	typeref:typename:int
labelPadding	qcustomplot.h	/^  Q_PROPERTY(int labelPadding READ labelPadding WRITE setLabelPadding)$/;"	p	class:QCPAxis	typeref:typename:int
labelPadding	qcustomplot.h	/^  int labelPadding() const;$/;"	p	class:QCPAxis	typeref:typename:int
labelPadding	qcustomplot.h	/^  int labelPadding; \/\/ directly accessed by QCPAxis setters\/getters$/;"	m	class:QCPAxisPainterPrivate	typeref:typename:int
labelSelectionBox	qcustomplot.h	/^  QRect labelSelectionBox() const { return mLabelSelectionBox; }$/;"	f	class:QCPAxisPainterPrivate	typeref:typename:QRect
last	spdlog/fmt/bundled/format.h	/^    It last;$/;"	m	struct:fmt::ArgJoin	typeref:typename:It
last_integer_type	spdlog/fmt/bundled/core.h	/^    last_integer_type = char_type,$/;"	e	enum:internal::type
last_log_secs_	spdlog/details/pattern_formatter.h	/^    std::chrono::seconds last_log_secs_;$/;"	m	class:spdlog::SPDLOG_FINAL	typeref:typename:std::chrono::seconds
last_numeric_type	spdlog/fmt/bundled/core.h	/^    last_numeric_type = long_double_type,$/;"	e	enum:internal::type
last_token	json.hpp	/^    token_type last_token = token_type::uninitialized;$/;"	m	class:nlohmann::detail::parser	typeref:typename:token_type
last_update_	spdlog/details/pattern_formatter.h	/^    log_clock::time_point last_update_{std::chrono::seconds(0)};$/;"	m	class:spdlog::details::SPDLOG_FINAL	typeref:typename:log_clock::time_point
latency	simple.pb-c.h	/^  uint32_t latency;$/;"	m	struct:_ToHost	typeref:typename:uint32_t
latency	simple.proto	/^    optional uint32 latency = 6; \/\/ hi 가 올려주는 latency$/;"	f
lavender	spdlog/fmt/bundled/colors.h	/^    lavender = 0xE6E6FA,                \/\/ rgb(230,230,250)$/;"	e	enum:color
lavender_blush	spdlog/fmt/bundled/colors.h	/^    lavender_blush = 0xFFF0F5,          \/\/ rgb(255,240,245)$/;"	e	enum:color
lawn_green	spdlog/fmt/bundled/colors.h	/^    lawn_green = 0x7CFC00,              \/\/ rgb(124,252,0)$/;"	e	enum:color
layer	qcustomplot.cpp	/^QCPLayer *QCustomPlot::layer(const QString &name) const$/;"	f	class:QCustomPlot	typeref:typename:QCPLayer *
layer	qcustomplot.cpp	/^QCPLayer *QCustomPlot::layer(int index) const$/;"	f	class:QCustomPlot	typeref:typename:QCPLayer *
layer	qcustomplot.h	/^  QCPLayer *layer() const { return mLayer; }$/;"	f	class:QCPLayerable	typeref:typename:QCPLayer *
layer	qcustomplot.h	/^  QCPLayer *layer(const QString &name) const;$/;"	p	class:QCustomPlot	typeref:typename:QCPLayer *
layer	qcustomplot.h	/^  QCPLayer *layer(int index) const;$/;"	p	class:QCustomPlot	typeref:typename:QCPLayer *
layerChanged	qcustomplot.h	/^  void layerChanged(QCPLayer *newLayer);$/;"	S	class:QCPLayerable	typeref:typename:void
layerChanged	qcustomplot.h	/^  void layerChanged(QCPLayer *newLayer);$/;"	p	class:QCPLayerable	typeref:typename:void
layerCount	qcustomplot.cpp	/^int QCustomPlot::layerCount() const$/;"	f	class:QCustomPlot	typeref:typename:int
layerCount	qcustomplot.h	/^  int layerCount() const;$/;"	p	class:QCustomPlot	typeref:typename:int
layerableAt	qcustomplot.cpp	/^QCPLayerable *QCustomPlot::layerableAt(const QPointF &pos, bool onlySelectable, QVariant *select/;"	f	class:QCustomPlot	typeref:typename:QCPLayerable *
layerableAt	qcustomplot.h	/^  QCPLayerable *layerableAt(const QPointF &pos, bool onlySelectable, QVariant *selectionDetails=/;"	p	class:QCustomPlot	typeref:typename:QCPLayerable *
layerableListAt	qcustomplot.cpp	/^QList<QCPLayerable*> QCustomPlot::layerableListAt(const QPointF &pos, bool onlySelectable, QList/;"	f	class:QCustomPlot	typeref:typename:QList<QCPLayerable * >
layerableListAt	qcustomplot.h	/^  QList<QCPLayerable*> layerableListAt(const QPointF &pos, bool onlySelectable, QList<QVariant> /;"	p	class:QCustomPlot	typeref:typename:QList<QCPLayerable * >
layout	qcustomplot.h	/^  QCPLayout *layout() const { return mParentLayout; }$/;"	f	class:QCPLayoutElement	typeref:typename:QCPLayout *
layoutChanged	qcustomplot.cpp	/^void QCPAxisRect::layoutChanged()$/;"	f	class:QCPAxisRect	typeref:typename:void
layoutChanged	qcustomplot.cpp	/^void QCPLayoutElement::layoutChanged()$/;"	f	class:QCPLayoutElement	typeref:typename:void
layoutChanged	qcustomplot.h	/^  virtual void layoutChanged() Q_DECL_OVERRIDE;$/;"	p	class:QCPAxisRect	typeref:typename:void
layoutChanged	qcustomplot.h	/^  virtual void layoutChanged();$/;"	p	class:QCPLayoutElement	typeref:typename:void
layoutElementAt	qcustomplot.cpp	/^QCPLayoutElement *QCustomPlot::layoutElementAt(const QPointF &pos) const$/;"	f	class:QCustomPlot	typeref:typename:QCPLayoutElement *
layoutElementAt	qcustomplot.h	/^  QCPLayoutElement* layoutElementAt(const QPointF &pos) const;$/;"	p	class:QCustomPlot	typeref:typename:QCPLayoutElement *
led_control	simple.pb-c.h	/^  LedControl *led_control;$/;"	m	struct:_ToSt	typeref:typename:LedControl *
led_control	simple.proto	/^    optional LedControl led_control = 4;$/;"	f
led_control__descriptor	simple.pb-c.c	/^const ProtobufCMessageDescriptor led_control__descriptor =$/;"	v	typeref:typename:const ProtobufCMessageDescriptor
led_control__field_descriptors	simple.pb-c.c	/^static const ProtobufCFieldDescriptor led_control__field_descriptors[3] =$/;"	v	typeref:typename:const ProtobufCFieldDescriptor[3]	file:
led_control__field_indices_by_name	simple.pb-c.c	/^static const unsigned led_control__field_indices_by_name[] = {$/;"	v	typeref:typename:const unsigned[]	file:
led_control__free_unpacked	simple.pb-c.c	/^void   led_control__free_unpacked$/;"	f	typeref:typename:void
led_control__free_unpacked	simple.pb-c.h	/^void   led_control__free_unpacked$/;"	p	typeref:typename:void
led_control__get_packed_size	simple.pb-c.c	/^size_t led_control__get_packed_size$/;"	f	typeref:typename:size_t
led_control__get_packed_size	simple.pb-c.h	/^size_t led_control__get_packed_size$/;"	p	typeref:typename:size_t
led_control__init	simple.pb-c.c	/^void   led_control__init$/;"	f	typeref:typename:void
led_control__init	simple.pb-c.h	/^void   led_control__init$/;"	p	typeref:typename:void
led_control__number_ranges	simple.pb-c.c	/^static const ProtobufCIntRange led_control__number_ranges[1 + 1] =$/;"	v	typeref:typename:const ProtobufCIntRange[]	file:
led_control__pack	simple.pb-c.c	/^size_t led_control__pack$/;"	f	typeref:typename:size_t
led_control__pack	simple.pb-c.h	/^size_t led_control__pack$/;"	p	typeref:typename:size_t
led_control__pack_to_buffer	simple.pb-c.c	/^size_t led_control__pack_to_buffer$/;"	f	typeref:typename:size_t
led_control__pack_to_buffer	simple.pb-c.h	/^size_t led_control__pack_to_buffer$/;"	p	typeref:typename:size_t
led_control__unpack	simple.pb-c.c	/^       led_control__unpack$/;"	f	typeref:typename:LedControl *
led_control__unpack	simple.pb-c.h	/^       led_control__unpack$/;"	p	typeref:typename:LedControl *
left	protocol-struct.h	/^    int16_t left;$/;"	m	struct:CONTROL_REMOTE	typeref:typename:int16_t
left	qcustomplot.h	/^  QCPItemAnchor * const left;$/;"	m	class:QCPItemEllipse	typeref:typename:QCPItemAnchor * const
left	qcustomplot.h	/^  QCPItemAnchor * const left;$/;"	m	class:QCPItemPixmap	typeref:typename:QCPItemAnchor * const
left	qcustomplot.h	/^  QCPItemAnchor * const left;$/;"	m	class:QCPItemRect	typeref:typename:QCPItemAnchor * const
left	qcustomplot.h	/^  QCPItemAnchor * const left;$/;"	m	class:QCPItemText	typeref:typename:QCPItemAnchor * const
left	qcustomplot.h	/^  QCPItemPosition * const left;$/;"	m	class:QCPItemBracket	typeref:typename:QCPItemPosition * const
left	qcustomplot.h	/^  int left() const { return mRect.left(); }$/;"	f	class:QCPAxisRect	typeref:typename:int
left	simple.pb-c.h	/^  uint32_t left;$/;"	m	struct:_EncoderControl	typeref:typename:uint32_t
left	simple.pb-c.h	/^  uint32_t left;$/;"	m	struct:_LedControl	typeref:typename:uint32_t
left	simple.proto	/^    optional uint32 left = 1;$/;"	f
left_motor	qc-message.pb.h	/^inline ::google::protobuf::int32 Protocol::left_motor() const {$/;"	f	class:Protocol	typeref:typename:::google::protobuf::int32
left_motor	qc-message.proto	/^optional int32 left_motor = 2;$/;"	f
left_motor	simple.pb-c.h	/^  int32_t left_motor;$/;"	m	struct:_RoughMotorControl	typeref:typename:int32_t
left_motor	simple.pb-c.h	/^  int32_t left_motor;$/;"	m	struct:_SmoothMotorControlDeprecated	typeref:typename:int32_t
left_motor	simple.proto	/^    optional int32 left_motor = 1;		\/\/0~60rpm$/;"	f
left_motor	simple.proto	/^    optional int32 left_motor = 1;$/;"	f
legend	qcustomplot.h	/^  QCPLegend *legend;$/;"	m	class:QCustomPlot	typeref:typename:QCPLegend *
legendClick	qcustomplot.h	/^  void legendClick(QCPLegend *legend, QCPAbstractLegendItem *item, QMouseEvent *event);$/;"	S	class:QCustomPlot	typeref:typename:void
legendClick	qcustomplot.h	/^  void legendClick(QCPLegend *legend, QCPAbstractLegendItem *item, QMouseEvent *event);$/;"	p	class:QCustomPlot	typeref:typename:void
legendDoubleClick	qcustomplot.h	/^  void legendDoubleClick(QCPLegend *legend,  QCPAbstractLegendItem *item, QMouseEvent *event);$/;"	S	class:QCustomPlot	typeref:typename:void
legendDoubleClick	qcustomplot.h	/^  void legendDoubleClick(QCPLegend *legend,  QCPAbstractLegendItem *item, QMouseEvent *event);$/;"	p	class:QCustomPlot	typeref:typename:void
legendRemoved	qcustomplot.cpp	/^void QCustomPlot::legendRemoved(QCPLegend *legend)$/;"	f	class:QCustomPlot	typeref:typename:void
legendRemoved	qcustomplot.h	/^  virtual void legendRemoved(QCPLegend *legend);$/;"	p	class:QCustomPlot	typeref:typename:void
lemon_chiffon	spdlog/fmt/bundled/colors.h	/^    lemon_chiffon = 0xFFFACD,           \/\/ rgb(255,250,205)$/;"	e	enum:color
len	protobuf-c/protobuf-c.c	/^	size_t len;                \/**< Field length. *\/$/;"	m	struct:_ScannedMember	typeref:typename:size_t	file:
len	protobuf-c/protobuf-c.h	/^	size_t			len;$/;"	m	struct:ProtobufCBufferSimple	typeref:typename:size_t
len	protobuf-c/protobuf-c.h	/^	size_t			len;$/;"	m	struct:ProtobufCMessageUnknownField	typeref:typename:size_t
len	protobuf-c/protobuf-c.h	/^	size_t	len;        \/**< Number of bytes in the `data` field. *\/$/;"	m	struct:ProtobufCBinaryData	typeref:typename:size_t
lenc	simple.pb-c.h	/^  int32_t lenc;$/;"	m	struct:_ToHi	typeref:typename:int32_t
lenc	simple.proto	/^    optional int32 lenc = 19; \/\/left motor rpm$/;"	f
length	protocol-struct.h	/^    uint16_t length;$/;"	m	struct:ProtocolWithSTM	typeref:typename:uint16_t
length	protocol-struct.h	/^    uint32_t length;$/;"	m	struct:ModernProtocolWithSTM	typeref:typename:uint32_t
length	protocol-struct.h	/^    uint8_t length[3];$/;"	m	struct:InnerProtocolWithSTM	typeref:typename:uint8_t[3]
length	qcustomplot.h	/^  Q_PROPERTY(double length READ length WRITE setLength)$/;"	p	class:QCPItemBracket	typeref:typename:double
length	qcustomplot.h	/^  double length() const { return mLength; }$/;"	f	class:QCPItemBracket	typeref:typename:double
length	qcustomplot.h	/^  double length() const { return mLength; }$/;"	f	class:QCPLineEnding	typeref:typename:double
length	qcustomplot.h	/^  double length() const { return qSqrt(mX*mX+mY*mY); }$/;"	f	class:QCPVector2D	typeref:typename:double
length	qcustomplot.h	/^  int length() const { return size(); }$/;"	f	class:QCPDataRange	typeref:typename:int
length	stb_image.h	/^   stbi__uint32 length;$/;"	m	struct:__anon84e4e8860b08	typeref:typename:stbi__uint32
lengthSquared	qcustomplot.h	/^  double lengthSquared() const { return mX*mX+mY*mY; }$/;"	f	class:QCPVector2D	typeref:typename:double
length_prefix_len	protobuf-c/protobuf-c.c	/^	uint8_t length_prefix_len; \/**< Prefix length. *\/$/;"	m	struct:_ScannedMember	typeref:typename:uint8_t	file:
less	json.hpp	/^struct less< ::nlohmann::detail::value_t>$/;"	s	namespace:std
lessThanDataRangeBegin	qcustomplot.h	/^  inline static bool lessThanDataRangeBegin(const QCPDataRange &a, const QCPDataRange &b) { retu/;"	f	class:QCPDataSelection	typeref:typename:bool
level	spdlog/common.h	/^namespace level {$/;"	n	namespace:spdlog
level	spdlog/details/async_log_helper.h	/^        level::level_enum level;$/;"	m	struct:spdlog::details::async_log_helper::async_msg	typeref:typename:level::level_enum
level	spdlog/details/log_msg.h	/^    level::level_enum level;$/;"	m	struct:spdlog::details::log_msg	typeref:typename:level::level_enum
level	spdlog/details/logger_impl.h	/^inline spdlog::level::level_enum spdlog::logger::level() const$/;"	f	class:spdlog::logger	typeref:typename:spdlog::level::level_enum
level	spdlog/details/thread_pool.h	/^    level::level_enum level;$/;"	m	struct:spdlog::details::async_msg	typeref:typename:level::level_enum
level	spdlog/logger.h	/^    level::level_enum level() const;$/;"	p	class:spdlog::logger	typeref:typename:level::level_enum
level	spdlog/sinks/sink.h	/^    level::level_enum level() const;$/;"	p	class:spdlog::sinks::sink	typeref:typename:level::level_enum
level	spdlog/sinks/sink.h	/^inline level::level_enum sink::level() const$/;"	f	class:spdlog::sinks::sink	typeref:typename:level::level_enum
levelCount	qcustomplot.h	/^  int levelCount() const { return mLevelCount; }$/;"	f	class:QCPColorGradient	typeref:typename:int
level_enum	spdlog/common.h	/^enum level_enum$/;"	g	namespace:spdlog::level
level_formatter	spdlog/details/pattern_formatter.h	/^class level_formatter : public flag_formatter$/;"	c	namespace:spdlog::details
level_formatter	spdlog/details/pattern_formatter_impl.h	/^class level_formatter : public flag_formatter$/;"	c	namespace:spdlog::details
level_hasher	spdlog/common.h	/^using level_hasher = std::hash<int>;$/;"	t	namespace:spdlog::level	typeref:typename:std::hash<int>
level_names	spdlog/common.h	/^static const char *level_names[] SPDLOG_LEVEL_NAMES;$/;"	v	namespace:spdlog::level	typeref:typename:const char * []SPDLOG_LEVEL_NAMES
level_t	spdlog/common.h	/^using level_t = details::null_atomic_int;$/;"	t	namespace:spdlog	typeref:typename:details::null_atomic_int
level_t	spdlog/common.h	/^using level_t = std::atomic<int>;$/;"	t	namespace:spdlog	typeref:typename:std::atomic<int>
lexer	json.hpp	/^    explicit lexer(detail::input_adapter_t adapter)$/;"	f	class:nlohmann::detail::lexer
lexer	json.hpp	/^    lexer(const lexer&) = delete;$/;"	p	class:nlohmann::detail::lexer
lexer	json.hpp	/^    using lexer = ::nlohmann::detail::lexer<basic_json>;$/;"	t	class:nlohmann::basic_json	typeref:typename:::nlohmann::detail::lexer<basic_json>
lexer	json.hpp	/^class lexer$/;"	c	namespace:nlohmann::detail
lexer_t	json.hpp	/^    using lexer_t = lexer<BasicJsonType>;$/;"	t	class:nlohmann::detail::parser	typeref:typename:lexer<BasicJsonType>
lflags	stb_image.h	/^   int lflags;$/;"	m	struct:__anon84e4e8861108	typeref:typename:int
light_blue	spdlog/fmt/bundled/colors.h	/^    light_blue = 0xADD8E6,              \/\/ rgb(173,216,230)$/;"	e	enum:color
light_coral	spdlog/fmt/bundled/colors.h	/^    light_coral = 0xF08080,             \/\/ rgb(240,128,128)$/;"	e	enum:color
light_cyan	spdlog/fmt/bundled/colors.h	/^    light_cyan = 0xE0FFFF,              \/\/ rgb(224,255,255)$/;"	e	enum:color
light_golden_rod_yellow	spdlog/fmt/bundled/colors.h	/^    light_golden_rod_yellow = 0xFAFAD2, \/\/ rgb(250,250,210)$/;"	e	enum:color
light_gray	spdlog/fmt/bundled/colors.h	/^    light_gray = 0xD3D3D3,              \/\/ rgb(211,211,211)$/;"	e	enum:color
light_green	spdlog/fmt/bundled/colors.h	/^    light_green = 0x90EE90,             \/\/ rgb(144,238,144)$/;"	e	enum:color
light_pink	spdlog/fmt/bundled/colors.h	/^    light_pink = 0xFFB6C1,              \/\/ rgb(255,182,193)$/;"	e	enum:color
light_salmon	spdlog/fmt/bundled/colors.h	/^    light_salmon = 0xFFA07A,            \/\/ rgb(255,160,122)$/;"	e	enum:color
light_sea_green	spdlog/fmt/bundled/colors.h	/^    light_sea_green = 0x20B2AA,         \/\/ rgb(32,178,170)$/;"	e	enum:color
light_sky_blue	spdlog/fmt/bundled/colors.h	/^    light_sky_blue = 0x87CEFA,          \/\/ rgb(135,206,250)$/;"	e	enum:color
light_slate_gray	spdlog/fmt/bundled/colors.h	/^    light_slate_gray = 0x778899,        \/\/ rgb(119,136,153)$/;"	e	enum:color
light_steel_blue	spdlog/fmt/bundled/colors.h	/^    light_steel_blue = 0xB0C4DE,        \/\/ rgb(176,196,222)$/;"	e	enum:color
light_yellow	spdlog/fmt/bundled/colors.h	/^    light_yellow = 0xFFFFE0,            \/\/ rgb(255,255,224)$/;"	e	enum:color
limAbove	qcustomplot.h	/^                         ,limAbove \/\/\/< Layer is inserted above other layer$/;"	e	enum:QCustomPlot::LayerInsertMode
limBelow	qcustomplot.h	/^  enum LayerInsertMode { limBelow  \/\/\/< Layer is inserted below other layer$/;"	e	enum:QCustomPlot::LayerInsertMode
lime	spdlog/fmt/bundled/colors.h	/^    lime = 0x00FF00,                    \/\/ rgb(0,255,0)$/;"	e	enum:color
lime_green	spdlog/fmt/bundled/colors.h	/^    lime_green = 0x32CD32,              \/\/ rgb(50,205,50)$/;"	e	enum:color
limit	json.hpp	/^    const char* limit;$/;"	m	class:nlohmann::detail::input_buffer_adapter	typeref:typename:const char *
limitIteratorsToDataRange	qcustomplot.h	/^  void limitIteratorsToDataRange(const_iterator &begin, const_iterator &end, const QCPDataRange /;"	p	class:QCPDataContainer	typeref:typename:void
limitIteratorsToDataRange	qcustomplot.h	/^void QCPDataContainer<DataType>::limitIteratorsToDataRange(const_iterator &begin, const_iterator/;"	f	class:QCPDataContainer	typeref:typename:void
line0	stb_image.h	/^   stbi_uc *line0,*line1;$/;"	m	struct:__anon84e4e8860808	typeref:typename:stbi_uc *
line1	stb_image.h	/^   stbi_uc *line0,*line1;$/;"	m	struct:__anon84e4e8860808	typeref:typename:stbi_uc **
lineStyle	qcustomplot.h	/^  LineStyle lineStyle() const { return mLineStyle; }$/;"	f	class:QCPCurve	typeref:typename:LineStyle
lineStyle	qcustomplot.h	/^  LineStyle lineStyle() const { return mLineStyle; }$/;"	f	class:QCPGraph	typeref:typename:LineStyle
lineStyle	qcustomplot.h	/^  Q_PROPERTY(LineStyle lineStyle READ lineStyle WRITE setLineStyle)$/;"	p	class:QCPCurve	typeref:typename:LineStyle
lineStyle	qcustomplot.h	/^  Q_PROPERTY(LineStyle lineStyle READ lineStyle WRITE setLineStyle)$/;"	p	class:QCPGraph	typeref:typename:LineStyle
line_size	stb_image.h	/^   int line_size;$/;"	m	struct:__anon84e4e8861108	typeref:typename:int
linebuf	stb_image.h	/^      stbi_uc *linebuf;$/;"	m	struct:__anon84e4e8860608::__anon84e4e8860708	typeref:typename:stbi_uc *
linen	spdlog/fmt/bundled/colors.h	/^    linen = 0xFAF0E6,                   \/\/ rgb(250,240,230)$/;"	e	enum:color
literal_false	json.hpp	/^        literal_false,    \/\/\/< the `false` literal$/;"	e	enum:nlohmann::detail::lexer::token_type
literal_null	json.hpp	/^        literal_null,     \/\/\/< the `null` literal$/;"	e	enum:nlohmann::detail::lexer::token_type
literal_or_value	json.hpp	/^        literal_or_value  \/\/\/< a literal or the begin of a value (only for diagnostics)$/;"	e	enum:nlohmann::detail::lexer::token_type
literal_true	json.hpp	/^        literal_true,     \/\/\/< the `true` literal$/;"	e	enum:nlohmann::detail::lexer::token_type
literals	spdlog/fmt/bundled/format.h	/^inline namespace literals {$/;"	n	namespace:fmt
little_endianess	json.hpp	/^    static constexpr bool little_endianess(int num = 1) noexcept$/;"	f	class:nlohmann::detail::binary_reader	typeref:typename:bool
lmBuffered	qcustomplot.h	/^                   ,lmBuffered \/\/\/< Layer has its own paint buffer and may be replotted indiv/;"	e	enum:QCPLayer::LayerMode
lmLogical	qcustomplot.h	/^  enum LayerMode { lmLogical   \/\/\/< Layer is used only for rendering order, and shares paint /;"	e	enum:QCPLayer::LayerMode
load	spdlog/details/null_mutex.h	/^    int load(std::memory_order) const$/;"	f	struct:spdlog::details::null_atomic_int	typeref:typename:int
loadPreset	qcustomplot.cpp	/^void QCPColorGradient::loadPreset(GradientPreset preset)$/;"	f	class:QCPColorGradient	typeref:typename:void
loadPreset	qcustomplot.h	/^  void loadPreset(GradientPreset preset);$/;"	p	class:QCPColorGradient	typeref:typename:void
load_jpeg_image	stb_image.h	/^static stbi_uc *load_jpeg_image(stbi__jpeg *z, int *out_x, int *out_y, int *comp, int req_comp)$/;"	f	typeref:typename:stbi_uc *
loc	json.hpp	/^    const std::lconv* loc = nullptr;$/;"	m	class:nlohmann::detail::serializer	typeref:typename:const std::lconv *
local	spdlog/common.h	/^    local, \/\/ log localtime$/;"	e	enum:spdlog::pattern_time_type
locale	spdlog/fmt/bundled/format-inl.h	/^    explicit locale(std::locale loc = std::locale())$/;"	f	class:locale
locale	spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC locale locale_provider::locale()$/;"	f	class:locale_provider	typeref:typename:FMT_FUNC locale
locale	spdlog/fmt/bundled/format-inl.h	/^class locale$/;"	c
locale	spdlog/fmt/bundled/locale.h	/^    explicit locale(std::locale loc = std::locale())$/;"	f	class:fmt::locale
locale	spdlog/fmt/bundled/locale.h	/^class locale$/;"	c	namespace:fmt
locale_	spdlog/fmt/bundled/format-inl.h	/^    std::locale locale_;$/;"	m	class:locale	typeref:typename:std::locale
locale_	spdlog/fmt/bundled/locale.h	/^    std::locale locale_;$/;"	m	class:fmt::locale	typeref:typename:std::locale
locale_	spdlog/fmt/bundled/posix.h	/^    locale_t locale_;$/;"	m	class:fmt::Locale	typeref:typename:locale_t
locale_t	spdlog/fmt/bundled/posix.h	/^    typedef _locale_t locale_t;$/;"	t	class:fmt::Locale	typeref:typename:_locale_t
localtime	spdlog/details/os.h	/^inline std::tm localtime()$/;"	f	namespace:spdlog::details::os	typeref:typename:std::tm
localtime	spdlog/details/os.h	/^inline std::tm localtime(const std::time_t &time_tt)$/;"	f	namespace:spdlog::details::os	typeref:typename:std::tm
localtime	spdlog/fmt/bundled/time.h	/^inline std::tm localtime(std::time_t time)$/;"	f	namespace:fmt	typeref:typename:std::tm
localtime_r	spdlog/fmt/bundled/time.h	/^inline Null<> localtime_r(...)$/;"	f	namespace:fmt::internal	typeref:typename:Null<>
localtime_s	spdlog/fmt/bundled/time.h	/^inline Null<> localtime_s(...)$/;"	f	namespace:fmt::internal	typeref:typename:Null<>
lock	spdlog/details/null_mutex.h	/^    void lock() {}$/;"	f	struct:spdlog::details::null_mutex	typeref:typename:void
log	spdlog/details/async_log_helper.h	/^        log,$/;"	e	enum:spdlog::details::async_log_helper::async_msg_type
log	spdlog/details/async_log_helper.h	/^    void log(const details::log_msg &msg);$/;"	p	class:spdlog::details::async_log_helper	typeref:typename:void
log	spdlog/details/async_log_helper.h	/^inline void spdlog::details::async_log_helper::log(const details::log_msg &msg)$/;"	f	class:spdlog::details::async_log_helper	typeref:typename:void
log	spdlog/details/logger_impl.h	/^inline void spdlog::logger::log(level::level_enum lvl, const T &msg)$/;"	f	class:spdlog::logger	typeref:typename:void
log	spdlog/details/logger_impl.h	/^inline void spdlog::logger::log(level::level_enum lvl, const char *fmt, const Args &... args)$/;"	f	class:spdlog::logger	typeref:typename:void
log	spdlog/details/logger_impl.h	/^inline void spdlog::logger::log(level::level_enum lvl, const char *msg)$/;"	f	class:spdlog::logger	typeref:typename:void
log	spdlog/details/logger_impl.h	/^inline void spdlog::logger::log(level::level_enum lvl, const wchar_t *fmt, const Args &... args)$/;"	f	class:spdlog::logger	typeref:typename:void
log	spdlog/details/logger_impl.h	/^inline void spdlog::logger::log(level::level_enum lvl, const wchar_t *msg)$/;"	f	class:spdlog::logger	typeref:typename:void
log	spdlog/details/thread_pool.h	/^    log,$/;"	e	enum:spdlog::details::async_msg_type
log	spdlog/logger.h	/^    void log(level::level_enum lvl, const T &);$/;"	p	class:spdlog::logger	typeref:typename:void
log	spdlog/logger.h	/^    void log(level::level_enum lvl, const char *fmt, const Args &... args);$/;"	p	class:spdlog::logger	typeref:typename:void
log	spdlog/logger.h	/^    void log(level::level_enum lvl, const char *msg);$/;"	p	class:spdlog::logger	typeref:typename:void
log	spdlog/logger.h	/^    void log(level::level_enum lvl, const wchar_t *fmt, const Args &... args);$/;"	p	class:spdlog::logger	typeref:typename:void
log	spdlog/logger.h	/^    void log(level::level_enum lvl, const wchar_t *msg);$/;"	p	class:spdlog::logger	typeref:typename:void
log	spdlog/sinks/android_sink.h	/^    void log(const details::log_msg &msg) override$/;"	f	class:spdlog::sinks::android_sink	typeref:typename:void
log	spdlog/sinks/base_sink.h	/^    void log(const details::log_msg &msg) SPDLOG_FINAL override$/;"	f	class:spdlog::sinks::base_sink	typeref:typename:void
log	spdlog/sinks/sink.h	/^    virtual void log(const details::log_msg &msg) = 0;$/;"	p	class:spdlog::sinks::sink	typeref:typename:void
log	spdlog/sinks/syslog_sink.h	/^    void log(const details::log_msg &msg) override$/;"	f	class:spdlog::sinks::syslog_sink	typeref:typename:void
logBase	qcustomplot.h	/^  double logBase() const { return mLogBase; }$/;"	f	class:QCPAxisTickerLog	typeref:typename:double
log_clock	spdlog/common.h	/^using log_clock = std::chrono::system_clock;$/;"	t	namespace:spdlog	typeref:typename:std::chrono::system_clock
log_err_handler	spdlog/common.h	/^using log_err_handler = std::function<void(const std::string &err_msg)>;$/;"	t	namespace:spdlog
log_msg	spdlog/details/log_msg.h	/^    log_msg() = default;$/;"	p	struct:spdlog::details::log_msg
log_msg	spdlog/details/log_msg.h	/^    log_msg(const log_msg &other) = delete;$/;"	p	struct:spdlog::details::log_msg
log_msg	spdlog/details/log_msg.h	/^    log_msg(const std::string *loggers_name, level::level_enum lvl)$/;"	f	struct:spdlog::details::log_msg
log_msg	spdlog/details/log_msg.h	/^    log_msg(log_msg &&other) = delete;$/;"	p	struct:spdlog::details::log_msg
log_msg	spdlog/details/log_msg.h	/^struct log_msg$/;"	s	namespace:spdlog::details
logger	spdlog/details/logger_impl.h	/^inline spdlog::logger::logger(const std::string &logger_name, sinks_init_list sinks_list)$/;"	f	class:spdlog::logger
logger	spdlog/details/logger_impl.h	/^inline spdlog::logger::logger(const std::string &logger_name, spdlog::sink_ptr single_sink)$/;"	f	class:spdlog::logger
logger	spdlog/details/logger_impl.h	/^inline spdlog::logger::logger(std::string logger_name, const It &begin, const It &end)$/;"	f	class:spdlog::logger
logger	spdlog/logger.h	/^    logger(const logger &) = delete;$/;"	p	class:spdlog::logger
logger	spdlog/logger.h	/^    logger(const std::string &name, sink_ptr single_sink);$/;"	p	class:spdlog::logger
logger	spdlog/logger.h	/^    logger(const std::string &name, sinks_init_list sinks);$/;"	p	class:spdlog::logger
logger	spdlog/logger.h	/^    logger(std::string name, const It &begin, const It &end);$/;"	p	class:spdlog::logger
logger	spdlog/logger.h	/^class logger$/;"	c	namespace:spdlog
logger_name	spdlog/details/log_msg.h	/^    const std::string *logger_name{nullptr};$/;"	m	struct:spdlog::details::log_msg	typeref:typename:const std::string *
long_double_type	spdlog/fmt/bundled/core.h	/^    long_double_type,$/;"	e	enum:internal::type
long_double_value	spdlog/fmt/bundled/core.h	/^        long double long_double_value;$/;"	m	union:internal::value::__anonef64315f020a	typeref:typename:long double
long_double_value	spdlog/fmt/bundled/format.h	/^        long double long_double_value;$/;"	m	union:fmt::internal::Value::__anon1ea8787f020a	typeref:typename:long double
long_long_type	spdlog/fmt/bundled/core.h	/^    long_long_type,$/;"	e	enum:internal::type
long_long_value	spdlog/fmt/bundled/core.h	/^        long long long_long_value;$/;"	m	union:internal::value::__anonef64315f020a	typeref:typename:long long
long_long_value	spdlog/fmt/bundled/format.h	/^        LongLong long_long_value;$/;"	m	union:fmt::internal::Value::__anon1ea8787f020a	typeref:typename:LongLong
long_type	spdlog/fmt/bundled/core.h	/^typedef std::conditional<sizeof(long) == sizeof(int), int, long long>::type long_type;$/;"	t	namespace:internal
loopback	simple.pb-c.h	/^  ProtobufCBinaryData loopback;$/;"	m	struct:_ToHi	typeref:typename:ProtobufCBinaryData
loopback	simple.pb-c.h	/^  ProtobufCBinaryData loopback;$/;"	m	struct:_ToSt	typeref:typename:ProtobufCBinaryData
loopback	simple.proto	/^    optional bytes loopback = 11; \/\/ 여기에 속한 데이터를 그대로 담아서 응답해/;"	f
loopback	simple.proto	/^    optional bytes loopback = 25; \/\/ ToSt::loopback 으로 전달된 데이터가 다시 받아/;"	f
low	qcustomplot.h	/^  double key, open, high, low, close;$/;"	m	class:QCPFinancialData	typeref:typename:double
lower	qcustomplot.h	/^  double lower, upper;$/;"	m	class:QCPRange	typeref:typename:double
lowerEnding	qcustomplot.cpp	/^QCPLineEnding QCPAxis::lowerEnding() const$/;"	f	class:QCPAxis	typeref:typename:QCPLineEnding
lowerEnding	qcustomplot.h	/^  QCPLineEnding lowerEnding() const;$/;"	p	class:QCPAxis	typeref:typename:QCPLineEnding
lowerEnding	qcustomplot.h	/^  QCPLineEnding lowerEnding, upperEnding; \/\/ directly accessed by QCPAxis setters\/getters$/;"	m	class:QCPAxisPainterPrivate	typeref:typename:QCPLineEnding
lowerEnding	qcustomplot.h	/^  Q_PROPERTY(QCPLineEnding lowerEnding READ lowerEnding WRITE setLowerEnding)$/;"	p	class:QCPAxis	typeref:typename:QCPLineEnding
lowerQuartile	qcustomplot.h	/^  double key, minimum, lowerQuartile, median, upperQuartile, maximum;$/;"	m	class:QCPStatisticalBoxData	typeref:typename:double
lpal	stb_image.h	/^   stbi_uc lpal[256][4];$/;"	m	struct:__anon84e4e8861108	typeref:typename:stbi_uc[256][4]
lsImpulse	qcustomplot.h	/^                   ,lsImpulse    \/\/\/< each data point is represented by a line parallel to th/;"	e	enum:QCPGraph::LineStyle
lsInside	qcustomplot.h	/^  enum LabelSide { lsInside    \/\/\/< Tick labels will be displayed inside the axis rect and cl/;"	e	enum:QCPAxis::LabelSide
lsLine	qcustomplot.h	/^                   ,lsLine       \/\/\/< data points are connected by a straight line$/;"	e	enum:QCPGraph::LineStyle
lsLine	qcustomplot.h	/^                   ,lsLine \/\/\/< Data points are connected with a straight line$/;"	e	enum:QCPCurve::LineStyle
lsNone	qcustomplot.h	/^  enum LineStyle { lsNone        \/\/\/< data points are not connected with any lines (e.g. data/;"	e	enum:QCPGraph::LineStyle
lsNone	qcustomplot.h	/^  enum LineStyle { lsNone  \/\/\/< No line is drawn between data points (e.g. only scatters)$/;"	e	enum:QCPCurve::LineStyle
lsOutside	qcustomplot.h	/^                   ,lsOutside  \/\/\/< Tick labels will be displayed outside the axis rect$/;"	e	enum:QCPAxis::LabelSide
lsStepCenter	qcustomplot.h	/^                   ,lsStepCenter \/\/\/< line is drawn as steps where the step is in between two/;"	e	enum:QCPGraph::LineStyle
lsStepLeft	qcustomplot.h	/^                   ,lsStepLeft   \/\/\/< line is drawn as steps where the step height is the val/;"	e	enum:QCPGraph::LineStyle
lsStepRight	qcustomplot.h	/^                   ,lsStepRight  \/\/\/< line is drawn as steps where the step height is the val/;"	e	enum:QCPGraph::LineStyle
lspeed	simple.pb-c.h	/^  int32_t lspeed;$/;"	m	struct:_ToHi	typeref:typename:int32_t
lspeed	simple.proto	/^    optional int32 lspeed = 16;	\/\/-2500~2500$/;"	f
m	json.hpp	/^    std::runtime_error m;$/;"	m	class:nlohmann::detail::exception	typeref:typename:std::runtime_error
mAADragBackup	qcustomplot.h	/^  QCP::AntialiasedElements mAADragBackup, mNotAADragBackup;$/;"	m	class:QCPAxis	typeref:typename:QCP::AntialiasedElements
mAADragBackup	qcustomplot.h	/^  QCP::AntialiasedElements mAADragBackup, mNotAADragBackup;$/;"	m	class:QCPAxisRect	typeref:typename:QCP::AntialiasedElements
mActive	qcustomplot.h	/^  bool mActive;$/;"	m	class:QCPSelectionRect	typeref:typename:bool
mAdaptiveSampling	qcustomplot.h	/^  bool mAdaptiveSampling;$/;"	m	class:QCPGraph	typeref:typename:bool
mAlpha	qcustomplot.h	/^  unsigned char *mAlpha;$/;"	m	class:QCPColorMapData	typeref:typename:unsigned char *
mAnchorId	qcustomplot.h	/^  int mAnchorId;$/;"	m	class:QCPItemAnchor	typeref:typename:int
mAnchors	qcustomplot.h	/^  QList<QCPItemAnchor*> mAnchors;$/;"	m	class:QCPAbstractItem	typeref:typename:QList<QCPItemAnchor * >
mAntialiased	qcustomplot.h	/^  bool mAntialiased;$/;"	m	class:QCPLayerable	typeref:typename:bool
mAntialiasedElements	qcustomplot.h	/^  QCP::AntialiasedElements mAntialiasedElements, mNotAntialiasedElements;$/;"	m	class:QCustomPlot	typeref:typename:QCP::AntialiasedElements
mAntialiasedFill	qcustomplot.h	/^  bool mAntialiasedFill, mAntialiasedScatters;$/;"	m	class:QCPAbstractPlottable	typeref:typename:bool
mAntialiasedScatters	qcustomplot.h	/^  bool mAntialiasedFill, mAntialiasedScatters;$/;"	m	class:QCPAbstractPlottable	typeref:typename:bool
mAntialiasedSubGrid	qcustomplot.h	/^  bool mAntialiasedSubGrid, mAntialiasedZeroLine;$/;"	m	class:QCPGrid	typeref:typename:bool
mAntialiasedZeroLine	qcustomplot.h	/^  bool mAntialiasedSubGrid, mAntialiasedZeroLine;$/;"	m	class:QCPGrid	typeref:typename:bool
mAntialiasingStack	qcustomplot.h	/^  QStack<bool> mAntialiasingStack;$/;"	m	class:QCPPainter	typeref:typename:QStack<bool>
mAspectRatioMode	qcustomplot.h	/^  Qt::AspectRatioMode mAspectRatioMode;$/;"	m	class:QCPItemPixmap	typeref:typename:Qt::AspectRatioMode
mAutoAddPlottableToLegend	qcustomplot.h	/^  bool mAutoAddPlottableToLegend;$/;"	m	class:QCustomPlot	typeref:typename:bool
mAutoMargins	qcustomplot.h	/^  QCP::MarginSides mAutoMargins;$/;"	m	class:QCPLayoutElement	typeref:typename:QCP::MarginSides
mAutoSqueeze	qcustomplot.h	/^  bool mAutoSqueeze;$/;"	m	class:QCPDataContainer	typeref:typename:bool
mAxes	qcustomplot.h	/^  QHash<QCPAxis::AxisType, QList<QCPAxis*> > mAxes;$/;"	m	class:QCPAxisRect	typeref:typename:QHash<QCPAxis::AxisType,QList<QCPAxis * >>
mAxisPainter	qcustomplot.h	/^  QCPAxisPainterPrivate *mAxisPainter;$/;"	m	class:QCPAxis	typeref:typename:QCPAxisPainterPrivate *
mAxisRect	qcustomplot.h	/^  QCPAxisRect *mAxisRect;$/;"	m	class:QCPAxis	typeref:typename:QCPAxisRect *
mAxisRect	qcustomplot.h	/^  QPointer<QCPAxisRect> mAxisRect;$/;"	m	class:QCPItemPosition	typeref:typename:QPointer<QCPAxisRect>
mAxisRect	qcustomplot.h	/^  QPointer<QCPColorScaleAxisRectPrivate> mAxisRect;$/;"	m	class:QCPColorScale	typeref:typename:QPointer<QCPColorScaleAxisRectPrivate>
mAxisSelectionBox	qcustomplot.h	/^  QRect mAxisSelectionBox, mTickLabelsSelectionBox, mLabelSelectionBox;$/;"	m	class:QCPAxisPainterPrivate	typeref:typename:QRect
mAxisType	qcustomplot.h	/^  AxisType mAxisType;$/;"	m	class:QCPAxis	typeref:typename:AxisType
mBackgroundBrush	qcustomplot.h	/^  QBrush mBackgroundBrush;$/;"	m	class:QCPAxisRect	typeref:typename:QBrush
mBackgroundBrush	qcustomplot.h	/^  QBrush mBackgroundBrush;$/;"	m	class:QCustomPlot	typeref:typename:QBrush
mBackgroundPixmap	qcustomplot.h	/^  QPixmap mBackgroundPixmap;$/;"	m	class:QCPAxisRect	typeref:typename:QPixmap
mBackgroundPixmap	qcustomplot.h	/^  QPixmap mBackgroundPixmap;$/;"	m	class:QCustomPlot	typeref:typename:QPixmap
mBackgroundScaled	qcustomplot.h	/^  bool mBackgroundScaled;$/;"	m	class:QCPAxisRect	typeref:typename:bool
mBackgroundScaled	qcustomplot.h	/^  bool mBackgroundScaled;$/;"	m	class:QCustomPlot	typeref:typename:bool
mBackgroundScaledMode	qcustomplot.h	/^  Qt::AspectRatioMode mBackgroundScaledMode;$/;"	m	class:QCPAxisRect	typeref:typename:Qt::AspectRatioMode
mBackgroundScaledMode	qcustomplot.h	/^  Qt::AspectRatioMode mBackgroundScaledMode;$/;"	m	class:QCustomPlot	typeref:typename:Qt::AspectRatioMode
mBarAbove	qcustomplot.h	/^  QPointer<QCPBars> mBarBelow, mBarAbove;$/;"	m	class:QCPBars	typeref:typename:QPointer<QCPBars>
mBarBelow	qcustomplot.h	/^  QPointer<QCPBars> mBarBelow, mBarAbove;$/;"	m	class:QCPBars	typeref:typename:QPointer<QCPBars>
mBarWidth	qcustomplot.h	/^  int mBarWidth;$/;"	m	class:QCPColorScale	typeref:typename:int
mBars	qcustomplot.h	/^  QList<QCPBars*> mBars;$/;"	m	class:QCPBarsGroup	typeref:typename:QList<QCPBars * >
mBarsGroup	qcustomplot.h	/^  QCPBarsGroup *mBarsGroup;$/;"	m	class:QCPBars	typeref:typename:QCPBarsGroup *
mBasePen	qcustomplot.h	/^  QPen mBasePen, mSelectedBasePen;$/;"	m	class:QCPAxis	typeref:typename:QPen
mBaseValue	qcustomplot.h	/^  double mBaseValue;$/;"	m	class:QCPBars	typeref:typename:double
mBegin	qcustomplot.h	/^  int mBegin, mEnd;$/;"	m	class:QCPDataRange	typeref:typename:int
mBiggestUnit	qcustomplot.h	/^  TimeUnit mSmallestUnit, mBiggestUnit;$/;"	m	class:QCPAxisTickerTime	typeref:typename:TimeUnit
mBorderPen	qcustomplot.h	/^  QPen mBorderPen, mIconBorderPen;$/;"	m	class:QCPLegend	typeref:typename:QPen
mBracketBrush	qcustomplot.h	/^  QBrush mBracketBrush;$/;"	m	class:QCPSelectionDecoratorBracket	typeref:typename:QBrush
mBracketHeight	qcustomplot.h	/^  int mBracketHeight;$/;"	m	class:QCPSelectionDecoratorBracket	typeref:typename:int
mBracketPen	qcustomplot.h	/^  QPen mBracketPen;$/;"	m	class:QCPSelectionDecoratorBracket	typeref:typename:QPen
mBracketStyle	qcustomplot.h	/^  BracketStyle mBracketStyle;$/;"	m	class:QCPSelectionDecoratorBracket	typeref:typename:BracketStyle
mBracketWidth	qcustomplot.h	/^  int mBracketWidth;$/;"	m	class:QCPSelectionDecoratorBracket	typeref:typename:int
mBrush	qcustomplot.h	/^  QBrush mBrush, mSelectedBrush;$/;"	m	class:QCPItemEllipse	typeref:typename:QBrush
mBrush	qcustomplot.h	/^  QBrush mBrush, mSelectedBrush;$/;"	m	class:QCPItemRect	typeref:typename:QBrush
mBrush	qcustomplot.h	/^  QBrush mBrush, mSelectedBrush;$/;"	m	class:QCPItemText	typeref:typename:QBrush
mBrush	qcustomplot.h	/^  QBrush mBrush, mSelectedBrush;$/;"	m	class:QCPItemTracer	typeref:typename:QBrush
mBrush	qcustomplot.h	/^  QBrush mBrush;$/;"	m	class:QCPAbstractPlottable	typeref:typename:QBrush
mBrush	qcustomplot.h	/^  QBrush mBrush;$/;"	m	class:QCPLegend	typeref:typename:QBrush
mBrush	qcustomplot.h	/^  QBrush mBrush;$/;"	m	class:QCPScatterStyle	typeref:typename:QBrush
mBrush	qcustomplot.h	/^  QBrush mBrush;$/;"	m	class:QCPSelectionDecorator	typeref:typename:QBrush
mBrush	qcustomplot.h	/^  QBrush mBrush;$/;"	m	class:QCPSelectionRect	typeref:typename:QBrush
mBrushNegative	qcustomplot.h	/^  QBrush mBrushPositive, mBrushNegative;$/;"	m	class:QCPFinancial	typeref:typename:QBrush
mBrushPositive	qcustomplot.h	/^  QBrush mBrushPositive, mBrushNegative;$/;"	m	class:QCPFinancial	typeref:typename:QBrush
mBuffer	qcustomplot.h	/^  QPixmap mBuffer;$/;"	m	class:QCPPaintBufferPixmap	typeref:typename:QPixmap
mBufferDevicePixelRatio	qcustomplot.h	/^  double mBufferDevicePixelRatio;$/;"	m	class:QCustomPlot	typeref:typename:double
mCachedMargin	qcustomplot.h	/^  int mCachedMargin;$/;"	m	class:QCPAxis	typeref:typename:int
mCachedMarginValid	qcustomplot.h	/^  bool mCachedMarginValid;$/;"	m	class:QCPAxis	typeref:typename:bool
mChannelFillGraph	qcustomplot.h	/^  QPointer<QCPGraph> mChannelFillGraph;$/;"	m	class:QCPGraph	typeref:typename:QPointer<QCPGraph>
mChartStyle	qcustomplot.h	/^  ChartStyle mChartStyle;$/;"	m	class:QCPFinancial	typeref:typename:ChartStyle
mChildren	qcustomplot.h	/^  QHash<QCP::MarginSide, QList<QCPLayoutElement*> > mChildren;$/;"	m	class:QCPMarginGroup	typeref:typename:QHash<QCP::MarginSide,QList<QCPLayoutElement * >>
mChildren	qcustomplot.h	/^  QList<QCPLayerable*> mChildren;$/;"	m	class:QCPLayer	typeref:typename:QList<QCPLayerable * >
mChildrenX	qcustomplot.h	/^  QSet<QCPItemPosition*> mChildrenX, mChildrenY;$/;"	m	class:QCPItemAnchor	typeref:typename:QSet<QCPItemPosition * >
mChildrenY	qcustomplot.h	/^  QSet<QCPItemPosition*> mChildrenX, mChildrenY;$/;"	m	class:QCPItemAnchor	typeref:typename:QSet<QCPItemPosition * >
mClipAxisRect	qcustomplot.h	/^  QPointer<QCPAxisRect> mClipAxisRect;$/;"	m	class:QCPAbstractItem	typeref:typename:QPointer<QCPAxisRect>
mClipToAxisRect	qcustomplot.h	/^  bool mClipToAxisRect;$/;"	m	class:QCPAbstractItem	typeref:typename:bool
mColor	qcustomplot.h	/^  QColor mColor, mSelectedColor;$/;"	m	class:QCPItemText	typeref:typename:QColor
mColorAxis	qcustomplot.h	/^  QPointer<QCPAxis> mColorAxis;$/;"	m	class:QCPColorScale	typeref:typename:QPointer<QCPAxis>
mColorBuffer	qcustomplot.h	/^  QVector<QRgb> mColorBuffer; \/\/ have colors premultiplied with alpha (for usage with QImage::/;"	m	class:QCPColorGradient	typeref:typename:QVector<QRgb>
mColorBufferInvalidated	qcustomplot.h	/^  bool mColorBufferInvalidated;$/;"	m	class:QCPColorGradient	typeref:typename:bool
mColorInterpolation	qcustomplot.h	/^  ColorInterpolation mColorInterpolation;$/;"	m	class:QCPColorGradient	typeref:typename:ColorInterpolation
mColorScale	qcustomplot.h	/^  QPointer<QCPColorScale> mColorScale;$/;"	m	class:QCPColorMap	typeref:typename:QPointer<QCPColorScale>
mColorStops	qcustomplot.h	/^  QMap<double, QColor> mColorStops;$/;"	m	class:QCPColorGradient	typeref:typename:QMap<double,QColor>
mColumnSpacing	qcustomplot.h	/^  int mColumnSpacing, mRowSpacing;$/;"	m	class:QCPLayoutGrid	typeref:typename:int
mColumnStretchFactors	qcustomplot.h	/^  QList<double> mColumnStretchFactors;$/;"	m	class:QCPLayoutGrid	typeref:typename:QList<double>
mCurrentLayer	qcustomplot.h	/^  QCPLayer *mCurrentLayer;$/;"	m	class:QCustomPlot	typeref:typename:QCPLayer *
mCustomPath	qcustomplot.h	/^  QPainterPath mCustomPath;$/;"	m	class:QCPScatterStyle	typeref:typename:QPainterPath
mData	qcustomplot.h	/^  QVector<DataType> mData;$/;"	m	class:QCPDataContainer	typeref:typename:QVector<DataType>
mData	qcustomplot.h	/^  double *mData;$/;"	m	class:QCPColorMapData	typeref:typename:double *
mDataBounds	qcustomplot.h	/^  QCPRange mDataBounds;$/;"	m	class:QCPColorMapData	typeref:typename:QCPRange
mDataContainer	qcustomplot.h	/^  QSharedPointer<QCPDataContainer<DataType> > mDataContainer;$/;"	m	class:QCPAbstractPlottable1D	typeref:typename:QSharedPointer<QCPDataContainer<DataType>>
mDataContainer	qcustomplot.h	/^  QSharedPointer<QCPErrorBarsDataContainer> mDataContainer;$/;"	m	class:QCPErrorBars	typeref:typename:QSharedPointer<QCPErrorBarsDataContainer>
mDataModified	qcustomplot.h	/^  bool mDataModified;$/;"	m	class:QCPColorMapData	typeref:typename:bool
mDataPlottable	qcustomplot.h	/^  QPointer<QCPAbstractPlottable> mDataPlottable;$/;"	m	class:QCPErrorBars	typeref:typename:QPointer<QCPAbstractPlottable>
mDataRange	qcustomplot.h	/^  QCPRange mDataRange;$/;"	m	class:QCPColorMap	typeref:typename:QCPRange
mDataRange	qcustomplot.h	/^  QCPRange mDataRange;$/;"	m	class:QCPColorScale	typeref:typename:QCPRange
mDataRanges	qcustomplot.h	/^  QList<QCPDataRange> mDataRanges;$/;"	m	class:QCPDataSelection	typeref:typename:QList<QCPDataRange>
mDataScaleType	qcustomplot.h	/^  QCPAxis::ScaleType mDataScaleType;$/;"	m	class:QCPColorMap	typeref:typename:QCPAxis::ScaleType
mDataScaleType	qcustomplot.h	/^  QCPAxis::ScaleType mDataScaleType;$/;"	m	class:QCPColorScale	typeref:typename:QCPAxis::ScaleType
mDateStrategy	qcustomplot.h	/^  enum DateStrategy {dsNone, dsUniformTimeInDay, dsUniformDayInMonth} mDateStrategy;$/;"	m	class:QCPAxisTickerDateTime	typeref:enum:QCPAxisTickerDateTime::DateStrategy
mDateTimeFormat	qcustomplot.h	/^  QString mDateTimeFormat;$/;"	m	class:QCPAxisTickerDateTime	typeref:typename:QString
mDateTimeSpec	qcustomplot.h	/^  Qt::TimeSpec mDateTimeSpec;$/;"	m	class:QCPAxisTickerDateTime	typeref:typename:Qt::TimeSpec
mDevicePixelRatio	qcustomplot.h	/^  double mDevicePixelRatio;$/;"	m	class:QCPAbstractPaintBuffer	typeref:typename:double
mDragStartHorzRange	qcustomplot.h	/^  QList<QCPRange> mDragStartHorzRange, mDragStartVertRange;$/;"	m	class:QCPAxisRect	typeref:typename:QList<QCPRange>
mDragStartRange	qcustomplot.h	/^  QCPRange mDragStartRange;$/;"	m	class:QCPAxis	typeref:typename:QCPRange
mDragStartVertRange	qcustomplot.h	/^  QList<QCPRange> mDragStartHorzRange, mDragStartVertRange;$/;"	m	class:QCPAxisRect	typeref:typename:QList<QCPRange>
mDragging	qcustomplot.h	/^  bool mDragging;$/;"	m	class:QCPAxis	typeref:typename:bool
mDragging	qcustomplot.h	/^  bool mDragging;$/;"	m	class:QCPAxisRect	typeref:typename:bool
mElements	qcustomplot.h	/^  QList<QCPLayoutElement*> mElements;$/;"	m	class:QCPLayoutInset	typeref:typename:QList<QCPLayoutElement * >
mElements	qcustomplot.h	/^  QList<QList<QCPLayoutElement*> > mElements;$/;"	m	class:QCPLayoutGrid	typeref:typename:QList<QList<QCPLayoutElement * >>
mEnd	qcustomplot.h	/^  int mBegin, mEnd;$/;"	m	class:QCPDataRange	typeref:typename:int
mErrorType	qcustomplot.h	/^  ErrorType mErrorType;$/;"	m	class:QCPErrorBars	typeref:typename:ErrorType
mFieldWidth	qcustomplot.h	/^  QHash<TimeUnit, int> mFieldWidth;$/;"	m	class:QCPAxisTickerTime	typeref:typename:QHash<TimeUnit,int>
mFillOrder	qcustomplot.h	/^  FillOrder mFillOrder;$/;"	m	class:QCPLayoutGrid	typeref:typename:FillOrder
mFont	qcustomplot.h	/^  QFont mFont, mSelectedFont;$/;"	m	class:QCPItemText	typeref:typename:QFont
mFont	qcustomplot.h	/^  QFont mFont;$/;"	m	class:QCPAbstractLegendItem	typeref:typename:QFont
mFont	qcustomplot.h	/^  QFont mFont;$/;"	m	class:QCPLegend	typeref:typename:QFont
mFont	qcustomplot.h	/^  QFont mFont;$/;"	m	class:QCPTextElement	typeref:typename:QFont
mFormatPattern	qcustomplot.h	/^  QHash<TimeUnit, QString> mFormatPattern;$/;"	m	class:QCPAxisTickerTime	typeref:typename:QHash<TimeUnit,QString>
mFractionStyle	qcustomplot.h	/^  FractionStyle mFractionStyle;$/;"	m	class:QCPAxisTickerPi	typeref:typename:FractionStyle
mGlContext	qcustomplot.h	/^  QSharedPointer<QOpenGLContext> mGlContext;$/;"	m	class:QCustomPlot	typeref:typename:QSharedPointer<QOpenGLContext>
mGlContext	qcustomplot.h	/^  QWeakPointer<QOpenGLContext> mGlContext;$/;"	m	class:QCPPaintBufferGlFbo	typeref:typename:QWeakPointer<QOpenGLContext>
mGlFrameBuffer	qcustomplot.h	/^  QOpenGLFramebufferObject *mGlFrameBuffer;$/;"	m	class:QCPPaintBufferGlFbo	typeref:typename:QOpenGLFramebufferObject *
mGlPBuffer	qcustomplot.h	/^  QGLPixelBuffer *mGlPBuffer;$/;"	m	class:QCPPaintBufferGlPbuffer	typeref:typename:QGLPixelBuffer *
mGlPaintDevice	qcustomplot.h	/^  QSharedPointer<QOpenGLPaintDevice> mGlPaintDevice;$/;"	m	class:QCustomPlot	typeref:typename:QSharedPointer<QOpenGLPaintDevice>
mGlPaintDevice	qcustomplot.h	/^  QWeakPointer<QOpenGLPaintDevice> mGlPaintDevice;$/;"	m	class:QCPPaintBufferGlFbo	typeref:typename:QWeakPointer<QOpenGLPaintDevice>
mGlSurface	qcustomplot.h	/^  QSharedPointer<QSurface> mGlSurface;$/;"	m	class:QCustomPlot	typeref:typename:QSharedPointer<QSurface>
mGradient	qcustomplot.h	/^  QCPColorGradient mGradient;$/;"	m	class:QCPColorMap	typeref:typename:QCPColorGradient
mGradient	qcustomplot.h	/^  QCPColorGradient mGradient;$/;"	m	class:QCPColorScale	typeref:typename:QCPColorGradient
mGradientImage	qcustomplot.h	/^  QImage mGradientImage;$/;"	m	class:QCPColorScaleAxisRectPrivate	typeref:typename:QImage
mGradientImageInvalidated	qcustomplot.h	/^  bool mGradientImageInvalidated;$/;"	m	class:QCPColorScaleAxisRectPrivate	typeref:typename:bool
mGraph	qcustomplot.h	/^  QCPGraph *mGraph;$/;"	m	class:QCPItemTracer	typeref:typename:QCPGraph *
mGraphKey	qcustomplot.h	/^  double mGraphKey;$/;"	m	class:QCPItemTracer	typeref:typename:double
mGraphs	qcustomplot.h	/^  QList<QCPGraph*> mGraphs; \/\/ extra list of plottables also in mPlottables that are of type Q/;"	m	class:QCustomPlot	typeref:typename:QList<QCPGraph * >
mGrid	qcustomplot.h	/^  QCPGrid *mGrid;$/;"	m	class:QCPAxis	typeref:typename:QCPGrid *
mHead	qcustomplot.h	/^  QCPLineEnding mHead, mTail;$/;"	m	class:QCPItemCurve	typeref:typename:QCPLineEnding
mHead	qcustomplot.h	/^  QCPLineEnding mHead, mTail;$/;"	m	class:QCPItemLine	typeref:typename:QCPLineEnding
mIconBorderPen	qcustomplot.h	/^  QPen mBorderPen, mIconBorderPen;$/;"	m	class:QCPLegend	typeref:typename:QPen
mIconSize	qcustomplot.h	/^  QSize mIconSize;$/;"	m	class:QCPLegend	typeref:typename:QSize
mIconTextPadding	qcustomplot.h	/^  int mIconTextPadding;$/;"	m	class:QCPLegend	typeref:typename:int
mIndex	qcustomplot.h	/^  int mIndex;$/;"	m	class:QCPLayer	typeref:typename:int
mInsetAlignment	qcustomplot.h	/^  QList<Qt::Alignment> mInsetAlignment;$/;"	m	class:QCPLayoutInset	typeref:typename:QList<Qt::Alignment>
mInsetLayout	qcustomplot.h	/^  QCPLayoutInset *mInsetLayout;$/;"	m	class:QCPAxisRect	typeref:typename:QCPLayoutInset *
mInsetPlacement	qcustomplot.h	/^  QList<InsetPlacement> mInsetPlacement;$/;"	m	class:QCPLayoutInset	typeref:typename:QList<InsetPlacement>
mInsetRect	qcustomplot.h	/^  QList<QRectF> mInsetRect;$/;"	m	class:QCPLayoutInset	typeref:typename:QList<QRectF>
mInteractions	qcustomplot.h	/^  QCP::Interactions mInteractions;$/;"	m	class:QCustomPlot	typeref:typename:QCP::Interactions
mInterpolate	qcustomplot.h	/^  bool mInterpolate;$/;"	m	class:QCPColorMap	typeref:typename:bool
mInterpolating	qcustomplot.h	/^  bool mInterpolating;$/;"	m	class:QCPItemTracer	typeref:typename:bool
mInvalidated	qcustomplot.h	/^  bool mInvalidated;$/;"	m	class:QCPAbstractPaintBuffer	typeref:typename:bool
mInverted	qcustomplot.h	/^  bool mInverted;$/;"	m	class:QCPLineEnding	typeref:typename:bool
mIsAntialiasing	qcustomplot.h	/^  bool mIsAntialiasing;$/;"	m	class:QCPPainter	typeref:typename:bool
mIsEmpty	qcustomplot.h	/^  bool mIsEmpty;$/;"	m	class:QCPColorMapData	typeref:typename:bool
mItems	qcustomplot.h	/^  QList<QCPAbstractItem*> mItems;$/;"	m	class:QCustomPlot	typeref:typename:QList<QCPAbstractItem * >
mKey	qcustomplot.h	/^  double mKey, mValue;$/;"	m	class:QCPItemPosition	typeref:typename:double
mKeyAxis	qcustomplot.h	/^  QPointer<QCPAxis> mKeyAxis, mValueAxis;$/;"	m	class:QCPAbstractPlottable	typeref:typename:QPointer<QCPAxis>
mKeyAxis	qcustomplot.h	/^  QPointer<QCPAxis> mKeyAxis, mValueAxis;$/;"	m	class:QCPItemPosition	typeref:typename:QPointer<QCPAxis>
mKeyRange	qcustomplot.h	/^  QCPRange mKeyRange, mValueRange;$/;"	m	class:QCPColorMapData	typeref:typename:QCPRange
mKeySize	qcustomplot.h	/^  int mKeySize, mValueSize;$/;"	m	class:QCPColorMapData	typeref:typename:int
mLabel	qcustomplot.h	/^  QString mLabel;$/;"	m	class:QCPAxis	typeref:typename:QString
mLabelCache	qcustomplot.h	/^  QCache<QString, CachedLabel> mLabelCache;$/;"	m	class:QCPAxisPainterPrivate	typeref:typename:QCache<QString,CachedLabel>
mLabelColor	qcustomplot.h	/^  QColor mLabelColor, mSelectedLabelColor;$/;"	m	class:QCPAxis	typeref:typename:QColor
mLabelFont	qcustomplot.h	/^  QFont mLabelFont, mSelectedLabelFont;$/;"	m	class:QCPAxis	typeref:typename:QFont
mLabelParameterHash	qcustomplot.h	/^  QByteArray mLabelParameterHash; \/\/ to determine whether mLabelCache needs to be cleared due /;"	m	class:QCPAxisPainterPrivate	typeref:typename:QByteArray
mLabelSelectionBox	qcustomplot.h	/^  QRect mAxisSelectionBox, mTickLabelsSelectionBox, mLabelSelectionBox;$/;"	m	class:QCPAxisPainterPrivate	typeref:typename:QRect
mLayer	qcustomplot.h	/^  QCPLayer *mLayer;$/;"	m	class:QCPLayerable	typeref:typename:QCPLayer *
mLayers	qcustomplot.h	/^  QList<QCPLayer*> mLayers;$/;"	m	class:QCustomPlot	typeref:typename:QList<QCPLayer * >
mLegendIcon	qcustomplot.h	/^  QPixmap mLegendIcon;$/;"	m	class:QCPColorMap	typeref:typename:QPixmap
mLength	qcustomplot.h	/^  double mLength;$/;"	m	class:QCPItemBracket	typeref:typename:double
mLength	qcustomplot.h	/^  double mWidth, mLength;$/;"	m	class:QCPLineEnding	typeref:typename:double
mLevelCount	qcustomplot.h	/^  int mLevelCount;$/;"	m	class:QCPColorGradient	typeref:typename:int
mLineStyle	qcustomplot.h	/^  LineStyle mLineStyle;$/;"	m	class:QCPCurve	typeref:typename:LineStyle
mLineStyle	qcustomplot.h	/^  LineStyle mLineStyle;$/;"	m	class:QCPGraph	typeref:typename:LineStyle
mLogBase	qcustomplot.h	/^  double mLogBase;$/;"	m	class:QCPAxisTickerLog	typeref:typename:double
mLogBaseLnInv	qcustomplot.h	/^  double mLogBaseLnInv;$/;"	m	class:QCPAxisTickerLog	typeref:typename:double
mMapData	qcustomplot.h	/^  QCPColorMapData *mMapData;$/;"	m	class:QCPColorMap	typeref:typename:QCPColorMapData *
mMapImage	qcustomplot.h	/^  QImage mMapImage, mUndersampledMapImage;$/;"	m	class:QCPColorMap	typeref:typename:QImage
mMapImageInvalidated	qcustomplot.h	/^  bool mMapImageInvalidated;$/;"	m	class:QCPColorMap	typeref:typename:bool
mMarginGroups	qcustomplot.h	/^  QHash<QCP::MarginSide, QCPMarginGroup*> mMarginGroups;$/;"	m	class:QCPLayoutElement	typeref:typename:QHash<QCP::MarginSide,QCPMarginGroup * >
mMargins	qcustomplot.h	/^  QMargins mMargins, mMinimumMargins;$/;"	m	class:QCPLayoutElement	typeref:typename:QMargins
mMaximumSize	qcustomplot.h	/^  QSize mMinimumSize, mMaximumSize;$/;"	m	class:QCPLayoutElement	typeref:typename:QSize
mMedianPen	qcustomplot.h	/^  QPen mMedianPen;$/;"	m	class:QCPStatisticalBox	typeref:typename:QPen
mMinimumMargins	qcustomplot.h	/^  QMargins mMargins, mMinimumMargins;$/;"	m	class:QCPLayoutElement	typeref:typename:QMargins
mMinimumSize	qcustomplot.h	/^  QSize mMinimumSize, mMaximumSize;$/;"	m	class:QCPLayoutElement	typeref:typename:QSize
mMode	qcustomplot.h	/^  LayerMode mMode;$/;"	m	class:QCPLayer	typeref:typename:LayerMode
mModes	qcustomplot.h	/^  PainterModes mModes;$/;"	m	class:QCPPainter	typeref:typename:PainterModes
mMouseEventLayerable	qcustomplot.h	/^  QPointer<QCPLayerable> mMouseEventLayerable;$/;"	m	class:QCustomPlot	typeref:typename:QPointer<QCPLayerable>
mMouseEventLayerableDetails	qcustomplot.h	/^  QVariant mMouseEventLayerableDetails;$/;"	m	class:QCustomPlot	typeref:typename:QVariant
mMouseHasMoved	qcustomplot.h	/^  bool mMouseHasMoved;$/;"	m	class:QCustomPlot	typeref:typename:bool
mMousePressPos	qcustomplot.h	/^  QPoint mMousePressPos;$/;"	m	class:QCustomPlot	typeref:typename:QPoint
mMouseSignalLayerable	qcustomplot.h	/^  QPointer<QCPLayerable> mMouseSignalLayerable;$/;"	m	class:QCustomPlot	typeref:typename:QPointer<QCPLayerable>
mMouseSignalLayerableDetails	qcustomplot.h	/^  QVariant mMouseSignalLayerableDetails;$/;"	m	class:QCustomPlot	typeref:typename:QVariant
mMultiSelectModifier	qcustomplot.h	/^  Qt::KeyboardModifier mMultiSelectModifier;$/;"	m	class:QCustomPlot	typeref:typename:Qt::KeyboardModifier
mMultisamples	qcustomplot.h	/^  int mMultisamples;$/;"	m	class:QCPPaintBufferGlPbuffer	typeref:typename:int
mName	qcustomplot.h	/^  QString mName;$/;"	m	class:QCPAbstractPlottable	typeref:typename:QString
mName	qcustomplot.h	/^  QString mName;$/;"	m	class:QCPItemAnchor	typeref:typename:QString
mName	qcustomplot.h	/^  QString mName;$/;"	m	class:QCPLayer	typeref:typename:QString
mNoAntialiasingOnDrag	qcustomplot.h	/^  bool mNoAntialiasingOnDrag;$/;"	m	class:QCustomPlot	typeref:typename:bool
mNotAADragBackup	qcustomplot.h	/^  QCP::AntialiasedElements mAADragBackup, mNotAADragBackup;$/;"	m	class:QCPAxis	typeref:typename:QCP::AntialiasedElements
mNotAADragBackup	qcustomplot.h	/^  QCP::AntialiasedElements mAADragBackup, mNotAADragBackup;$/;"	m	class:QCPAxisRect	typeref:typename:QCP::AntialiasedElements
mNotAntialiasedElements	qcustomplot.h	/^  QCP::AntialiasedElements mAntialiasedElements, mNotAntialiasedElements;$/;"	m	class:QCustomPlot	typeref:typename:QCP::AntialiasedElements
mNumberBeautifulPowers	qcustomplot.h	/^  bool mNumberBeautifulPowers;$/;"	m	class:QCPAxis	typeref:typename:bool
mNumberFormatChar	qcustomplot.h	/^  QLatin1Char mNumberFormatChar;$/;"	m	class:QCPAxis	typeref:typename:QLatin1Char
mNumberPrecision	qcustomplot.h	/^  int mNumberPrecision;$/;"	m	class:QCPAxis	typeref:typename:int
mOpenGl	qcustomplot.h	/^  bool mOpenGl;$/;"	m	class:QCustomPlot	typeref:typename:bool
mOpenGlAntialiasedElementsBackup	qcustomplot.h	/^  QCP::AntialiasedElements mOpenGlAntialiasedElementsBackup;$/;"	m	class:QCustomPlot	typeref:typename:QCP::AntialiasedElements
mOpenGlCacheLabelsBackup	qcustomplot.h	/^  bool mOpenGlCacheLabelsBackup;$/;"	m	class:QCustomPlot	typeref:typename:bool
mOpenGlMultisamples	qcustomplot.h	/^  int mOpenGlMultisamples;$/;"	m	class:QCustomPlot	typeref:typename:int
mOrientation	qcustomplot.h	/^  Qt::Orientation mOrientation;$/;"	m	class:QCPAxis	typeref:typename:Qt::Orientation
mOuterRect	qcustomplot.h	/^  QRect mRect, mOuterRect;$/;"	m	class:QCPLayoutElement	typeref:typename:QRect
mOutlierStyle	qcustomplot.h	/^  QCPScatterStyle mOutlierStyle;$/;"	m	class:QCPStatisticalBox	typeref:typename:QCPScatterStyle
mPadding	qcustomplot.h	/^  QMargins mPadding;$/;"	m	class:QCPItemText	typeref:typename:QMargins
mPadding	qcustomplot.h	/^  int mPadding;$/;"	m	class:QCPAxis	typeref:typename:int
mPaintBuffer	qcustomplot.h	/^  QWeakPointer<QCPAbstractPaintBuffer> mPaintBuffer;$/;"	m	class:QCPLayer	typeref:typename:QWeakPointer<QCPAbstractPaintBuffer>
mPaintBuffers	qcustomplot.h	/^  QList<QSharedPointer<QCPAbstractPaintBuffer> > mPaintBuffers;$/;"	m	class:QCustomPlot	typeref:typename:QList<QSharedPointer<QCPAbstractPaintBuffer>>
mParentAnchorX	qcustomplot.h	/^  QCPItemAnchor *mParentAnchorX, *mParentAnchorY;$/;"	m	class:QCPItemPosition	typeref:typename:QCPItemAnchor *
mParentAnchorY	qcustomplot.h	/^  QCPItemAnchor *mParentAnchorX, *mParentAnchorY;$/;"	m	class:QCPItemPosition	typeref:typename:QCPItemAnchor **
mParentAxis	qcustomplot.h	/^  QCPAxis *mParentAxis;$/;"	m	class:QCPGrid	typeref:typename:QCPAxis *
mParentColorScale	qcustomplot.h	/^  QCPColorScale *mParentColorScale;$/;"	m	class:QCPColorScaleAxisRectPrivate	typeref:typename:QCPColorScale *
mParentItem	qcustomplot.h	/^  QCPAbstractItem *mParentItem;$/;"	m	class:QCPItemAnchor	typeref:typename:QCPAbstractItem *
mParentLayerable	qcustomplot.h	/^  QPointer<QCPLayerable> mParentLayerable;$/;"	m	class:QCPLayerable	typeref:typename:QPointer<QCPLayerable>
mParentLayout	qcustomplot.h	/^  QCPLayout *mParentLayout;$/;"	m	class:QCPLayoutElement	typeref:typename:QCPLayout *
mParentLegend	qcustomplot.h	/^  QCPLegend *mParentLegend;$/;"	m	class:QCPAbstractLegendItem	typeref:typename:QCPLegend *
mParentPlot	qcustomplot.h	/^  QCustomPlot *mParentPlot;$/;"	m	class:QCPAxisPainterPrivate	typeref:typename:QCustomPlot *
mParentPlot	qcustomplot.h	/^  QCustomPlot *mParentPlot;$/;"	m	class:QCPBarsGroup	typeref:typename:QCustomPlot *
mParentPlot	qcustomplot.h	/^  QCustomPlot *mParentPlot;$/;"	m	class:QCPItemAnchor	typeref:typename:QCustomPlot *
mParentPlot	qcustomplot.h	/^  QCustomPlot *mParentPlot;$/;"	m	class:QCPLayer	typeref:typename:QCustomPlot *
mParentPlot	qcustomplot.h	/^  QCustomPlot *mParentPlot;$/;"	m	class:QCPLayerable	typeref:typename:QCustomPlot *
mParentPlot	qcustomplot.h	/^  QCustomPlot *mParentPlot;$/;"	m	class:QCPMarginGroup	typeref:typename:QCustomPlot *
mPen	qcustomplot.h	/^  QPen mPen, mSelectedPen;$/;"	m	class:QCPItemBracket	typeref:typename:QPen
mPen	qcustomplot.h	/^  QPen mPen, mSelectedPen;$/;"	m	class:QCPItemCurve	typeref:typename:QPen
mPen	qcustomplot.h	/^  QPen mPen, mSelectedPen;$/;"	m	class:QCPItemEllipse	typeref:typename:QPen
mPen	qcustomplot.h	/^  QPen mPen, mSelectedPen;$/;"	m	class:QCPItemLine	typeref:typename:QPen
mPen	qcustomplot.h	/^  QPen mPen, mSelectedPen;$/;"	m	class:QCPItemPixmap	typeref:typename:QPen
mPen	qcustomplot.h	/^  QPen mPen, mSelectedPen;$/;"	m	class:QCPItemRect	typeref:typename:QPen
mPen	qcustomplot.h	/^  QPen mPen, mSelectedPen;$/;"	m	class:QCPItemStraightLine	typeref:typename:QPen
mPen	qcustomplot.h	/^  QPen mPen, mSelectedPen;$/;"	m	class:QCPItemText	typeref:typename:QPen
mPen	qcustomplot.h	/^  QPen mPen, mSelectedPen;$/;"	m	class:QCPItemTracer	typeref:typename:QPen
mPen	qcustomplot.h	/^  QPen mPen, mSubGridPen, mZeroLinePen;$/;"	m	class:QCPGrid	typeref:typename:QPen
mPen	qcustomplot.h	/^  QPen mPen;$/;"	m	class:QCPAbstractPlottable	typeref:typename:QPen
mPen	qcustomplot.h	/^  QPen mPen;$/;"	m	class:QCPScatterStyle	typeref:typename:QPen
mPen	qcustomplot.h	/^  QPen mPen;$/;"	m	class:QCPSelectionDecorator	typeref:typename:QPen
mPen	qcustomplot.h	/^  QPen mPen;$/;"	m	class:QCPSelectionRect	typeref:typename:QPen
mPenDefined	qcustomplot.h	/^  bool mPenDefined;$/;"	m	class:QCPScatterStyle	typeref:typename:bool
mPenNegative	qcustomplot.h	/^  QPen mPenPositive, mPenNegative;$/;"	m	class:QCPFinancial	typeref:typename:QPen
mPenPositive	qcustomplot.h	/^  QPen mPenPositive, mPenNegative;$/;"	m	class:QCPFinancial	typeref:typename:QPen
mPeriodic	qcustomplot.h	/^  bool mPeriodic;$/;"	m	class:QCPColorGradient	typeref:typename:bool
mPeriodicity	qcustomplot.h	/^  int mPeriodicity;$/;"	m	class:QCPAxisTickerPi	typeref:typename:int
mPiSymbol	qcustomplot.h	/^  QString mPiSymbol;$/;"	m	class:QCPAxisTickerPi	typeref:typename:QString
mPiTickStep	qcustomplot.h	/^  double mPiTickStep; \/\/ size of one tick step in units of mPiValue$/;"	m	class:QCPAxisTickerPi	typeref:typename:double
mPiValue	qcustomplot.h	/^  double mPiValue;$/;"	m	class:QCPAxisTickerPi	typeref:typename:double
mPixmap	qcustomplot.h	/^  QPixmap mPixmap;$/;"	m	class:QCPItemPixmap	typeref:typename:QPixmap
mPixmap	qcustomplot.h	/^  QPixmap mPixmap;$/;"	m	class:QCPScatterStyle	typeref:typename:QPixmap
mPlotLayout	qcustomplot.h	/^  QCPLayoutGrid *mPlotLayout;$/;"	m	class:QCustomPlot	typeref:typename:QCPLayoutGrid *
mPlottable	qcustomplot.h	/^  QCPAbstractPlottable *mPlottable;$/;"	m	class:QCPPlottableLegendItem	typeref:typename:QCPAbstractPlottable *
mPlottable	qcustomplot.h	/^  QCPAbstractPlottable *mPlottable;$/;"	m	class:QCPSelectionDecorator	typeref:typename:QCPAbstractPlottable *
mPlottables	qcustomplot.h	/^  QList<QCPAbstractPlottable*> mPlottables;$/;"	m	class:QCustomPlot	typeref:typename:QList<QCPAbstractPlottable * >
mPlottingHints	qcustomplot.h	/^  QCP::PlottingHints mPlottingHints;$/;"	m	class:QCustomPlot	typeref:typename:QCP::PlottingHints
mPositionAlignment	qcustomplot.h	/^  Qt::Alignment mPositionAlignment;$/;"	m	class:QCPItemText	typeref:typename:Qt::Alignment
mPositionTypeX	qcustomplot.h	/^  PositionType mPositionTypeX, mPositionTypeY;$/;"	m	class:QCPItemPosition	typeref:typename:PositionType
mPositionTypeY	qcustomplot.h	/^  PositionType mPositionTypeX, mPositionTypeY;$/;"	m	class:QCPItemPosition	typeref:typename:PositionType
mPositions	qcustomplot.h	/^  QList<QCPItemPosition*> mPositions;$/;"	m	class:QCPAbstractItem	typeref:typename:QList<QCPItemPosition * >
mPreallocIteration	qcustomplot.h	/^  int mPreallocIteration;$/;"	m	class:QCPDataContainer	typeref:typename:int
mPreallocSize	qcustomplot.h	/^  int mPreallocSize;$/;"	m	class:QCPDataContainer	typeref:typename:int
mRange	qcustomplot.h	/^  QCPRange mRange;$/;"	m	class:QCPAxis	typeref:typename:QCPRange
mRangeDrag	qcustomplot.h	/^  Qt::Orientations mRangeDrag, mRangeZoom;$/;"	m	class:QCPAxisRect	typeref:typename:Qt::Orientations
mRangeDragHorzAxis	qcustomplot.h	/^  QList<QPointer<QCPAxis> > mRangeDragHorzAxis, mRangeDragVertAxis;$/;"	m	class:QCPAxisRect	typeref:typename:QList<QPointer<QCPAxis>>
mRangeDragVertAxis	qcustomplot.h	/^  QList<QPointer<QCPAxis> > mRangeDragHorzAxis, mRangeDragVertAxis;$/;"	m	class:QCPAxisRect	typeref:typename:QList<QPointer<QCPAxis>>
mRangeReversed	qcustomplot.h	/^  bool mRangeReversed;$/;"	m	class:QCPAxis	typeref:typename:bool
mRangeZoom	qcustomplot.h	/^  Qt::Orientations mRangeDrag, mRangeZoom;$/;"	m	class:QCPAxisRect	typeref:typename:Qt::Orientations
mRangeZoomFactorHorz	qcustomplot.h	/^  double mRangeZoomFactorHorz, mRangeZoomFactorVert;$/;"	m	class:QCPAxisRect	typeref:typename:double
mRangeZoomFactorVert	qcustomplot.h	/^  double mRangeZoomFactorHorz, mRangeZoomFactorVert;$/;"	m	class:QCPAxisRect	typeref:typename:double
mRangeZoomHorzAxis	qcustomplot.h	/^  QList<QPointer<QCPAxis> > mRangeZoomHorzAxis, mRangeZoomVertAxis;$/;"	m	class:QCPAxisRect	typeref:typename:QList<QPointer<QCPAxis>>
mRangeZoomVertAxis	qcustomplot.h	/^  QList<QPointer<QCPAxis> > mRangeZoomHorzAxis, mRangeZoomVertAxis;$/;"	m	class:QCPAxisRect	typeref:typename:QList<QPointer<QCPAxis>>
mRect	qcustomplot.h	/^  QRect mRect, mOuterRect;$/;"	m	class:QCPLayoutElement	typeref:typename:QRect
mRect	qcustomplot.h	/^  QRect mRect;$/;"	m	class:QCPSelectionRect	typeref:typename:QRect
mReplotQueued	qcustomplot.h	/^  bool mReplotQueued;$/;"	m	class:QCustomPlot	typeref:typename:bool
mReplotting	qcustomplot.h	/^  bool mReplotting;$/;"	m	class:QCustomPlot	typeref:typename:bool
mRotation	qcustomplot.h	/^  double mRotation;$/;"	m	class:QCPItemText	typeref:typename:double
mRowSpacing	qcustomplot.h	/^  int mColumnSpacing, mRowSpacing;$/;"	m	class:QCPLayoutGrid	typeref:typename:int
mRowStretchFactors	qcustomplot.h	/^  QList<double> mRowStretchFactors;$/;"	m	class:QCPLayoutGrid	typeref:typename:QList<double>
mScaleStrategy	qcustomplot.h	/^  ScaleStrategy mScaleStrategy;$/;"	m	class:QCPAxisTickerFixed	typeref:typename:ScaleStrategy
mScaleType	qcustomplot.h	/^  ScaleType mScaleType;$/;"	m	class:QCPAxis	typeref:typename:ScaleType
mScaled	qcustomplot.h	/^  bool mScaled;$/;"	m	class:QCPItemPixmap	typeref:typename:bool
mScaledBackgroundPixmap	qcustomplot.h	/^  QPixmap mScaledBackgroundPixmap;$/;"	m	class:QCPAxisRect	typeref:typename:QPixmap
mScaledBackgroundPixmap	qcustomplot.h	/^  QPixmap mScaledBackgroundPixmap;$/;"	m	class:QCustomPlot	typeref:typename:QPixmap
mScaledPixmap	qcustomplot.h	/^  QPixmap mScaledPixmap;$/;"	m	class:QCPItemPixmap	typeref:typename:QPixmap
mScaledPixmapInvalidated	qcustomplot.h	/^  bool mScaledPixmapInvalidated;$/;"	m	class:QCPItemPixmap	typeref:typename:bool
mScatterSkip	qcustomplot.h	/^  int mScatterSkip;$/;"	m	class:QCPCurve	typeref:typename:int
mScatterSkip	qcustomplot.h	/^  int mScatterSkip;$/;"	m	class:QCPGraph	typeref:typename:int
mScatterStyle	qcustomplot.h	/^  QCPScatterStyle mScatterStyle;$/;"	m	class:QCPCurve	typeref:typename:QCPScatterStyle
mScatterStyle	qcustomplot.h	/^  QCPScatterStyle mScatterStyle;$/;"	m	class:QCPGraph	typeref:typename:QCPScatterStyle
mScatterStyle	qcustomplot.h	/^  QCPScatterStyle mScatterStyle;$/;"	m	class:QCPSelectionDecorator	typeref:typename:QCPScatterStyle
mSelectable	qcustomplot.h	/^  QCP::SelectionType mSelectable;$/;"	m	class:QCPAbstractPlottable	typeref:typename:QCP::SelectionType
mSelectable	qcustomplot.h	/^  bool mSelectable, mSelected;$/;"	m	class:QCPAbstractItem	typeref:typename:bool
mSelectable	qcustomplot.h	/^  bool mSelectable, mSelected;$/;"	m	class:QCPAbstractLegendItem	typeref:typename:bool
mSelectable	qcustomplot.h	/^  bool mSelectable, mSelected;$/;"	m	class:QCPTextElement	typeref:typename:bool
mSelectableParts	qcustomplot.h	/^  SelectableParts mSelectableParts, mSelectedParts;$/;"	m	class:QCPAxis	typeref:typename:SelectableParts
mSelectableParts	qcustomplot.h	/^  SelectableParts mSelectedParts, mSelectableParts;$/;"	m	class:QCPLegend	typeref:typename:SelectableParts
mSelected	qcustomplot.h	/^  bool mSelectable, mSelected;$/;"	m	class:QCPAbstractItem	typeref:typename:bool
mSelected	qcustomplot.h	/^  bool mSelectable, mSelected;$/;"	m	class:QCPAbstractLegendItem	typeref:typename:bool
mSelected	qcustomplot.h	/^  bool mSelectable, mSelected;$/;"	m	class:QCPTextElement	typeref:typename:bool
mSelectedBasePen	qcustomplot.h	/^  QPen mBasePen, mSelectedBasePen;$/;"	m	class:QCPAxis	typeref:typename:QPen
mSelectedBorderPen	qcustomplot.h	/^  QPen mSelectedBorderPen, mSelectedIconBorderPen;$/;"	m	class:QCPLegend	typeref:typename:QPen
mSelectedBrush	qcustomplot.h	/^  QBrush mBrush, mSelectedBrush;$/;"	m	class:QCPItemEllipse	typeref:typename:QBrush
mSelectedBrush	qcustomplot.h	/^  QBrush mBrush, mSelectedBrush;$/;"	m	class:QCPItemRect	typeref:typename:QBrush
mSelectedBrush	qcustomplot.h	/^  QBrush mBrush, mSelectedBrush;$/;"	m	class:QCPItemText	typeref:typename:QBrush
mSelectedBrush	qcustomplot.h	/^  QBrush mBrush, mSelectedBrush;$/;"	m	class:QCPItemTracer	typeref:typename:QBrush
mSelectedBrush	qcustomplot.h	/^  QBrush mSelectedBrush;$/;"	m	class:QCPLegend	typeref:typename:QBrush
mSelectedColor	qcustomplot.h	/^  QColor mColor, mSelectedColor;$/;"	m	class:QCPItemText	typeref:typename:QColor
mSelectedFont	qcustomplot.h	/^  QFont mFont, mSelectedFont;$/;"	m	class:QCPItemText	typeref:typename:QFont
mSelectedFont	qcustomplot.h	/^  QFont mSelectedFont;$/;"	m	class:QCPAbstractLegendItem	typeref:typename:QFont
mSelectedFont	qcustomplot.h	/^  QFont mSelectedFont;$/;"	m	class:QCPLegend	typeref:typename:QFont
mSelectedFont	qcustomplot.h	/^  QFont mSelectedFont;$/;"	m	class:QCPTextElement	typeref:typename:QFont
mSelectedIconBorderPen	qcustomplot.h	/^  QPen mSelectedBorderPen, mSelectedIconBorderPen;$/;"	m	class:QCPLegend	typeref:typename:QPen
mSelectedLabelColor	qcustomplot.h	/^  QColor mLabelColor, mSelectedLabelColor;$/;"	m	class:QCPAxis	typeref:typename:QColor
mSelectedLabelFont	qcustomplot.h	/^  QFont mLabelFont, mSelectedLabelFont;$/;"	m	class:QCPAxis	typeref:typename:QFont
mSelectedParts	qcustomplot.h	/^  SelectableParts mSelectableParts, mSelectedParts;$/;"	m	class:QCPAxis	typeref:typename:SelectableParts
mSelectedParts	qcustomplot.h	/^  SelectableParts mSelectedParts, mSelectableParts;$/;"	m	class:QCPLegend	typeref:typename:SelectableParts
mSelectedPen	qcustomplot.h	/^  QPen mPen, mSelectedPen;$/;"	m	class:QCPItemBracket	typeref:typename:QPen
mSelectedPen	qcustomplot.h	/^  QPen mPen, mSelectedPen;$/;"	m	class:QCPItemCurve	typeref:typename:QPen
mSelectedPen	qcustomplot.h	/^  QPen mPen, mSelectedPen;$/;"	m	class:QCPItemEllipse	typeref:typename:QPen
mSelectedPen	qcustomplot.h	/^  QPen mPen, mSelectedPen;$/;"	m	class:QCPItemLine	typeref:typename:QPen
mSelectedPen	qcustomplot.h	/^  QPen mPen, mSelectedPen;$/;"	m	class:QCPItemPixmap	typeref:typename:QPen
mSelectedPen	qcustomplot.h	/^  QPen mPen, mSelectedPen;$/;"	m	class:QCPItemRect	typeref:typename:QPen
mSelectedPen	qcustomplot.h	/^  QPen mPen, mSelectedPen;$/;"	m	class:QCPItemStraightLine	typeref:typename:QPen
mSelectedPen	qcustomplot.h	/^  QPen mPen, mSelectedPen;$/;"	m	class:QCPItemText	typeref:typename:QPen
mSelectedPen	qcustomplot.h	/^  QPen mPen, mSelectedPen;$/;"	m	class:QCPItemTracer	typeref:typename:QPen
mSelectedSubTickPen	qcustomplot.h	/^  QPen mSubTickPen, mSelectedSubTickPen;$/;"	m	class:QCPAxis	typeref:typename:QPen
mSelectedTextColor	qcustomplot.h	/^  QColor mSelectedTextColor;$/;"	m	class:QCPAbstractLegendItem	typeref:typename:QColor
mSelectedTextColor	qcustomplot.h	/^  QColor mSelectedTextColor;$/;"	m	class:QCPLegend	typeref:typename:QColor
mSelectedTextColor	qcustomplot.h	/^  QColor mSelectedTextColor;$/;"	m	class:QCPTextElement	typeref:typename:QColor
mSelectedTickLabelColor	qcustomplot.h	/^  QColor mTickLabelColor, mSelectedTickLabelColor;$/;"	m	class:QCPAxis	typeref:typename:QColor
mSelectedTickLabelFont	qcustomplot.h	/^  QFont mTickLabelFont, mSelectedTickLabelFont;$/;"	m	class:QCPAxis	typeref:typename:QFont
mSelectedTickPen	qcustomplot.h	/^  QPen mTickPen, mSelectedTickPen;$/;"	m	class:QCPAxis	typeref:typename:QPen
mSelection	qcustomplot.h	/^  QCPDataSelection mSelection;$/;"	m	class:QCPAbstractPlottable	typeref:typename:QCPDataSelection
mSelectionDecorator	qcustomplot.h	/^  QCPSelectionDecorator *mSelectionDecorator;$/;"	m	class:QCPAbstractPlottable	typeref:typename:QCPSelectionDecorator *
mSelectionRect	qcustomplot.h	/^  QCPSelectionRect *mSelectionRect;$/;"	m	class:QCustomPlot	typeref:typename:QCPSelectionRect *
mSelectionRectMode	qcustomplot.h	/^  QCP::SelectionRectMode mSelectionRectMode;$/;"	m	class:QCustomPlot	typeref:typename:QCP::SelectionRectMode
mSelectionTolerance	qcustomplot.h	/^  int mSelectionTolerance;$/;"	m	class:QCustomPlot	typeref:typename:int
mShape	qcustomplot.h	/^  ScatterShape mShape;$/;"	m	class:QCPScatterStyle	typeref:typename:ScatterShape
mSize	qcustomplot.h	/^  QSize mSize;$/;"	m	class:QCPAbstractPaintBuffer	typeref:typename:QSize
mSize	qcustomplot.h	/^  double mSize;$/;"	m	class:QCPItemTracer	typeref:typename:double
mSize	qcustomplot.h	/^  double mSize;$/;"	m	class:QCPScatterStyle	typeref:typename:double
mSizeConstraintRect	qcustomplot.h	/^  SizeConstraintRect mSizeConstraintRect;$/;"	m	class:QCPLayoutElement	typeref:typename:SizeConstraintRect
mSmallestUnit	qcustomplot.h	/^  TimeUnit mSmallestUnit, mBiggestUnit;$/;"	m	class:QCPAxisTickerTime	typeref:typename:TimeUnit
mSpacing	qcustomplot.h	/^  double mSpacing;$/;"	m	class:QCPBarsGroup	typeref:typename:double
mSpacingType	qcustomplot.h	/^  SpacingType mSpacingType;$/;"	m	class:QCPBarsGroup	typeref:typename:SpacingType
mStackingGap	qcustomplot.h	/^  double mStackingGap;$/;"	m	class:QCPBars	typeref:typename:double
mStyle	qcustomplot.h	/^  BracketStyle mStyle;$/;"	m	class:QCPItemBracket	typeref:typename:BracketStyle
mStyle	qcustomplot.h	/^  EndingStyle mStyle;$/;"	m	class:QCPLineEnding	typeref:typename:EndingStyle
mStyle	qcustomplot.h	/^  TracerStyle mStyle;$/;"	m	class:QCPItemTracer	typeref:typename:TracerStyle
mSubGridPen	qcustomplot.h	/^  QPen mPen, mSubGridPen, mZeroLinePen;$/;"	m	class:QCPGrid	typeref:typename:QPen
mSubGridVisible	qcustomplot.h	/^  bool mSubGridVisible;$/;"	m	class:QCPGrid	typeref:typename:bool
mSubTickCount	qcustomplot.h	/^  int mSubTickCount;$/;"	m	class:QCPAxisTickerLog	typeref:typename:int
mSubTickCount	qcustomplot.h	/^  int mSubTickCount;$/;"	m	class:QCPAxisTickerText	typeref:typename:int
mSubTickPen	qcustomplot.h	/^  QPen mSubTickPen, mSelectedSubTickPen;$/;"	m	class:QCPAxis	typeref:typename:QPen
mSubTickVector	qcustomplot.h	/^  QVector<double> mSubTickVector;$/;"	m	class:QCPAxis	typeref:typename:QVector<double>
mSubTicks	qcustomplot.h	/^  bool mSubTicks;$/;"	m	class:QCPAxis	typeref:typename:bool
mSymbolGap	qcustomplot.h	/^  double mSymbolGap;$/;"	m	class:QCPErrorBars	typeref:typename:double
mTail	qcustomplot.h	/^  QCPLineEnding mHead, mTail;$/;"	m	class:QCPItemCurve	typeref:typename:QCPLineEnding
mTail	qcustomplot.h	/^  QCPLineEnding mHead, mTail;$/;"	m	class:QCPItemLine	typeref:typename:QCPLineEnding
mTangentAverage	qcustomplot.h	/^  int mTangentAverage;$/;"	m	class:QCPSelectionDecoratorBracket	typeref:typename:int
mTangentToData	qcustomplot.h	/^  bool mTangentToData;$/;"	m	class:QCPSelectionDecoratorBracket	typeref:typename:bool
mText	qcustomplot.h	/^  QString mText;$/;"	m	class:QCPItemText	typeref:typename:QString
mText	qcustomplot.h	/^  QString mText;$/;"	m	class:QCPTextElement	typeref:typename:QString
mTextAlignment	qcustomplot.h	/^  Qt::Alignment mTextAlignment;$/;"	m	class:QCPItemText	typeref:typename:Qt::Alignment
mTextBoundingRect	qcustomplot.h	/^  QRect mTextBoundingRect;$/;"	m	class:QCPTextElement	typeref:typename:QRect
mTextColor	qcustomplot.h	/^  QColor mTextColor;$/;"	m	class:QCPAbstractLegendItem	typeref:typename:QColor
mTextColor	qcustomplot.h	/^  QColor mTextColor;$/;"	m	class:QCPLegend	typeref:typename:QColor
mTextColor	qcustomplot.h	/^  QColor mTextColor;$/;"	m	class:QCPTextElement	typeref:typename:QColor
mTextFlags	qcustomplot.h	/^  int mTextFlags;$/;"	m	class:QCPTextElement	typeref:typename:int
mTickCount	qcustomplot.h	/^  int mTickCount;$/;"	m	class:QCPAxisTicker	typeref:typename:int
mTickLabelColor	qcustomplot.h	/^  QColor mTickLabelColor, mSelectedTickLabelColor;$/;"	m	class:QCPAxis	typeref:typename:QColor
mTickLabelFont	qcustomplot.h	/^  QFont mTickLabelFont, mSelectedTickLabelFont;$/;"	m	class:QCPAxis	typeref:typename:QFont
mTickLabels	qcustomplot.h	/^  bool mTickLabels;$/;"	m	class:QCPAxis	typeref:typename:bool
mTickLabelsSelectionBox	qcustomplot.h	/^  QRect mAxisSelectionBox, mTickLabelsSelectionBox, mLabelSelectionBox;$/;"	m	class:QCPAxisPainterPrivate	typeref:typename:QRect
mTickOrigin	qcustomplot.h	/^  double mTickOrigin;$/;"	m	class:QCPAxisTicker	typeref:typename:double
mTickPen	qcustomplot.h	/^  QPen mTickPen, mSelectedTickPen;$/;"	m	class:QCPAxis	typeref:typename:QPen
mTickStep	qcustomplot.h	/^  double mTickStep;$/;"	m	class:QCPAxisTickerFixed	typeref:typename:double
mTickStepStrategy	qcustomplot.h	/^  TickStepStrategy mTickStepStrategy;$/;"	m	class:QCPAxisTicker	typeref:typename:TickStepStrategy
mTickVector	qcustomplot.h	/^  QVector<double> mTickVector;$/;"	m	class:QCPAxis	typeref:typename:QVector<double>
mTickVectorLabels	qcustomplot.h	/^  QVector<QString> mTickVectorLabels;$/;"	m	class:QCPAxis	typeref:typename:QVector<QString>
mTicker	qcustomplot.h	/^  QSharedPointer<QCPAxisTicker> mTicker;$/;"	m	class:QCPAxis	typeref:typename:QSharedPointer<QCPAxisTicker>
mTicks	qcustomplot.h	/^  QMap<double, QString> mTicks;$/;"	m	class:QCPAxisTickerText	typeref:typename:QMap<double,QString>
mTicks	qcustomplot.h	/^  bool mTicks;$/;"	m	class:QCPAxis	typeref:typename:bool
mTightBoundary	qcustomplot.h	/^  bool mTightBoundary;$/;"	m	class:QCPColorMap	typeref:typename:bool
mTimeFormat	qcustomplot.h	/^  QString mTimeFormat;$/;"	m	class:QCPAxisTickerTime	typeref:typename:QString
mTransformationMode	qcustomplot.h	/^  Qt::TransformationMode mTransformationMode;$/;"	m	class:QCPItemPixmap	typeref:typename:Qt::TransformationMode
mTwoColored	qcustomplot.h	/^  bool mTwoColored;$/;"	m	class:QCPFinancial	typeref:typename:bool
mType	qcustomplot.h	/^  QCPAxis::AxisType mType;$/;"	m	class:QCPColorScale	typeref:typename:QCPAxis::AxisType
mUndersampledMapImage	qcustomplot.h	/^  QImage mMapImage, mUndersampledMapImage;$/;"	m	class:QCPColorMap	typeref:typename:QImage
mUsedScatterProperties	qcustomplot.h	/^  QCPScatterStyle::ScatterProperties mUsedScatterProperties;$/;"	m	class:QCPSelectionDecorator	typeref:typename:QCPScatterStyle::ScatterProperties
mValue	qcustomplot.h	/^  double mKey, mValue;$/;"	m	class:QCPItemPosition	typeref:typename:double
mValueAxis	qcustomplot.h	/^  QPointer<QCPAxis> mKeyAxis, mValueAxis;$/;"	m	class:QCPAbstractPlottable	typeref:typename:QPointer<QCPAxis>
mValueAxis	qcustomplot.h	/^  QPointer<QCPAxis> mKeyAxis, mValueAxis;$/;"	m	class:QCPItemPosition	typeref:typename:QPointer<QCPAxis>
mValueRange	qcustomplot.h	/^  QCPRange mKeyRange, mValueRange;$/;"	m	class:QCPColorMapData	typeref:typename:QCPRange
mValueSize	qcustomplot.h	/^  int mKeySize, mValueSize;$/;"	m	class:QCPColorMapData	typeref:typename:int
mViewport	qcustomplot.h	/^  QRect mViewport;$/;"	m	class:QCustomPlot	typeref:typename:QRect
mVisible	qcustomplot.h	/^  bool mVisible;$/;"	m	class:QCPLayer	typeref:typename:bool
mVisible	qcustomplot.h	/^  bool mVisible;$/;"	m	class:QCPLayerable	typeref:typename:bool
mWhiskerAntialiased	qcustomplot.h	/^  bool mWhiskerAntialiased;$/;"	m	class:QCPStatisticalBox	typeref:typename:bool
mWhiskerBarPen	qcustomplot.h	/^  QPen mWhiskerPen, mWhiskerBarPen;$/;"	m	class:QCPStatisticalBox	typeref:typename:QPen
mWhiskerPen	qcustomplot.h	/^  QPen mWhiskerPen, mWhiskerBarPen;$/;"	m	class:QCPStatisticalBox	typeref:typename:QPen
mWhiskerWidth	qcustomplot.h	/^  double mWhiskerWidth;$/;"	m	class:QCPErrorBars	typeref:typename:double
mWhiskerWidth	qcustomplot.h	/^  double mWhiskerWidth;$/;"	m	class:QCPStatisticalBox	typeref:typename:double
mWidth	qcustomplot.h	/^  double mWidth, mLength;$/;"	m	class:QCPLineEnding	typeref:typename:double
mWidth	qcustomplot.h	/^  double mWidth;$/;"	m	class:QCPBars	typeref:typename:double
mWidth	qcustomplot.h	/^  double mWidth;$/;"	m	class:QCPFinancial	typeref:typename:double
mWidth	qcustomplot.h	/^  double mWidth;$/;"	m	class:QCPStatisticalBox	typeref:typename:double
mWidthType	qcustomplot.h	/^  WidthType mWidthType;$/;"	m	class:QCPBars	typeref:typename:WidthType
mWidthType	qcustomplot.h	/^  WidthType mWidthType;$/;"	m	class:QCPFinancial	typeref:typename:WidthType
mWrap	qcustomplot.h	/^  int mWrap;$/;"	m	class:QCPLayoutGrid	typeref:typename:int
mX	qcustomplot.h	/^  double mX, mY;$/;"	m	class:QCPVector2D	typeref:typename:double
mY	qcustomplot.h	/^  double mX, mY;$/;"	m	class:QCPVector2D	typeref:typename:double
mZeroLinePen	qcustomplot.h	/^  QPen mPen, mSubGridPen, mZeroLinePen;$/;"	m	class:QCPGrid	typeref:typename:QPen
m_audioDevice	mdi-child.h	/^    QIODevice *	m_audioDevice;$/;"	m	class:MdiChild	typeref:typename:QIODevice *
m_baseTime	chrono-util.h	/^    std::chrono::high_resolution_clock::time_point m_baseTime;$/;"	m	class:ChronoDuration	typeref:typename:std::chrono::high_resolution_clock::time_point
m_bleFD	ble.h	/^    int m_bleFD = -1;$/;"	m	class:BLESession	typeref:typename:int
m_bleSendTimer	ble.h	/^    asio::deadline_timer m_bleSendTimer;$/;"	m	class:BLESession	typeref:typename:asio::deadline_timer
m_childs	mainwindow.h	/^    std::vector<MdiChild*> m_childs; \/\/\/< depre$/;"	m	class:MainWindow	typeref:typename:std::vector<MdiChild * >
m_connected	license-session.h	/^        bool m_connected = true;$/;"	m	class:LicenseSession	typeref:typename:bool
m_dataBuffer	license-session.h	/^        CircularBuffer m_dataBuffer = CircularBuffer(205344); \/\/\/< [수신]$/;"	m	class:LicenseSession	typeref:typename:CircularBuffer
m_hz_division	mdi-child.h	/^    int m_hz_division = 0;$/;"	m	class:MdiChild	typeref:typename:int
m_inAsyncWrite	license-session.h	/^        bool m_inAsyncWrite = false;$/;"	m	class:LicenseSession	typeref:typename:bool
m_innerBuffer	ble.h	/^    CircularBuffer m_innerBuffer;$/;"	m	class:BLESession	typeref:typename:CircularBuffer
m_innerSigMata	ble.h	/^    uint8_t m_innerSigMata[200][0xff + 1];$/;"	m	class:BLESession	typeref:typename:uint8_t[200][]
m_innerSigStep	ble.h	/^    int m_innerSigStep = 0;$/;"	m	class:BLESession	typeref:typename:int
m_io	ble.h	/^    asio::io_service& m_io;$/;"	m	class:BLESession	typeref:typename:asio::io_service &
m_ioService	gui-session.h	/^        boost::asio::io_service& m_ioService; $/;"	m	class:GuiSession_depre	typeref:typename:boost::asio::io_service &
m_ioService	license-session.h	/^        boost::asio::io_service& m_ioService;$/;"	m	class:LicenseSession	typeref:typename:boost::asio::io_service &
m_ioService	mainwindow.h	/^    boost::asio::io_service m_ioService;$/;"	m	class:MainWindow	typeref:typename:boost::asio::io_service
m_ioService	qc-session.h	/^        boost::asio::io_service& m_ioService;$/;"	m	class:QcSession	typeref:typename:boost::asio::io_service &
m_it	json.hpp	/^    difference_type m_it = (std::numeric_limits<std::ptrdiff_t>::min)();$/;"	m	class:nlohmann::detail::primitive_iterator_t	typeref:typename:difference_type
m_it	json.hpp	/^    internal_iterator<typename std::remove_const<BasicJsonType>::type> m_it;$/;"	m	class:nlohmann::detail::iter_impl	typeref:typename:internal_iterator<typename std::remove_const<BasicJsonType>::type>
m_lastRecvTime	license-session.h	/^        uint64_t m_lastRecvTime = 0;$/;"	m	class:LicenseSession	typeref:typename:uint64_t
m_lexer	json.hpp	/^    lexer_t m_lexer;$/;"	m	class:nlohmann::detail::parser	typeref:typename:lexer_t
m_loggerConsole	spdlogger.h	/^		std::shared_ptr<spdlog::logger>	m_loggerConsole;$/;"	m	class:util::Log	typeref:typename:std::shared_ptr<spdlog::logger>
m_mataSignature	qc-session.h	/^        uint8_t m_mataSignature[10][0xff + 1];$/;"	m	class:QcSession	typeref:typename:uint8_t[10][]
m_mdiChild	license-session.h	/^        MdiChild* m_mdiChild = nullptr;$/;"	m	class:LicenseSession	typeref:typename:MdiChild *
m_modernStep	license-session.h	/^        E_STEP m_modernStep = STEP_CA;\/\/\/< [수신]$/;"	m	class:LicenseSession	typeref:typename:E_STEP
m_object	json.hpp	/^    pointer m_object = nullptr;$/;"	m	class:nlohmann::detail::iter_impl	typeref:typename:pointer
m_pktBody	ble.h	/^    std::shared_ptr<PKT> m_pktBody;$/;"	m	class:BLESession	typeref:typename:std::shared_ptr<PKT>
m_pktBody	qc-session.h	/^        std::shared_ptr<PKT> m_pktBody;$/;"	m	class:QcSession	typeref:typename:std::shared_ptr<PKT>
m_pktHeader	qc-session.h	/^        PKT m_pktHeader;$/;"	m	class:QcSession	typeref:typename:PKT
m_port	ble.h	/^    asio::serial_port m_port;$/;"	m	class:BLESession	typeref:typename:asio::serial_port
m_recoveryTimer	ble.h	/^    asio::deadline_timer m_recoveryTimer;$/;"	m	class:BLESession	typeref:typename:asio::deadline_timer
m_recvBps	license-session.h	/^        uint32_t m_recvBps = 0;$/;"	m	class:LicenseSession	typeref:typename:uint32_t
m_recvBytes	license-session.h	/^        uint32_t m_recvBytes = 0;$/;"	m	class:LicenseSession	typeref:typename:uint32_t
m_remainBuffer	ble.h	/^    std::vector<uint8_t> m_remainBuffer;$/;"	m	class:BLESession	typeref:typename:std::vector<uint8_t>
m_remains	ble.h	/^    int m_remains = 0;$/;"	m	class:BLESession	typeref:typename:int
m_requiredSize	license-session.h	/^        uint32_t m_requiredSize = 1;\/\/\/< [수신]$/;"	m	class:LicenseSession	typeref:typename:uint32_t
m_resolver	ble.h	/^    asio::ip::tcp::resolver m_resolver; \/\/ {ios};$/;"	m	class:BLESession	typeref:typename:asio::ip::tcp::resolver
m_roomSocket	ble.h	/^    boost::beast::websocket::stream<asio::ip::tcp::socket> m_roomSocket;$/;"	m	class:BLESession	typeref:typename:boost::beast::websocket::stream<asio::ip::tcp::socket>
m_sendBuffer	ble.h	/^    CircularBuffer m_sendBuffer;$/;"	m	class:BLESession	typeref:typename:CircularBuffer
m_sendBuffer	license-session.h	/^        CircularBuffer m_sendBuffer = CircularBuffer(1024); \/\/\/< [송신]$/;"	m	class:LicenseSession	typeref:typename:CircularBuffer
m_sendTimer	license-session.h	/^        boost::asio::deadline_timer m_sendTimer = boost::asio::deadline_timer(m_ioService, boost/;"	m	class:LicenseSession	typeref:typename:boost::asio::deadline_timer
m_session	mdi-child.h	/^    boost::weak_ptr<LicenseSession> m_session;$/;"	m	class:MdiChild	typeref:typename:boost::weak_ptr<LicenseSession>
m_sessions	mainwindow.h	/^    std::vector<boost::weak_ptr<LicenseSession>> m_sessions; \/\/\/< depre$/;"	m	class:MainWindow	typeref:typename:std::vector<boost::weak_ptr<LicenseSession>>
m_sigMata	ble.h	/^    uint8_t m_sigMata[10][0xff + 1];$/;"	m	class:BLESession	typeref:typename:uint8_t[10][]
m_sigStep	ble.h	/^    int m_sigStep = 0;$/;"	m	class:BLESession	typeref:typename:int
m_sigStep	qc-session.h	/^        int m_sigStep;$/;"	m	class:QcSession	typeref:typename:int
m_signalSocket	ble.h	/^    boost::beast::websocket::stream<asio::ip::tcp::socket> m_signalSocket;$/;"	m	class:BLESession	typeref:typename:boost::beast::websocket::stream<asio::ip::tcp::socket>
m_socket	license-session.h	/^        tcp::socket m_socket;$/;"	m	class:LicenseSession	typeref:typename:tcp::socket
m_state	mdi-child.h	/^    int m_state = 0;$/;"	m	class:MdiChild	typeref:typename:int
m_type	json.hpp	/^    value_t m_type = value_t::null;$/;"	m	class:nlohmann::basic_json	typeref:typename:value_t
m_window	gui-session.h	/^        GLFWwindow* m_window;$/;"	m	class:GuiSession_depre	typeref:typename:GLFWwindow *
m_windows	gui.h	/^        std::vector<std::shared_ptr<ClientWindow>> m_windows;$/;"	m	class:GUI	typeref:typename:std::vector<std::shared_ptr<ClientWindow>>
ma	stb_image.h	/^   unsigned int mr,mg,mb,ma, all_a;$/;"	m	struct:__anon84e4e8860e08	typeref:typename:unsigned int
mac_address	simple.pb-c.h	/^  char *mac_address;$/;"	m	struct:_RspServiceKey	typeref:typename:char *
mac_address	simple.proto	/^    optional string mac_address = 2;$/;"	f
magenta	spdlog/fmt/bundled/colors.h	/^    magenta = 0xFF00FF,                 \/\/ rgb(255,0,255)$/;"	e	enum:color
magenta	spdlog/fmt/bundled/core.h	/^    magenta,$/;"	e	enum:color
magenta	spdlog/sinks/ansicolor_sink.h	/^    const std::string magenta = "\\033[35m";$/;"	m	class:spdlog::sinks::ansicolor_sink	typeref:typename:const std::string
magic	protobuf-c/protobuf-c.h	/^	uint32_t			magic;$/;"	m	struct:ProtobufCEnumDescriptor	typeref:typename:uint32_t
magic	protobuf-c/protobuf-c.h	/^	uint32_t			magic;$/;"	m	struct:ProtobufCMessageDescriptor	typeref:typename:uint32_t
magic	protobuf-c/protobuf-c.h	/^	uint32_t			magic;$/;"	m	struct:ProtobufCServiceDescriptor	typeref:typename:uint32_t
main	main.cpp	/^int main(int argc, char *argv[])$/;"	f	typeref:typename:int
mainBrush	qcustomplot.cpp	/^QBrush QCPItemEllipse::mainBrush() const$/;"	f	class:QCPItemEllipse	typeref:typename:QBrush
mainBrush	qcustomplot.cpp	/^QBrush QCPItemRect::mainBrush() const$/;"	f	class:QCPItemRect	typeref:typename:QBrush
mainBrush	qcustomplot.cpp	/^QBrush QCPItemText::mainBrush() const$/;"	f	class:QCPItemText	typeref:typename:QBrush
mainBrush	qcustomplot.cpp	/^QBrush QCPItemTracer::mainBrush() const$/;"	f	class:QCPItemTracer	typeref:typename:QBrush
mainBrush	qcustomplot.h	/^  QBrush mainBrush() const;$/;"	p	class:QCPItemEllipse	typeref:typename:QBrush
mainBrush	qcustomplot.h	/^  QBrush mainBrush() const;$/;"	p	class:QCPItemRect	typeref:typename:QBrush
mainBrush	qcustomplot.h	/^  QBrush mainBrush() const;$/;"	p	class:QCPItemText	typeref:typename:QBrush
mainBrush	qcustomplot.h	/^  QBrush mainBrush() const;$/;"	p	class:QCPItemTracer	typeref:typename:QBrush
mainColor	qcustomplot.cpp	/^QColor QCPItemText::mainColor() const$/;"	f	class:QCPItemText	typeref:typename:QColor
mainColor	qcustomplot.h	/^  QColor mainColor() const;$/;"	p	class:QCPItemText	typeref:typename:QColor
mainFont	qcustomplot.cpp	/^QFont QCPItemText::mainFont() const$/;"	f	class:QCPItemText	typeref:typename:QFont
mainFont	qcustomplot.cpp	/^QFont QCPTextElement::mainFont() const$/;"	f	class:QCPTextElement	typeref:typename:QFont
mainFont	qcustomplot.h	/^  QFont mainFont() const;$/;"	p	class:QCPItemText	typeref:typename:QFont
mainFont	qcustomplot.h	/^  QFont mainFont() const;$/;"	p	class:QCPTextElement	typeref:typename:QFont
mainKey	qcustomplot.h	/^  inline double mainKey() const { return key; }$/;"	f	class:QCPBarsData	typeref:typename:double
mainKey	qcustomplot.h	/^  inline double mainKey() const { return key; }$/;"	f	class:QCPCurveData	typeref:typename:double
mainKey	qcustomplot.h	/^  inline double mainKey() const { return key; }$/;"	f	class:QCPFinancialData	typeref:typename:double
mainKey	qcustomplot.h	/^  inline double mainKey() const { return key; }$/;"	f	class:QCPGraphData	typeref:typename:double
mainKey	qcustomplot.h	/^  inline double mainKey() const { return key; }$/;"	f	class:QCPStatisticalBoxData	typeref:typename:double
mainPen	qcustomplot.cpp	/^QPen QCPItemBracket::mainPen() const$/;"	f	class:QCPItemBracket	typeref:typename:QPen
mainPen	qcustomplot.cpp	/^QPen QCPItemCurve::mainPen() const$/;"	f	class:QCPItemCurve	typeref:typename:QPen
mainPen	qcustomplot.cpp	/^QPen QCPItemEllipse::mainPen() const$/;"	f	class:QCPItemEllipse	typeref:typename:QPen
mainPen	qcustomplot.cpp	/^QPen QCPItemLine::mainPen() const$/;"	f	class:QCPItemLine	typeref:typename:QPen
mainPen	qcustomplot.cpp	/^QPen QCPItemPixmap::mainPen() const$/;"	f	class:QCPItemPixmap	typeref:typename:QPen
mainPen	qcustomplot.cpp	/^QPen QCPItemRect::mainPen() const$/;"	f	class:QCPItemRect	typeref:typename:QPen
mainPen	qcustomplot.cpp	/^QPen QCPItemStraightLine::mainPen() const$/;"	f	class:QCPItemStraightLine	typeref:typename:QPen
mainPen	qcustomplot.cpp	/^QPen QCPItemText::mainPen() const$/;"	f	class:QCPItemText	typeref:typename:QPen
mainPen	qcustomplot.cpp	/^QPen QCPItemTracer::mainPen() const$/;"	f	class:QCPItemTracer	typeref:typename:QPen
mainPen	qcustomplot.h	/^  QPen mainPen() const;$/;"	p	class:QCPItemBracket	typeref:typename:QPen
mainPen	qcustomplot.h	/^  QPen mainPen() const;$/;"	p	class:QCPItemCurve	typeref:typename:QPen
mainPen	qcustomplot.h	/^  QPen mainPen() const;$/;"	p	class:QCPItemEllipse	typeref:typename:QPen
mainPen	qcustomplot.h	/^  QPen mainPen() const;$/;"	p	class:QCPItemLine	typeref:typename:QPen
mainPen	qcustomplot.h	/^  QPen mainPen() const;$/;"	p	class:QCPItemPixmap	typeref:typename:QPen
mainPen	qcustomplot.h	/^  QPen mainPen() const;$/;"	p	class:QCPItemRect	typeref:typename:QPen
mainPen	qcustomplot.h	/^  QPen mainPen() const;$/;"	p	class:QCPItemStraightLine	typeref:typename:QPen
mainPen	qcustomplot.h	/^  QPen mainPen() const;$/;"	p	class:QCPItemText	typeref:typename:QPen
mainPen	qcustomplot.h	/^  QPen mainPen() const;$/;"	p	class:QCPItemTracer	typeref:typename:QPen
mainTextColor	qcustomplot.cpp	/^QColor QCPTextElement::mainTextColor() const$/;"	f	class:QCPTextElement	typeref:typename:QColor
mainTextColor	qcustomplot.h	/^  QColor mainTextColor() const;$/;"	p	class:QCPTextElement	typeref:typename:QColor
mainValue	qcustomplot.h	/^  inline double mainValue() const { return median; }$/;"	f	class:QCPStatisticalBoxData	typeref:typename:double
mainValue	qcustomplot.h	/^  inline double mainValue() const { return open; }$/;"	f	class:QCPFinancialData	typeref:typename:double
mainValue	qcustomplot.h	/^  inline double mainValue() const { return value; }$/;"	f	class:QCPBarsData	typeref:typename:double
mainValue	qcustomplot.h	/^  inline double mainValue() const { return value; }$/;"	f	class:QCPCurveData	typeref:typename:double
mainValue	qcustomplot.h	/^  inline double mainValue() const { return value; }$/;"	f	class:QCPGraphData	typeref:typename:double
main_type	spdlog/fmt/bundled/format-inl.h	/^    typedef internal::int_traits<int>::main_type main_type;$/;"	t	function:__anonb519b34f0110::format_error_code	typeref:typename:internal::int_traits<int>::main_type
make	spdlog/fmt/bundled/format.h	/^    static Arg make(const T &value)$/;"	f	struct:fmt::internal::ArgArray	typeref:typename:Arg
make	spdlog/fmt/bundled/format.h	/^    static Value make(const T &value)$/;"	f	struct:fmt::internal::ArgArray	typeref:typename:Value
makeHeader	tcp-packet.cpp	/^int makeHeader(int cmdType, uint8_t* pkt, int bugSize) {$/;"	f	typeref:typename:int
makeHeader	tcp-packet.h	/^int makeHeader(int cmdType, uint8_t* pkt, int bugSize);$/;"	p	typeref:typename:int
makeNonCosmetic	qcustomplot.cpp	/^void QCPPainter::makeNonCosmetic()$/;"	f	class:QCPPainter	typeref:typename:void
makeNonCosmetic	qcustomplot.h	/^  void makeNonCosmetic();$/;"	p	class:QCPPainter	typeref:typename:void
makePKT	packet-buffer.cpp	/^shared_const_buffer makePKT(short cmdType, std::string jsonString) {$/;"	f	typeref:typename:shared_const_buffer
makePKT	packet-buffer.cpp	/^shared_const_buffer makePKT(short cmdType, uint8_t* data, size_t len) {$/;"	f	typeref:typename:shared_const_buffer
makePKT	packet-buffer.h	/^shared_const_buffer makePKT(short cmdType, std::string jsonString);$/;"	p	typeref:typename:shared_const_buffer
makePKT	packet-buffer.h	/^shared_const_buffer makePKT(short cmdType, uint8_t* data, size_t len);$/;"	p	typeref:typename:shared_const_buffer
makeVectorBLEPKT	packet-buffer.cpp	/^std::vector<uint8_t> makeVectorBLEPKT(const std::vector<char>& inner) {$/;"	f	typeref:typename:std::vector<uint8_t>
makeVectorBLEPKT	packet-buffer.h	/^std::vector<uint8_t> makeVectorBLEPKT(const std::vector<char>& inner);$/;"	p	typeref:typename:std::vector<uint8_t>
makeVectorPKT	packet-buffer.cpp	/^std::vector<char> makeVectorPKT(short cmdType, std::string jsonString) {$/;"	f	typeref:typename:std::vector<char>
makeVectorPKT	packet-buffer.h	/^std::vector<char> makeVectorPKT(short cmdType, std::string jsonString);$/;"	p	typeref:typename:std::vector<char>
make_arg	spdlog/fmt/bundled/core.h	/^FMT_CONSTEXPR basic_format_arg<Context> make_arg(const T &value)$/;"	f	namespace:internal	typeref:typename:FMT_CONSTEXPR basic_format_arg<Context>
make_arg	spdlog/fmt/bundled/core.h	/^FMT_CONSTEXPR basic_format_arg<Context> make_arg(const T &value);$/;"	p	namespace:internal	typeref:typename:FMT_CONSTEXPR basic_format_arg<Context>
make_arg	spdlog/fmt/bundled/core.h	/^inline typename std::enable_if<IS_PACKED, value<Context>>::type make_arg(const T &value)$/;"	f	namespace:internal	typeref:typename:std::enable_if<IS_PACKED,value<Context>>::type
make_format_args	spdlog/fmt/bundled/core.h	/^inline format_arg_store<Context, Args...> make_format_args(const Args &... args)$/;"	f	typeref:typename:format_arg_store<Context,Args...>
make_format_args	spdlog/fmt/bundled/core.h	/^inline format_arg_store<format_context, Args...> make_format_args(const Args &... args)$/;"	f	typeref:typename:format_arg_store<format_context,Args...>
make_index_sequence	json.hpp	/^struct make_index_sequence$/;"	s	namespace:nlohmann::detail
make_index_sequence	json.hpp	/^template<> struct make_index_sequence<0> : index_sequence<> {};$/;"	s	namespace:nlohmann::detail
make_index_sequence	json.hpp	/^template<> struct make_index_sequence<1> : index_sequence<0> {};$/;"	s	namespace:nlohmann::detail
make_index_sequence	spdlog/fmt/bundled/ranges.h	/^using make_index_sequence = make_integer_sequence<std::size_t, N>;$/;"	t	namespace:internal	typeref:typename:make_integer_sequence<std::size_t,N>
make_index_sequence	spdlog/fmt/bundled/ranges.h	/^using make_index_sequence = std::make_index_sequence<N>;$/;"	t	namespace:internal	typeref:typename:std::make_index_sequence<N>
make_integer_sequence	spdlog/fmt/bundled/ranges.h	/^struct make_integer_sequence : make_integer_sequence<T, N - 1, N - 1, Ns...>$/;"	s	namespace:internal
make_integer_sequence	spdlog/fmt/bundled/ranges.h	/^struct make_integer_sequence<T, 0, Ns...> : integer_sequence<T, Ns...>$/;"	s	namespace:internal
make_ptr	spdlog/fmt/bundled/format.h	/^inline T *make_ptr(T *ptr, std::size_t)$/;"	f	namespace:fmt::internal	typeref:typename:T *
make_ptr	spdlog/fmt/bundled/format.h	/^inline stdext::checked_array_iterator<T *> make_ptr(T *ptr, std::size_t size)$/;"	f	namespace:fmt::internal	typeref:typename:stdext::checked_array_iterator<T * >
make_type	spdlog/fmt/bundled/format.h	/^inline uint64_t make_type()$/;"	f	namespace:fmt::internal	typeref:typename:uint64_t
make_type	spdlog/fmt/bundled/format.h	/^inline uint64_t make_type(FMT_GEN15(FMT_ARG_TYPE_DEFAULT))$/;"	f	namespace:fmt::internal	typeref:typename:uint64_t
make_type	spdlog/fmt/bundled/format.h	/^inline uint64_t make_type(const Arg &first, const Args &... tail)$/;"	f	namespace:fmt::internal	typeref:typename:uint64_t
make_type	spdlog/fmt/bundled/format.h	/^inline uint64_t make_type(const T &arg)$/;"	f	namespace:fmt::internal	typeref:typename:uint64_t
make_value	spdlog/fmt/bundled/core.h	/^make_value(const T &val)$/;"	f	namespace:internal
make_value	spdlog/fmt/bundled/core.h	/^typed_value<C, named_arg_type> make_value(const named_arg<T, typename C::char_type> &val)$/;"	f	namespace:internal	typeref:typename:typed_value<C,named_arg_type>
map_	spdlog/fmt/bundled/core.h	/^    entry *map_;$/;"	m	class:internal::arg_map	typeref:typename:entry *
map_	spdlog/fmt/bundled/core.h	/^    internal::arg_map<basic_format_context> map_;$/;"	m	class:basic_format_context	typeref:typename:internal::arg_map<basic_format_context>
map_	spdlog/fmt/bundled/format.h	/^    MapType map_;$/;"	m	class:fmt::internal::ArgMap	typeref:typename:MapType
map_	spdlog/fmt/bundled/format.h	/^    internal::ArgMap<Char> map_;$/;"	m	class:fmt::BasicFormatter	typeref:typename:internal::ArgMap<Char>
marginGroup	qcustomplot.h	/^  QCPMarginGroup *marginGroup(QCP::MarginSide side) const { return mMarginGroups.value(side, (QC/;"	f	class:QCPLayoutElement	typeref:typename:QCPMarginGroup *
marginGroups	qcustomplot.h	/^  QHash<QCP::MarginSide, QCPMarginGroup*> marginGroups() const { return mMarginGroups; }$/;"	f	class:QCPLayoutElement	typeref:typename:QHash<QCP::MarginSide,QCPMarginGroup * >
marginSideToAxisType	qcustomplot.cpp	/^QCPAxis::AxisType QCPAxis::marginSideToAxisType(QCP::MarginSide side)$/;"	f	class:QCPAxis	typeref:typename:QCPAxis::AxisType
marginSideToAxisType	qcustomplot.h	/^  static AxisType marginSideToAxisType(QCP::MarginSide side);$/;"	p	class:QCPAxis	typeref:typename:AxisType
margins	qcustomplot.h	/^  QMargins margins() const { return mMargins; }$/;"	f	class:QCPLayoutElement	typeref:typename:QMargins
margins	qcustomplot.h	/^  Q_PROPERTY(QMargins margins READ margins WRITE setMargins)$/;"	p	class:QCPLayoutElement	typeref:typename:QMargins
marker	stb_image.h	/^   unsigned char  marker;      \/\/ marker seen while filling entropy buffer$/;"	m	struct:__anon84e4e8860608	typeref:typename:unsigned char
maroon	spdlog/fmt/bundled/colors.h	/^    maroon = 0x800000,                  \/\/ rgb(128,0,0)$/;"	e	enum:color
mat4x4	linmath.h	/^typedef vec4 mat4x4[4];$/;"	t	typeref:typename:vec4[4]
mat4x4_add	linmath.h	/^static inline void mat4x4_add(mat4x4 M, mat4x4 a, mat4x4 b)$/;"	f	typeref:typename:void
mat4x4_col	linmath.h	/^static inline void mat4x4_col(vec4 r, mat4x4 M, int i)$/;"	f	typeref:typename:void
mat4x4_dup	linmath.h	/^static inline void mat4x4_dup(mat4x4 M, mat4x4 N)$/;"	f	typeref:typename:void
mat4x4_from_quat	linmath.h	/^static inline void mat4x4_from_quat(mat4x4 M, quat q)$/;"	f	typeref:typename:void
mat4x4_from_vec3_mul_outer	linmath.h	/^static inline void mat4x4_from_vec3_mul_outer(mat4x4 M, vec3 a, vec3 b)$/;"	f	typeref:typename:void
mat4x4_frustum	linmath.h	/^static inline void mat4x4_frustum(mat4x4 M, float l, float r, float b, float t, float n, float f/;"	f	typeref:typename:void
mat4x4_identity	linmath.h	/^static inline void mat4x4_identity(mat4x4 M)$/;"	f	typeref:typename:void
mat4x4_invert	linmath.h	/^static inline void mat4x4_invert(mat4x4 T, mat4x4 M)$/;"	f	typeref:typename:void
mat4x4_look_at	linmath.h	/^static inline void mat4x4_look_at(mat4x4 m, vec3 eye, vec3 center, vec3 up)$/;"	f	typeref:typename:void
mat4x4_mul	linmath.h	/^static inline void mat4x4_mul(mat4x4 M, mat4x4 a, mat4x4 b)$/;"	f	typeref:typename:void
mat4x4_mul_vec4	linmath.h	/^static inline void mat4x4_mul_vec4(vec4 r, mat4x4 M, vec4 v)$/;"	f	typeref:typename:void
mat4x4_ortho	linmath.h	/^static inline void mat4x4_ortho(mat4x4 M, float l, float r, float b, float t, float n, float f)$/;"	f	typeref:typename:void
mat4x4_orthonormalize	linmath.h	/^static inline void mat4x4_orthonormalize(mat4x4 R, mat4x4 M)$/;"	f	typeref:typename:void
mat4x4_perspective	linmath.h	/^static inline void mat4x4_perspective(mat4x4 m, float y_fov, float aspect, float n, float f)$/;"	f	typeref:typename:void
mat4x4_rotate	linmath.h	/^static inline void mat4x4_rotate(mat4x4 R, mat4x4 M, float x, float y, float z, float angle)$/;"	f	typeref:typename:void
mat4x4_rotate_X	linmath.h	/^static inline void mat4x4_rotate_X(mat4x4 Q, mat4x4 M, float angle)$/;"	f	typeref:typename:void
mat4x4_rotate_Y	linmath.h	/^static inline void mat4x4_rotate_Y(mat4x4 Q, mat4x4 M, float angle)$/;"	f	typeref:typename:void
mat4x4_rotate_Z	linmath.h	/^static inline void mat4x4_rotate_Z(mat4x4 Q, mat4x4 M, float angle)$/;"	f	typeref:typename:void
mat4x4_row	linmath.h	/^static inline void mat4x4_row(vec4 r, mat4x4 M, int i)$/;"	f	typeref:typename:void
mat4x4_scale	linmath.h	/^static inline void mat4x4_scale(mat4x4 M, mat4x4 a, float k)$/;"	f	typeref:typename:void
mat4x4_scale_aniso	linmath.h	/^static inline void mat4x4_scale_aniso(mat4x4 M, mat4x4 a, float x, float y, float z)$/;"	f	typeref:typename:void
mat4x4_sub	linmath.h	/^static inline void mat4x4_sub(mat4x4 M, mat4x4 a, mat4x4 b)$/;"	f	typeref:typename:void
mat4x4_translate	linmath.h	/^static inline void mat4x4_translate(mat4x4 T, float x, float y, float z)$/;"	f	typeref:typename:void
mat4x4_translate_in_place	linmath.h	/^static inline void mat4x4_translate_in_place(mat4x4 M, float x, float y, float z)$/;"	f	typeref:typename:void
mat4x4_transpose	linmath.h	/^static inline void mat4x4_transpose(mat4x4 M, mat4x4 N)$/;"	f	typeref:typename:void
mat4x4o_mul_quat	linmath.h	/^static inline void mat4x4o_mul_quat(mat4x4 R, mat4x4 M, quat q)$/;"	f	typeref:typename:void
maxRange	qcustomplot.cpp	/^const double QCPRange::maxRange = 1e250;$/;"	m	class:QCPRange	typeref:typename:const double
maxRange	qcustomplot.h	/^  static const double maxRange;$/;"	m	class:QCPRange	typeref:typename:const double
max_b128_numbers	protobuf-c/protobuf-c.c	/^max_b128_numbers(size_t len, const uint8_t *data)$/;"	f	typeref:typename:size_t	file:
max_files_	spdlog/sinks/rotating_file_sink.h	/^    std::size_t max_files_;$/;"	m	class:spdlog::sinks::SPDLOG_FINAL	typeref:typename:std::size_t
max_items_	spdlog/details/circular_q.h	/^    size_t max_items_;$/;"	m	class:spdlog::details::circular_q	typeref:typename:size_t
max_items_	spdlog/details/mpmc_blocking_q.h	/^    size_t max_items_;$/;"	m	class:spdlog::details::mpmc_bounded_queue	typeref:typename:size_t
max_length	qc-session.h	/^        enum { max_length = 1024 };$/;"	e	enum:QcSession::__anon6ef9a7c00203
max_packed_args	spdlog/fmt/bundled/core.h	/^    max_packed_args = 15$/;"	e	enum:internal::__anonef64315f0303
max_size	json.hpp	/^    size_type max_size() const noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:size_type
max_size	spdlog/fmt/bundled/core.h	/^    unsigned max_size() const$/;"	f	class:basic_format_args	typeref:typename:unsigned
max_size_	spdlog/sinks/rotating_file_sink.h	/^    std::size_t max_size_;$/;"	m	class:spdlog::sinks::SPDLOG_FINAL	typeref:typename:std::size_t
max_x	stb_image.h	/^   int max_x, max_y;$/;"	m	struct:__anon84e4e8861108	typeref:typename:int
max_y	stb_image.h	/^   int max_x, max_y;$/;"	m	struct:__anon84e4e8861108	typeref:typename:int
maxcode	stb_image.h	/^   int maxcode[17];$/;"	m	struct:__anon84e4e8860908	typeref:typename:int[17]
maxcode	stb_image.h	/^   unsigned int maxcode[18];$/;"	m	struct:__anon84e4e8860508	typeref:typename:unsigned int[18]
maximum	qcustomplot.h	/^  double key, minimum, lowerQuartile, median, upperQuartile, maximum;$/;"	m	class:QCPStatisticalBoxData	typeref:typename:double
maximumOuterSizeHint	qcustomplot.cpp	/^QSize QCPLayoutElement::maximumOuterSizeHint() const$/;"	f	class:QCPLayoutElement	typeref:typename:QSize
maximumOuterSizeHint	qcustomplot.cpp	/^QSize QCPLayoutGrid::maximumOuterSizeHint() const$/;"	f	class:QCPLayoutGrid	typeref:typename:QSize
maximumOuterSizeHint	qcustomplot.cpp	/^QSize QCPTextElement::maximumOuterSizeHint() const$/;"	f	class:QCPTextElement	typeref:typename:QSize
maximumOuterSizeHint	qcustomplot.h	/^  virtual QSize maximumOuterSizeHint() const Q_DECL_OVERRIDE;$/;"	p	class:QCPLayoutGrid	typeref:typename:QSize
maximumOuterSizeHint	qcustomplot.h	/^  virtual QSize maximumOuterSizeHint() const Q_DECL_OVERRIDE;$/;"	p	class:QCPTextElement	typeref:typename:QSize
maximumOuterSizeHint	qcustomplot.h	/^  virtual QSize maximumOuterSizeHint() const;$/;"	p	class:QCPLayoutElement	typeref:typename:QSize
maximumSize	qcustomplot.h	/^  QSize maximumSize() const { return mMaximumSize; }$/;"	f	class:QCPLayoutElement	typeref:typename:QSize
maximumSize	qcustomplot.h	/^  Q_PROPERTY(QSize maximumSize READ maximumSize WRITE setMaximumSize)$/;"	p	class:QCPLayoutElement	typeref:typename:QSize
mayTraverse	qcustomplot.cpp	/^bool QCPCurve::mayTraverse(int prevRegion, int currentRegion) const$/;"	f	class:QCPCurve	typeref:typename:bool
mayTraverse	qcustomplot.h	/^  bool mayTraverse(int prevRegion, int currentRegion) const;$/;"	p	class:QCPCurve	typeref:typename:bool
mb	stb_image.h	/^   unsigned int mr,mg,mb,ma, all_a;$/;"	m	struct:__anon84e4e8860e08	typeref:typename:unsigned int
median	qcustomplot.h	/^  double key, minimum, lowerQuartile, median, upperQuartile, maximum;$/;"	m	class:QCPStatisticalBoxData	typeref:typename:double
medianPen	qcustomplot.h	/^  QPen medianPen() const { return mMedianPen; }$/;"	f	class:QCPStatisticalBox	typeref:typename:QPen
medianPen	qcustomplot.h	/^  Q_PROPERTY(QPen medianPen READ medianPen WRITE setMedianPen)$/;"	p	class:QCPStatisticalBox	typeref:typename:QPen
medium_aqua_marine	spdlog/fmt/bundled/colors.h	/^    medium_aqua_marine = 0x66CDAA,      \/\/ rgb(102,205,170)$/;"	e	enum:color
medium_blue	spdlog/fmt/bundled/colors.h	/^    medium_blue = 0x0000CD,             \/\/ rgb(0,0,205)$/;"	e	enum:color
medium_orchid	spdlog/fmt/bundled/colors.h	/^    medium_orchid = 0xBA55D3,           \/\/ rgb(186,85,211)$/;"	e	enum:color
medium_purple	spdlog/fmt/bundled/colors.h	/^    medium_purple = 0x9370DB,           \/\/ rgb(147,112,219)$/;"	e	enum:color
medium_sea_green	spdlog/fmt/bundled/colors.h	/^    medium_sea_green = 0x3CB371,        \/\/ rgb(60,179,113)$/;"	e	enum:color
medium_slate_blue	spdlog/fmt/bundled/colors.h	/^    medium_slate_blue = 0x7B68EE,       \/\/ rgb(123,104,238)$/;"	e	enum:color
medium_spring_green	spdlog/fmt/bundled/colors.h	/^    medium_spring_green = 0x00FA9A,     \/\/ rgb(0,250,154)$/;"	e	enum:color
medium_turquoise	spdlog/fmt/bundled/colors.h	/^    medium_turquoise = 0x48D1CC,        \/\/ rgb(72,209,204)$/;"	e	enum:color
medium_violet_red	spdlog/fmt/bundled/colors.h	/^    medium_violet_red = 0xC71585,       \/\/ rgb(199,21,133)$/;"	e	enum:color
merge_messages	protobuf-c/protobuf-c.c	/^merge_messages(ProtobufCMessage *earlier_msg,$/;"	f	typeref:typename:protobuf_c_boolean	file:
merge_patch	json.hpp	/^    void merge_patch(const basic_json& patch)$/;"	f	class:nlohmann::basic_json	typeref:typename:void
message	http-request.h	/^    std::string message(int ev) const override;$/;"	p	struct:__anon7a6731110110::HTTPErrorCategory	typeref:typename:std::string
message	http-request.h	/^std::string HTTPErrorCategory::message(int ev) const$/;"	f	class:__anon7a6731110110::HTTPErrorCategory	typeref:typename:std::string
message_init	protobuf-c/protobuf-c.h	/^	ProtobufCMessageInit		message_init;$/;"	m	struct:ProtobufCMessageDescriptor	typeref:typename:ProtobufCMessageInit
message_init_generic	protobuf-c/protobuf-c.c	/^message_init_generic(const ProtobufCMessageDescriptor *desc,$/;"	f	typeref:typename:void	file:
meta	json.hpp	/^    static basic_json meta()$/;"	f	class:nlohmann::basic_json	typeref:typename:basic_json
method_indices_by_name	protobuf-c/protobuf-c.h	/^	const unsigned			*method_indices_by_name;$/;"	m	struct:ProtobufCServiceDescriptor	typeref:typename:const unsigned *
methods	protobuf-c/protobuf-c.h	/^	const ProtobufCMethodDescriptor	*methods;$/;"	m	struct:ProtobufCServiceDescriptor	typeref:typename:const ProtobufCMethodDescriptor *
mg	stb_image.h	/^   unsigned int mr,mg,mb,ma, all_a;$/;"	m	struct:__anon84e4e8860e08	typeref:typename:unsigned int
mic_loopback_on	mdi-child.h	/^    bool mic_loopback_on = false;$/;"	m	class:MdiChild	typeref:typename:bool
midnight_blue	spdlog/fmt/bundled/colors.h	/^    midnight_blue = 0x191970,           \/\/ rgb(25,25,112)$/;"	e	enum:color
millis_cache_timestamp_	spdlog/details/pattern_formatter.h	/^    std::chrono::milliseconds::rep millis_cache_timestamp_{0};$/;"	m	class:spdlog::details::SPDLOG_FINAL	typeref:typename:std::chrono::milliseconds::rep
minRange	qcustomplot.cpp	/^const double QCPRange::minRange = 1e-280;$/;"	m	class:QCPRange	typeref:typename:const double
minRange	qcustomplot.h	/^  static const double minRange;$/;"	m	class:QCPRange	typeref:typename:const double
minimum	qcustomplot.h	/^  double key, minimum, lowerQuartile, median, upperQuartile, maximum;$/;"	m	class:QCPStatisticalBoxData	typeref:typename:double
minimumMargins	qcustomplot.h	/^  QMargins minimumMargins() const { return mMinimumMargins; }$/;"	f	class:QCPLayoutElement	typeref:typename:QMargins
minimumMargins	qcustomplot.h	/^  Q_PROPERTY(QMargins minimumMargins READ minimumMargins WRITE setMinimumMargins)$/;"	p	class:QCPLayoutElement	typeref:typename:QMargins
minimumOuterSizeHint	qcustomplot.cpp	/^QSize QCPLayoutElement::minimumOuterSizeHint() const$/;"	f	class:QCPLayoutElement	typeref:typename:QSize
minimumOuterSizeHint	qcustomplot.cpp	/^QSize QCPLayoutGrid::minimumOuterSizeHint() const$/;"	f	class:QCPLayoutGrid	typeref:typename:QSize
minimumOuterSizeHint	qcustomplot.cpp	/^QSize QCPPlottableLegendItem::minimumOuterSizeHint() const$/;"	f	class:QCPPlottableLegendItem	typeref:typename:QSize
minimumOuterSizeHint	qcustomplot.cpp	/^QSize QCPTextElement::minimumOuterSizeHint() const$/;"	f	class:QCPTextElement	typeref:typename:QSize
minimumOuterSizeHint	qcustomplot.h	/^  virtual QSize minimumOuterSizeHint() const Q_DECL_OVERRIDE;$/;"	p	class:QCPLayoutGrid	typeref:typename:QSize
minimumOuterSizeHint	qcustomplot.h	/^  virtual QSize minimumOuterSizeHint() const Q_DECL_OVERRIDE;$/;"	p	class:QCPPlottableLegendItem	typeref:typename:QSize
minimumOuterSizeHint	qcustomplot.h	/^  virtual QSize minimumOuterSizeHint() const Q_DECL_OVERRIDE;$/;"	p	class:QCPTextElement	typeref:typename:QSize
minimumOuterSizeHint	qcustomplot.h	/^  virtual QSize minimumOuterSizeHint() const;$/;"	p	class:QCPLayoutElement	typeref:typename:QSize
minimumSize	qcustomplot.h	/^  QSize minimumSize() const { return mMinimumSize; }$/;"	f	class:QCPLayoutElement	typeref:typename:QSize
minimumSize	qcustomplot.h	/^  Q_PROPERTY(QSize minimumSize READ minimumSize WRITE setMinimumSize)$/;"	p	class:QCPLayoutElement	typeref:typename:QSize
minimumSizeHint	qcustomplot.cpp	/^QSize QCustomPlot::minimumSizeHint() const$/;"	f	class:QCustomPlot	typeref:typename:QSize
minimumSizeHint	qcustomplot.h	/^  virtual QSize minimumSizeHint() const Q_DECL_OVERRIDE;$/;"	p	class:QCustomPlot	typeref:typename:QSize
mint_cream	spdlog/fmt/bundled/colors.h	/^    mint_cream = 0xF5FFFA,              \/\/ rgb(245,255,250)$/;"	e	enum:color
minus	json.hpp	/^    diyfp minus;$/;"	m	struct:nlohmann::detail::dtoa_impl::boundaries	typeref:typename:diyfp
misty_rose	spdlog/fmt/bundled/colors.h	/^    misty_rose = 0xFFE4E1,              \/\/ rgb(255,228,225)$/;"	e	enum:color
moccasin	spdlog/fmt/bundled/colors.h	/^    moccasin = 0xFFE4B5,                \/\/ rgb(255,228,181)$/;"	e	enum:color
mode	qcustomplot.h	/^  LayerMode mode() const { return mMode; }$/;"	f	class:QCPLayer	typeref:typename:LayerMode
mode	qcustomplot.h	/^  Q_PROPERTY(LayerMode mode READ mode WRITE setMode)$/;"	p	class:QCPLayer	typeref:typename:LayerMode
model_name	simple.pb-c.h	/^  char *model_name;$/;"	m	struct:_RspServiceKey	typeref:typename:char *
model_name	simple.proto	/^    optional string model_name = 3;$/;"	f
modes	qcustomplot.h	/^  PainterModes modes() const { return mModes; }$/;"	f	class:QCPPainter	typeref:typename:PainterModes
months	spdlog/details/pattern_formatter.h	/^static const std::string months[]{"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sept"/;"	v	namespace:spdlog::details	typeref:typename:const std::string[]
months	spdlog/details/pattern_formatter_impl.h	/^static const std::string months[]{"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sept"/;"	v	namespace:spdlog::details	typeref:typename:const std::string[]
motor	protocol-struct.h	/^    int16_t motor;$/;"	m	struct:ControlTossingSTM	typeref:typename:int16_t
mouseDoubleClick	qcustomplot.h	/^  void mouseDoubleClick(QMouseEvent *event);$/;"	S	class:QCustomPlot	typeref:typename:void
mouseDoubleClick	qcustomplot.h	/^  void mouseDoubleClick(QMouseEvent *event);$/;"	p	class:QCustomPlot	typeref:typename:void
mouseDoubleClickEvent	qcustomplot.cpp	/^void QCPLayerable::mouseDoubleClickEvent(QMouseEvent *event, const QVariant &details)$/;"	f	class:QCPLayerable	typeref:typename:void
mouseDoubleClickEvent	qcustomplot.cpp	/^void QCPTextElement::mouseDoubleClickEvent(QMouseEvent *event, const QVariant &details)$/;"	f	class:QCPTextElement	typeref:typename:void
mouseDoubleClickEvent	qcustomplot.cpp	/^void QCustomPlot::mouseDoubleClickEvent(QMouseEvent *event)$/;"	f	class:QCustomPlot	typeref:typename:void
mouseDoubleClickEvent	qcustomplot.h	/^  virtual void mouseDoubleClickEvent(QMouseEvent *event) Q_DECL_OVERRIDE;$/;"	p	class:QCustomPlot	typeref:typename:void
mouseDoubleClickEvent	qcustomplot.h	/^  virtual void mouseDoubleClickEvent(QMouseEvent *event, const QVariant &details) Q_DECL_OVERRID/;"	p	class:QCPTextElement	typeref:typename:void
mouseDoubleClickEvent	qcustomplot.h	/^  virtual void mouseDoubleClickEvent(QMouseEvent *event, const QVariant &details);$/;"	p	class:QCPLayerable	typeref:typename:void
mouseMove	qcustomplot.h	/^  void mouseMove(QMouseEvent *event);$/;"	S	class:QCustomPlot	typeref:typename:void
mouseMove	qcustomplot.h	/^  void mouseMove(QMouseEvent *event);$/;"	p	class:QCustomPlot	typeref:typename:void
mouseMoveEvent	qcustomplot.cpp	/^void QCPAxis::mouseMoveEvent(QMouseEvent *event, const QPointF &startPos)$/;"	f	class:QCPAxis	typeref:typename:void
mouseMoveEvent	qcustomplot.cpp	/^void QCPAxisRect::mouseMoveEvent(QMouseEvent *event, const QPointF &startPos)$/;"	f	class:QCPAxisRect	typeref:typename:void
mouseMoveEvent	qcustomplot.cpp	/^void QCPColorScale::mouseMoveEvent(QMouseEvent *event, const QPointF &startPos)$/;"	f	class:QCPColorScale	typeref:typename:void
mouseMoveEvent	qcustomplot.cpp	/^void QCPLayerable::mouseMoveEvent(QMouseEvent *event, const QPointF &startPos)$/;"	f	class:QCPLayerable	typeref:typename:void
mouseMoveEvent	qcustomplot.cpp	/^void QCustomPlot::mouseMoveEvent(QMouseEvent *event)$/;"	f	class:QCustomPlot	typeref:typename:void
mouseMoveEvent	qcustomplot.h	/^  virtual void mouseMoveEvent(QMouseEvent *event) Q_DECL_OVERRIDE;$/;"	p	class:QCustomPlot	typeref:typename:void
mouseMoveEvent	qcustomplot.h	/^  virtual void mouseMoveEvent(QMouseEvent *event, const QPointF &startPos) Q_DECL_OVERRIDE;$/;"	p	class:QCPAxis	typeref:typename:void
mouseMoveEvent	qcustomplot.h	/^  virtual void mouseMoveEvent(QMouseEvent *event, const QPointF &startPos) Q_DECL_OVERRIDE;$/;"	p	class:QCPAxisRect	typeref:typename:void
mouseMoveEvent	qcustomplot.h	/^  virtual void mouseMoveEvent(QMouseEvent *event, const QPointF &startPos) Q_DECL_OVERRIDE;$/;"	p	class:QCPColorScale	typeref:typename:void
mouseMoveEvent	qcustomplot.h	/^  virtual void mouseMoveEvent(QMouseEvent *event, const QPointF &startPos);$/;"	p	class:QCPLayerable	typeref:typename:void
mousePress	qcustomplot.h	/^  void mousePress(QMouseEvent *event);$/;"	S	class:QCustomPlot	typeref:typename:void
mousePress	qcustomplot.h	/^  void mousePress(QMouseEvent *event);$/;"	p	class:QCustomPlot	typeref:typename:void
mousePressEvent	qcustomplot.cpp	/^void QCPAxis::mousePressEvent(QMouseEvent *event, const QVariant &details)$/;"	f	class:QCPAxis	typeref:typename:void
mousePressEvent	qcustomplot.cpp	/^void QCPAxisRect::mousePressEvent(QMouseEvent *event, const QVariant &details)$/;"	f	class:QCPAxisRect	typeref:typename:void
mousePressEvent	qcustomplot.cpp	/^void QCPColorScale::mousePressEvent(QMouseEvent *event, const QVariant &details)$/;"	f	class:QCPColorScale	typeref:typename:void
mousePressEvent	qcustomplot.cpp	/^void QCPLayerable::mousePressEvent(QMouseEvent *event, const QVariant &details)$/;"	f	class:QCPLayerable	typeref:typename:void
mousePressEvent	qcustomplot.cpp	/^void QCPTextElement::mousePressEvent(QMouseEvent *event, const QVariant &details)$/;"	f	class:QCPTextElement	typeref:typename:void
mousePressEvent	qcustomplot.cpp	/^void QCustomPlot::mousePressEvent(QMouseEvent *event)$/;"	f	class:QCustomPlot	typeref:typename:void
mousePressEvent	qcustomplot.h	/^  virtual void mousePressEvent(QMouseEvent *event) Q_DECL_OVERRIDE;$/;"	p	class:QCustomPlot	typeref:typename:void
mousePressEvent	qcustomplot.h	/^  virtual void mousePressEvent(QMouseEvent *event, const QVariant &details) Q_DECL_OVERRIDE;$/;"	p	class:QCPAxis	typeref:typename:void
mousePressEvent	qcustomplot.h	/^  virtual void mousePressEvent(QMouseEvent *event, const QVariant &details) Q_DECL_OVERRIDE;$/;"	p	class:QCPAxisRect	typeref:typename:void
mousePressEvent	qcustomplot.h	/^  virtual void mousePressEvent(QMouseEvent *event, const QVariant &details) Q_DECL_OVERRIDE;$/;"	p	class:QCPColorScale	typeref:typename:void
mousePressEvent	qcustomplot.h	/^  virtual void mousePressEvent(QMouseEvent *event, const QVariant &details) Q_DECL_OVERRIDE;$/;"	p	class:QCPTextElement	typeref:typename:void
mousePressEvent	qcustomplot.h	/^  virtual void mousePressEvent(QMouseEvent *event, const QVariant &details);$/;"	p	class:QCPLayerable	typeref:typename:void
mouseRelease	qcustomplot.h	/^  void mouseRelease(QMouseEvent *event);$/;"	S	class:QCustomPlot	typeref:typename:void
mouseRelease	qcustomplot.h	/^  void mouseRelease(QMouseEvent *event);$/;"	p	class:QCustomPlot	typeref:typename:void
mouseReleaseEvent	qcustomplot.cpp	/^void QCPAxis::mouseReleaseEvent(QMouseEvent *event, const QPointF &startPos)$/;"	f	class:QCPAxis	typeref:typename:void
mouseReleaseEvent	qcustomplot.cpp	/^void QCPAxisRect::mouseReleaseEvent(QMouseEvent *event, const QPointF &startPos)$/;"	f	class:QCPAxisRect	typeref:typename:void
mouseReleaseEvent	qcustomplot.cpp	/^void QCPColorScale::mouseReleaseEvent(QMouseEvent *event, const QPointF &startPos)$/;"	f	class:QCPColorScale	typeref:typename:void
mouseReleaseEvent	qcustomplot.cpp	/^void QCPLayerable::mouseReleaseEvent(QMouseEvent *event, const QPointF &startPos)$/;"	f	class:QCPLayerable	typeref:typename:void
mouseReleaseEvent	qcustomplot.cpp	/^void QCPTextElement::mouseReleaseEvent(QMouseEvent *event, const QPointF &startPos)$/;"	f	class:QCPTextElement	typeref:typename:void
mouseReleaseEvent	qcustomplot.cpp	/^void QCustomPlot::mouseReleaseEvent(QMouseEvent *event)$/;"	f	class:QCustomPlot	typeref:typename:void
mouseReleaseEvent	qcustomplot.h	/^  virtual void mouseReleaseEvent(QMouseEvent *event) Q_DECL_OVERRIDE;$/;"	p	class:QCustomPlot	typeref:typename:void
mouseReleaseEvent	qcustomplot.h	/^  virtual void mouseReleaseEvent(QMouseEvent *event, const QPointF &startPos) Q_DECL_OVERRIDE;$/;"	p	class:QCPAxis	typeref:typename:void
mouseReleaseEvent	qcustomplot.h	/^  virtual void mouseReleaseEvent(QMouseEvent *event, const QPointF &startPos) Q_DECL_OVERRIDE;$/;"	p	class:QCPAxisRect	typeref:typename:void
mouseReleaseEvent	qcustomplot.h	/^  virtual void mouseReleaseEvent(QMouseEvent *event, const QPointF &startPos) Q_DECL_OVERRIDE;$/;"	p	class:QCPColorScale	typeref:typename:void
mouseReleaseEvent	qcustomplot.h	/^  virtual void mouseReleaseEvent(QMouseEvent *event, const QPointF &startPos) Q_DECL_OVERRIDE;$/;"	p	class:QCPTextElement	typeref:typename:void
mouseReleaseEvent	qcustomplot.h	/^  virtual void mouseReleaseEvent(QMouseEvent *event, const QPointF &startPos);$/;"	p	class:QCPLayerable	typeref:typename:void
mouseWheel	qcustomplot.h	/^  void mouseWheel(QWheelEvent *event);$/;"	S	class:QCustomPlot	typeref:typename:void
mouseWheel	qcustomplot.h	/^  void mouseWheel(QWheelEvent *event);$/;"	p	class:QCustomPlot	typeref:typename:void
move	json.hpp	/^        enum class patch_operations {add, remove, replace, move, copy, test, invalid};$/;"	e	enum:nlohmann::basic_json::patch::patch_operations
move	spdlog/fmt/bundled/format.h	/^    void move(MemoryBuffer &other)$/;"	f	class:fmt::internal::MemoryBuffer	typeref:typename:void
move	spdlog/fmt/bundled/posix.h	/^inline fmt::BufferedFile &move(fmt::BufferedFile &f)$/;"	f	namespace:std	typeref:typename:fmt::BufferedFile &
move	spdlog/fmt/bundled/posix.h	/^inline fmt::File &move(fmt::File &f)$/;"	f	namespace:std	typeref:typename:fmt::File &
moveAbove	qcustomplot.cpp	/^void QCPBars::moveAbove(QCPBars *bars)$/;"	f	class:QCPBars	typeref:typename:void
moveAbove	qcustomplot.h	/^  void moveAbove(QCPBars *bars);$/;"	p	class:QCPBars	typeref:typename:void
moveBelow	qcustomplot.cpp	/^void QCPBars::moveBelow(QCPBars *bars)$/;"	f	class:QCPBars	typeref:typename:void
moveBelow	qcustomplot.h	/^  void moveBelow(QCPBars *bars);$/;"	p	class:QCPBars	typeref:typename:void
moveLayer	qcustomplot.cpp	/^bool QCustomPlot::moveLayer(QCPLayer *layer, QCPLayer *otherLayer, QCustomPlot::LayerInsertMode /;"	f	class:QCustomPlot	typeref:typename:bool
moveLayer	qcustomplot.h	/^  bool moveLayer(QCPLayer *layer, QCPLayer *otherLayer, LayerInsertMode insertMode=limAbove);$/;"	p	class:QCustomPlot	typeref:typename:bool
moveRange	qcustomplot.cpp	/^void QCPAxis::moveRange(double diff)$/;"	f	class:QCPAxis	typeref:typename:void
moveRange	qcustomplot.h	/^  void moveRange(double diff);$/;"	p	class:QCPAxis	typeref:typename:void
moveSelection	qcustomplot.cpp	/^void QCPSelectionRect::moveSelection(QMouseEvent *event)$/;"	f	class:QCPSelectionRect	typeref:typename:void
moveSelection	qcustomplot.h	/^  virtual void moveSelection(QMouseEvent *event);$/;"	p	class:QCPSelectionRect	typeref:typename:void
moveToLayer	qcustomplot.cpp	/^bool QCPLayerable::moveToLayer(QCPLayer *layer, bool prepend)$/;"	f	class:QCPLayerable	typeref:typename:bool
moveToLayer	qcustomplot.h	/^  bool moveToLayer(QCPLayer *layer, bool prepend);$/;"	p	class:QCPLayerable	typeref:typename:bool
move_string	json.hpp	/^    string_t&& move_string()$/;"	f	class:nlohmann::detail::lexer	typeref:typename:string_t &&
moved_or_copied	json.hpp	/^    value_type moved_or_copied() const$/;"	f	class:nlohmann::detail::json_ref	typeref:typename:value_type
mpmc_bounded_queue	spdlog/details/mpmc_blocking_q.h	/^    explicit mpmc_bounded_queue(size_t max_items)$/;"	f	class:spdlog::details::mpmc_bounded_queue
mpmc_bounded_queue	spdlog/details/mpmc_blocking_q.h	/^class mpmc_bounded_queue$/;"	c	namespace:spdlog::details
mr	stb_image.h	/^   unsigned int mr,mg,mb,ma, all_a;$/;"	m	struct:__anon84e4e8860e08	typeref:typename:unsigned int
msAll	qcustomplot.h	/^                  ,msAll     = 0xFF \/\/\/< <tt>0xFF<\/tt> all margins$/;"	e	enum:QCP::MarginSide
msBottom	qcustomplot.h	/^                  ,msBottom  = 0x08 \/\/\/< <tt>0x08<\/tt> bottom margin$/;"	e	enum:QCP::MarginSide
msLeft	qcustomplot.h	/^enum MarginSide { msLeft     = 0x01 \/\/\/< <tt>0x01<\/tt> left margin$/;"	e	enum:QCP::MarginSide
msNone	qcustomplot.h	/^                  ,msNone    = 0x00 \/\/\/< <tt>0x00<\/tt> no margin$/;"	e	enum:QCP::MarginSide
msRight	qcustomplot.h	/^                  ,msRight   = 0x02 \/\/\/< <tt>0x02<\/tt> right margin$/;"	e	enum:QCP::MarginSide
msTop	qcustomplot.h	/^                  ,msTop     = 0x04 \/\/\/< <tt>0x04<\/tt> top margin$/;"	e	enum:QCP::MarginSide
msg_id	spdlog/details/async_log_helper.h	/^        size_t msg_id;$/;"	m	struct:spdlog::details::async_log_helper::async_msg	typeref:typename:size_t
msg_id	spdlog/details/log_msg.h	/^    size_t msg_id{0};$/;"	m	struct:spdlog::details::log_msg	typeref:typename:size_t
msg_id	spdlog/details/thread_pool.h	/^    size_t msg_id;$/;"	m	struct:spdlog::details::async_msg	typeref:typename:size_t
msg_type	spdlog/details/async_log_helper.h	/^        async_msg_type msg_type;$/;"	m	struct:spdlog::details::async_log_helper::async_msg	typeref:typename:async_msg_type
msg_type	spdlog/details/thread_pool.h	/^    async_msg_type msg_type;$/;"	m	struct:spdlog::details::async_msg	typeref:typename:async_msg_type
msvc_sink	spdlog/sinks/msvc_sink.h	/^    explicit msvc_sink() {}$/;"	f	class:spdlog::sinks::msvc_sink
msvc_sink	spdlog/sinks/msvc_sink.h	/^class msvc_sink : public base_sink<Mutex>$/;"	c	namespace:spdlog::sinks
msvc_sink_mt	spdlog/sinks/msvc_sink.h	/^using msvc_sink_mt = msvc_sink<std::mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:msvc_sink<std::mutex>
msvc_sink_st	spdlog/sinks/msvc_sink.h	/^using msvc_sink_st = msvc_sink<details::null_mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:msvc_sink<details::null_mutex>
mul	json.hpp	/^    static diyfp mul(const diyfp& x, const diyfp& y) noexcept$/;"	f	struct:nlohmann::detail::dtoa_impl::diyfp	typeref:typename:diyfp
multiSelectModifier	qcustomplot.h	/^  Qt::KeyboardModifier multiSelectModifier() const { return mMultiSelectModifier; }$/;"	f	class:QCustomPlot	typeref:typename:Qt::KeyboardModifier
must_free_data	protobuf-c/protobuf-c.h	/^	protobuf_c_boolean	must_free_data;$/;"	m	struct:ProtobufCBufferSimple	typeref:typename:protobuf_c_boolean
mutable_audio	qc-message.pb.h	/^inline ::std::string* Protocol::mutable_audio() {$/;"	f	class:Protocol	typeref:typename:::std::string *
mutable_imu	qc-message.pb.h	/^inline ::Imu* Protocol::mutable_imu() {$/;"	f	class:Protocol	typeref:typename:::Imu *
mutable_unknown_fields	qc-message.pb.h	/^  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {$/;"	f	class:Imu	typeref:typename:::google::protobuf::UnknownFieldSet *
mutable_unknown_fields	qc-message.pb.h	/^  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {$/;"	f	class:Protocol	typeref:typename:::google::protobuf::UnknownFieldSet *
mutable_video	qc-message.pb.h	/^inline ::std::string* Protocol::mutable_video() {$/;"	f	class:Protocol	typeref:typename:::std::string *
mutex	spdlog/details/console_globals.h	/^    static mutex_t &mutex()$/;"	f	struct:spdlog::details::console_mutex	typeref:typename:mutex_t &
mutex	spdlog/details/console_globals.h	/^    static mutex_t &mutex()$/;"	f	struct:spdlog::details::console_nullmutex	typeref:typename:mutex_t &
mutex_t	spdlog/details/console_globals.h	/^    using mutex_t = null_mutex;$/;"	t	struct:spdlog::details::console_nullmutex	typeref:typename:null_mutex
mutex_t	spdlog/details/console_globals.h	/^    using mutex_t = std::mutex;$/;"	t	struct:spdlog::details::console_mutex	typeref:typename:std::mutex
mySlotName	mdi-child.cpp	/^void MdiChild::mySlotName(const QByteArray& message) {$/;"	f	class:MdiChild	typeref:typename:void
mySlotName	mdi-child.h	/^    void mySlotName(const QByteArray& message);$/;"	p	class:MdiChild	typeref:typename:void
mySlotName	mdi-child.h	/^    void mySlotName(const QByteArray& message);$/;"	s	class:MdiChild	typeref:typename:void
mySlotName2	mdi-child.cpp	/^void MdiChild::mySlotName2(const QByteArray& message) {$/;"	f	class:MdiChild	typeref:typename:void
mySlotName2	mdi-child.h	/^    void mySlotName2(const QByteArray& message);$/;"	p	class:MdiChild	typeref:typename:void
mySlotName2	mdi-child.h	/^    void mySlotName2(const QByteArray& message);$/;"	s	class:MdiChild	typeref:typename:void
n_field_ranges	protobuf-c/protobuf-c.h	/^	unsigned			n_field_ranges;$/;"	m	struct:ProtobufCMessageDescriptor	typeref:typename:unsigned
n_fields	protobuf-c/protobuf-c.h	/^	unsigned			n_fields;$/;"	m	struct:ProtobufCMessageDescriptor	typeref:typename:unsigned
n_methods	protobuf-c/protobuf-c.h	/^	unsigned			n_methods;$/;"	m	struct:ProtobufCServiceDescriptor	typeref:typename:unsigned
n_unknown_fields	protobuf-c/protobuf-c.h	/^	unsigned				n_unknown_fields;$/;"	m	struct:ProtobufCMessage	typeref:typename:unsigned
n_value_names	protobuf-c/protobuf-c.h	/^	unsigned			n_value_names;$/;"	m	struct:ProtobufCEnumDescriptor	typeref:typename:unsigned
n_value_ranges	protobuf-c/protobuf-c.h	/^	unsigned			n_value_ranges;$/;"	m	struct:ProtobufCEnumDescriptor	typeref:typename:unsigned
n_values	protobuf-c/protobuf-c.h	/^	unsigned			n_values;$/;"	m	struct:ProtobufCEnumDescriptor	typeref:typename:unsigned
name	http-request.h	/^    const char* name() const noexcept override;$/;"	p	struct:__anon7a6731110110::HTTPErrorCategory	typeref:typename:const char *
name	http-request.h	/^const char* HTTPErrorCategory::name() const noexcept$/;"	f	class:__anon7a6731110110::HTTPErrorCategory	typeref:typename:const char *
name	json.hpp	/^    static std::string name(const std::string& ename, int id_)$/;"	f	class:nlohmann::detail::exception	typeref:typename:std::string
name	protobuf-c/protobuf-c.h	/^	const char				*name;$/;"	m	struct:ProtobufCMethodDescriptor	typeref:typename:const char *
name	protobuf-c/protobuf-c.h	/^	const char			*name;$/;"	m	struct:ProtobufCEnumDescriptor	typeref:typename:const char *
name	protobuf-c/protobuf-c.h	/^	const char			*name;$/;"	m	struct:ProtobufCMessageDescriptor	typeref:typename:const char *
name	protobuf-c/protobuf-c.h	/^	const char			*name;$/;"	m	struct:ProtobufCServiceDescriptor	typeref:typename:const char *
name	protobuf-c/protobuf-c.h	/^	const char		*name;$/;"	m	struct:ProtobufCFieldDescriptor	typeref:typename:const char *
name	protobuf-c/protobuf-c.h	/^	const char	*name;$/;"	m	struct:ProtobufCEnumValue	typeref:typename:const char *
name	protobuf-c/protobuf-c.h	/^	const char      *name;$/;"	m	struct:ProtobufCEnumValueIndex	typeref:typename:const char *
name	qcustomplot.h	/^  QString name() const { return mName; }$/;"	f	class:QCPAbstractPlottable	typeref:typename:QString
name	qcustomplot.h	/^  QString name() const { return mName; }$/;"	f	class:QCPItemAnchor	typeref:typename:QString
name	qcustomplot.h	/^  QString name() const { return mName; }$/;"	f	class:QCPLayer	typeref:typename:QString
name	qcustomplot.h	/^  Q_PROPERTY(QString name READ name WRITE setName)$/;"	p	class:QCPAbstractPlottable	typeref:typename:QString
name	qcustomplot.h	/^  Q_PROPERTY(QString name READ name)$/;"	p	class:QCPLayer	typeref:typename:QString
name	simple.pb-c.h	/^  char *name;$/;"	m	struct:_ToBle	typeref:typename:char *
name	simple.proto	/^    optional string name = 3;$/;"	f
name	spdlog/details/logger_impl.h	/^inline const std::string &spdlog::logger::name() const$/;"	f	class:spdlog::logger	typeref:typename:const std::string &
name	spdlog/fmt/bundled/core.h	/^        basic_string_view<char_type> name;$/;"	m	struct:internal::arg_map::entry	typeref:typename:basic_string_view<char_type>
name	spdlog/fmt/bundled/core.h	/^    basic_string_view<Char> name;$/;"	m	struct:internal::named_arg_base	typeref:typename:basic_string_view<Char>
name	spdlog/fmt/bundled/format.h	/^    BasicStringRef<Char> name;$/;"	m	struct:fmt::internal::NamedArg	typeref:typename:BasicStringRef<Char>
name	spdlog/logger.h	/^    const std::string &name() const;$/;"	p	class:spdlog::logger	typeref:typename:const std::string &
name_formatter	spdlog/details/pattern_formatter.h	/^class name_formatter : public flag_formatter$/;"	c	namespace:spdlog::details
name_formatter	spdlog/details/pattern_formatter_impl.h	/^class name_formatter : public flag_formatter$/;"	c	namespace:spdlog::details
name_separator	json.hpp	/^        name_separator,   \/\/\/< the name separator `:`$/;"	e	enum:nlohmann::detail::lexer::token_type
named_arg	spdlog/fmt/bundled/core.h	/^    named_arg(basic_string_view<Char> name, const T &val)$/;"	f	struct:internal::named_arg
named_arg	spdlog/fmt/bundled/core.h	/^struct named_arg : named_arg_base<Char>$/;"	s	namespace:internal
named_arg_base	spdlog/fmt/bundled/core.h	/^    named_arg_base(basic_string_view<Char> nm)$/;"	f	struct:internal::named_arg_base
named_arg_base	spdlog/fmt/bundled/core.h	/^struct named_arg_base$/;"	s	namespace:internal
named_arg_type	spdlog/fmt/bundled/core.h	/^    named_arg_type,$/;"	e	enum:internal::type
navajo_white	spdlog/fmt/bundled/colors.h	/^    navajo_white = 0xFFDEAD,            \/\/ rgb(255,222,173)$/;"	e	enum:color
navy	spdlog/fmt/bundled/colors.h	/^    navy = 0x000080,                    \/\/ rgb(0,0,128)$/;"	e	enum:color
neck_speed	simple.pb-c.h	/^  uint32_t neck_speed;$/;"	m	struct:_ToSt	typeref:typename:uint32_t
neck_speed	simple.proto	/^    optional uint32 neck_speed = 6; \/\/ -350 ~ 350$/;"	f
negation	json.hpp	/^template<class B> struct negation : std::integral_constant<bool, not B::value> {};$/;"	s	namespace:nlohmann::detail
newlocale	spdlog/fmt/bundled/posix.h	/^    static locale_t newlocale(int category_mask, const char *locale, locale_t)$/;"	f	class:fmt::Locale	typeref:typename:locale_t
next_arg	spdlog/fmt/bundled/core.h	/^    format_arg next_arg()$/;"	f	class:basic_format_context	typeref:typename:format_arg
next_arg	spdlog/fmt/bundled/format.h	/^    Arg next_arg(const char *&error)$/;"	f	class:fmt::internal::FormatterBase	typeref:typename:Arg
next_arg_id	spdlog/fmt/bundled/core.h	/^    FMT_CONSTEXPR unsigned next_arg_id();$/;"	p	class:basic_parse_context	typeref:typename:FMT_CONSTEXPR unsigned
next_arg_id_	spdlog/fmt/bundled/core.h	/^    int next_arg_id_;$/;"	m	class:basic_parse_context	typeref:typename:int
next_arg_index_	spdlog/fmt/bundled/format.h	/^    int next_arg_index_;$/;"	m	class:fmt::internal::FormatterBase	typeref:typename:int
next_byte_in_range	json.hpp	/^    bool next_byte_in_range(std::initializer_list<int> ranges)$/;"	f	class:nlohmann::detail::lexer	typeref:typename:bool
next_rotation_tp_	spdlog/sinks/daily_file_sink.h	/^    log_clock ::time_point next_rotation_tp_()$/;"	f	class:spdlog::sinks::SPDLOG_FINAL	typeref:typename:log_clock::time_point
nlohmann	json.hpp	/^namespace nlohmann$/;"	n
noAntialiasingOnDrag	qcustomplot.h	/^  Q_PROPERTY(bool noAntialiasingOnDrag READ noAntialiasingOnDrag WRITE setNoAntialiasingOnDrag)$/;"	p	class:QCustomPlot	typeref:typename:bool
noAntialiasingOnDrag	qcustomplot.h	/^  bool noAntialiasingOnDrag() const { return mNoAntialiasingOnDrag; }$/;"	f	class:QCustomPlot	typeref:typename:bool
nomore	stb_image.h	/^   int            nomore;      \/\/ flag if we saw a marker so must stop$/;"	m	struct:__anon84e4e8860608	typeref:typename:int
none_type	spdlog/fmt/bundled/core.h	/^    none_type,$/;"	e	enum:internal::type
normalize	json.hpp	/^    static diyfp normalize(diyfp x) noexcept$/;"	f	struct:nlohmann::detail::dtoa_impl::diyfp	typeref:typename:diyfp
normalize	qcustomplot.cpp	/^void QCPVector2D::normalize()$/;"	f	class:QCPVector2D	typeref:typename:void
normalize	qcustomplot.h	/^  void normalize() { if (lower > upper) qSwap(lower, upper); }$/;"	f	class:QCPRange	typeref:typename:void
normalize	qcustomplot.h	/^  void normalize();$/;"	p	class:QCPVector2D	typeref:typename:void
normalize_to	json.hpp	/^    static diyfp normalize_to(const diyfp& x, const int target_exponent) noexcept$/;"	f	struct:nlohmann::detail::dtoa_impl::diyfp	typeref:typename:diyfp
normalized	qcustomplot.cpp	/^QCPVector2D QCPVector2D::normalized() const$/;"	f	class:QCPVector2D	typeref:typename:QCPVector2D
normalized	qcustomplot.h	/^  QCPVector2D normalized() const;$/;"	p	class:QCPVector2D	typeref:typename:QCPVector2D
notAntialiasedElements	qcustomplot.h	/^  QCP::AntialiasedElements notAntialiasedElements() const { return mNotAntialiasedElements; }$/;"	f	class:QCustomPlot	typeref:typename:QCP::AntialiasedElements
notConnected	http-request.h	/^    notConnected = 1001,$/;"	e	enum:HTTPErrors
notResolved	http-request.h	/^    notResolved = 1000,$/;"	e	enum:HTTPErrors
not_empty_cv_	spdlog/details/async_log_helper.h	/^    std::condition_variable_any not_empty_cv_;$/;"	m	class:spdlog::details::async_log_helper	typeref:typename:std::condition_variable_any
not_full_cv_	spdlog/details/async_log_helper.h	/^    std::condition_variable_any not_full_cv_;$/;"	m	class:spdlog::details::async_log_helper	typeref:typename:std::condition_variable_any
now	spdlog/details/os.h	/^inline spdlog::log_clock::time_point now()$/;"	f	namespace:spdlog::details::os	typeref:typename:spdlog::log_clock::time_point
now_tm	spdlog/sinks/daily_file_sink.h	/^    tm now_tm(log_clock::time_point tp)$/;"	f	class:spdlog::sinks::SPDLOG_FINAL	typeref:typename:tm
null	json.hpp	/^    null,             \/\/\/< null value$/;"	e	enum:nlohmann::detail::value_t
null_atomic_int	spdlog/details/null_mutex.h	/^    explicit null_atomic_int(int val)$/;"	f	struct:spdlog::details::null_atomic_int
null_atomic_int	spdlog/details/null_mutex.h	/^    null_atomic_int() = default;$/;"	p	struct:spdlog::details::null_atomic_int
null_atomic_int	spdlog/details/null_mutex.h	/^struct null_atomic_int$/;"	s	namespace:spdlog::details
null_mutex	spdlog/details/null_mutex.h	/^struct null_mutex$/;"	s	namespace:spdlog::details
null_mutex_	spdlog/details/async_log_helper.h	/^    std::mutex null_mutex_;$/;"	m	class:spdlog::details::async_log_helper	typeref:typename:std::mutex
null_sink	spdlog/sinks/null_sink.h	/^class null_sink : public base_sink<Mutex>$/;"	c	namespace:spdlog::sinks
null_sink_mt	spdlog/sinks/null_sink.h	/^using null_sink_mt = null_sink<details::null_mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:null_sink<details::null_mutex>
null_sink_st	spdlog/sinks/null_sink.h	/^using null_sink_st = null_sink<details::null_mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:null_sink<details::null_mutex>
num_bits	stb_image.h	/^   int num_bits;$/;"	m	struct:__anon84e4e8860a08	typeref:typename:int
numberFormat	qcustomplot.cpp	/^QString QCPAxis::numberFormat() const$/;"	f	class:QCPAxis	typeref:typename:QString
numberFormat	qcustomplot.h	/^  QString numberFormat() const;$/;"	p	class:QCPAxis	typeref:typename:QString
numberFormat	qcustomplot.h	/^  Q_PROPERTY(QString numberFormat READ numberFormat WRITE setNumberFormat)$/;"	p	class:QCPAxis	typeref:typename:QString
numberMultiplyCross	qcustomplot.h	/^  bool numberMultiplyCross; \/\/ directly accessed by QCPAxis setters\/getters$/;"	m	class:QCPAxisPainterPrivate	typeref:typename:bool
numberPrecision	qcustomplot.h	/^  Q_PROPERTY(int numberPrecision READ numberPrecision WRITE setNumberPrecision)$/;"	p	class:QCPAxis	typeref:typename:int
numberPrecision	qcustomplot.h	/^  int numberPrecision() const { return mNumberPrecision; }$/;"	f	class:QCPAxis	typeref:typename:int
number_buffer	json.hpp	/^    std::array<char, 64> number_buffer{{}};$/;"	m	class:nlohmann::detail::serializer	typeref:typename:std::array<char,64>
number_float	json.hpp	/^        number_float_t number_float;$/;"	m	union:nlohmann::basic_json::json_value	typeref:typename:number_float_t
number_float	json.hpp	/^    number_float,     \/\/\/< number value (floating-point)$/;"	e	enum:nlohmann::detail::value_t
number_float_t	json.hpp	/^    using number_float_t = NumberFloatType;$/;"	t	class:nlohmann::basic_json	typeref:typename:NumberFloatType
number_float_t	json.hpp	/^    using number_float_t = typename BasicJsonType::number_float_t;$/;"	t	class:nlohmann::detail::lexer	typeref:typename:BasicJsonType::number_float_t
number_float_t	json.hpp	/^    using number_float_t = typename BasicJsonType::number_float_t;$/;"	t	class:nlohmann::detail::parser	typeref:typename:BasicJsonType::number_float_t
number_float_t	json.hpp	/^    using number_float_t = typename BasicJsonType::number_float_t;$/;"	t	class:nlohmann::detail::serializer	typeref:typename:BasicJsonType::number_float_t
number_integer	json.hpp	/^        number_integer_t number_integer;$/;"	m	union:nlohmann::basic_json::json_value	typeref:typename:number_integer_t
number_integer	json.hpp	/^    number_integer,   \/\/\/< number value (signed integer)$/;"	e	enum:nlohmann::detail::value_t
number_integer_t	json.hpp	/^    using number_integer_t = NumberIntegerType;$/;"	t	class:nlohmann::basic_json	typeref:typename:NumberIntegerType
number_integer_t	json.hpp	/^    using number_integer_t = typename BasicJsonType::number_integer_t;$/;"	t	class:nlohmann::detail::binary_reader	typeref:typename:BasicJsonType::number_integer_t
number_integer_t	json.hpp	/^    using number_integer_t = typename BasicJsonType::number_integer_t;$/;"	t	class:nlohmann::detail::lexer	typeref:typename:BasicJsonType::number_integer_t
number_integer_t	json.hpp	/^    using number_integer_t = typename BasicJsonType::number_integer_t;$/;"	t	class:nlohmann::detail::parser	typeref:typename:BasicJsonType::number_integer_t
number_integer_t	json.hpp	/^    using number_integer_t = typename BasicJsonType::number_integer_t;$/;"	t	class:nlohmann::detail::serializer	typeref:typename:BasicJsonType::number_integer_t
number_unsigned	json.hpp	/^        number_unsigned_t number_unsigned;$/;"	m	union:nlohmann::basic_json::json_value	typeref:typename:number_unsigned_t
number_unsigned	json.hpp	/^    number_unsigned,  \/\/\/< number value (unsigned integer)$/;"	e	enum:nlohmann::detail::value_t
number_unsigned_t	json.hpp	/^    using number_unsigned_t = NumberUnsignedType;$/;"	t	class:nlohmann::basic_json	typeref:typename:NumberUnsignedType
number_unsigned_t	json.hpp	/^    using number_unsigned_t = typename BasicJsonType::number_unsigned_t;$/;"	t	class:nlohmann::detail::binary_reader	typeref:typename:BasicJsonType::number_unsigned_t
number_unsigned_t	json.hpp	/^    using number_unsigned_t = typename BasicJsonType::number_unsigned_t;$/;"	t	class:nlohmann::detail::lexer	typeref:typename:BasicJsonType::number_unsigned_t
number_unsigned_t	json.hpp	/^    using number_unsigned_t = typename BasicJsonType::number_unsigned_t;$/;"	t	class:nlohmann::detail::parser	typeref:typename:BasicJsonType::number_unsigned_t
number_unsigned_t	json.hpp	/^    using number_unsigned_t = typename BasicJsonType::number_unsigned_t;$/;"	t	class:nlohmann::detail::serializer	typeref:typename:BasicJsonType::number_unsigned_t
numeric_limits	spdlog/fmt/bundled/format.h	/^class numeric_limits<fmt::internal::DummyInt> : public std::numeric_limits<int>$/;"	c	namespace:std
o	json.hpp	/^    output_adapter_t<char> o = nullptr;$/;"	m	class:nlohmann::detail::serializer	typeref:typename:output_adapter_t<char>
oa	json.hpp	/^    output_adapter_t<CharType> oa = nullptr;$/;"	m	class:nlohmann::detail::binary_writer	typeref:typename:output_adapter_t<CharType>
oa	json.hpp	/^    output_adapter_t<CharType> oa = nullptr;$/;"	m	class:nlohmann::detail::output_adapter	typeref:typename:output_adapter_t<CharType>
object	json.hpp	/^        object_t* object;$/;"	m	union:nlohmann::basic_json::json_value	typeref:typename:object_t *
object	json.hpp	/^    object,           \/\/\/< object (unordered set of name\/value pairs)$/;"	e	enum:nlohmann::detail::value_t
object	json.hpp	/^    static basic_json object(initializer_list_t init = {})$/;"	f	class:nlohmann::basic_json	typeref:typename:basic_json
object_comparator_t	json.hpp	/^    using object_comparator_t = std::less<>;$/;"	t	class:nlohmann::basic_json	typeref:typename:std::less<>
object_comparator_t	json.hpp	/^    using object_comparator_t = std::less<StringType>;$/;"	t	class:nlohmann::basic_json	typeref:typename:std::less<StringType>
object_end	json.hpp	/^        object_end,$/;"	e	enum:nlohmann::detail::parser::parse_event_t
object_iterator	json.hpp	/^    typename BasicJsonType::object_t::iterator object_iterator {};$/;"	m	struct:nlohmann::detail::internal_iterator	typeref:typename:BasicJsonType::object_t::iterator
object_start	json.hpp	/^        object_start,$/;"	e	enum:nlohmann::detail::parser::parse_event_t
object_t	json.hpp	/^    using object_t = ObjectType<StringType,$/;"	t	class:nlohmann::basic_json	typeref:typename:ObjectType<StringType,basic_json,object_comparator_t,AllocatorType<std::pair<const StringType,basic_json>>>
object_t	json.hpp	/^    using object_t = typename BasicJsonType::object_t;$/;"	t	class:nlohmann::detail::iter_impl	typeref:typename:BasicJsonType::object_t
oct	spdlog/fmt/bundled/format.h	/^IntFormatSpec<int, TypeSpec<'o'>> oct(int value);$/;"	p	namespace:fmt	typeref:typename:IntFormatSpec<int,TypeSpec<'o'>>
off	spdlog/common.h	/^    off = 6$/;"	e	enum:spdlog::level::level_enum
offset	protobuf-c/protobuf-c.h	/^	unsigned		offset;$/;"	m	struct:ProtobufCFieldDescriptor	typeref:typename:unsigned
offset	qcustomplot.cpp	/^int QCPAxis::offset() const$/;"	f	class:QCPAxis	typeref:typename:int
offset	qcustomplot.h	/^    QPointF offset;$/;"	m	struct:QCPAxisPainterPrivate::CachedLabel	typeref:typename:QPointF
offset	qcustomplot.h	/^  Q_PROPERTY(int offset READ offset WRITE setOffset)$/;"	p	class:QCPAxis	typeref:typename:int
offset	qcustomplot.h	/^  double offset; \/\/ directly accessed by QCPAxis setters\/getters$/;"	m	class:QCPAxisPainterPrivate	typeref:typename:double
offset	qcustomplot.h	/^  int offset() const;$/;"	p	class:QCPAxis	typeref:typename:int
offset	stb_image.h	/^   int bpp, offset, hsz;$/;"	m	struct:__anon84e4e8860e08	typeref:typename:int
offset_minutes_	spdlog/details/pattern_formatter.h	/^    int offset_minutes_{0};$/;"	m	class:spdlog::details::SPDLOG_FINAL	typeref:typename:int
offsets	qc-message.pb.h	/^  static const ::google::protobuf::uint32 offsets[];$/;"	m	struct:protobuf_qc_2dmessage_2eproto::TableStruct	typeref:typename:const::google::protobuf::uint32[]
ohlcSelectTest	qcustomplot.cpp	/^double QCPFinancial::ohlcSelectTest(const QPointF &pos, const QCPFinancialDataContainer::const_i/;"	f	class:QCPFinancial	typeref:typename:double
ohlcSelectTest	qcustomplot.h	/^  double ohlcSelectTest(const QPointF &pos, const QCPFinancialDataContainer::const_iterator &beg/;"	p	class:QCPFinancial	typeref:typename:double
old_lace	spdlog/fmt/bundled/colors.h	/^    old_lace = 0xFDF5E6,                \/\/ rgb(253,245,230)$/;"	e	enum:color
old_out	stb_image.h	/^   stbi_uc *out, *old_out;             \/\/ output buffer (always 4 components)$/;"	m	struct:__anon84e4e8861108	typeref:typename:stbi_uc **
olive	spdlog/fmt/bundled/colors.h	/^    olive = 0x808000,                   \/\/ rgb(128,128,0)$/;"	e	enum:color
olive_drab	spdlog/fmt/bundled/colors.h	/^    olive_drab = 0x6B8E23,              \/\/ rgb(107,142,35)$/;"	e	enum:color
onDisconnection	mdi-child.cpp	/^void MdiChild::onDisconnection() {$/;"	f	class:MdiChild	typeref:typename:void
onDisconnection	mdi-child.h	/^    void onDisconnection();$/;"	p	class:MdiChild	typeref:typename:void
onDisconnection	mdi-child.h	/^    void onDisconnection();$/;"	s	class:MdiChild	typeref:typename:void
on_black	spdlog/sinks/ansicolor_sink.h	/^    const std::string on_black = "\\033[40m";$/;"	m	class:spdlog::sinks::ansicolor_sink	typeref:typename:const std::string
on_blue	spdlog/sinks/ansicolor_sink.h	/^    const std::string on_blue = "\\033[44m";$/;"	m	class:spdlog::sinks::ansicolor_sink	typeref:typename:const std::string
on_chkHorizonalInvert_stateChanged	mdi-child.cpp	/^void MdiChild::on_chkHorizonalInvert_stateChanged(int arg1)$/;"	f	class:MdiChild	typeref:typename:void
on_chkHorizonalInvert_stateChanged	mdi-child.h	/^    void on_chkHorizonalInvert_stateChanged(int arg1);$/;"	p	class:MdiChild	typeref:typename:void
on_chkHorizonalInvert_stateChanged	mdi-child.h	/^    void on_chkHorizonalInvert_stateChanged(int arg1);$/;"	s	class:MdiChild	typeref:typename:void
on_chkIrCut1_stateChanged	mdi-child.cpp	/^void MdiChild::on_chkIrCut1_stateChanged(int arg1)$/;"	f	class:MdiChild	typeref:typename:void
on_chkIrCut1_stateChanged	mdi-child.h	/^    void on_chkIrCut1_stateChanged(int arg1);$/;"	p	class:MdiChild	typeref:typename:void
on_chkIrCut1_stateChanged	mdi-child.h	/^    void on_chkIrCut1_stateChanged(int arg1);$/;"	s	class:MdiChild	typeref:typename:void
on_chkIrCut2_stateChanged	mdi-child.cpp	/^void MdiChild::on_chkIrCut2_stateChanged(int arg1)$/;"	f	class:MdiChild	typeref:typename:void
on_chkIrCut2_stateChanged	mdi-child.h	/^    void on_chkIrCut2_stateChanged(int arg1);$/;"	p	class:MdiChild	typeref:typename:void
on_chkIrCut2_stateChanged	mdi-child.h	/^    void on_chkIrCut2_stateChanged(int arg1);$/;"	s	class:MdiChild	typeref:typename:void
on_chkVerticalInvert_stateChanged	mdi-child.cpp	/^void MdiChild::on_chkVerticalInvert_stateChanged(int arg1)$/;"	f	class:MdiChild	typeref:typename:void
on_chkVerticalInvert_stateChanged	mdi-child.h	/^    void on_chkVerticalInvert_stateChanged(int arg1);$/;"	p	class:MdiChild	typeref:typename:void
on_chkVerticalInvert_stateChanged	mdi-child.h	/^    void on_chkVerticalInvert_stateChanged(int arg1);$/;"	s	class:MdiChild	typeref:typename:void
on_closeRecordButton_clicked	mdi-child.cpp	/^void MdiChild::on_closeRecordButton_clicked()$/;"	f	class:MdiChild	typeref:typename:void
on_closeRecordButton_clicked	mdi-child.h	/^    void on_closeRecordButton_clicked();$/;"	p	class:MdiChild	typeref:typename:void
on_closeRecordButton_clicked	mdi-child.h	/^    void on_closeRecordButton_clicked();$/;"	s	class:MdiChild	typeref:typename:void
on_cyan	spdlog/sinks/ansicolor_sink.h	/^    const std::string on_cyan = "\\033[46m";$/;"	m	class:spdlog::sinks::ansicolor_sink	typeref:typename:const std::string
on_error	spdlog/fmt/bundled/core.h	/^    FMT_API void on_error(const char *message);$/;"	p	struct:internal::error_handler	typeref:typename:FMT_API void
on_error	spdlog/fmt/bundled/core.h	/^    FMT_CONSTEXPR void on_error(const char *message)$/;"	f	class:basic_parse_context	typeref:typename:FMT_CONSTEXPR void
on_error	spdlog/fmt/bundled/core.h	/^    void on_error(const char *message)$/;"	f	class:internal::context_base	typeref:typename:void
on_error	spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC void internal::error_handler::on_error(const char *message)$/;"	f	class:internal::error_handler	typeref:typename:FMT_FUNC void
on_green	spdlog/sinks/ansicolor_sink.h	/^    const std::string on_green = "\\033[42m";$/;"	m	class:spdlog::sinks::ansicolor_sink	typeref:typename:const std::string
on_magenta	spdlog/sinks/ansicolor_sink.h	/^    const std::string on_magenta = "\\033[45m";$/;"	m	class:spdlog::sinks::ansicolor_sink	typeref:typename:const std::string
on_micSlider_valueChanged	mdi-child.cpp	/^void MdiChild::on_micSlider_valueChanged(int value)$/;"	f	class:MdiChild	typeref:typename:void
on_micSlider_valueChanged	mdi-child.h	/^    void on_micSlider_valueChanged(int value);$/;"	p	class:MdiChild	typeref:typename:void
on_micSlider_valueChanged	mdi-child.h	/^    void on_micSlider_valueChanged(int value);$/;"	s	class:MdiChild	typeref:typename:void
on_playPcm_clicked	mdi-child.cpp	/^void MdiChild::on_playPcm_clicked()$/;"	f	class:MdiChild	typeref:typename:void
on_playPcm_clicked	mdi-child.h	/^    void on_playPcm_clicked();$/;"	p	class:MdiChild	typeref:typename:void
on_playPcm_clicked	mdi-child.h	/^    void on_playPcm_clicked();$/;"	s	class:MdiChild	typeref:typename:void
on_pushButton_clicked	mdi-child.cpp	/^void MdiChild::on_pushButton_clicked()$/;"	f	class:MdiChild	typeref:typename:void
on_pushButton_clicked	mdi-child.h	/^    void on_pushButton_clicked();$/;"	p	class:MdiChild	typeref:typename:void
on_pushButton_clicked	mdi-child.h	/^    void on_pushButton_clicked();$/;"	s	class:MdiChild	typeref:typename:void
on_red	spdlog/sinks/ansicolor_sink.h	/^    const std::string on_red = "\\033[41m";$/;"	m	class:spdlog::sinks::ansicolor_sink	typeref:typename:const std::string
on_retryButton_clicked	mdi-child.cpp	/^void MdiChild::on_retryButton_clicked()$/;"	f	class:MdiChild	typeref:typename:void
on_retryButton_clicked	mdi-child.cpp	/^void MdiChild::on_retryButton_clicked(bool checked)$/;"	f	class:MdiChild	typeref:typename:void
on_retryButton_clicked	mdi-child.h	/^    void on_retryButton_clicked();$/;"	p	class:MdiChild	typeref:typename:void
on_retryButton_clicked	mdi-child.h	/^    void on_retryButton_clicked();$/;"	s	class:MdiChild	typeref:typename:void
on_retryButton_clicked	mdi-child.h	/^    void on_retryButton_clicked(bool checked);$/;"	p	class:MdiChild	typeref:typename:void
on_retryButton_clicked	mdi-child.h	/^    void on_retryButton_clicked(bool checked);$/;"	s	class:MdiChild	typeref:typename:void
on_retryButton_pressed	mdi-child.cpp	/^void MdiChild::on_retryButton_pressed()$/;"	f	class:MdiChild	typeref:typename:void
on_retryButton_pressed	mdi-child.h	/^    void on_retryButton_pressed();$/;"	p	class:MdiChild	typeref:typename:void
on_retryButton_pressed	mdi-child.h	/^    void on_retryButton_pressed();$/;"	s	class:MdiChild	typeref:typename:void
on_speakerSlider_valueChanged	mdi-child.cpp	/^void MdiChild::on_speakerSlider_valueChanged(int value)$/;"	f	class:MdiChild	typeref:typename:void
on_speakerSlider_valueChanged	mdi-child.h	/^    void on_speakerSlider_valueChanged(int value);$/;"	p	class:MdiChild	typeref:typename:void
on_speakerSlider_valueChanged	mdi-child.h	/^    void on_speakerSlider_valueChanged(int value);$/;"	s	class:MdiChild	typeref:typename:void
on_startRecordButton_clicked	mdi-child.cpp	/^void MdiChild::on_startRecordButton_clicked()$/;"	f	class:MdiChild	typeref:typename:void
on_startRecordButton_clicked	mdi-child.h	/^    void on_startRecordButton_clicked();$/;"	p	class:MdiChild	typeref:typename:void
on_startRecordButton_clicked	mdi-child.h	/^    void on_startRecordButton_clicked();$/;"	s	class:MdiChild	typeref:typename:void
on_stopPcm_clicked	mdi-child.cpp	/^void MdiChild::on_stopPcm_clicked()$/;"	f	class:MdiChild	typeref:typename:void
on_stopPcm_clicked	mdi-child.h	/^    void on_stopPcm_clicked();$/;"	p	class:MdiChild	typeref:typename:void
on_stopPcm_clicked	mdi-child.h	/^    void on_stopPcm_clicked();$/;"	s	class:MdiChild	typeref:typename:void
on_white	spdlog/sinks/ansicolor_sink.h	/^    const std::string on_white = "\\033[47m";$/;"	m	class:spdlog::sinks::ansicolor_sink	typeref:typename:const std::string
on_yellow	spdlog/sinks/ansicolor_sink.h	/^    const std::string on_yellow = "\\033[43m";$/;"	m	class:spdlog::sinks::ansicolor_sink	typeref:typename:const std::string
oneof_field_get_packed_size	protobuf-c/protobuf-c.c	/^oneof_field_get_packed_size(const ProtobufCFieldDescriptor *field,$/;"	f	typeref:typename:size_t	file:
oneof_field_pack	protobuf-c/protobuf-c.c	/^oneof_field_pack(const ProtobufCFieldDescriptor *field,$/;"	f	typeref:typename:size_t	file:
oneof_field_pack_to_buffer	protobuf-c/protobuf-c.c	/^oneof_field_pack_to_buffer(const ProtobufCFieldDescriptor *field,$/;"	f	typeref:typename:size_t	file:
open	qcustomplot.h	/^  double key, open, high, low, close;$/;"	m	class:QCPFinancialData	typeref:typename:double
open	spdlog/details/file_helper.h	/^    void open(const filename_t &fname, bool truncate = false)$/;"	f	class:spdlog::details::file_helper	typeref:typename:void
openGl	qcustomplot.h	/^  Q_PROPERTY(bool openGl READ openGl WRITE setOpenGl)$/;"	p	class:QCustomPlot	typeref:typename:bool
openGl	qcustomplot.h	/^  bool openGl() const { return mOpenGl; }$/;"	f	class:QCustomPlot	typeref:typename:bool
open_interval	spdlog/details/file_helper.h	/^    const int open_interval = 10;$/;"	m	class:spdlog::details::file_helper	typeref:typename:const int
open_tries	spdlog/details/file_helper.h	/^    const int open_tries = 5;$/;"	m	class:spdlog::details::file_helper	typeref:typename:const int
operator !=	json.hpp	/^        bool operator!=(const iteration_proxy_internal& o) const noexcept$/;"	f	class:nlohmann::detail::iteration_proxy::iteration_proxy_internal	typeref:typename:bool
operator !=	json.hpp	/^    bool operator!=(const iter_impl& other) const$/;"	f	class:nlohmann::detail::iter_impl	typeref:typename:bool
operator !=	json.hpp	/^    friend bool operator!=(const ScalarType lhs, const_reference rhs) noexcept$/;"	f	namespace:nlohmann	typeref:typename:bool
operator !=	json.hpp	/^    friend bool operator!=(const_reference lhs, const ScalarType rhs) noexcept$/;"	f	namespace:nlohmann	typeref:typename:bool
operator !=	json.hpp	/^    friend bool operator!=(const_reference lhs, const_reference rhs) noexcept$/;"	f	namespace:nlohmann	typeref:typename:bool
operator !=	json.hpp	/^    friend bool operator!=(json_pointer const& lhs,$/;"	f	namespace:nlohmann	typeref:typename:bool
operator !=	qcustomplot.h	/^  bool operator!=(const QCPColorGradient &other) const { return !(*this == other); }$/;"	f	class:QCPColorGradient	typeref:typename:bool
operator !=	qcustomplot.h	/^  bool operator!=(const QCPDataRange& other) const { return !(*this == other); }$/;"	f	class:QCPDataRange	typeref:typename:bool
operator !=	qcustomplot.h	/^  bool operator!=(const QCPDataSelection& other) const { return !(*this == other); }$/;"	f	class:QCPDataSelection	typeref:typename:bool
operator !=	qcustomplot.h	/^  bool operator!=(const QCPRange& other) const { return !(*this == other); }$/;"	f	class:QCPRange	typeref:typename:bool
operator !=	spdlog/details/os.h	/^inline bool operator!=(const std::tm &tm1, const std::tm &tm2)$/;"	f	namespace:spdlog::details::os	typeref:typename:bool
operator !=	spdlog/fmt/bundled/core.h	/^    friend bool operator!=(basic_string_view lhs, basic_string_view rhs)$/;"	f	typeref:typename:bool
operator !=	spdlog/fmt/bundled/format.h	/^    friend bool operator!=(BasicStringRef lhs, BasicStringRef rhs)$/;"	f	namespace:fmt	typeref:typename:bool
operator ()	json.hpp	/^    bool operator()(nlohmann::detail::value_t lhs,$/;"	f	struct:std::less	typeref:typename:bool
operator ()	json.hpp	/^    std::size_t operator()(const nlohmann::json& j) const$/;"	f	struct:std::hash	typeref:typename:std::size_t
operator ()	json.hpp	/^    void operator()(BasicJsonType& j, T&& val) const$/;"	f	struct:nlohmann::detail::to_json_fn	typeref:typename:void
operator ()	json.hpp	/^    void operator()(const BasicJsonType& j, T& val) const$/;"	f	struct:nlohmann::detail::from_json_fn	typeref:typename:void
operator ()	spdlog/fmt/bundled/format.h	/^    auto operator()(Args &&... args) const -> decltype(format(str, std::forward<Args>(args)...))$/;"	f	struct:fmt::internal::UdlFormat	typeref:typename:decltype (format (str,std::forward<Args> (args)...))
operator ()	spdlog/fmt/bundled/format.h	/^    void operator()(Char *&buffer)$/;"	f	class:fmt::internal::ThousandsSep	typeref:typename:void
operator ()	spdlog/fmt/bundled/format.h	/^    void operator()(Char *)$/;"	f	struct:fmt::internal::NoThousandsSep	typeref:typename:void
operator ()	spdlog/fmt/bundled/ranges.h	/^        void operator()(const T &v)$/;"	f	struct:formatter::format_each	typeref:typename:void
operator *	json.hpp	/^        iteration_proxy_internal& operator*()$/;"	f	class:nlohmann::detail::iteration_proxy::iteration_proxy_internal	typeref:typename:iteration_proxy_internal &
operator *	json.hpp	/^    reference operator*() const$/;"	f	class:nlohmann::detail::iter_impl	typeref:typename:reference
operator *	json.hpp	/^    value_type const& operator*() const$/;"	f	class:nlohmann::detail::json_ref	typeref:typename:value_type const &
operator *	qcustomplot.h	/^inline const QCPRange operator*(const QCPRange& range, double value)$/;"	f	typeref:typename:const QCPRange
operator *	qcustomplot.h	/^inline const QCPRange operator*(double value, const QCPRange& range)$/;"	f	typeref:typename:const QCPRange
operator *	qcustomplot.h	/^inline const QCPVector2D operator*(const QCPVector2D &vec, double factor) { return QCPVector2D(v/;"	f	typeref:typename:const QCPVector2D
operator *	qcustomplot.h	/^inline const QCPVector2D operator*(double factor, const QCPVector2D &vec) { return QCPVector2D(v/;"	f	typeref:typename:const QCPVector2D
operator *	spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC fp operator*(fp x, fp y)$/;"	f	namespace:internal	typeref:typename:FMT_FUNC fp
operator *=	qcustomplot.cpp	/^QCPVector2D &QCPVector2D::operator*=(double factor)$/;"	f	class:QCPVector2D	typeref:typename:QCPVector2D &
operator *=	qcustomplot.h	/^  QCPRange &operator*=(const double& value) { lower*=value; upper*=value; return *this; }$/;"	f	class:QCPRange	typeref:typename:QCPRange &
operator *=	qcustomplot.h	/^  QCPVector2D &operator*=(double factor);$/;"	p	class:QCPVector2D	typeref:typename:QCPVector2D &
operator +	json.hpp	/^    friend iter_impl operator+(difference_type i, const iter_impl& it)$/;"	f	namespace:nlohmann::detail	typeref:typename:iter_impl
operator +	json.hpp	/^    iter_impl operator+(difference_type i) const$/;"	f	class:nlohmann::detail::iter_impl	typeref:typename:iter_impl
operator +	json.hpp	/^    json_reverse_iterator operator+(difference_type i) const$/;"	f	class:nlohmann::detail::json_reverse_iterator	typeref:typename:json_reverse_iterator
operator +	json.hpp	/^    primitive_iterator_t operator+(difference_type n) noexcept$/;"	f	class:nlohmann::detail::primitive_iterator_t	typeref:typename:primitive_iterator_t
operator +	qcustomplot.h	/^inline const QCPDataSelection operator+(const QCPDataRange& a, const QCPDataRange& b)$/;"	f	typeref:typename:const QCPDataSelection
operator +	qcustomplot.h	/^inline const QCPDataSelection operator+(const QCPDataRange& a, const QCPDataSelection& b)$/;"	f	typeref:typename:const QCPDataSelection
operator +	qcustomplot.h	/^inline const QCPDataSelection operator+(const QCPDataSelection& a, const QCPDataRange& b)$/;"	f	typeref:typename:const QCPDataSelection
operator +	qcustomplot.h	/^inline const QCPRange operator+(const QCPRange& range, double value)$/;"	f	typeref:typename:const QCPRange
operator +	qcustomplot.h	/^inline const QCPRange operator+(double value, const QCPRange& range)$/;"	f	typeref:typename:const QCPRange
operator +	qcustomplot.h	/^inline const QCPVector2D operator+(const QCPVector2D &vec1, const QCPVector2D &vec2) { return QC/;"	f	typeref:typename:const QCPVector2D
operator ++	json.hpp	/^        iteration_proxy_internal& operator++()$/;"	f	class:nlohmann::detail::iteration_proxy::iteration_proxy_internal	typeref:typename:iteration_proxy_internal &
operator ++	json.hpp	/^    iter_impl const operator++(int)$/;"	f	class:nlohmann::detail::iter_impl	typeref:typename:iter_impl const
operator ++	json.hpp	/^    iter_impl& operator++()$/;"	f	class:nlohmann::detail::iter_impl	typeref:typename:iter_impl &
operator ++	json.hpp	/^    json_reverse_iterator const operator++(int)$/;"	f	class:nlohmann::detail::json_reverse_iterator	typeref:typename:json_reverse_iterator const
operator ++	json.hpp	/^    json_reverse_iterator& operator++()$/;"	f	class:nlohmann::detail::json_reverse_iterator	typeref:typename:json_reverse_iterator &
operator ++	json.hpp	/^    primitive_iterator_t const operator++(int) noexcept$/;"	f	class:nlohmann::detail::primitive_iterator_t	typeref:typename:primitive_iterator_t const
operator ++	json.hpp	/^    primitive_iterator_t& operator++() noexcept$/;"	f	class:nlohmann::detail::primitive_iterator_t	typeref:typename:primitive_iterator_t &
operator +=	json.hpp	/^    iter_impl& operator+=(difference_type i)$/;"	f	class:nlohmann::detail::iter_impl	typeref:typename:iter_impl &
operator +=	json.hpp	/^    json_reverse_iterator& operator+=(difference_type i)$/;"	f	class:nlohmann::detail::json_reverse_iterator	typeref:typename:json_reverse_iterator &
operator +=	json.hpp	/^    primitive_iterator_t& operator+=(difference_type n) noexcept$/;"	f	class:nlohmann::detail::primitive_iterator_t	typeref:typename:primitive_iterator_t &
operator +=	json.hpp	/^    reference operator+=(basic_json&& val)$/;"	f	class:nlohmann::basic_json	typeref:typename:reference
operator +=	json.hpp	/^    reference operator+=(const basic_json& val)$/;"	f	class:nlohmann::basic_json	typeref:typename:reference
operator +=	json.hpp	/^    reference operator+=(const typename object_t::value_type& val)$/;"	f	class:nlohmann::basic_json	typeref:typename:reference
operator +=	json.hpp	/^    reference operator+=(initializer_list_t init)$/;"	f	class:nlohmann::basic_json	typeref:typename:reference
operator +=	qcustomplot.cpp	/^QCPDataSelection &QCPDataSelection::operator+=(const QCPDataRange &other)$/;"	f	class:QCPDataSelection	typeref:typename:QCPDataSelection &
operator +=	qcustomplot.cpp	/^QCPDataSelection &QCPDataSelection::operator+=(const QCPDataSelection &other)$/;"	f	class:QCPDataSelection	typeref:typename:QCPDataSelection &
operator +=	qcustomplot.cpp	/^QCPVector2D &QCPVector2D::operator+=(const QCPVector2D &vector)$/;"	f	class:QCPVector2D	typeref:typename:QCPVector2D &
operator +=	qcustomplot.h	/^  QCPDataSelection &operator+=(const QCPDataRange& other);$/;"	p	class:QCPDataSelection	typeref:typename:QCPDataSelection &
operator +=	qcustomplot.h	/^  QCPDataSelection &operator+=(const QCPDataSelection& other);$/;"	p	class:QCPDataSelection	typeref:typename:QCPDataSelection &
operator +=	qcustomplot.h	/^  QCPRange &operator+=(const double& value) { lower+=value; upper+=value; return *this; }$/;"	f	class:QCPRange	typeref:typename:QCPRange &
operator +=	qcustomplot.h	/^  QCPVector2D &operator+=(const QCPVector2D &vector);$/;"	p	class:QCPVector2D	typeref:typename:QCPVector2D &
operator -	json.hpp	/^    difference_type operator-(const iter_impl& other) const$/;"	f	class:nlohmann::detail::iter_impl	typeref:typename:difference_type
operator -	json.hpp	/^    difference_type operator-(const json_reverse_iterator& other) const$/;"	f	class:nlohmann::detail::json_reverse_iterator	typeref:typename:difference_type
operator -	json.hpp	/^    friend constexpr difference_type operator-(primitive_iterator_t lhs, primitive_iterator_t rh/;"	f	namespace:nlohmann::detail	typeref:typename:difference_type
operator -	json.hpp	/^    iter_impl operator-(difference_type i) const$/;"	f	class:nlohmann::detail::iter_impl	typeref:typename:iter_impl
operator -	json.hpp	/^    json_reverse_iterator operator-(difference_type i) const$/;"	f	class:nlohmann::detail::json_reverse_iterator	typeref:typename:json_reverse_iterator
operator -	qcustomplot.h	/^inline const QCPDataSelection operator-(const QCPDataRange& a, const QCPDataRange& b)$/;"	f	typeref:typename:const QCPDataSelection
operator -	qcustomplot.h	/^inline const QCPDataSelection operator-(const QCPDataRange& a, const QCPDataSelection& b)$/;"	f	typeref:typename:const QCPDataSelection
operator -	qcustomplot.h	/^inline const QCPDataSelection operator-(const QCPDataSelection& a, const QCPDataRange& b)$/;"	f	typeref:typename:const QCPDataSelection
operator -	qcustomplot.h	/^inline const QCPDataSelection operator-(const QCPDataSelection& a, const QCPDataSelection& b)$/;"	f	typeref:typename:const QCPDataSelection
operator -	qcustomplot.h	/^inline const QCPRange operator-(const QCPRange& range, double value)$/;"	f	typeref:typename:const QCPRange
operator -	qcustomplot.h	/^inline const QCPVector2D operator-(const QCPVector2D &vec) { return QCPVector2D(-vec.mX, -vec.mY/;"	f	typeref:typename:const QCPVector2D
operator -	qcustomplot.h	/^inline const QCPVector2D operator-(const QCPVector2D &vec1, const QCPVector2D &vec2) { return QC/;"	f	typeref:typename:const QCPVector2D
operator --	json.hpp	/^    iter_impl const operator--(int)$/;"	f	class:nlohmann::detail::iter_impl	typeref:typename:iter_impl const
operator --	json.hpp	/^    iter_impl& operator--()$/;"	f	class:nlohmann::detail::iter_impl	typeref:typename:iter_impl &
operator --	json.hpp	/^    json_reverse_iterator const operator--(int)$/;"	f	class:nlohmann::detail::json_reverse_iterator	typeref:typename:json_reverse_iterator const
operator --	json.hpp	/^    json_reverse_iterator& operator--()$/;"	f	class:nlohmann::detail::json_reverse_iterator	typeref:typename:json_reverse_iterator &
operator --	json.hpp	/^    primitive_iterator_t const operator--(int) noexcept$/;"	f	class:nlohmann::detail::primitive_iterator_t	typeref:typename:primitive_iterator_t const
operator --	json.hpp	/^    primitive_iterator_t& operator--() noexcept$/;"	f	class:nlohmann::detail::primitive_iterator_t	typeref:typename:primitive_iterator_t &
operator -=	json.hpp	/^    iter_impl& operator-=(difference_type i)$/;"	f	class:nlohmann::detail::iter_impl	typeref:typename:iter_impl &
operator -=	json.hpp	/^    primitive_iterator_t& operator-=(difference_type n) noexcept$/;"	f	class:nlohmann::detail::primitive_iterator_t	typeref:typename:primitive_iterator_t &
operator -=	qcustomplot.cpp	/^QCPDataSelection &QCPDataSelection::operator-=(const QCPDataRange &other)$/;"	f	class:QCPDataSelection	typeref:typename:QCPDataSelection &
operator -=	qcustomplot.cpp	/^QCPDataSelection &QCPDataSelection::operator-=(const QCPDataSelection &other)$/;"	f	class:QCPDataSelection	typeref:typename:QCPDataSelection &
operator -=	qcustomplot.cpp	/^QCPVector2D &QCPVector2D::operator-=(const QCPVector2D &vector)$/;"	f	class:QCPVector2D	typeref:typename:QCPVector2D &
operator -=	qcustomplot.h	/^  QCPDataSelection &operator-=(const QCPDataRange& other);$/;"	p	class:QCPDataSelection	typeref:typename:QCPDataSelection &
operator -=	qcustomplot.h	/^  QCPDataSelection &operator-=(const QCPDataSelection& other);$/;"	p	class:QCPDataSelection	typeref:typename:QCPDataSelection &
operator -=	qcustomplot.h	/^  QCPRange &operator-=(const double& value) { lower-=value; upper-=value; return *this; }$/;"	f	class:QCPRange	typeref:typename:QCPRange &
operator -=	qcustomplot.h	/^  QCPVector2D &operator-=(const QCPVector2D &vector);$/;"	p	class:QCPVector2D	typeref:typename:QCPVector2D &
operator ->	json.hpp	/^    pointer operator->() const$/;"	f	class:nlohmann::detail::iter_impl	typeref:typename:pointer
operator ->	json.hpp	/^    value_type const* operator->() const$/;"	f	class:nlohmann::detail::json_ref	typeref:typename:value_type const *
operator /	qcustomplot.h	/^inline const QCPRange operator\/(const QCPRange& range, double value)$/;"	f	typeref:typename:const QCPRange
operator /	qcustomplot.h	/^inline const QCPVector2D operator\/(const QCPVector2D &vec, double divisor) { return QCPVector2D/;"	f	typeref:typename:const QCPVector2D
operator /=	qcustomplot.cpp	/^QCPVector2D &QCPVector2D::operator\/=(double divisor)$/;"	f	class:QCPVector2D	typeref:typename:QCPVector2D &
operator /=	qcustomplot.h	/^  QCPRange &operator\/=(const double& value) { lower\/=value; upper\/=value; return *this; }$/;"	f	class:QCPRange	typeref:typename:QCPRange &
operator /=	qcustomplot.h	/^  QCPVector2D &operator\/=(double divisor);$/;"	p	class:QCPVector2D	typeref:typename:QCPVector2D &
operator <	ble.cpp	/^            bool operator<(const IpPing& _self) {$/;"	f	struct:BLESession::connectAP::IpPing	typeref:typename:bool	file:
operator <	json.hpp	/^    bool operator<(const iter_impl& other) const$/;"	f	class:nlohmann::detail::iter_impl	typeref:typename:bool
operator <	json.hpp	/^    friend bool operator<(const ScalarType lhs, const_reference rhs) noexcept$/;"	f	namespace:nlohmann	typeref:typename:bool
operator <	json.hpp	/^    friend bool operator<(const_reference lhs, const ScalarType rhs) noexcept$/;"	f	namespace:nlohmann	typeref:typename:bool
operator <	json.hpp	/^    friend bool operator<(const_reference lhs, const_reference rhs) noexcept$/;"	f	namespace:nlohmann	typeref:typename:bool
operator <	json.hpp	/^    friend constexpr bool operator<(primitive_iterator_t lhs, primitive_iterator_t rhs) noexcept$/;"	f	namespace:nlohmann::detail	typeref:typename:bool
operator <	json.hpp	/^inline bool operator<(const value_t lhs, const value_t rhs) noexcept$/;"	f	namespace:nlohmann::detail	typeref:typename:bool
operator <	spdlog/fmt/bundled/core.h	/^    friend bool operator<(basic_string_view lhs, basic_string_view rhs)$/;"	f	typeref:typename:bool
operator <	spdlog/fmt/bundled/format.h	/^    friend bool operator<(BasicStringRef lhs, BasicStringRef rhs)$/;"	f	namespace:fmt	typeref:typename:bool
operator <<	json.hpp	/^    friend std::istream& operator<<(basic_json& j, std::istream& i)$/;"	f	namespace:nlohmann	typeref:typename:JSON_DEPRECATED std::istream &
operator <<	json.hpp	/^    friend std::ostream& operator<<(std::ostream& o, const basic_json& j)$/;"	f	namespace:nlohmann	typeref:typename:std::ostream &
operator <<	qcustomplot.h	/^inline QDebug operator<< (QDebug d, const QCPDataRange &dataRange)$/;"	f	typeref:typename:QDebug
operator <<	qcustomplot.h	/^inline QDebug operator<< (QDebug d, const QCPDataSelection &selection)$/;"	f	typeref:typename:QDebug
operator <<	qcustomplot.h	/^inline QDebug operator<< (QDebug d, const QCPRange &range)$/;"	f	typeref:typename:QDebug
operator <<	qcustomplot.h	/^inline QDebug operator<< (QDebug d, const QCPVector2D &vec)$/;"	f	typeref:typename:QDebug
operator <<	spdlog/fmt/bundled/format.h	/^    BasicWriter &operator<<(IntFormatSpec<T, Spec, FillChar> spec)$/;"	f	class:fmt::BasicWriter	typeref:typename:BasicWriter &
operator <<	spdlog/fmt/bundled/format.h	/^    BasicWriter &operator<<(LongLong value)$/;"	f	class:fmt::BasicWriter	typeref:typename:BasicWriter &
operator <<	spdlog/fmt/bundled/format.h	/^    BasicWriter &operator<<(ULongLong value)$/;"	f	class:fmt::BasicWriter	typeref:typename:BasicWriter &
operator <<	spdlog/fmt/bundled/format.h	/^    BasicWriter &operator<<(char value)$/;"	f	class:fmt::BasicWriter	typeref:typename:BasicWriter &
operator <<	spdlog/fmt/bundled/format.h	/^    BasicWriter &operator<<(const StrFormatSpec<StrChar> &spec)$/;"	f	class:fmt::BasicWriter	typeref:typename:BasicWriter &
operator <<	spdlog/fmt/bundled/format.h	/^    BasicWriter &operator<<(double value)$/;"	f	class:fmt::BasicWriter	typeref:typename:BasicWriter &
operator <<	spdlog/fmt/bundled/format.h	/^    BasicWriter &operator<<(fmt::BasicStringRef<Char> value)$/;"	f	class:fmt::BasicWriter	typeref:typename:BasicWriter &
operator <<	spdlog/fmt/bundled/format.h	/^    BasicWriter &operator<<(long double value)$/;"	f	class:fmt::BasicWriter	typeref:typename:BasicWriter &
operator <<	spdlog/fmt/bundled/format.h	/^    BasicWriter &operator<<(long value)$/;"	f	class:fmt::BasicWriter	typeref:typename:BasicWriter &
operator <<	spdlog/fmt/bundled/format.h	/^    BasicWriter &operator<<(typename internal::WCharHelper<StringRef, Char>::Supported value)$/;"	f	class:fmt::BasicWriter	typeref:typename:BasicWriter &
operator <<	spdlog/fmt/bundled/format.h	/^    BasicWriter &operator<<(typename internal::WCharHelper<wchar_t, Char>::Supported value)$/;"	f	class:fmt::BasicWriter	typeref:typename:BasicWriter &
operator <<	spdlog/fmt/bundled/format.h	/^    BasicWriter &operator<<(unsigned long value)$/;"	f	class:fmt::BasicWriter	typeref:typename:BasicWriter &
operator <<	spdlog/fmt/bundled/format.h	/^    BasicWriter &operator<<(unsigned value)$/;"	f	class:fmt::BasicWriter	typeref:typename:BasicWriter &
operator <<	spdlog/fmt/bundled/format.h	/^    void operator<<(typename internal::WCharHelper<const wchar_t *, Char>::Unsupported);$/;"	p	class:fmt::BasicWriter	typeref:typename:void
operator <<	spdlog/fmt/bundled/format.h	/^    void operator<<(typename internal::WCharHelper<wchar_t, Char>::Unsupported);$/;"	p	class:fmt::BasicWriter	typeref:typename:void
operator <<	spdlog/fmt/bundled/ostream.h	/^    typename EnableIf<sizeof(T) == 0>::type operator<<(const T &);$/;"	p	struct:fmt::internal::DummyStream	typeref:typename:EnableIf<sizeof (T)==0>::type
operator <<	spdlog/fmt/bundled/ostream.h	/^No &operator<<(std::ostream &, int);$/;"	p	namespace:fmt::internal	typeref:typename:No &
operator <=	json.hpp	/^    bool operator<=(const iter_impl& other) const$/;"	f	class:nlohmann::detail::iter_impl	typeref:typename:bool
operator <=	json.hpp	/^    friend bool operator<=(const ScalarType lhs, const_reference rhs) noexcept$/;"	f	namespace:nlohmann	typeref:typename:bool
operator <=	json.hpp	/^    friend bool operator<=(const_reference lhs, const ScalarType rhs) noexcept$/;"	f	namespace:nlohmann	typeref:typename:bool
operator <=	json.hpp	/^    friend bool operator<=(const_reference lhs, const_reference rhs) noexcept$/;"	f	namespace:nlohmann	typeref:typename:bool
operator <=	spdlog/fmt/bundled/core.h	/^    friend bool operator<=(basic_string_view lhs, basic_string_view rhs)$/;"	f	typeref:typename:bool
operator <=	spdlog/fmt/bundled/format.h	/^    friend bool operator<=(BasicStringRef lhs, BasicStringRef rhs)$/;"	f	namespace:fmt	typeref:typename:bool
operator =	json.hpp	/^    input_buffer_adapter& operator=(input_buffer_adapter&) = delete;$/;"	p	class:nlohmann::detail::input_buffer_adapter	typeref:typename:input_buffer_adapter &
operator =	json.hpp	/^    input_stream_adapter& operator=(input_stream_adapter&) = delete;$/;"	p	class:nlohmann::detail::input_stream_adapter	typeref:typename:input_stream_adapter &
operator =	json.hpp	/^    iter_impl& operator=(const iter_impl<typename std::remove_const<BasicJsonType>::type>& other/;"	f	class:nlohmann::detail::iter_impl	typeref:typename:iter_impl &
operator =	json.hpp	/^    json_ref& operator=(const json_ref&) = delete;$/;"	p	class:nlohmann::detail::json_ref	typeref:typename:json_ref &
operator =	json.hpp	/^    lexer& operator=(lexer&) = delete;$/;"	p	class:nlohmann::detail::lexer	typeref:typename:lexer &
operator =	json.hpp	/^    reference& operator=(basic_json other) noexcept ($/;"	f	class:nlohmann::basic_json	typeref:typename:reference &
operator =	json.hpp	/^    serializer& operator=(const serializer&) = delete;$/;"	p	class:nlohmann::detail::serializer	typeref:typename:serializer &
operator =	qc-message.pb.h	/^  inline Imu& operator=(Imu&& from) noexcept {$/;"	f	class:Imu	typeref:typename:Imu &
operator =	qc-message.pb.h	/^  inline Imu& operator=(const Imu& from) {$/;"	f	class:Imu	typeref:typename:Imu &
operator =	qc-message.pb.h	/^  inline Protocol& operator=(Protocol&& from) noexcept {$/;"	f	class:Protocol	typeref:typename:Protocol &
operator =	qc-message.pb.h	/^  inline Protocol& operator=(const Protocol& from) {$/;"	f	class:Protocol	typeref:typename:Protocol &
operator =	qcustomplot.cpp	/^QCPColorMapData &QCPColorMapData::operator=(const QCPColorMapData &other)$/;"	f	class:QCPColorMapData	typeref:typename:QCPColorMapData &
operator =	qcustomplot.h	/^  QCPColorMapData &operator=(const QCPColorMapData &other);$/;"	p	class:QCPColorMapData	typeref:typename:QCPColorMapData &
operator =	spdlog/details/async_log_helper.h	/^        async_msg &operator=(async_msg &&other) = default;$/;"	p	struct:spdlog::details::async_log_helper::async_msg	typeref:typename:async_msg &
operator =	spdlog/details/async_log_helper.h	/^        async_msg &operator=(const async_msg &other) = delete;$/;"	p	struct:spdlog::details::async_log_helper::async_msg	typeref:typename:async_msg &
operator =	spdlog/details/async_log_helper.h	/^    async_log_helper &operator=(const async_log_helper &) = delete;$/;"	p	class:spdlog::details::async_log_helper	typeref:typename:async_log_helper &
operator =	spdlog/details/file_helper.h	/^    file_helper &operator=(const file_helper &) = delete;$/;"	p	class:spdlog::details::file_helper	typeref:typename:file_helper &
operator =	spdlog/details/log_msg.h	/^    log_msg &operator=(log_msg &&other) = delete;$/;"	p	struct:spdlog::details::log_msg	typeref:typename:log_msg &
operator =	spdlog/details/pattern_formatter.h	/^    pattern_formatter &operator=(const pattern_formatter &) = delete;$/;"	p	class:spdlog::SPDLOG_FINAL	typeref:typename:pattern_formatter &
operator =	spdlog/details/pattern_formatter.h	/^    z_formatter &operator=(const z_formatter &) = delete;$/;"	p	class:spdlog::details::SPDLOG_FINAL	typeref:typename:z_formatter &
operator =	spdlog/details/pattern_formatter_impl.h	/^    z_formatter &operator=(const z_formatter &) = delete;$/;"	p	class:spdlog::details::SPDLOG_FINAL	typeref:typename:z_formatter &
operator =	spdlog/details/registry.h	/^    registry_t<Mutex> &operator=(const registry_t<Mutex> &) = delete;$/;"	p	class:spdlog::details::registry_t	typeref:typename:registry_t<Mutex> &
operator =	spdlog/details/thread_pool.h	/^    async_msg &operator=(async_msg &&other) = default;$/;"	p	struct:spdlog::details::async_msg	typeref:typename:async_msg &
operator =	spdlog/details/thread_pool.h	/^    async_msg &operator=(async_msg &&other) SPDLOG_NOEXCEPT$/;"	f	struct:spdlog::details::async_msg	typeref:typename:async_msg &
operator =	spdlog/fmt/bundled/format-inl.h	/^        void operator=(const dispatcher &) {}$/;"	f	class:__anonb519b34f0110::safe_strerror::dispatcher	typeref:typename:void
operator =	spdlog/fmt/bundled/format.cc	/^    void operator=(const StrError &) {}$/;"	f	class:fmt::__anonf3b7881d0110::safe_strerror::StrError	typeref:typename:void	file:
operator =	spdlog/fmt/bundled/format.h	/^    BasicMemoryWriter &operator=(BasicMemoryWriter &&other)$/;"	f	class:fmt::BasicMemoryWriter	typeref:typename:BasicMemoryWriter &
operator =	spdlog/fmt/bundled/format.h	/^    MemoryBuffer &operator=(MemoryBuffer &&other)$/;"	f	class:fmt::internal::MemoryBuffer	typeref:typename:MemoryBuffer &
operator =	spdlog/fmt/bundled/format.h	/^    NamedArgWithType<Char, T> operator=(T &&value) const$/;"	f	struct:fmt::internal::UdlArg	typeref:typename:NamedArgWithType<Char,T>
operator =	spdlog/fmt/bundled/posix.h	/^    BufferedFile &operator=(BufferedFile &&other)$/;"	f	class:fmt::BufferedFile	typeref:typename:BufferedFile &
operator =	spdlog/fmt/bundled/posix.h	/^    BufferedFile &operator=(BufferedFile &other)$/;"	f	class:fmt::BufferedFile	typeref:typename:BufferedFile &
operator =	spdlog/fmt/bundled/posix.h	/^    BufferedFile &operator=(Proxy p)$/;"	f	class:fmt::BufferedFile	typeref:typename:BufferedFile &
operator =	spdlog/fmt/bundled/posix.h	/^    File &operator=(File &&other)$/;"	f	class:fmt::File	typeref:typename:File &
operator =	spdlog/fmt/bundled/posix.h	/^    File &operator=(File &other)$/;"	f	class:fmt::File	typeref:typename:File &
operator =	spdlog/fmt/bundled/posix.h	/^    File &operator=(Proxy p)$/;"	f	class:fmt::File	typeref:typename:File &
operator =	spdlog/formatter.h	/^    pattern_formatter &operator=(const pattern_formatter &) = delete;$/;"	p	class:spdlog::SPDLOG_FINAL	typeref:typename:pattern_formatter &
operator =	spdlog/logger.h	/^    logger &operator=(const logger &) = delete;$/;"	p	class:spdlog::logger	typeref:typename:logger &
operator =	spdlog/sinks/base_sink.h	/^    base_sink &operator=(const base_sink &) = delete;$/;"	p	class:spdlog::sinks::base_sink	typeref:typename:base_sink &
operator =	spdlog/sinks/dist_sink.h	/^    dist_sink &operator=(const dist_sink &) = delete;$/;"	p	class:spdlog::sinks::dist_sink	typeref:typename:dist_sink &
operator =	spdlog/sinks/ostream_sink.h	/^    ostream_sink &operator=(const ostream_sink &) = delete;$/;"	p	class:spdlog::sinks::ostream_sink	typeref:typename:ostream_sink &
operator =	spdlog/sinks/syslog_sink.h	/^    syslog_sink &operator=(const syslog_sink &) = delete;$/;"	p	class:spdlog::sinks::syslog_sink	typeref:typename:syslog_sink &
operator =	spdlog/sinks/wincolor_sink.h	/^    wincolor_sink &operator=(const wincolor_sink &other) = delete;$/;"	p	class:spdlog::sinks::wincolor_sink	typeref:typename:wincolor_sink &
operator ==	json.hpp	/^    bool operator==(const iter_impl& other) const$/;"	f	class:nlohmann::detail::iter_impl	typeref:typename:bool
operator ==	json.hpp	/^    friend bool operator==(const ScalarType lhs, const_reference rhs) noexcept$/;"	f	namespace:nlohmann	typeref:typename:bool
operator ==	json.hpp	/^    friend bool operator==(const_reference lhs, const ScalarType rhs) noexcept$/;"	f	namespace:nlohmann	typeref:typename:bool
operator ==	json.hpp	/^    friend bool operator==(const_reference lhs, const_reference rhs) noexcept$/;"	f	namespace:nlohmann	typeref:typename:bool
operator ==	json.hpp	/^    friend bool operator==(json_pointer const& lhs,$/;"	f	namespace:nlohmann	typeref:typename:bool
operator ==	json.hpp	/^    friend constexpr bool operator==(primitive_iterator_t lhs, primitive_iterator_t rhs) noexcep/;"	f	namespace:nlohmann::detail	typeref:typename:bool
operator ==	qcustomplot.cpp	/^bool QCPColorGradient::operator==(const QCPColorGradient &other) const$/;"	f	class:QCPColorGradient	typeref:typename:bool
operator ==	qcustomplot.cpp	/^bool QCPDataSelection::operator==(const QCPDataSelection &other) const$/;"	f	class:QCPDataSelection	typeref:typename:bool
operator ==	qcustomplot.h	/^  bool operator==(const QCPColorGradient &other) const;$/;"	p	class:QCPColorGradient	typeref:typename:bool
operator ==	qcustomplot.h	/^  bool operator==(const QCPDataRange& other) const { return mBegin == other.mBegin && mEnd == ot/;"	f	class:QCPDataRange	typeref:typename:bool
operator ==	qcustomplot.h	/^  bool operator==(const QCPDataSelection& other) const;$/;"	p	class:QCPDataSelection	typeref:typename:bool
operator ==	qcustomplot.h	/^  bool operator==(const QCPRange& other) const { return lower == other.lower && upper == other.u/;"	f	class:QCPRange	typeref:typename:bool
operator ==	spdlog/details/os.h	/^inline bool operator==(const std::tm &tm1, const std::tm &tm2)$/;"	f	namespace:spdlog::details::os	typeref:typename:bool
operator ==	spdlog/fmt/bundled/core.h	/^    friend bool operator==(basic_string_view lhs, basic_string_view rhs)$/;"	f	typeref:typename:bool
operator ==	spdlog/fmt/bundled/format.h	/^    friend bool operator==(BasicStringRef lhs, BasicStringRef rhs)$/;"	f	namespace:fmt	typeref:typename:bool
operator >	json.hpp	/^    bool operator>(const iter_impl& other) const$/;"	f	class:nlohmann::detail::iter_impl	typeref:typename:bool
operator >	json.hpp	/^    friend bool operator>(const ScalarType lhs, const_reference rhs) noexcept$/;"	f	namespace:nlohmann	typeref:typename:bool
operator >	json.hpp	/^    friend bool operator>(const_reference lhs, const ScalarType rhs) noexcept$/;"	f	namespace:nlohmann	typeref:typename:bool
operator >	json.hpp	/^    friend bool operator>(const_reference lhs, const_reference rhs) noexcept$/;"	f	namespace:nlohmann	typeref:typename:bool
operator >	spdlog/fmt/bundled/core.h	/^    friend bool operator>(basic_string_view lhs, basic_string_view rhs)$/;"	f	typeref:typename:bool
operator >	spdlog/fmt/bundled/format.h	/^    friend bool operator>(BasicStringRef lhs, BasicStringRef rhs)$/;"	f	namespace:fmt	typeref:typename:bool
operator >=	json.hpp	/^    bool operator>=(const iter_impl& other) const$/;"	f	class:nlohmann::detail::iter_impl	typeref:typename:bool
operator >=	json.hpp	/^    friend bool operator>=(const ScalarType lhs, const_reference rhs) noexcept$/;"	f	namespace:nlohmann	typeref:typename:bool
operator >=	json.hpp	/^    friend bool operator>=(const_reference lhs, const ScalarType rhs) noexcept$/;"	f	namespace:nlohmann	typeref:typename:bool
operator >=	json.hpp	/^    friend bool operator>=(const_reference lhs, const_reference rhs) noexcept$/;"	f	namespace:nlohmann	typeref:typename:bool
operator >=	spdlog/fmt/bundled/core.h	/^    friend bool operator>=(basic_string_view lhs, basic_string_view rhs)$/;"	f	typeref:typename:bool
operator >=	spdlog/fmt/bundled/format.h	/^    friend bool operator>=(BasicStringRef lhs, BasicStringRef rhs)$/;"	f	namespace:fmt	typeref:typename:bool
operator >>	json.hpp	/^    friend std::istream& operator>>(std::istream& i, basic_json& j)$/;"	f	namespace:nlohmann	typeref:typename:std::istream &
operator >>	json.hpp	/^    friend std::ostream& operator>>(const basic_json& j, std::ostream& o)$/;"	f	namespace:nlohmann	typeref:typename:JSON_DEPRECATED std::ostream &
operator Proxy	spdlog/fmt/bundled/posix.h	/^    operator Proxy() FMT_NOEXCEPT$/;"	f	class:fmt::BufferedFile
operator Proxy	spdlog/fmt/bundled/posix.h	/^    operator Proxy() FMT_NOEXCEPT$/;"	f	class:fmt::File
operator StringRef	spdlog/fmt/bundled/format.h	/^    operator StringRef() const$/;"	f	class:fmt::internal::UTF16ToUTF8
operator ValueType	json.hpp	/^    operator ValueType() const$/;"	f	class:nlohmann::basic_json
operator WStringRef	spdlog/fmt/bundled/format.h	/^    operator WStringRef() const$/;"	f	class:fmt::internal::UTF8ToUTF16
operator []	json.hpp	/^    const_reference operator[](T* key) const$/;"	f	class:nlohmann::basic_json	typeref:typename:const_reference
operator []	json.hpp	/^    const_reference operator[](const json_pointer& ptr) const$/;"	f	class:nlohmann::basic_json	typeref:typename:const_reference
operator []	json.hpp	/^    const_reference operator[](const typename object_t::key_type& key) const$/;"	f	class:nlohmann::basic_json	typeref:typename:const_reference
operator []	json.hpp	/^    const_reference operator[](size_type idx) const$/;"	f	class:nlohmann::basic_json	typeref:typename:const_reference
operator []	json.hpp	/^    reference operator[](T* key)$/;"	f	class:nlohmann::basic_json	typeref:typename:reference
operator []	json.hpp	/^    reference operator[](const json_pointer& ptr)$/;"	f	class:nlohmann::basic_json	typeref:typename:reference
operator []	json.hpp	/^    reference operator[](const typename object_t::key_type& key)$/;"	f	class:nlohmann::basic_json	typeref:typename:reference
operator []	json.hpp	/^    reference operator[](difference_type n) const$/;"	f	class:nlohmann::detail::iter_impl	typeref:typename:reference
operator []	json.hpp	/^    reference operator[](difference_type n) const$/;"	f	class:nlohmann::detail::json_reverse_iterator	typeref:typename:reference
operator []	json.hpp	/^    reference operator[](size_type idx)$/;"	f	class:nlohmann::basic_json	typeref:typename:reference
operator []	spdlog/fmt/bundled/core.h	/^    T &operator[](std::size_t index)$/;"	f	class:internal::basic_buffer	typeref:typename:T &
operator []	spdlog/fmt/bundled/core.h	/^    const T &operator[](std::size_t index) const$/;"	f	class:internal::basic_buffer	typeref:typename:const T &
operator []	spdlog/fmt/bundled/format.h	/^    T &operator[](std::size_t index)$/;"	f	class:fmt::Buffer	typeref:typename:T &
operator []	spdlog/fmt/bundled/format.h	/^    const T &operator[](std::size_t index) const$/;"	f	class:fmt::Buffer	typeref:typename:const T &
operator []	spdlog/fmt/bundled/format.h	/^    internal::Arg operator[](unsigned index) const$/;"	f	class:fmt::ArgList	typeref:typename:internal::Arg
operator input_adapter_t	json.hpp	/^    operator input_adapter_t()$/;"	f	class:nlohmann::detail::input_adapter
operator output_adapter_t<CharType>	json.hpp	/^    operator output_adapter_t<CharType>()$/;"	f	class:nlohmann::detail::output_adapter
operator std::basic_string_view<Char>	spdlog/fmt/bundled/format.h	/^    explicit operator std::basic_string_view<Char>() const FMT_NOEXCEPT$/;"	f	class:fmt::BasicStringRef
operator std::string	json.hpp	/^    operator std::string() const$/;"	f	class:nlohmann::json_pointer
operator value_t	json.hpp	/^    constexpr operator value_t() const noexcept$/;"	f	class:nlohmann::basic_json
opposite	qcustomplot.cpp	/^QCPAxis::AxisType QCPAxis::opposite(QCPAxis::AxisType type)$/;"	f	class:QCPAxis	typeref:typename:QCPAxis::AxisType
opposite	qcustomplot.h	/^  static AxisType opposite(AxisType type);$/;"	p	class:QCPAxis	typeref:typename:AxisType
optional_field_get_packed_size	protobuf-c/protobuf-c.c	/^optional_field_get_packed_size(const ProtobufCFieldDescriptor *field,$/;"	f	typeref:typename:size_t	file:
optional_field_pack	protobuf-c/protobuf-c.c	/^optional_field_pack(const ProtobufCFieldDescriptor *field,$/;"	f	typeref:typename:size_t	file:
optional_field_pack_to_buffer	protobuf-c/protobuf-c.c	/^optional_field_pack_to_buffer(const ProtobufCFieldDescriptor *field,$/;"	f	typeref:typename:size_t	file:
orange	spdlog/fmt/bundled/colors.h	/^    orange = 0xFFA500,                  \/\/ rgb(255,165,0)$/;"	e	enum:color
orange_red	spdlog/fmt/bundled/colors.h	/^    orange_red = 0xFF4500,              \/\/ rgb(255,69,0)$/;"	e	enum:color
orchid	spdlog/fmt/bundled/colors.h	/^    orchid = 0xDA70D6,                  \/\/ rgb(218,112,214)$/;"	e	enum:color
order	stb_image.h	/^   int scan_n, order[4];$/;"	m	struct:__anon84e4e8860608	typeref:typename:int[4]
orientation	qcustomplot.h	/^  Qt::Orientation orientation() const { return mOrientation; }$/;"	f	class:QCPAxis	typeref:typename:Qt::Orientation
orientation	qcustomplot.h	/^  static Qt::Orientation orientation(AxisType type) { return type==atBottom||type==atTop ? Qt::H/;"	f	class:QCPAxis	typeref:typename:Qt::Orientation
orig_index	protobuf-c/protobuf-c.h	/^	unsigned        orig_index;$/;"	m	struct:ProtobufCIntRange	typeref:typename:unsigned
os	spdlog/common.h	/^namespace os {$/;"	n	namespace:spdlog::details
os	spdlog/details/os.h	/^namespace os {$/;"	n	namespace:spdlog::details
ostream_sink	spdlog/sinks/ostream_sink.h	/^    explicit ostream_sink(std::ostream &os, bool force_flush = false)$/;"	f	class:spdlog::sinks::ostream_sink
ostream_sink	spdlog/sinks/ostream_sink.h	/^    ostream_sink(const ostream_sink &) = delete;$/;"	p	class:spdlog::sinks::ostream_sink
ostream_sink	spdlog/sinks/ostream_sink.h	/^class ostream_sink : public base_sink<Mutex>$/;"	c	namespace:spdlog::sinks
ostream_sink_mt	spdlog/sinks/ostream_sink.h	/^using ostream_sink_mt = ostream_sink<std::mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:ostream_sink<std::mutex>
ostream_sink_st	spdlog/sinks/ostream_sink.h	/^using ostream_sink_st = ostream_sink<details::null_mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:ostream_sink<details::null_mutex>
other_array_t	json.hpp	/^        using other_array_t = typename BasicJsonType::array_t;$/;"	t	function:nlohmann::basic_json::basic_json	typeref:typename:BasicJsonType::array_t
other_boolean_t	json.hpp	/^        using other_boolean_t = typename BasicJsonType::boolean_t;$/;"	t	function:nlohmann::basic_json::basic_json	typeref:typename:BasicJsonType::boolean_t
other_error	json.hpp	/^    other_error(int id_, const char* what_arg) : exception(id_, what_arg) {}$/;"	f	class:nlohmann::detail::other_error
other_error	json.hpp	/^    using other_error = detail::other_error;$/;"	t	class:nlohmann::basic_json	typeref:typename:detail::other_error
other_error	json.hpp	/^class other_error : public exception$/;"	c	namespace:nlohmann::detail
other_number_float_t	json.hpp	/^        using other_number_float_t = typename BasicJsonType::number_float_t;$/;"	t	function:nlohmann::basic_json::basic_json	typeref:typename:BasicJsonType::number_float_t
other_number_integer_t	json.hpp	/^        using other_number_integer_t = typename BasicJsonType::number_integer_t;$/;"	t	function:nlohmann::basic_json::basic_json	typeref:typename:BasicJsonType::number_integer_t
other_number_unsigned_t	json.hpp	/^        using other_number_unsigned_t = typename BasicJsonType::number_unsigned_t;$/;"	t	function:nlohmann::basic_json::basic_json	typeref:typename:BasicJsonType::number_unsigned_t
other_object_t	json.hpp	/^        using other_object_t = typename BasicJsonType::object_t;$/;"	t	function:nlohmann::basic_json::basic_json	typeref:typename:BasicJsonType::object_t
other_string_t	json.hpp	/^        using other_string_t = typename BasicJsonType::string_t;$/;"	t	function:nlohmann::basic_json::basic_json	typeref:typename:BasicJsonType::string_t
out	spdlog/fmt/bundled/core.h	/^    iterator out()$/;"	f	class:internal::context_base	typeref:typename:iterator
out	spdlog/fmt/bundled/ranges.h	/^        typename std::add_lvalue_reference<decltype(std::declval<FormatContext>().out())>::type /;"	m	struct:formatter::format_each	typeref:typename:std::add_lvalue_reference<decltype (std::declval<FormatContext> ().out ())>::type
out	stb_image.h	/^   stbi_uc *idata, *expanded, *out;$/;"	m	struct:__anon84e4e8860c08	typeref:typename:stbi_uc ***
out	stb_image.h	/^   stbi_uc *out, *old_out;             \/\/ output buffer (always 4 components)$/;"	m	struct:__anon84e4e8861108	typeref:typename:stbi_uc *
out_	spdlog/fmt/bundled/core.h	/^    iterator out_;$/;"	m	class:internal::context_base	typeref:typename:iterator
out_handle_	spdlog/sinks/wincolor_sink.h	/^    HANDLE out_handle_;$/;"	m	class:spdlog::sinks::wincolor_sink	typeref:typename:HANDLE
out_of_range	json.hpp	/^    out_of_range(int id_, const char* what_arg) : exception(id_, what_arg) {}$/;"	f	class:nlohmann::detail::out_of_range
out_of_range	json.hpp	/^    using out_of_range = detail::out_of_range;$/;"	t	class:nlohmann::basic_json	typeref:typename:detail::out_of_range
out_of_range	json.hpp	/^class out_of_range : public exception$/;"	c	namespace:nlohmann::detail
outerRect	qcustomplot.h	/^  QRect outerRect() const { return mOuterRect; }$/;"	f	class:QCPLayoutElement	typeref:typename:QRect
outerRect	qcustomplot.h	/^  Q_PROPERTY(QRect outerRect READ outerRect WRITE setOuterRect)$/;"	p	class:QCPLayoutElement	typeref:typename:QRect
outlierStyle	qcustomplot.h	/^  QCPScatterStyle outlierStyle() const { return mOutlierStyle; }$/;"	f	class:QCPStatisticalBox	typeref:typename:QCPScatterStyle
outlierStyle	qcustomplot.h	/^  Q_PROPERTY(QCPScatterStyle outlierStyle READ outlierStyle WRITE setOutlierStyle)$/;"	p	class:QCPStatisticalBox	typeref:typename:QCPScatterStyle
outliers	qcustomplot.h	/^  QVector<double> outliers;$/;"	m	class:QCPStatisticalBoxData	typeref:typename:QVector<double>
output	protobuf-c/protobuf-c.h	/^	const ProtobufCMessageDescriptor	*output;$/;"	m	struct:ProtobufCMethodDescriptor	typeref:typename:const ProtobufCMessageDescriptor *
output_adapter	json.hpp	/^    output_adapter(StringType& s)$/;"	f	class:nlohmann::detail::output_adapter
output_adapter	json.hpp	/^    output_adapter(std::basic_ostream<CharType>& s)$/;"	f	class:nlohmann::detail::output_adapter
output_adapter	json.hpp	/^    output_adapter(std::vector<CharType>& vec)$/;"	f	class:nlohmann::detail::output_adapter
output_adapter	json.hpp	/^class output_adapter$/;"	c	namespace:nlohmann::detail
output_adapter_protocol	json.hpp	/^template<typename CharType> struct output_adapter_protocol$/;"	s	namespace:nlohmann::detail
output_adapter_t	json.hpp	/^    using output_adapter_t = ::nlohmann::detail::output_adapter_t<CharType>;$/;"	t	class:nlohmann::basic_json	typeref:typename:::nlohmann::detail::output_adapter_t<CharType>
output_adapter_t	json.hpp	/^using output_adapter_t = std::shared_ptr<output_adapter_protocol<CharType>>;$/;"	t	namespace:nlohmann::detail	typeref:typename:std::shared_ptr<output_adapter_protocol<CharType>>
output_stream_adapter	json.hpp	/^    explicit output_stream_adapter(std::basic_ostream<CharType>& s) : stream(s) {}$/;"	f	class:nlohmann::detail::output_stream_adapter
output_stream_adapter	json.hpp	/^class output_stream_adapter : public output_adapter_protocol<CharType>$/;"	c	namespace:nlohmann::detail
output_string_adapter	json.hpp	/^    explicit output_string_adapter(StringType& s) : str(s) {}$/;"	f	class:nlohmann::detail::output_string_adapter
output_string_adapter	json.hpp	/^class output_string_adapter : public output_adapter_protocol<CharType>$/;"	c	namespace:nlohmann::detail
output_vector_adapter	json.hpp	/^    explicit output_vector_adapter(std::vector<CharType>& vec) : v(vec) {}$/;"	f	class:nlohmann::detail::output_vector_adapter
output_vector_adapter	json.hpp	/^class output_vector_adapter : public output_adapter_protocol<CharType>$/;"	c	namespace:nlohmann::detail
overflow	spdlog/fmt/bundled/ostream.h	/^    int_type overflow(int_type ch = traits_type::eof()) FMT_OVERRIDE$/;"	f	class:fmt::internal::FormatBuf	typeref:typename:int_type
owned_value	json.hpp	/^    mutable value_type owned_value = nullptr;$/;"	m	class:nlohmann::detail::json_ref	typeref:typename:value_type
packHiToBuffer	license-session.cpp	/^void LicenseSession::packHiToBuffer(const ToHi* d) {$/;"	f	class:LicenseSession	typeref:typename:void
packHiToBuffer	license-session.h	/^        void packHiToBuffer(const ToHi* d);$/;"	p	class:LicenseSession	typeref:typename:void
pack_buffer_packed_payload	protobuf-c/protobuf-c.c	/^pack_buffer_packed_payload(const ProtobufCFieldDescriptor *field,$/;"	f	typeref:typename:size_t	file:
package	protobuf-c/protobuf-c.h	/^	const char			*package;$/;"	m	struct:ProtobufCServiceDescriptor	typeref:typename:const char *
package_name	protobuf-c/protobuf-c.h	/^	const char			*package_name;$/;"	m	struct:ProtobufCEnumDescriptor	typeref:typename:const char *
package_name	protobuf-c/protobuf-c.h	/^	const char			*package_name;$/;"	m	struct:ProtobufCMessageDescriptor	typeref:typename:const char *
pad	spdlog/fmt/bundled/format.h	/^IntFormatSpec<int, AlignTypeSpec<TYPE_CODE>, Char> pad(int value, unsigned width, Char fill = ' /;"	p	namespace:fmt	typeref:typename:IntFormatSpec<int,AlignTypeSpec<TYPE_CODE>,Char>
pad	spdlog/fmt/bundled/format.h	/^inline StrFormatSpec<wchar_t> pad(const wchar_t *str, unsigned width, char fill = ' ')$/;"	f	namespace:fmt	typeref:typename:StrFormatSpec<wchar_t>
pad2	spdlog/details/fmt_helper.h	/^inline void pad2(int n, fmt::basic_memory_buffer<char, Buffer_Size> &dest)$/;"	f	namespace:spdlog::details::fmt_helper	typeref:typename:void
pad3	spdlog/details/fmt_helper.h	/^inline void pad3(int n, fmt::basic_memory_buffer<char, Buffer_Size> &dest)$/;"	f	namespace:spdlog::details::fmt_helper	typeref:typename:void
pad6	spdlog/details/fmt_helper.h	/^inline void pad6(size_t n, fmt::basic_memory_buffer<char, Buffer_Size> &dest)$/;"	f	namespace:spdlog::details::fmt_helper	typeref:typename:void
pad_n_join	spdlog/details/pattern_formatter_impl.h	/^static fmt::MemoryWriter &pad_n_join(fmt::MemoryWriter &w, int v1, int v2, char sep)$/;"	f	namespace:spdlog::details	typeref:typename:fmt::MemoryWriter &
pad_n_join	spdlog/details/pattern_formatter_impl.h	/^static fmt::MemoryWriter &pad_n_join(fmt::MemoryWriter &w, int v1, int v2, int v3, char sep)$/;"	f	namespace:spdlog::details	typeref:typename:fmt::MemoryWriter &
padding	qcustomplot.h	/^  QMargins padding() const { return mPadding; }$/;"	f	class:QCPItemText	typeref:typename:QMargins
padding	qcustomplot.h	/^  Q_PROPERTY(QMargins padding READ padding WRITE setPadding)$/;"	p	class:QCPItemText	typeref:typename:QMargins
padding	qcustomplot.h	/^  Q_PROPERTY(int padding READ padding WRITE setPadding)$/;"	p	class:QCPAxis	typeref:typename:int
padding	qcustomplot.h	/^  int padding() const { return mPadding; }$/;"	f	class:QCPAxis	typeref:typename:int
paintEvent	qcustomplot.cpp	/^void QCustomPlot::paintEvent(QPaintEvent *event)$/;"	f	class:QCustomPlot	typeref:typename:void
paintEvent	qcustomplot.h	/^  virtual void paintEvent(QPaintEvent *event) Q_DECL_OVERRIDE;$/;"	p	class:QCustomPlot	typeref:typename:void
pal	stb_image.h	/^   stbi_uc  pal[256][4];$/;"	m	struct:__anon84e4e8861108	typeref:typename:stbi_uc[256][4]
pale_golden_rod	spdlog/fmt/bundled/colors.h	/^    pale_golden_rod = 0xEEE8AA,         \/\/ rgb(238,232,170)$/;"	e	enum:color
pale_green	spdlog/fmt/bundled/colors.h	/^    pale_green = 0x98FB98,              \/\/ rgb(152,251,152)$/;"	e	enum:color
pale_turquoise	spdlog/fmt/bundled/colors.h	/^    pale_turquoise = 0xAFEEEE,          \/\/ rgb(175,238,238)$/;"	e	enum:color
pale_violet_red	spdlog/fmt/bundled/colors.h	/^    pale_violet_red = 0xDB7093,         \/\/ rgb(219,112,147)$/;"	e	enum:color
papaya_whip	spdlog/fmt/bundled/colors.h	/^    papaya_whip = 0xFFEFD5,             \/\/ rgb(255,239,213)$/;"	e	enum:color
parentAnchor	qcustomplot.h	/^  QCPItemAnchor *parentAnchor() const { return parentAnchorX(); }$/;"	f	class:QCPItemPosition	typeref:typename:QCPItemAnchor *
parentAnchorX	qcustomplot.h	/^  QCPItemAnchor *parentAnchorX() const { return mParentAnchorX; }$/;"	f	class:QCPItemPosition	typeref:typename:QCPItemAnchor *
parentAnchorY	qcustomplot.h	/^  QCPItemAnchor *parentAnchorY() const { return mParentAnchorY; }$/;"	f	class:QCPItemPosition	typeref:typename:QCPItemAnchor *
parentLayerable	qcustomplot.h	/^  QCPLayerable *parentLayerable() const { return mParentLayerable.data(); }$/;"	f	class:QCPLayerable	typeref:typename:QCPLayerable *
parentLegend	qcustomplot.h	/^  QCPLegend *parentLegend() const { return mParentLegend; }$/;"	f	class:QCPAbstractLegendItem	typeref:typename:QCPLegend *
parentPlot	qcustomplot.h	/^  QCustomPlot *parentPlot() const { return mParentPlot; }$/;"	f	class:QCPLayer	typeref:typename:QCustomPlot *
parentPlot	qcustomplot.h	/^  QCustomPlot *parentPlot() const { return mParentPlot; }$/;"	f	class:QCPLayerable	typeref:typename:QCustomPlot *
parentPlotInitialized	qcustomplot.cpp	/^void QCPLayerable::parentPlotInitialized(QCustomPlot *parentPlot)$/;"	f	class:QCPLayerable	typeref:typename:void
parentPlotInitialized	qcustomplot.cpp	/^void QCPLayoutElement::parentPlotInitialized(QCustomPlot *parentPlot)$/;"	f	class:QCPLayoutElement	typeref:typename:void
parentPlotInitialized	qcustomplot.cpp	/^void QCPLegend::parentPlotInitialized(QCustomPlot *parentPlot)$/;"	f	class:QCPLegend	typeref:typename:void
parentPlotInitialized	qcustomplot.h	/^  virtual void parentPlotInitialized(QCustomPlot *parentPlot) Q_DECL_OVERRIDE;$/;"	p	class:QCPLayoutElement	typeref:typename:void
parentPlotInitialized	qcustomplot.h	/^  virtual void parentPlotInitialized(QCustomPlot *parentPlot) Q_DECL_OVERRIDE;$/;"	p	class:QCPLegend	typeref:typename:void
parentPlotInitialized	qcustomplot.h	/^  virtual void parentPlotInitialized(QCustomPlot *parentPlot);$/;"	p	class:QCPLayerable	typeref:typename:void
parse	json.hpp	/^    static basic_json parse(IteratorType first, IteratorType last,$/;"	f	class:nlohmann::basic_json	typeref:typename:basic_json
parse	json.hpp	/^    static basic_json parse(detail::input_adapter i,$/;"	f	class:nlohmann::basic_json	typeref:typename:basic_json
parse	json.hpp	/^    static basic_json parse(detail::input_adapter& i,$/;"	f	class:nlohmann::basic_json	typeref:typename:basic_json
parse	json.hpp	/^    void parse(const bool strict, BasicJsonType& result)$/;"	f	class:nlohmann::detail::parser	typeref:typename:void
parse	spdlog/fmt/bundled/ranges.h	/^    FMT_CONSTEXPR auto parse(ParseContext &ctx) -> decltype(ctx.begin())$/;"	f	struct:formatter	typeref:typename:decltype (ctx.begin ())
parse	spdlog/fmt/bundled/ranges.h	/^    FMT_CONSTEXPR auto parse(ParseContext &ctx) -> decltype(ctx.begin())$/;"	f	struct:formatting_base	typeref:typename:decltype (ctx.begin ())
parse	stb_image.h	/^   int parse, step;$/;"	m	struct:__anon84e4e8861108	typeref:typename:int
parse_arg_index	spdlog/fmt/bundled/format.h	/^    internal::Arg parse_arg_index(const Char *&s);$/;"	p	class:fmt::BasicFormatter	typeref:typename:internal::Arg
parse_arg_index	spdlog/fmt/bundled/format.h	/^inline internal::Arg BasicFormatter<Char, AF>::parse_arg_index(const Char *&s)$/;"	f	class:fmt::BasicFormatter	typeref:typename:internal::Arg
parse_arg_name	spdlog/fmt/bundled/format.h	/^    internal::Arg parse_arg_name(const Char *&s);$/;"	p	class:fmt::BasicFormatter	typeref:typename:internal::Arg
parse_arg_name	spdlog/fmt/bundled/format.h	/^inline internal::Arg BasicFormatter<Char, AF>::parse_arg_name(const Char *&s)$/;"	f	class:fmt::BasicFormatter	typeref:typename:internal::Arg
parse_boolean	protobuf-c/protobuf-c.c	/^parse_boolean(unsigned len, const uint8_t *data)$/;"	f	typeref:typename:protobuf_c_boolean	file:
parse_cbor	json.hpp	/^    BasicJsonType parse_cbor(const bool strict)$/;"	f	class:nlohmann::detail::binary_reader	typeref:typename:BasicJsonType
parse_cbor_internal	json.hpp	/^    BasicJsonType parse_cbor_internal(const bool get_char = true)$/;"	f	class:nlohmann::detail::binary_reader	typeref:typename:BasicJsonType
parse_context	spdlog/fmt/bundled/core.h	/^    basic_parse_context<char_type> &parse_context()$/;"	f	class:internal::context_base	typeref:typename:basic_parse_context<char_type> &
parse_context	spdlog/fmt/bundled/core.h	/^typedef basic_parse_context<char> parse_context;$/;"	t	typeref:typename:basic_parse_context<char>
parse_context_	spdlog/fmt/bundled/core.h	/^    basic_parse_context<Char> parse_context_;$/;"	m	class:internal::context_base	typeref:typename:basic_parse_context<Char>
parse_error	json.hpp	/^        parse_error,      \/\/\/< indicating a parse error$/;"	e	enum:nlohmann::detail::lexer::token_type
parse_error	json.hpp	/^    parse_error(int id_, std::size_t byte_, const char* what_arg)$/;"	f	class:nlohmann::detail::parse_error
parse_error	json.hpp	/^    using parse_error = detail::parse_error;$/;"	t	class:nlohmann::basic_json	typeref:typename:detail::parse_error
parse_error	json.hpp	/^class parse_error : public exception$/;"	c	namespace:nlohmann::detail
parse_event_t	json.hpp	/^    enum class parse_event_t : uint8_t$/;"	g	class:nlohmann::detail::parser	typeref:typename:uint8_t
parse_event_t	json.hpp	/^    using parse_event_t = typename parser::parse_event_t;$/;"	t	class:nlohmann::basic_json	typeref:typename:parser::parse_event_t
parse_fixed_uint32	protobuf-c/protobuf-c.c	/^parse_fixed_uint32(const uint8_t *data)$/;"	f	typeref:typename:uint32_t	file:
parse_fixed_uint64	protobuf-c/protobuf-c.c	/^parse_fixed_uint64(const uint8_t *data)$/;"	f	typeref:typename:uint64_t	file:
parse_flags	spdlog/fmt/bundled/printf.h	/^    void parse_flags(FormatSpec &spec, const Char *&s);$/;"	p	class:fmt::PrintfFormatter	typeref:typename:void
parse_flags	spdlog/fmt/bundled/printf.h	/^void PrintfFormatter<Char, AF>::parse_flags(FormatSpec &spec, const Char *&s)$/;"	f	class:fmt::PrintfFormatter	typeref:typename:void
parse_header	spdlog/fmt/bundled/printf.h	/^    unsigned parse_header(const Char *&s, FormatSpec &spec);$/;"	p	class:fmt::PrintfFormatter	typeref:typename:unsigned
parse_header	spdlog/fmt/bundled/printf.h	/^unsigned PrintfFormatter<Char, AF>::parse_header(const Char *&s, FormatSpec &spec)$/;"	f	class:fmt::PrintfFormatter	typeref:typename:unsigned
parse_int32	protobuf-c/protobuf-c.c	/^parse_int32(unsigned len, const uint8_t *data)$/;"	f	typeref:typename:uint32_t	file:
parse_internal	json.hpp	/^    void parse_internal(bool keep, BasicJsonType& result)$/;"	f	class:nlohmann::detail::parser	typeref:typename:void
parse_member	protobuf-c/protobuf-c.c	/^parse_member(ScannedMember *scanned_member,$/;"	f	typeref:typename:protobuf_c_boolean	file:
parse_msgpack	json.hpp	/^    BasicJsonType parse_msgpack(const bool strict)$/;"	f	class:nlohmann::detail::binary_reader	typeref:typename:BasicJsonType
parse_msgpack_internal	json.hpp	/^    BasicJsonType parse_msgpack_internal()$/;"	f	class:nlohmann::detail::binary_reader	typeref:typename:BasicJsonType
parse_nonnegative_int	spdlog/fmt/bundled/format.h	/^unsigned parse_nonnegative_int(const Char *&s)$/;"	f	namespace:fmt::internal	typeref:typename:unsigned
parse_oneof_member	protobuf-c/protobuf-c.c	/^parse_oneof_member (ScannedMember *scanned_member,$/;"	f	typeref:typename:protobuf_c_boolean	file:
parse_optional_member	protobuf-c/protobuf-c.c	/^parse_optional_member(ScannedMember *scanned_member,$/;"	f	typeref:typename:protobuf_c_boolean	file:
parse_packed_repeated_member	protobuf-c/protobuf-c.c	/^parse_packed_repeated_member(ScannedMember *scanned_member,$/;"	f	typeref:typename:protobuf_c_boolean	file:
parse_repeated_member	protobuf-c/protobuf-c.c	/^parse_repeated_member(ScannedMember *scanned_member,$/;"	f	typeref:typename:protobuf_c_boolean	file:
parse_required_member	protobuf-c/protobuf-c.c	/^parse_required_member(ScannedMember *scanned_member,$/;"	f	typeref:typename:protobuf_c_boolean	file:
parse_tag_and_wiretype	protobuf-c/protobuf-c.c	/^parse_tag_and_wiretype(size_t len,$/;"	f	typeref:typename:size_t	file:
parse_ubjson	json.hpp	/^    BasicJsonType parse_ubjson(const bool strict)$/;"	f	class:nlohmann::detail::binary_reader	typeref:typename:BasicJsonType
parse_ubjson_internal	json.hpp	/^    BasicJsonType parse_ubjson_internal(const bool get_char = true)$/;"	f	class:nlohmann::detail::binary_reader	typeref:typename:BasicJsonType
parse_uint32	protobuf-c/protobuf-c.c	/^parse_uint32(unsigned len, const uint8_t *data)$/;"	f	typeref:typename:uint32_t	file:
parse_uint64	protobuf-c/protobuf-c.c	/^parse_uint64(unsigned len, const uint8_t *data)$/;"	f	typeref:typename:uint64_t	file:
parser	json.hpp	/^    explicit parser(detail::input_adapter_t adapter,$/;"	f	class:nlohmann::detail::parser
parser	json.hpp	/^    using parser = ::nlohmann::detail::parser<basic_json>;$/;"	t	class:nlohmann::basic_json	typeref:typename:::nlohmann::detail::parser<basic_json>
parser	json.hpp	/^class parser$/;"	c	namespace:nlohmann::detail
parser_callback_t	json.hpp	/^    using parser_callback_t = typename parser::parser_callback_t;$/;"	t	class:nlohmann::basic_json	typeref:typename:parser::parser_callback_t
parser_callback_t	json.hpp	/^    using parser_callback_t =$/;"	t	class:nlohmann::detail::parser
patch	json.hpp	/^    basic_json patch(const basic_json& json_patch) const$/;"	f	class:nlohmann::basic_json	typeref:typename:basic_json
patch_operations	json.hpp	/^        enum class patch_operations {add, remove, replace, move, copy, test, invalid};$/;"	g	function:nlohmann::basic_json::patch
pattern_formatter	spdlog/details/pattern_formatter.h	/^    explicit pattern_formatter(const std::string &pattern, pattern_time_type time_type = pattern/;"	f	class:spdlog::SPDLOG_FINAL
pattern_formatter	spdlog/details/pattern_formatter.h	/^    pattern_formatter(const pattern_formatter &) = delete;$/;"	p	class:spdlog::SPDLOG_FINAL
pattern_formatter	spdlog/details/pattern_formatter_impl.h	/^inline spdlog::pattern_formatter::pattern_formatter(const std::string &pattern, pattern_time_typ/;"	f	class:spdlog::pattern_formatter
pattern_formatter	spdlog/formatter.h	/^    explicit pattern_formatter(const std::string &pattern, pattern_time_type pattern_time = patt/;"	p	class:spdlog::SPDLOG_FINAL
pattern_formatter	spdlog/formatter.h	/^    pattern_formatter(const pattern_formatter &) = delete;$/;"	p	class:spdlog::SPDLOG_FINAL
pattern_time_type	spdlog/common.h	/^enum class pattern_time_type$/;"	g	namespace:spdlog
pattern_time_type_	spdlog/details/pattern_formatter.h	/^    pattern_time_type pattern_time_type_;$/;"	m	class:spdlog::SPDLOG_FINAL	typeref:typename:pattern_time_type
pcmPlayRecordStop	mdi-child.cpp	/^void MdiChild::pcmPlayRecordStop()$/;"	f	class:MdiChild	typeref:typename:void
pcmPlayRecordStop	mdi-child.h	/^    void pcmPlayRecordStop();$/;"	p	class:MdiChild	typeref:typename:void
pcmVolumeOutput	mdi-child.h	/^    FILE *pcmVolumeOutput = nullptr;$/;"	m	class:MdiChild	typeref:typename:FILE *
pcm_record_count	mdi-child.h	/^    int pcm_record_count = 0;$/;"	m	class:MdiChild	typeref:typename:int
peach_puff	spdlog/fmt/bundled/colors.h	/^    peach_puff = 0xFFDAB9,              \/\/ rgb(255,218,185)$/;"	e	enum:color
pen	qcustomplot.h	/^  QPen pen() const { return mPen; }$/;"	f	class:QCPAbstractPlottable	typeref:typename:QPen
pen	qcustomplot.h	/^  QPen pen() const { return mPen; }$/;"	f	class:QCPGrid	typeref:typename:QPen
pen	qcustomplot.h	/^  QPen pen() const { return mPen; }$/;"	f	class:QCPItemBracket	typeref:typename:QPen
pen	qcustomplot.h	/^  QPen pen() const { return mPen; }$/;"	f	class:QCPItemCurve	typeref:typename:QPen
pen	qcustomplot.h	/^  QPen pen() const { return mPen; }$/;"	f	class:QCPItemEllipse	typeref:typename:QPen
pen	qcustomplot.h	/^  QPen pen() const { return mPen; }$/;"	f	class:QCPItemLine	typeref:typename:QPen
pen	qcustomplot.h	/^  QPen pen() const { return mPen; }$/;"	f	class:QCPItemPixmap	typeref:typename:QPen
pen	qcustomplot.h	/^  QPen pen() const { return mPen; }$/;"	f	class:QCPItemRect	typeref:typename:QPen
pen	qcustomplot.h	/^  QPen pen() const { return mPen; }$/;"	f	class:QCPItemStraightLine	typeref:typename:QPen
pen	qcustomplot.h	/^  QPen pen() const { return mPen; }$/;"	f	class:QCPItemText	typeref:typename:QPen
pen	qcustomplot.h	/^  QPen pen() const { return mPen; }$/;"	f	class:QCPItemTracer	typeref:typename:QPen
pen	qcustomplot.h	/^  QPen pen() const { return mPen; }$/;"	f	class:QCPScatterStyle	typeref:typename:QPen
pen	qcustomplot.h	/^  QPen pen() const { return mPen; }$/;"	f	class:QCPSelectionDecorator	typeref:typename:QPen
pen	qcustomplot.h	/^  QPen pen() const { return mPen; }$/;"	f	class:QCPSelectionRect	typeref:typename:QPen
pen	qcustomplot.h	/^  Q_PROPERTY(QPen pen READ pen WRITE setPen)$/;"	p	class:QCPAbstractPlottable	typeref:typename:QPen
pen	qcustomplot.h	/^  Q_PROPERTY(QPen pen READ pen WRITE setPen)$/;"	p	class:QCPGrid	typeref:typename:QPen
pen	qcustomplot.h	/^  Q_PROPERTY(QPen pen READ pen WRITE setPen)$/;"	p	class:QCPItemBracket	typeref:typename:QPen
pen	qcustomplot.h	/^  Q_PROPERTY(QPen pen READ pen WRITE setPen)$/;"	p	class:QCPItemCurve	typeref:typename:QPen
pen	qcustomplot.h	/^  Q_PROPERTY(QPen pen READ pen WRITE setPen)$/;"	p	class:QCPItemEllipse	typeref:typename:QPen
pen	qcustomplot.h	/^  Q_PROPERTY(QPen pen READ pen WRITE setPen)$/;"	p	class:QCPItemLine	typeref:typename:QPen
pen	qcustomplot.h	/^  Q_PROPERTY(QPen pen READ pen WRITE setPen)$/;"	p	class:QCPItemPixmap	typeref:typename:QPen
pen	qcustomplot.h	/^  Q_PROPERTY(QPen pen READ pen WRITE setPen)$/;"	p	class:QCPItemRect	typeref:typename:QPen
pen	qcustomplot.h	/^  Q_PROPERTY(QPen pen READ pen WRITE setPen)$/;"	p	class:QCPItemStraightLine	typeref:typename:QPen
pen	qcustomplot.h	/^  Q_PROPERTY(QPen pen READ pen WRITE setPen)$/;"	p	class:QCPItemText	typeref:typename:QPen
pen	qcustomplot.h	/^  Q_PROPERTY(QPen pen READ pen WRITE setPen)$/;"	p	class:QCPItemTracer	typeref:typename:QPen
penNegative	qcustomplot.h	/^  QPen penNegative() const { return mPenNegative; }$/;"	f	class:QCPFinancial	typeref:typename:QPen
penNegative	qcustomplot.h	/^  Q_PROPERTY(QPen penNegative READ penNegative WRITE setPenNegative)$/;"	p	class:QCPFinancial	typeref:typename:QPen
penPositive	qcustomplot.h	/^  QPen penPositive() const { return mPenPositive; }$/;"	f	class:QCPFinancial	typeref:typename:QPen
penPositive	qcustomplot.h	/^  Q_PROPERTY(QPen penPositive READ penPositive WRITE setPenPositive)$/;"	p	class:QCPFinancial	typeref:typename:QPen
performAutoSqueeze	qcustomplot.h	/^  void performAutoSqueeze();$/;"	p	class:QCPDataContainer	typeref:typename:void
performAutoSqueeze	qcustomplot.h	/^void QCPDataContainer<DataType>::performAutoSqueeze()$/;"	f	class:QCPDataContainer	typeref:typename:void
periodic	qcustomplot.h	/^  bool periodic() const { return mPeriodic; }$/;"	f	class:QCPColorGradient	typeref:typename:bool
periodicity	qcustomplot.h	/^  bool periodicity() const { return mPeriodicity; }$/;"	f	class:QCPAxisTickerPi	typeref:typename:bool
perpendicular	qcustomplot.h	/^  QCPVector2D perpendicular() const { return QCPVector2D(-mY, mX); }$/;"	f	class:QCPVector2D	typeref:typename:QCPVector2D
peru	spdlog/fmt/bundled/colors.h	/^    peru = 0xCD853F,                    \/\/ rgb(205,133,63)$/;"	e	enum:color
phCacheLabels	qcustomplot.h	/^                    ,phCacheLabels      = 0x004 \/\/\/< <tt>0x004<\/tt> axis (tick) labels will /;"	e	enum:QCP::PlottingHint
phFastPolylines	qcustomplot.h	/^                    ,phFastPolylines    = 0x001 \/\/\/< <tt>0x001<\/tt> Graph\/Curve lines are d/;"	e	enum:QCP::PlottingHint
phImmediateRefresh	qcustomplot.h	/^                    ,phImmediateRefresh = 0x002 \/\/\/< <tt>0x002<\/tt> causes an immediate repa/;"	e	enum:QCP::PlottingHint
phNone	qcustomplot.h	/^enum PlottingHint { phNone              = 0x000 \/\/\/< <tt>0x000<\/tt> No hints are set$/;"	e	enum:QCP::PlottingHint
phone_public_key	simple.pb-c.h	/^  char *phone_public_key;$/;"	m	struct:_ToHi	typeref:typename:char *
phone_public_key	simple.proto	/^    optional string phone_public_key = 100;$/;"	f
piSymbol	qcustomplot.h	/^  QString piSymbol() const { return mPiSymbol; }$/;"	f	class:QCPAxisTickerPi	typeref:typename:QString
piValue	qcustomplot.h	/^  double piValue() const { return mPiValue; }$/;"	f	class:QCPAxisTickerPi	typeref:typename:double
pickClosest	qcustomplot.cpp	/^double QCPAxisTicker::pickClosest(double target, const QVector<double> &candidates) const$/;"	f	class:QCPAxisTicker	typeref:typename:double
pickClosest	qcustomplot.h	/^  double pickClosest(double target, const QVector<double> &candidates) const;$/;"	p	class:QCPAxisTicker	typeref:typename:double
pid	spdlog/details/os.h	/^inline int pid()$/;"	f	namespace:spdlog::details::os	typeref:typename:int
ping	ble.cpp	/^            int ping;$/;"	m	struct:BLESession::connectAP::IpPing	typeref:typename:int	file:
pink	spdlog/fmt/bundled/colors.h	/^    pink = 0xFFC0CB,                    \/\/ rgb(255,192,203)$/;"	e	enum:color
pipe	spdlog/fmt/bundled/posix.cc	/^void fmt::File::pipe(File &read_end, File &write_end) {$/;"	f	class:fmt::File	typeref:typename:void
pipe	spdlog/fmt/bundled/posix.h	/^    FMT_API static void pipe(File &read_end, File &write_end);$/;"	p	class:fmt::File	typeref:typename:FMT_API void
pitch	simple.pb-c.h	/^  float pitch;$/;"	m	struct:_ToHi	typeref:typename:float
pitch	simple.proto	/^    optional float pitch = 12;	\/\/rad$/;"	f
pixelOrientation	qcustomplot.h	/^  int pixelOrientation() const { return rangeReversed() != (orientation()==Qt::Vertical) ? -1 : /;"	f	class:QCPAxis	typeref:typename:int
pixelPosition	qcustomplot.cpp	/^QPointF QCPItemAnchor::pixelPosition() const$/;"	f	class:QCPItemAnchor	typeref:typename:QPointF
pixelPosition	qcustomplot.cpp	/^QPointF QCPItemPosition::pixelPosition() const$/;"	f	class:QCPItemPosition	typeref:typename:QPointF
pixelPosition	qcustomplot.h	/^  virtual QPointF pixelPosition() const Q_DECL_OVERRIDE;$/;"	p	class:QCPItemPosition	typeref:typename:QPointF
pixelPosition	qcustomplot.h	/^  virtual QPointF pixelPosition() const;$/;"	p	class:QCPItemAnchor	typeref:typename:QPointF
pixelToCoord	qcustomplot.cpp	/^double QCPAxis::pixelToCoord(double value) const$/;"	f	class:QCPAxis	typeref:typename:double
pixelToCoord	qcustomplot.h	/^  double pixelToCoord(double value) const;$/;"	p	class:QCPAxis	typeref:typename:double
pixelsToCoords	qcustomplot.cpp	/^void QCPAbstractPlottable::pixelsToCoords(const QPointF &pixelPos, double &key, double &value) c/;"	f	class:QCPAbstractPlottable	typeref:typename:void
pixelsToCoords	qcustomplot.cpp	/^void QCPAbstractPlottable::pixelsToCoords(double x, double y, double &key, double &value) const$/;"	f	class:QCPAbstractPlottable	typeref:typename:void
pixelsToCoords	qcustomplot.h	/^  void pixelsToCoords(const QPointF &pixelPos, double &key, double &value) const;$/;"	p	class:QCPAbstractPlottable	typeref:typename:void
pixelsToCoords	qcustomplot.h	/^  void pixelsToCoords(double x, double y, double &key, double &value) const;$/;"	p	class:QCPAbstractPlottable	typeref:typename:void
pixmap	qcustomplot.h	/^    QPixmap pixmap;$/;"	m	struct:QCPAxisPainterPrivate::CachedLabel	typeref:typename:QPixmap
pixmap	qcustomplot.h	/^  QPixmap pixmap() const { return mPixmap; }$/;"	f	class:QCPItemPixmap	typeref:typename:QPixmap
pixmap	qcustomplot.h	/^  QPixmap pixmap() const { return mPixmap; }$/;"	f	class:QCPScatterStyle	typeref:typename:QPixmap
pixmap	qcustomplot.h	/^  Q_PROPERTY(QPixmap pixmap READ pixmap WRITE setPixmap)$/;"	p	class:QCPItemPixmap	typeref:typename:QPixmap
placeTickLabel	qcustomplot.cpp	/^void QCPAxisPainterPrivate::placeTickLabel(QCPPainter *painter, double position, int distanceToA/;"	f	class:QCPAxisPainterPrivate	typeref:typename:void
placeTickLabel	qcustomplot.h	/^  virtual void placeTickLabel(QCPPainter *painter, double position, int distanceToAxis, const QS/;"	p	class:QCPAxisPainterPrivate	typeref:typename:void
play_pcm	simple.pb-c.h	/^  int32_t play_pcm;$/;"	m	struct:_ToHi	typeref:typename:int32_t
play_pcm	simple.proto	/^    optional int32 play_pcm = 112; $/;"	f
play_pcm_end	simple.pb-c.h	/^  protobuf_c_boolean play_pcm_end;$/;"	m	struct:_ToHost	typeref:typename:protobuf_c_boolean
play_pcm_end	simple.proto	/^    optional bool play_pcm_end = 14; \/\/ Host (pcqc) 에게 pcm 재생이 끝났음을 알림.$/;"	f
playlistX	mdi-child.h	/^    QVector<double> playlistX, playlistY;$/;"	m	class:MdiChild	typeref:typename:QVector<double>
playlistY	mdi-child.h	/^    QVector<double> playlistX, playlistY;$/;"	m	class:MdiChild	typeref:typename:QVector<double>
plotLayout	qcustomplot.h	/^  QCPLayoutGrid *plotLayout() const { return mPlotLayout; }$/;"	f	class:QCustomPlot	typeref:typename:QCPLayoutGrid *
plottable	qcustomplot.cpp	/^QCPAbstractPlottable *QCustomPlot::plottable()$/;"	f	class:QCustomPlot	typeref:typename:QCPAbstractPlottable *
plottable	qcustomplot.cpp	/^QCPAbstractPlottable *QCustomPlot::plottable(int index)$/;"	f	class:QCustomPlot	typeref:typename:QCPAbstractPlottable *
plottable	qcustomplot.h	/^  QCPAbstractPlottable *plottable() { return mPlottable; }$/;"	f	class:QCPPlottableLegendItem	typeref:typename:QCPAbstractPlottable *
plottable	qcustomplot.h	/^  QCPAbstractPlottable *plottable();$/;"	p	class:QCustomPlot	typeref:typename:QCPAbstractPlottable *
plottable	qcustomplot.h	/^  QCPAbstractPlottable *plottable(int index);$/;"	p	class:QCustomPlot	typeref:typename:QCPAbstractPlottable *
plottableAt	qcustomplot.cpp	/^QCPAbstractPlottable *QCustomPlot::plottableAt(const QPointF &pos, bool onlySelectable) const$/;"	f	class:QCustomPlot	typeref:typename:QCPAbstractPlottable *
plottableAt	qcustomplot.h	/^  QCPAbstractPlottable *plottableAt(const QPointF &pos, bool onlySelectable=false) const;$/;"	p	class:QCustomPlot	typeref:typename:QCPAbstractPlottable *
plottableClick	qcustomplot.h	/^  void plottableClick(QCPAbstractPlottable *plottable, int dataIndex, QMouseEvent *event);$/;"	S	class:QCustomPlot	typeref:typename:void
plottableClick	qcustomplot.h	/^  void plottableClick(QCPAbstractPlottable *plottable, int dataIndex, QMouseEvent *event);$/;"	p	class:QCustomPlot	typeref:typename:void
plottableCount	qcustomplot.cpp	/^int QCustomPlot::plottableCount() const$/;"	f	class:QCustomPlot	typeref:typename:int
plottableCount	qcustomplot.h	/^  int plottableCount() const;$/;"	p	class:QCustomPlot	typeref:typename:int
plottableDoubleClick	qcustomplot.h	/^  void plottableDoubleClick(QCPAbstractPlottable *plottable, int dataIndex, QMouseEvent *event);$/;"	S	class:QCustomPlot	typeref:typename:void
plottableDoubleClick	qcustomplot.h	/^  void plottableDoubleClick(QCPAbstractPlottable *plottable, int dataIndex, QMouseEvent *event);$/;"	p	class:QCustomPlot	typeref:typename:void
plottables	qcustomplot.cpp	/^QList<QCPAbstractPlottable*> QCPAxis::plottables() const$/;"	f	class:QCPAxis	typeref:typename:QList<QCPAbstractPlottable * >
plottables	qcustomplot.cpp	/^QList<QCPAbstractPlottable*> QCPAxisRect::plottables() const$/;"	f	class:QCPAxisRect	typeref:typename:QList<QCPAbstractPlottable * >
plottables	qcustomplot.h	/^  QList<QCPAbstractPlottable*> plottables() const;$/;"	p	class:QCPAxis	typeref:typename:QList<QCPAbstractPlottable * >
plottables	qcustomplot.h	/^  QList<QCPAbstractPlottable*> plottables() const;$/;"	p	class:QCPAxisRect	typeref:typename:QList<QCPAbstractPlottable * >
plottingHints	qcustomplot.h	/^  QCP::PlottingHints plottingHints() const { return mPlottingHints; }$/;"	f	class:QCustomPlot	typeref:typename:QCP::PlottingHints
plum	spdlog/fmt/bundled/colors.h	/^    plum = 0xDDA0DD,                    \/\/ rgb(221,160,221)$/;"	e	enum:color
plus	json.hpp	/^    diyfp plus;$/;"	m	struct:nlohmann::detail::dtoa_impl::boundaries	typeref:typename:diyfp
pmDefault	qcustomplot.h	/^  enum PainterMode { pmDefault       = 0x00   \/\/\/< <tt>0x00<\/tt> Default mode for painting o/;"	e	enum:QCPPainter::PainterMode
pmNoCaching	qcustomplot.h	/^                     ,pmNoCaching    = 0x02   \/\/\/< <tt>0x02<\/tt> Mode for all sorts of expor/;"	e	enum:QCPPainter::PainterMode
pmNonCosmetic	qcustomplot.h	/^                     ,pmNonCosmetic  = 0x04   \/\/\/< <tt>0x04<\/tt> Turns pen widths 0 to 1, i./;"	e	enum:QCPPainter::PainterMode
pmVectorized	qcustomplot.h	/^                     ,pmVectorized   = 0x01   \/\/\/< <tt>0x01<\/tt> Mode for vectorized paintin/;"	e	enum:QCPPainter::PainterMode
point1	qcustomplot.h	/^  QCPItemPosition * const point1;$/;"	m	class:QCPItemStraightLine	typeref:typename:QCPItemPosition * const
point2	qcustomplot.h	/^  QCPItemPosition * const point2;$/;"	m	class:QCPItemStraightLine	typeref:typename:QCPItemPosition * const
pointDistance	qcustomplot.cpp	/^double QCPCurve::pointDistance(const QPointF &pixelPoint, QCPCurveDataContainer::const_iterator /;"	f	class:QCPCurve	typeref:typename:double
pointDistance	qcustomplot.cpp	/^double QCPErrorBars::pointDistance(const QPointF &pixelPoint, QCPErrorBarsDataContainer::const_i/;"	f	class:QCPErrorBars	typeref:typename:double
pointDistance	qcustomplot.cpp	/^double QCPGraph::pointDistance(const QPointF &pixelPoint, QCPGraphDataContainer::const_iterator /;"	f	class:QCPGraph	typeref:typename:double
pointDistance	qcustomplot.h	/^  double pointDistance(const QPointF &pixelPoint, QCPCurveDataContainer::const_iterator &closest/;"	p	class:QCPCurve	typeref:typename:double
pointDistance	qcustomplot.h	/^  double pointDistance(const QPointF &pixelPoint, QCPErrorBarsDataContainer::const_iterator &clo/;"	p	class:QCPErrorBars	typeref:typename:double
pointDistance	qcustomplot.h	/^  double pointDistance(const QPointF &pixelPoint, QCPGraphDataContainer::const_iterator &closest/;"	p	class:QCPGraph	typeref:typename:double
pointee_t	json.hpp	/^        using pointee_t = typename std::remove_const<typename$/;"	t	function:nlohmann::basic_json::get_ptr	typeref:typename:std::remove_const<typename std::remove_pointer<typename std::remove_const<PointerType>::type>::type>::type
pointer	json.hpp	/^    using pointer = typename std::allocator_traits<allocator_type>::pointer;$/;"	t	class:nlohmann::basic_json	typeref:typename:std::allocator_traits<allocator_type>::pointer
pointer	json.hpp	/^    using pointer = typename std::conditional<std::is_const<BasicJsonType>::value,$/;"	t	class:nlohmann::detail::iter_impl	typeref:typename:std::conditional<std::is_const<BasicJsonType>::value,typename BasicJsonType::const_pointer,typename BasicJsonType::pointer>::type
pointer	license-session.h	/^        typedef boost::shared_ptr<LicenseSession> pointer;$/;"	t	class:LicenseSession	typeref:typename:boost::shared_ptr<LicenseSession>
pointer	qc-session.h	/^        typedef boost::shared_ptr<QcSession> pointer;$/;"	t	class:QcSession	typeref:typename:boost::shared_ptr<QcSession>
pointer	spdlog/fmt/bundled/core.h	/^        const void *pointer;$/;"	m	union:internal::value::__anonef64315f020a	typeref:typename:const void *
pointer	spdlog/fmt/bundled/format.h	/^        const void *pointer;$/;"	m	union:fmt::internal::Value::__anon1ea8787f020a	typeref:typename:const void *
pointer_type	spdlog/fmt/bundled/core.h	/^    pointer_type,$/;"	e	enum:internal::type
pop_back	json.hpp	/^    std::string pop_back()$/;"	f	class:nlohmann::json_pointer	typeref:typename:std::string
pop_cv_	spdlog/details/mpmc_blocking_q.h	/^    std::condition_variable pop_cv_;$/;"	m	class:spdlog::details::mpmc_bounded_queue	typeref:typename:std::condition_variable
pop_front	spdlog/details/circular_q.h	/^    void pop_front(T &popped_item)$/;"	f	class:spdlog::details::circular_q	typeref:typename:void
position	qcustomplot.cpp	/^QCPItemPosition *QCPAbstractItem::position(const QString &name) const$/;"	f	class:QCPAbstractItem	typeref:typename:QCPItemPosition *
position	qcustomplot.h	/^  QCPItemPosition * const position;$/;"	m	class:QCPItemText	typeref:typename:QCPItemPosition * const
position	qcustomplot.h	/^  QCPItemPosition * const position;$/;"	m	class:QCPItemTracer	typeref:typename:QCPItemPosition * const
position	qcustomplot.h	/^  QCPItemPosition *position(const QString &name) const;$/;"	p	class:QCPAbstractItem	typeref:typename:QCPItemPosition *
positionAlignment	qcustomplot.h	/^  Qt::Alignment positionAlignment() const { return mPositionAlignment; }$/;"	f	class:QCPItemText	typeref:typename:Qt::Alignment
positions	qcustomplot.h	/^  QList<QCPItemPosition*> positions() const { return mPositions; }$/;"	f	class:QCPAbstractItem	typeref:typename:QList<QCPItemPosition * >
post_async_msg_	spdlog/details/thread_pool.h	/^    void post_async_msg_(async_msg &&new_msg, async_overflow_policy overflow_policy)$/;"	f	class:spdlog::details::thread_pool	typeref:typename:void
post_flush	spdlog/details/thread_pool.h	/^    void post_flush(async_logger_ptr &&worker_ptr, async_overflow_policy overflow_policy)$/;"	f	class:spdlog::details::thread_pool	typeref:typename:void
post_log	spdlog/details/thread_pool.h	/^    void post_log(async_logger_ptr &&worker_ptr, details::log_msg &&msg, async_overflow_policy o/;"	f	class:spdlog::details::thread_pool	typeref:typename:void
postfix	spdlog/fmt/bundled/ranges.h	/^    Char postfix;$/;"	m	struct:formatting_range	typeref:typename:Char
postfix	spdlog/fmt/bundled/ranges.h	/^    Char postfix;$/;"	m	struct:formatting_tuple	typeref:typename:Char
powder_blue	spdlog/fmt/bundled/colors.h	/^    powder_blue = 0xB0E0E6,             \/\/ rgb(176,224,230)$/;"	e	enum:color
power	simple.pb-c.h	/^  uint32_t power;$/;"	m	struct:_ToBle	typeref:typename:uint32_t
power	simple.proto	/^    optional uint32 power = 2;$/;"	f
power_button_pressed	simple.pb-c.h	/^  protobuf_c_boolean power_button_pressed;$/;"	m	struct:_ToHi	typeref:typename:protobuf_c_boolean
power_button_pressed	simple.proto	/^    optional bool power_button_pressed = 21;$/;"	f
power_command	simple.pb-c.h	/^  uint32_t power_command;$/;"	m	struct:_ToSt	typeref:typename:uint32_t
power_command	simple.proto	/^    optional uint32 power_command = 8; \/\/ 전원 명령, 1 이면 꺼라. 2이면 슬립모드/;"	f
preallocateGrow	qcustomplot.h	/^  void preallocateGrow(int minimumPreallocSize);$/;"	p	class:QCPDataContainer	typeref:typename:void
preallocateGrow	qcustomplot.h	/^void QCPDataContainer<DataType>::preallocateGrow(int minimumPreallocSize)$/;"	f	class:QCPDataContainer	typeref:typename:void
precision	spdlog/fmt/bundled/format.h	/^    int precision() const$/;"	f	struct:fmt::AlignSpec	typeref:typename:int
precision	spdlog/fmt/bundled/format.h	/^    int precision() const$/;"	f	struct:fmt::FormatSpec	typeref:typename:int
precision	spdlog/fmt/bundled/format.h	/^    int precision() const$/;"	f	struct:fmt::TypeSpec	typeref:typename:int
precision_	spdlog/fmt/bundled/format.h	/^    int precision_;$/;"	m	struct:fmt::FormatSpec	typeref:typename:int
prefix	spdlog/fmt/bundled/ranges.h	/^    Char prefix;$/;"	m	struct:formatting_range	typeref:typename:Char
prefix	spdlog/fmt/bundled/ranges.h	/^    Char prefix;$/;"	m	struct:formatting_tuple	typeref:typename:Char
prefix	stb_image.h	/^   stbi__int16 prefix;$/;"	m	struct:__anon84e4e8861008	typeref:typename:stbi__int16
prefixed_message_pack	protobuf-c/protobuf-c.c	/^prefixed_message_pack(const ProtobufCMessage *message, uint8_t *out)$/;"	f	typeref:typename:size_t	file:
prepare_int_buffer	spdlog/fmt/bundled/format.h	/^    CharPtr prepare_int_buffer(unsigned num_digits, const EmptySpec &, const char *prefix, unsig/;"	f	class:fmt::BasicWriter	typeref:typename:CharPtr
prepare_int_buffer	spdlog/fmt/bundled/format.h	/^    CharPtr prepare_int_buffer(unsigned num_digits, const Spec &spec, const char *prefix, unsign/;"	p	class:fmt::BasicWriter	typeref:typename:CharPtr
prepare_int_buffer	spdlog/fmt/bundled/format.h	/^typename BasicWriter<Char>::CharPtr BasicWriter<Char>::prepare_int_buffer($/;"	f	class:fmt::BasicWriter	typeref:typename:BasicWriter<Char>::CharPtr
prevent_child_fd	spdlog/details/os.h	/^inline void prevent_child_fd(FILE *f)$/;"	f	namespace:spdlog::details::os	typeref:typename:void
primitive_iterator	json.hpp	/^    primitive_iterator_t primitive_iterator {};$/;"	m	struct:nlohmann::detail::internal_iterator	typeref:typename:primitive_iterator_t
primitive_iterator_t	json.hpp	/^    using primitive_iterator_t = ::nlohmann::detail::primitive_iterator_t;$/;"	t	class:nlohmann::basic_json	typeref:typename:::nlohmann::detail::primitive_iterator_t
primitive_iterator_t	json.hpp	/^class primitive_iterator_t$/;"	c	namespace:nlohmann::detail
print	spdlog/fmt/bundled/colors.h	/^inline void print(rgb fd, rgb bg, string_view format_str, const Args &... args)$/;"	f	typeref:typename:void
print	spdlog/fmt/bundled/colors.h	/^inline void print(rgb fd, string_view format_str, const Args &... args)$/;"	f	typeref:typename:void
print	spdlog/fmt/bundled/core.h	/^inline void print(std::FILE *f, string_view format_str, const Args &... args)$/;"	f	typeref:typename:void
print	spdlog/fmt/bundled/core.h	/^inline void print(std::FILE *f, wstring_view format_str, const Args &... args)$/;"	f	typeref:typename:void
print	spdlog/fmt/bundled/core.h	/^inline void print(string_view format_str, const Args &... args)$/;"	f	typeref:typename:void
print	spdlog/fmt/bundled/core.h	/^inline void print(wstring_view format_str, const Args &... args)$/;"	f	typeref:typename:void
print	spdlog/fmt/bundled/format.cc	/^FMT_FUNC void print(CStringRef format_str, ArgList args) {$/;"	f	namespace:fmt	typeref:typename:FMT_FUNC void
print	spdlog/fmt/bundled/format.cc	/^FMT_FUNC void print(std::FILE *f, CStringRef format_str, ArgList args) {$/;"	f	namespace:fmt	typeref:typename:FMT_FUNC void
print	spdlog/fmt/bundled/format.h	/^FMT_API void print(CStringRef format_str, ArgList args);$/;"	p	namespace:fmt	typeref:typename:FMT_API void
print	spdlog/fmt/bundled/format.h	/^FMT_API void print(std::FILE *f, CStringRef format_str, ArgList args);$/;"	p	namespace:fmt	typeref:typename:FMT_API void
print	spdlog/fmt/bundled/ostream.cc	/^FMT_FUNC void print(std::ostream &os, CStringRef format_str, ArgList args) {$/;"	f	namespace:fmt	typeref:typename:FMT_FUNC void
print	spdlog/fmt/bundled/ostream.h	/^FMT_API void print(std::ostream &os, CStringRef format_str, ArgList args);$/;"	p	namespace:fmt	typeref:typename:FMT_API void
print	spdlog/fmt/bundled/posix.h	/^    void print(CStringRef format_str, const ArgList &args)$/;"	f	class:fmt::BufferedFile	typeref:typename:void
print_colored	spdlog/fmt/bundled/core.h	/^inline void print_colored(color c, string_view format_str, const Args &... args)$/;"	f	typeref:typename:void
print_colored	spdlog/fmt/bundled/core.h	/^inline void print_colored(color c, wstring_view format_str, const Args &... args)$/;"	f	typeref:typename:void
print_colored	spdlog/fmt/bundled/format.cc	/^FMT_FUNC void print_colored(Color c, CStringRef format, ArgList args) {$/;"	f	namespace:fmt	typeref:typename:FMT_FUNC void
print_colored	spdlog/fmt/bundled/format.h	/^FMT_API void print_colored(Color c, CStringRef format, ArgList args);$/;"	p	namespace:fmt	typeref:typename:FMT_API void
print_rgb	spdlog/fmt/bundled/colors.h	/^inline void print_rgb(rgb fd, string_view format_str, const Args &... args)$/;"	f	typeref:typename:void
printf	spdlog/fmt/bundled/printf.cc	/^void printf(BasicWriter<Char> &w, BasicCStringRef<Char> format, ArgList args);$/;"	p	namespace:fmt	typeref:typename:void	file:
printf	spdlog/fmt/bundled/printf.h	/^inline void printf(Writer &w, CStringRef format, ArgList args)$/;"	f	namespace:fmt	typeref:typename:void
priority_tag	json.hpp	/^template<> struct priority_tag<0> {};$/;"	s	namespace:nlohmann::detail
priority_tag	json.hpp	/^template<unsigned N> struct priority_tag : priority_tag < N - 1 > {};$/;"	s	namespace:nlohmann::detail
processBytes	license-session.cpp	/^int LicenseSession::processBytes() {$/;"	f	class:LicenseSession	typeref:typename:int
processBytes	license-session.h	/^        int processBytes() ;$/;"	p	class:LicenseSession	typeref:typename:int
processMessage	license-session.cpp	/^void LicenseSession::processMessage(ToHost* msg2) {$/;"	f	class:LicenseSession	typeref:typename:void
processMessage	license-session.h	/^        void processMessage(ToHost* msg2) ;$/;"	p	class:LicenseSession	typeref:typename:void
processPointSelection	qcustomplot.cpp	/^void QCustomPlot::processPointSelection(QMouseEvent *event)$/;"	f	class:QCustomPlot	typeref:typename:void
processPointSelection	qcustomplot.h	/^  Q_SLOT virtual void processPointSelection(QMouseEvent *event);$/;"	p	class:QCustomPlot	typeref:typename:Q_SLOT void
processRectSelection	qcustomplot.cpp	/^void QCustomPlot::processRectSelection(QRect rect, QMouseEvent *event)$/;"	f	class:QCustomPlot	typeref:typename:void
processRectSelection	qcustomplot.h	/^  Q_SLOT virtual void processRectSelection(QRect rect, QMouseEvent *event);$/;"	p	class:QCustomPlot	typeref:typename:Q_SLOT void
processRectZoom	qcustomplot.cpp	/^void QCustomPlot::processRectZoom(QRect rect, QMouseEvent *event)$/;"	f	class:QCustomPlot	typeref:typename:void
processRectZoom	qcustomplot.h	/^  Q_SLOT virtual void processRectZoom(QRect rect, QMouseEvent *event);$/;"	p	class:QCustomPlot	typeref:typename:Q_SLOT void
process_next_msg	spdlog/details/async_log_helper.h	/^    bool process_next_msg();$/;"	p	class:spdlog::details::async_log_helper	typeref:typename:bool
process_next_msg	spdlog/details/async_log_helper.h	/^inline bool spdlog::details::async_log_helper::process_next_msg()$/;"	f	class:spdlog::details::async_log_helper	typeref:typename:bool
process_next_msg_	spdlog/details/thread_pool.h	/^    bool process_next_msg_()$/;"	f	class:spdlog::details::thread_pool	typeref:typename:bool
progressive	stb_image.h	/^   int            progressive;$/;"	m	struct:__anon84e4e8860608	typeref:typename:int
protobuf	qc-message.pb.cc	/^namespace protobuf {$/;"	n	namespace:google	file:
protobuf	qc-message.pb.h	/^namespace protobuf {$/;"	n	namespace:google
protobuf_AssignDescriptors	qc-message.pb.cc	/^void protobuf_AssignDescriptors() {$/;"	f	namespace:protobuf_qc_2dmessage_2eproto	typeref:typename:void
protobuf_AssignDescriptorsOnce	qc-message.pb.cc	/^void protobuf_AssignDescriptorsOnce() {$/;"	f	namespace:protobuf_qc_2dmessage_2eproto	typeref:typename:void
protobuf_RegisterTypes	qc-message.pb.cc	/^void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;$/;"	p	namespace:protobuf_qc_2dmessage_2eproto	typeref:typename:void	file:
protobuf_RegisterTypes	qc-message.pb.cc	/^void protobuf_RegisterTypes(const ::std::string&) {$/;"	f	namespace:protobuf_qc_2dmessage_2eproto	typeref:typename:void
protobuf_c__allocator	protobuf-c/protobuf-c.c	/^static ProtobufCAllocator protobuf_c__allocator = {$/;"	v	typeref:typename:ProtobufCAllocator	file:
protobuf_c_boolean	protobuf-c/protobuf-c.h	/^typedef int protobuf_c_boolean;$/;"	t	typeref:typename:int
protobuf_c_buffer_simple_append	protobuf-c/protobuf-c.c	/^protobuf_c_buffer_simple_append(ProtobufCBuffer *buffer,$/;"	f	typeref:typename:void
protobuf_c_buffer_simple_append	protobuf-c/protobuf-c.h	/^protobuf_c_buffer_simple_append($/;"	p	typeref:typename:PROTOBUF_C__API void
protobuf_c_empty_string	protobuf-c/protobuf-c.c	/^const char protobuf_c_empty_string[] = "";$/;"	v	typeref:typename:const char[]
protobuf_c_enum_descriptor_get_value	protobuf-c/protobuf-c.c	/^protobuf_c_enum_descriptor_get_value(const ProtobufCEnumDescriptor *desc,$/;"	f	typeref:typename:const ProtobufCEnumValue *
protobuf_c_enum_descriptor_get_value	protobuf-c/protobuf-c.h	/^protobuf_c_enum_descriptor_get_value($/;"	p	typeref:typename:PROTOBUF_C__API const ProtobufCEnumValue *
protobuf_c_enum_descriptor_get_value_by_name	protobuf-c/protobuf-c.c	/^protobuf_c_enum_descriptor_get_value_by_name(const ProtobufCEnumDescriptor *desc,$/;"	f	typeref:typename:const ProtobufCEnumValue *
protobuf_c_enum_descriptor_get_value_by_name	protobuf-c/protobuf-c.h	/^protobuf_c_enum_descriptor_get_value_by_name($/;"	p	typeref:typename:PROTOBUF_C__API const ProtobufCEnumValue *
protobuf_c_message_check	protobuf-c/protobuf-c.c	/^protobuf_c_message_check(const ProtobufCMessage *message)$/;"	f	typeref:typename:protobuf_c_boolean
protobuf_c_message_check	protobuf-c/protobuf-c.h	/^protobuf_c_message_check(const ProtobufCMessage *);$/;"	p	typeref:typename:PROTOBUF_C__API protobuf_c_boolean
protobuf_c_message_descriptor_get_field	protobuf-c/protobuf-c.c	/^protobuf_c_message_descriptor_get_field(const ProtobufCMessageDescriptor *desc,$/;"	f	typeref:typename:const ProtobufCFieldDescriptor *
protobuf_c_message_descriptor_get_field	protobuf-c/protobuf-c.h	/^protobuf_c_message_descriptor_get_field($/;"	p	typeref:typename:PROTOBUF_C__API const ProtobufCFieldDescriptor *
protobuf_c_message_descriptor_get_field_by_name	protobuf-c/protobuf-c.c	/^protobuf_c_message_descriptor_get_field_by_name(const ProtobufCMessageDescriptor *desc,$/;"	f	typeref:typename:const ProtobufCFieldDescriptor *
protobuf_c_message_descriptor_get_field_by_name	protobuf-c/protobuf-c.h	/^protobuf_c_message_descriptor_get_field_by_name($/;"	p	typeref:typename:PROTOBUF_C__API const ProtobufCFieldDescriptor *
protobuf_c_message_free_unpacked	protobuf-c/protobuf-c.c	/^protobuf_c_message_free_unpacked(ProtobufCMessage *message,$/;"	f	typeref:typename:void
protobuf_c_message_free_unpacked	protobuf-c/protobuf-c.h	/^protobuf_c_message_free_unpacked($/;"	p	typeref:typename:PROTOBUF_C__API void
protobuf_c_message_get_packed_size	protobuf-c/protobuf-c.c	/^size_t protobuf_c_message_get_packed_size(const ProtobufCMessage *message)$/;"	f	typeref:typename:size_t
protobuf_c_message_get_packed_size	protobuf-c/protobuf-c.h	/^protobuf_c_message_get_packed_size(const ProtobufCMessage *message);$/;"	p	typeref:typename:PROTOBUF_C__API size_t
protobuf_c_message_init	protobuf-c/protobuf-c.c	/^protobuf_c_message_init(const ProtobufCMessageDescriptor * descriptor,$/;"	f	typeref:typename:void
protobuf_c_message_init	protobuf-c/protobuf-c.h	/^protobuf_c_message_init($/;"	p	typeref:typename:PROTOBUF_C__API void
protobuf_c_message_pack	protobuf-c/protobuf-c.c	/^protobuf_c_message_pack(const ProtobufCMessage *message, uint8_t *out)$/;"	f	typeref:typename:size_t
protobuf_c_message_pack	protobuf-c/protobuf-c.h	/^protobuf_c_message_pack(const ProtobufCMessage *message, uint8_t *out);$/;"	p	typeref:typename:PROTOBUF_C__API size_t
protobuf_c_message_pack_to_buffer	protobuf-c/protobuf-c.c	/^protobuf_c_message_pack_to_buffer(const ProtobufCMessage *message,$/;"	f	typeref:typename:size_t
protobuf_c_message_pack_to_buffer	protobuf-c/protobuf-c.h	/^protobuf_c_message_pack_to_buffer($/;"	p	typeref:typename:PROTOBUF_C__API size_t
protobuf_c_message_unpack	protobuf-c/protobuf-c.c	/^protobuf_c_message_unpack(const ProtobufCMessageDescriptor *desc,$/;"	f	typeref:typename:ProtobufCMessage *
protobuf_c_message_unpack	protobuf-c/protobuf-c.h	/^protobuf_c_message_unpack($/;"	p	typeref:typename:PROTOBUF_C__API ProtobufCMessage *
protobuf_c_service_descriptor_get_method_by_name	protobuf-c/protobuf-c.c	/^protobuf_c_service_descriptor_get_method_by_name(const ProtobufCServiceDescriptor *desc,$/;"	f	typeref:typename:const ProtobufCMethodDescriptor *
protobuf_c_service_descriptor_get_method_by_name	protobuf-c/protobuf-c.h	/^protobuf_c_service_descriptor_get_method_by_name($/;"	p	typeref:typename:PROTOBUF_C__API const ProtobufCMethodDescriptor *
protobuf_c_service_destroy	protobuf-c/protobuf-c.c	/^void protobuf_c_service_destroy(ProtobufCService *service)$/;"	f	typeref:typename:void
protobuf_c_service_destroy	protobuf-c/protobuf-c.h	/^protobuf_c_service_destroy(ProtobufCService *service);$/;"	p	typeref:typename:PROTOBUF_C__API void
protobuf_c_service_generated_init	protobuf-c/protobuf-c.c	/^protobuf_c_service_generated_init(ProtobufCService *service,$/;"	f	typeref:typename:void
protobuf_c_service_generated_init	protobuf-c/protobuf-c.h	/^protobuf_c_service_generated_init($/;"	p	typeref:typename:PROTOBUF_C__API void
protobuf_c_service_invoke_internal	protobuf-c/protobuf-c.c	/^protobuf_c_service_invoke_internal(ProtobufCService *service,$/;"	f	typeref:typename:void
protobuf_c_service_invoke_internal	protobuf-c/protobuf-c.h	/^protobuf_c_service_invoke_internal($/;"	p	typeref:typename:PROTOBUF_C__API void
protobuf_c_version	protobuf-c/protobuf-c.c	/^protobuf_c_version(void)$/;"	f	typeref:typename:const char *
protobuf_c_version	protobuf-c/protobuf-c.h	/^protobuf_c_version(void);$/;"	p	typeref:typename:PROTOBUF_C__API const char *
protobuf_c_version_number	protobuf-c/protobuf-c.c	/^protobuf_c_version_number(void)$/;"	f	typeref:typename:uint32_t
protobuf_c_version_number	protobuf-c/protobuf-c.h	/^protobuf_c_version_number(void);$/;"	p	typeref:typename:PROTOBUF_C__API uint32_t
protobuf_qc_2dmessage_2eproto	qc-message.pb.cc	/^namespace protobuf_qc_2dmessage_2eproto {$/;"	n	file:
protobuf_qc_2dmessage_2eproto	qc-message.pb.h	/^namespace protobuf_qc_2dmessage_2eproto {$/;"	n
ptAbsolute	qcustomplot.h	/^  enum PositionType { ptAbsolute        \/\/\/< Static positioning in pixels, starting from the /;"	e	enum:QCPItemPosition::PositionType
ptAxisRectRatio	qcustomplot.h	/^                      ,ptAxisRectRatio  \/\/\/< Static positioning given by a fraction of the ax/;"	e	enum:QCPItemPosition::PositionType
ptPlotCoords	qcustomplot.h	/^                      ,ptPlotCoords     \/\/\/< Dynamic positioning at a plot coordinate defined/;"	e	enum:QCPItemPosition::PositionType
ptViewportRatio	qcustomplot.h	/^                      ,ptViewportRatio  \/\/\/< Static positioning given by a fraction of the vi/;"	e	enum:QCPItemPosition::PositionType
ptr_	spdlog/fmt/bundled/core.h	/^    T *ptr_;$/;"	m	class:internal::basic_buffer	typeref:typename:T *
ptr_	spdlog/fmt/bundled/format.h	/^    T *ptr_;$/;"	m	class:fmt::Buffer	typeref:typename:T *
purple	spdlog/fmt/bundled/colors.h	/^    purple = 0x800080,                  \/\/ rgb(128,0,128)$/;"	e	enum:color
pushCommand	ble.h	/^    int pushCommand(int msg, const json jsonObj) {$/;"	f	class:BLESession	typeref:typename:int
push_back	json.hpp	/^    void push_back(basic_json&& val)$/;"	f	class:nlohmann::basic_json	typeref:typename:void
push_back	json.hpp	/^    void push_back(const basic_json& val)$/;"	f	class:nlohmann::basic_json	typeref:typename:void
push_back	json.hpp	/^    void push_back(const typename object_t::value_type& val)$/;"	f	class:nlohmann::basic_json	typeref:typename:void
push_back	json.hpp	/^    void push_back(initializer_list_t init)$/;"	f	class:nlohmann::basic_json	typeref:typename:void
push_back	spdlog/details/circular_q.h	/^    void push_back(T &&item)$/;"	f	class:spdlog::details::circular_q	typeref:typename:void
push_back	spdlog/fmt/bundled/core.h	/^    void push_back(const T &value)$/;"	f	class:internal::basic_buffer	typeref:typename:void
push_back	spdlog/fmt/bundled/core.h	/^    void push_back(value<Context> val)$/;"	f	class:internal::arg_map	typeref:typename:void
push_back	spdlog/fmt/bundled/format.h	/^    void push_back(const T &value)$/;"	f	class:fmt::Buffer	typeref:typename:void
push_cv_	spdlog/details/mpmc_blocking_q.h	/^    std::condition_variable push_cv_;$/;"	m	class:spdlog::details::mpmc_bounded_queue	typeref:typename:std::condition_variable
q_	spdlog/details/mpmc_blocking_q.h	/^    std::queue<T> q_;$/;"	m	class:spdlog::details::mpmc_bounded_queue	typeref:typename:std::queue<T>
q_	spdlog/details/thread_pool.h	/^    q_type q_;$/;"	m	class:spdlog::details::thread_pool	typeref:typename:q_type
q_type	spdlog/details/async_log_helper.h	/^    using q_type = details::mpmc_bounded_queue<item_type>;$/;"	t	class:spdlog::details::async_log_helper	typeref:typename:details::mpmc_bounded_queue<item_type>
q_type	spdlog/details/thread_pool.h	/^    using q_type = details::mpmc_blocking_queue<item_type>;$/;"	t	class:spdlog::details::thread_pool	typeref:typename:details::mpmc_blocking_queue<item_type>
qb	mdi-child.h	/^    QBuffer qb;$/;"	m	class:MdiChild	typeref:typename:QBuffer
qc_retry	simple.pb-c.h	/^  uint32_t qc_retry;$/;"	m	struct:_ToHi	typeref:typename:uint32_t
qc_retry	simple.proto	/^    optional uint32 qc_retry = 115;$/;"	f
qt-json-visualization	README.md	/^# qt-json-visualization$/;"	c
quantifier_offset	protobuf-c/protobuf-c.h	/^	unsigned		quantifier_offset;$/;"	m	struct:ProtobufCFieldDescriptor	typeref:typename:unsigned
quat	linmath.h	/^typedef float quat[4];$/;"	t	typeref:typename:float[4]
quat_add	linmath.h	/^static inline void quat_add(quat r, quat a, quat b)$/;"	f	typeref:typename:void
quat_conj	linmath.h	/^static inline void quat_conj(quat r, quat q)$/;"	f	typeref:typename:void
quat_from_mat4x4	linmath.h	/^static inline void quat_from_mat4x4(quat q, mat4x4 M)$/;"	f	typeref:typename:void
quat_identity	linmath.h	/^static inline void quat_identity(quat q)$/;"	f	typeref:typename:void
quat_inner_product	linmath.h	/^static inline float quat_inner_product(quat a, quat b)$/;"	f	typeref:typename:float
quat_mul	linmath.h	/^static inline void quat_mul(quat r, quat p, quat q)$/;"	f	typeref:typename:void
quat_mul_vec3	linmath.h	/^static inline void quat_mul_vec3(vec3 r, quat q, vec3 v)$/;"	f	typeref:typename:void
quat_norm	linmath.h	/^#define quat_norm /;"	d
quat_rotate	linmath.h	/^static inline void quat_rotate(quat r, float angle, vec3 axis) {$/;"	f	typeref:typename:void
quat_scale	linmath.h	/^static inline void quat_scale(quat r, quat v, float s)$/;"	f	typeref:typename:void
quat_sub	linmath.h	/^static inline void quat_sub(quat r, quat a, quat b)$/;"	f	typeref:typename:void
queue_mutex_	spdlog/details/mpmc_blocking_q.h	/^    std::mutex queue_mutex_;$/;"	m	class:spdlog::details::mpmc_bounded_queue	typeref:typename:std::mutex
r	spdlog/fmt/bundled/colors.h	/^    uint8_t r;$/;"	m	struct:rgb	typeref:typename:uint8_t
range	qcustomplot.cpp	/^QCPRange QCPSelectionRect::range(const QCPAxis *axis) const$/;"	f	class:QCPSelectionRect	typeref:typename:QCPRange
range	qcustomplot.h	/^  QCPRange range(const QCPAxis *axis) const;$/;"	p	class:QCPSelectionRect	typeref:typename:QCPRange
range	qcustomplot.h	/^  Q_PROPERTY(QCPRange range READ range WRITE setRange NOTIFY rangeChanged)$/;"	p	class:QCPAxis	typeref:typename:QCPRange
range	qcustomplot.h	/^  const QCPRange range() const { return mRange; }$/;"	f	class:QCPAxis	typeref:typename:const QCPRange
rangeChanged	qcustomplot.h	/^  void rangeChanged(const QCPRange &newRange);$/;"	S	class:QCPAxis	typeref:typename:void
rangeChanged	qcustomplot.h	/^  void rangeChanged(const QCPRange &newRange);$/;"	p	class:QCPAxis	typeref:typename:void
rangeChanged	qcustomplot.h	/^  void rangeChanged(const QCPRange &newRange, const QCPRange &oldRange);$/;"	S	class:QCPAxis	typeref:typename:void
rangeChanged	qcustomplot.h	/^  void rangeChanged(const QCPRange &newRange, const QCPRange &oldRange);$/;"	p	class:QCPAxis	typeref:typename:void
rangeDrag	qcustomplot.cpp	/^bool QCPColorScale::rangeDrag() const$/;"	f	class:QCPColorScale	typeref:typename:bool
rangeDrag	qcustomplot.h	/^  Q_PROPERTY(bool rangeDrag READ rangeDrag WRITE setRangeDrag)$/;"	p	class:QCPColorScale	typeref:typename:bool
rangeDrag	qcustomplot.h	/^  Qt::Orientations rangeDrag() const { return mRangeDrag; }$/;"	f	class:QCPAxisRect	typeref:typename:Qt::Orientations
rangeDrag	qcustomplot.h	/^  bool rangeDrag() const;$/;"	p	class:QCPColorScale	typeref:typename:bool
rangeDragAxes	qcustomplot.cpp	/^QList<QCPAxis*> QCPAxisRect::rangeDragAxes(Qt::Orientation orientation)$/;"	f	class:QCPAxisRect	typeref:typename:QList<QCPAxis * >
rangeDragAxes	qcustomplot.h	/^  QList<QCPAxis*> rangeDragAxes(Qt::Orientation orientation);$/;"	p	class:QCPAxisRect	typeref:typename:QList<QCPAxis * >
rangeDragAxis	qcustomplot.cpp	/^QCPAxis *QCPAxisRect::rangeDragAxis(Qt::Orientation orientation)$/;"	f	class:QCPAxisRect	typeref:typename:QCPAxis *
rangeDragAxis	qcustomplot.h	/^  QCPAxis *rangeDragAxis(Qt::Orientation orientation);$/;"	p	class:QCPAxisRect	typeref:typename:QCPAxis *
rangeReversed	qcustomplot.h	/^  Q_PROPERTY(bool rangeReversed READ rangeReversed WRITE setRangeReversed)$/;"	p	class:QCPAxis	typeref:typename:bool
rangeReversed	qcustomplot.h	/^  bool rangeReversed() const { return mRangeReversed; }$/;"	f	class:QCPAxis	typeref:typename:bool
rangeZoom	qcustomplot.cpp	/^bool QCPColorScale::rangeZoom() const$/;"	f	class:QCPColorScale	typeref:typename:bool
rangeZoom	qcustomplot.h	/^  Q_PROPERTY(bool rangeZoom READ rangeZoom WRITE setRangeZoom)$/;"	p	class:QCPColorScale	typeref:typename:bool
rangeZoom	qcustomplot.h	/^  Qt::Orientations rangeZoom() const { return mRangeZoom; }$/;"	f	class:QCPAxisRect	typeref:typename:Qt::Orientations
rangeZoom	qcustomplot.h	/^  bool rangeZoom() const;$/;"	p	class:QCPColorScale	typeref:typename:bool
rangeZoomAxes	qcustomplot.cpp	/^QList<QCPAxis*> QCPAxisRect::rangeZoomAxes(Qt::Orientation orientation)$/;"	f	class:QCPAxisRect	typeref:typename:QList<QCPAxis * >
rangeZoomAxes	qcustomplot.h	/^  QList<QCPAxis*> rangeZoomAxes(Qt::Orientation orientation);$/;"	p	class:QCPAxisRect	typeref:typename:QList<QCPAxis * >
rangeZoomAxis	qcustomplot.cpp	/^QCPAxis *QCPAxisRect::rangeZoomAxis(Qt::Orientation orientation)$/;"	f	class:QCPAxisRect	typeref:typename:QCPAxis *
rangeZoomAxis	qcustomplot.h	/^  QCPAxis *rangeZoomAxis(Qt::Orientation orientation);$/;"	p	class:QCPAxisRect	typeref:typename:QCPAxis *
rangeZoomFactor	qcustomplot.cpp	/^double QCPAxisRect::rangeZoomFactor(Qt::Orientation orientation)$/;"	f	class:QCPAxisRect	typeref:typename:double
rangeZoomFactor	qcustomplot.h	/^  double rangeZoomFactor(Qt::Orientation orientation);$/;"	p	class:QCPAxisRect	typeref:typename:double
range_length_limit	spdlog/fmt/bundled/ranges.h	/^    static FMT_CONSTEXPR_DECL const std::size_t range_length_limit =$/;"	m	struct:formatting_range	typeref:typename:FMT_CONSTEXPR_DECL const std::size_t
ratio	stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags, delay;$/;"	m	struct:__anon84e4e8861108	typeref:typename:int
raw	spdlog/details/log_msg.h	/^    fmt::MemoryWriter raw;$/;"	m	struct:spdlog::details::log_msg	typeref:typename:fmt::MemoryWriter
raw	spdlog/details/thread_pool.h	/^    fmt::basic_memory_buffer<char, 176> raw;$/;"	m	struct:spdlog::details::async_msg	typeref:typename:fmt::basic_memory_buffer<char,176>
raw_coeff	stb_image.h	/^      void *raw_data, *raw_coeff;$/;"	m	struct:__anon84e4e8860608::__anon84e4e8860708	typeref:typename:void **
raw_data	stb_image.h	/^      void *raw_data, *raw_coeff;$/;"	m	struct:__anon84e4e8860608::__anon84e4e8860708	typeref:typename:void *
rbegin	json.hpp	/^    const_reverse_iterator rbegin() const noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:const_reverse_iterator
rbegin	json.hpp	/^    reverse_iterator rbegin() noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:reverse_iterator
read	circular-buffer.cpp	/^size_t CircularBuffer::read(void * _data, size_t bytes) {$/;"	f	class:CircularBuffer	typeref:typename:size_t
read	circular-buffer.h	/^    size_t read(void *data, size_t bytes);$/;"	p	class:CircularBuffer	typeref:typename:size_t
read	spdlog/fmt/bundled/posix.cc	/^std::size_t fmt::File::read(void *buffer, std::size_t count) {$/;"	f	class:fmt::File	typeref:typename:std::size_t
read	spdlog/fmt/bundled/posix.h	/^    FMT_API std::size_t read(void *buffer, std::size_t count);$/;"	p	class:fmt::File	typeref:typename:FMT_API std::size_t
read	stb_image.h	/^   int      (*read)  (void *user,char *data,int size);   \/\/ fill 'data' with 'size' bytes.  re/;"	m	struct:__anon84e4e8860208	typeref:typename:int (*)(void * user,char * data,int size)
readBytes	circular-buffer.cpp	/^size_t CircularBuffer::readBytes(void * data, size_t bytes) {$/;"	f	class:CircularBuffer	typeref:typename:size_t
readBytes	circular-buffer.h	/^    size_t readBytes(void *data, size_t bytes);$/;"	p	class:CircularBuffer	typeref:typename:size_t
readBytes	license-session.cpp	/^void LicenseSession::readBytes(const boost::system::error_code& error,$/;"	f	class:LicenseSession	typeref:typename:void
readBytes	license-session.h	/^        void readBytes(const boost::system::error_code& error,$/;"	p	class:LicenseSession	typeref:typename:void
readOnlyRead	circular-buffer.cpp	/^size_t CircularBuffer::readOnlyRead(void * _data, size_t bytes) const {$/;"	f	class:CircularBuffer	typeref:typename:size_t
readOnlyRead	circular-buffer.h	/^    size_t readOnlyRead(void* data, size_t bytes) const;$/;"	p	class:CircularBuffer	typeref:typename:size_t
readPacketBody	qc-session.cpp	/^void QcSession::readPacketBody(const boost::system::error_code& error,$/;"	f	class:QcSession	typeref:typename:void
readPacketBody	qc-session.h	/^        void readPacketBody(const boost::system::error_code& error,$/;"	p	class:QcSession	typeref:typename:void
readPacketHeader	qc-session.h	/^        void readPacketHeader(const boost::system::error_code& error,$/;"	f	class:QcSession	typeref:typename:void
readSignature	qc-session.h	/^        void readSignature(const boost::system::error_code& error,$/;"	f	class:QcSession	typeref:typename:void
readWithSegment	tcp-packet.cpp	/^int readWithSegment(int fds, uint8_t* buf, int bufSize, int segmentSize, bool retry) {$/;"	f	typeref:typename:int
readWithSegment	tcp-packet.h	/^int readWithSegment(int fds, uint8_t* buf, int bufSize, int segmentSize, bool retry);$/;"	p	typeref:typename:int
read_from_callbacks	stb_image.h	/^   int read_from_callbacks;$/;"	m	struct:__anon84e4e8860308	typeref:typename:int
read_msg_	ble.h	/^    char read_msg_[512];$/;"	m	class:BLESession	typeref:typename:char[512]
realLength	qcustomplot.cpp	/^double QCPLineEnding::realLength() const$/;"	f	class:QCPLineEnding	typeref:typename:double
realLength	qcustomplot.h	/^  double realLength() const;$/;"	p	class:QCPLineEnding	typeref:typename:double
realVisibility	qcustomplot.cpp	/^bool QCPLayerable::realVisibility() const$/;"	f	class:QCPLayerable	typeref:typename:bool
realVisibility	qcustomplot.h	/^  bool realVisibility() const;$/;"	p	class:QCPLayerable	typeref:typename:bool
reallocateBuffer	qcustomplot.cpp	/^void QCPPaintBufferGlFbo::reallocateBuffer()$/;"	f	class:QCPPaintBufferGlFbo	typeref:typename:void
reallocateBuffer	qcustomplot.cpp	/^void QCPPaintBufferGlPbuffer::reallocateBuffer()$/;"	f	class:QCPPaintBufferGlPbuffer	typeref:typename:void
reallocateBuffer	qcustomplot.cpp	/^void QCPPaintBufferPixmap::reallocateBuffer()$/;"	f	class:QCPPaintBufferPixmap	typeref:typename:void
reallocateBuffer	qcustomplot.h	/^  virtual void reallocateBuffer() = 0;$/;"	p	class:QCPAbstractPaintBuffer	typeref:typename:void
reallocateBuffer	qcustomplot.h	/^  virtual void reallocateBuffer() Q_DECL_OVERRIDE;$/;"	p	class:QCPPaintBufferGlFbo	typeref:typename:void
reallocateBuffer	qcustomplot.h	/^  virtual void reallocateBuffer() Q_DECL_OVERRIDE;$/;"	p	class:QCPPaintBufferGlPbuffer	typeref:typename:void
reallocateBuffer	qcustomplot.h	/^  virtual void reallocateBuffer() Q_DECL_OVERRIDE;$/;"	p	class:QCPPaintBufferPixmap	typeref:typename:void
realtimeX	mdi-child.h	/^    QVector<double> realtimeX, realtimeY;$/;"	m	class:MdiChild	typeref:typename:QVector<double>
realtimeY	mdi-child.h	/^    QVector<double> realtimeX, realtimeY;$/;"	m	class:MdiChild	typeref:typename:QVector<double>
rebecca_purple	spdlog/fmt/bundled/colors.h	/^    rebecca_purple = 0x663399,          \/\/ rgb(102,51,153)$/;"	e	enum:color
recalculateDataBounds	qcustomplot.cpp	/^void QCPColorMapData::recalculateDataBounds()$/;"	f	class:QCPColorMapData	typeref:typename:void
recalculateDataBounds	qcustomplot.h	/^  void recalculateDataBounds();$/;"	p	class:QCPColorMapData	typeref:typename:void
rect	qcustomplot.h	/^  QRect rect() const { return mRect; }$/;"	f	class:QCPLayoutElement	typeref:typename:QRect
rect	qcustomplot.h	/^  QRect rect() const { return mRect; }$/;"	f	class:QCPSelectionRect	typeref:typename:QRect
rect	qcustomplot.h	/^  Q_PROPERTY(QRect rect READ rect)$/;"	p	class:QCPLayoutElement	typeref:typename:QRect
rectDistance	qcustomplot.cpp	/^double QCPAbstractItem::rectDistance(const QRectF &rect, const QPointF &pos, bool filledRect) co/;"	f	class:QCPAbstractItem	typeref:typename:double
rectDistance	qcustomplot.h	/^  double rectDistance(const QRectF &rect, const QPointF &pos, bool filledRect) const;$/;"	p	class:QCPAbstractItem	typeref:typename:double
rectIntersectsLine	qcustomplot.cpp	/^bool QCPErrorBars::rectIntersectsLine(const QRectF &pixelRect, const QLineF &line) const$/;"	f	class:QCPErrorBars	typeref:typename:bool
rectIntersectsLine	qcustomplot.h	/^  bool rectIntersectsLine(const QRectF &pixelRect, const QLineF &line) const;$/;"	p	class:QCPErrorBars	typeref:typename:bool
red	spdlog/fmt/bundled/colors.h	/^    red = 0xFF0000,                     \/\/ rgb(255,0,0)$/;"	e	enum:color
red	spdlog/fmt/bundled/core.h	/^    red,$/;"	e	enum:color
red	spdlog/sinks/ansicolor_sink.h	/^    const std::string red = "\\033[31m";$/;"	m	class:spdlog::sinks::ansicolor_sink	typeref:typename:const std::string
reference	json.hpp	/^    using reference = typename Base::reference;$/;"	t	class:nlohmann::detail::json_reverse_iterator	typeref:typename:Base::reference
reference	json.hpp	/^    using reference = value_type&;$/;"	t	class:nlohmann::basic_json	typeref:typename:value_type &
reference	json.hpp	/^    using reference =$/;"	t	class:nlohmann::detail::iter_impl	typeref:typename:std::conditional<std::is_const<BasicJsonType>::value,typename BasicJsonType::const_reference,typename BasicJsonType::reference>::type
reference_tokens	json.hpp	/^    std::vector<std::string> reference_tokens;$/;"	m	class:nlohmann::json_pointer	typeref:typename:std::vector<std::string>
registerBars	qcustomplot.cpp	/^void QCPBarsGroup::registerBars(QCPBars *bars)$/;"	f	class:QCPBarsGroup	typeref:typename:void
registerBars	qcustomplot.h	/^  void registerBars(QCPBars *bars);$/;"	p	class:QCPBarsGroup	typeref:typename:void
registerGraph	qcustomplot.cpp	/^bool QCustomPlot::registerGraph(QCPGraph *graph)$/;"	f	class:QCustomPlot	typeref:typename:bool
registerGraph	qcustomplot.h	/^  bool registerGraph(QCPGraph *graph);$/;"	p	class:QCustomPlot	typeref:typename:bool
registerItem	qcustomplot.cpp	/^bool QCustomPlot::registerItem(QCPAbstractItem *item)$/;"	f	class:QCustomPlot	typeref:typename:bool
registerItem	qcustomplot.h	/^  bool registerItem(QCPAbstractItem* item);$/;"	p	class:QCustomPlot	typeref:typename:bool
registerPlottable	qcustomplot.cpp	/^bool QCustomPlot::registerPlottable(QCPAbstractPlottable *plottable)$/;"	f	class:QCustomPlot	typeref:typename:bool
registerPlottable	qcustomplot.h	/^  bool registerPlottable(QCPAbstractPlottable *plottable);$/;"	p	class:QCustomPlot	typeref:typename:bool
registerServer	tcp-packet.h	/^    static const char* registerServer = "register.varram-robot.com";$/;"	v	namespace:IP	typeref:typename:const char *
registerServerPort	tcp-packet.h	/^    static const char* registerServerPort = "80"; $/;"	v	namespace:IP	typeref:typename:const char *
registerWithPlottable	qcustomplot.cpp	/^bool QCPSelectionDecorator::registerWithPlottable(QCPAbstractPlottable *plottable)$/;"	f	class:QCPSelectionDecorator	typeref:typename:bool
registerWithPlottable	qcustomplot.h	/^  virtual bool registerWithPlottable(QCPAbstractPlottable *plottable);$/;"	p	class:QCPSelectionDecorator	typeref:typename:bool
register_logger	spdlog/details/registry.h	/^    void register_logger(std::shared_ptr<logger> logger)$/;"	f	class:spdlog::details::registry_t	typeref:typename:void
register_logger	spdlog/details/spdlog_impl.h	/^inline void spdlog::register_logger(std::shared_ptr<logger> logger)$/;"	f	class:spdlog	typeref:typename:void
register_logger	spdlog/spdlog.h	/^void register_logger(std::shared_ptr<logger> logger);$/;"	p	namespace:spdlog	typeref:typename:void
registry	spdlog/details/registry.h	/^using registry = registry_t<spdlog::details::null_mutex>;$/;"	t	namespace:spdlog::details	typeref:typename:registry_t<spdlog::details::null_mutex>
registry	spdlog/details/registry.h	/^using registry = registry_t<std::mutex>;$/;"	t	namespace:spdlog::details	typeref:typename:registry_t<std::mutex>
registry_t	spdlog/details/registry.h	/^    registry_t<Mutex>() = default;$/;"	p	class:spdlog::details::registry_t
registry_t	spdlog/details/registry.h	/^class registry_t$/;"	c	namespace:spdlog::details
reinterpret_bits	json.hpp	/^Target reinterpret_bits(const Source source)$/;"	f	namespace:nlohmann::detail::dtoa_impl	typeref:typename:Target
releaseElement	qcustomplot.cpp	/^void QCPLayout::releaseElement(QCPLayoutElement *el)$/;"	f	class:QCPLayout	typeref:typename:void
releaseElement	qcustomplot.h	/^  void releaseElement(QCPLayoutElement *el);$/;"	p	class:QCPLayout	typeref:typename:void
release_audio	qc-message.pb.h	/^inline ::std::string* Protocol::release_audio() {$/;"	f	class:Protocol	typeref:typename:::std::string *
release_imu	qc-message.pb.h	/^inline ::Imu* Protocol::release_imu() {$/;"	f	class:Protocol	typeref:typename:::Imu *
release_video	qc-message.pb.h	/^inline ::std::string* Protocol::release_video() {$/;"	f	class:Protocol	typeref:typename:::std::string *
remainSize	circular-buffer.h	/^    size_t remainSize() { return data_.size() - size_; };$/;"	f	class:CircularBuffer	typeref:typename:size_t
remove	json.hpp	/^        enum class patch_operations {add, remove, replace, move, copy, test, invalid};$/;"	e	enum:nlohmann::basic_json::patch::patch_operations
remove	qcustomplot.cpp	/^bool QCPLayout::remove(QCPLayoutElement *element)$/;"	f	class:QCPLayout	typeref:typename:bool
remove	qcustomplot.cpp	/^void QCPBarsGroup::remove(QCPBars *bars)$/;"	f	class:QCPBarsGroup	typeref:typename:void
remove	qcustomplot.h	/^  bool remove(QCPLayoutElement* element);$/;"	p	class:QCPLayout	typeref:typename:bool
remove	qcustomplot.h	/^  void remove(QCPBars *bars);$/;"	p	class:QCPBarsGroup	typeref:typename:void
remove	qcustomplot.h	/^  void remove(double sortKey);$/;"	p	class:QCPDataContainer	typeref:typename:void
remove	qcustomplot.h	/^  void remove(double sortKeyFrom, double sortKeyTo);$/;"	p	class:QCPDataContainer	typeref:typename:void
remove	qcustomplot.h	/^void QCPDataContainer<DataType>::remove(double sortKey)$/;"	f	class:QCPDataContainer	typeref:typename:void
remove	qcustomplot.h	/^void QCPDataContainer<DataType>::remove(double sortKeyFrom, double sortKeyTo)$/;"	f	class:QCPDataContainer	typeref:typename:void
remove	spdlog/details/os.h	/^inline int remove(const filename_t &filename)$/;"	f	namespace:spdlog::details::os	typeref:typename:int
removeAfter	qcustomplot.h	/^  void removeAfter(double sortKey);$/;"	p	class:QCPDataContainer	typeref:typename:void
removeAfter	qcustomplot.h	/^void QCPDataContainer<DataType>::removeAfter(double sortKey)$/;"	f	class:QCPDataContainer	typeref:typename:void
removeAt	qcustomplot.cpp	/^bool QCPLayout::removeAt(int index)$/;"	f	class:QCPLayout	typeref:typename:bool
removeAt	qcustomplot.h	/^  bool removeAt(int index);$/;"	p	class:QCPLayout	typeref:typename:bool
removeAxis	qcustomplot.cpp	/^bool QCPAxisRect::removeAxis(QCPAxis *axis)$/;"	f	class:QCPAxisRect	typeref:typename:bool
removeAxis	qcustomplot.h	/^  bool removeAxis(QCPAxis *axis);$/;"	p	class:QCPAxisRect	typeref:typename:bool
removeBefore	qcustomplot.h	/^  void removeBefore(double sortKey);$/;"	p	class:QCPDataContainer	typeref:typename:void
removeBefore	qcustomplot.h	/^void QCPDataContainer<DataType>::removeBefore(double sortKey)$/;"	f	class:QCPDataContainer	typeref:typename:void
removeChild	qcustomplot.cpp	/^void QCPLayer::removeChild(QCPLayerable *layerable)$/;"	f	class:QCPLayer	typeref:typename:void
removeChild	qcustomplot.cpp	/^void QCPMarginGroup::removeChild(QCP::MarginSide side, QCPLayoutElement *element)$/;"	f	class:QCPMarginGroup	typeref:typename:void
removeChild	qcustomplot.h	/^  void removeChild(QCP::MarginSide side, QCPLayoutElement *element);$/;"	p	class:QCPMarginGroup	typeref:typename:void
removeChild	qcustomplot.h	/^  void removeChild(QCPLayerable *layerable);$/;"	p	class:QCPLayer	typeref:typename:void
removeChildX	qcustomplot.cpp	/^void QCPItemAnchor::removeChildX(QCPItemPosition *pos)$/;"	f	class:QCPItemAnchor	typeref:typename:void
removeChildX	qcustomplot.h	/^  void removeChildX(QCPItemPosition *pos); \/\/ called from pos when its parent anchor is reset /;"	p	class:QCPItemAnchor	typeref:typename:void
removeChildY	qcustomplot.cpp	/^void QCPItemAnchor::removeChildY(QCPItemPosition *pos)$/;"	f	class:QCPItemAnchor	typeref:typename:void
removeChildY	qcustomplot.h	/^  void removeChildY(QCPItemPosition *pos); \/\/ called from pos when its parent anchor is reset /;"	p	class:QCPItemAnchor	typeref:typename:void
removeFromLegend	qcustomplot.cpp	/^bool QCPAbstractPlottable::removeFromLegend() const$/;"	f	class:QCPAbstractPlottable	typeref:typename:bool
removeFromLegend	qcustomplot.cpp	/^bool QCPAbstractPlottable::removeFromLegend(QCPLegend *legend) const$/;"	f	class:QCPAbstractPlottable	typeref:typename:bool
removeFromLegend	qcustomplot.h	/^  bool removeFromLegend() const;$/;"	p	class:QCPAbstractPlottable	typeref:typename:bool
removeFromLegend	qcustomplot.h	/^  bool removeFromLegend(QCPLegend *legend) const;$/;"	p	class:QCPAbstractPlottable	typeref:typename:bool
removeGraph	qcustomplot.cpp	/^bool QCustomPlot::removeGraph(QCPGraph *graph)$/;"	f	class:QCustomPlot	typeref:typename:bool
removeGraph	qcustomplot.cpp	/^bool QCustomPlot::removeGraph(int index)$/;"	f	class:QCustomPlot	typeref:typename:bool
removeGraph	qcustomplot.h	/^  bool removeGraph(QCPGraph *graph);$/;"	p	class:QCustomPlot	typeref:typename:bool
removeGraph	qcustomplot.h	/^  bool removeGraph(int index);$/;"	p	class:QCustomPlot	typeref:typename:bool
removeItem	qcustomplot.cpp	/^bool QCPLegend::removeItem(QCPAbstractLegendItem *item)$/;"	f	class:QCPLegend	typeref:typename:bool
removeItem	qcustomplot.cpp	/^bool QCPLegend::removeItem(int index)$/;"	f	class:QCPLegend	typeref:typename:bool
removeItem	qcustomplot.cpp	/^bool QCustomPlot::removeItem(QCPAbstractItem *item)$/;"	f	class:QCustomPlot	typeref:typename:bool
removeItem	qcustomplot.cpp	/^bool QCustomPlot::removeItem(int index)$/;"	f	class:QCustomPlot	typeref:typename:bool
removeItem	qcustomplot.h	/^  bool removeItem(QCPAbstractItem *item);$/;"	p	class:QCustomPlot	typeref:typename:bool
removeItem	qcustomplot.h	/^  bool removeItem(QCPAbstractLegendItem *item);$/;"	p	class:QCPLegend	typeref:typename:bool
removeItem	qcustomplot.h	/^  bool removeItem(int index);$/;"	p	class:QCPLegend	typeref:typename:bool
removeItem	qcustomplot.h	/^  bool removeItem(int index);$/;"	p	class:QCustomPlot	typeref:typename:bool
removeLayer	qcustomplot.cpp	/^bool QCustomPlot::removeLayer(QCPLayer *layer)$/;"	f	class:QCustomPlot	typeref:typename:bool
removeLayer	qcustomplot.h	/^  bool removeLayer(QCPLayer *layer);$/;"	p	class:QCustomPlot	typeref:typename:bool
removePlottable	qcustomplot.cpp	/^bool QCustomPlot::removePlottable(QCPAbstractPlottable *plottable)$/;"	f	class:QCustomPlot	typeref:typename:bool
removePlottable	qcustomplot.cpp	/^bool QCustomPlot::removePlottable(int index)$/;"	f	class:QCustomPlot	typeref:typename:bool
removePlottable	qcustomplot.h	/^  bool removePlottable(QCPAbstractPlottable *plottable);$/;"	p	class:QCustomPlot	typeref:typename:bool
removePlottable	qcustomplot.h	/^  bool removePlottable(int index);$/;"	p	class:QCustomPlot	typeref:typename:bool
remove_prefix	spdlog/fmt/bundled/core.h	/^    FMT_CONSTEXPR void remove_prefix(size_t n)$/;"	f	class:basic_string_view	typeref:typename:FMT_CONSTEXPR void
remove_sink	spdlog/sinks/dist_sink.h	/^    void remove_sink(std::shared_ptr<sink> sink)$/;"	f	class:spdlog::sinks::dist_sink	typeref:typename:void
rename	spdlog/details/os.h	/^inline int rename(const filename_t &filename1, const filename_t &filename2)$/;"	f	namespace:spdlog::details::os	typeref:typename:int
renc	simple.pb-c.h	/^  int32_t renc;$/;"	m	struct:_ToHi	typeref:typename:int32_t
renc	simple.proto	/^    optional int32 renc = 20; \/\/right motor rpm$/;"	f
rend	json.hpp	/^    const_reverse_iterator rend() const noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:const_reverse_iterator
rend	json.hpp	/^    reverse_iterator rend() noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:reverse_iterator
reopen	spdlog/details/file_helper.h	/^    void reopen(bool truncate)$/;"	f	class:spdlog::details::file_helper	typeref:typename:void
repeated_field_get_packed_size	protobuf-c/protobuf-c.c	/^repeated_field_get_packed_size(const ProtobufCFieldDescriptor *field,$/;"	f	typeref:typename:size_t	file:
repeated_field_pack	protobuf-c/protobuf-c.c	/^repeated_field_pack(const ProtobufCFieldDescriptor *field,$/;"	f	typeref:typename:size_t	file:
repeated_field_pack_to_buffer	protobuf-c/protobuf-c.c	/^repeated_field_pack_to_buffer(const ProtobufCFieldDescriptor *field,$/;"	f	typeref:typename:size_t	file:
replace	json.hpp	/^        enum class patch_operations {add, remove, replace, move, copy, test, invalid};$/;"	e	enum:nlohmann::basic_json::patch::patch_operations
replaceAll	string-util.cpp	/^string replaceAll(const string &str, const string &pattern, const string &replace)$/;"	f	typeref:typename:string
replaceAll	string-util.h	/^std::string replaceAll(const std::string &str, const std::string &pattern, const std::string &re/;"	p	typeref:typename:std::string
replaceUnit	qcustomplot.cpp	/^void QCPAxisTickerTime::replaceUnit(QString &text, QCPAxisTickerTime::TimeUnit unit, int value) /;"	f	class:QCPAxisTickerTime	typeref:typename:void
replaceUnit	qcustomplot.h	/^  void replaceUnit(QString &text, TimeUnit unit, int value) const;$/;"	p	class:QCPAxisTickerTime	typeref:typename:void
replace_substring	json.hpp	/^    static void replace_substring(std::string& s, const std::string& f,$/;"	f	class:nlohmann::json_pointer	typeref:typename:void
replot	qcustomplot.cpp	/^void QCPLayer::replot()$/;"	f	class:QCPLayer	typeref:typename:void
replot	qcustomplot.cpp	/^void QCustomPlot::replot(QCustomPlot::RefreshPriority refreshPriority)$/;"	f	class:QCustomPlot	typeref:typename:void
replot	qcustomplot.h	/^  Q_SLOT void replot(QCustomPlot::RefreshPriority refreshPriority=QCustomPlot::rpRefreshHint);$/;"	p	class:QCustomPlot	typeref:typename:Q_SLOT void
replot	qcustomplot.h	/^  void replot();$/;"	p	class:QCPLayer	typeref:typename:void
report_error	spdlog/fmt/bundled/format-inl.h	/^void report_error(FormatFunc func, int error_code, string_view message) FMT_NOEXCEPT$/;"	f	namespace:__anonb519b34f0110	typeref:typename:void
report_error	spdlog/fmt/bundled/format.cc	/^void report_error(FormatFunc func, int error_code,$/;"	f	namespace:fmt::__anonf3b7881d0110	typeref:typename:void
report_system_error	spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC void report_system_error(int error_code, fmt::string_view message) FMT_NOEXCEPT$/;"	f	typeref:typename:FMT_FUNC void
report_system_error	spdlog/fmt/bundled/format.cc	/^FMT_FUNC void report_system_error($/;"	f	namespace:fmt	typeref:typename:FMT_FUNC void
report_system_error	spdlog/fmt/bundled/format.h	/^FMT_API void report_system_error(int error_code, StringRef message) FMT_NOEXCEPT;$/;"	p	namespace:fmt	typeref:typename:FMT_API void
report_unhandled_arg	spdlog/fmt/bundled/format.h	/^    void report_unhandled_arg() {}$/;"	f	class:fmt::ArgVisitor	typeref:typename:void
report_unhandled_arg	spdlog/fmt/bundled/printf.h	/^    void report_unhandled_arg()$/;"	f	class:fmt::internal::PrecisionHandler	typeref:typename:void
report_unhandled_arg	spdlog/fmt/bundled/printf.h	/^    void report_unhandled_arg()$/;"	f	class:fmt::internal::WidthHandler	typeref:typename:void
report_unknown_type	spdlog/fmt/bundled/format.cc	/^FMT_FUNC void internal::report_unknown_type(char code, const char *type) {$/;"	f	class:fmt::internal	typeref:typename:FMT_FUNC void
report_unknown_type	spdlog/fmt/bundled/format.h	/^FMT_API FMT_NORETURN void report_unknown_type(char code, const char *type);$/;"	p	namespace:fmt::internal	typeref:typename:FMT_API FMT_NORETURN void
report_windows_error	spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC void report_windows_error(int error_code, fmt::string_view message) FMT_NOEXCEPT$/;"	f	typeref:typename:FMT_FUNC void
report_windows_error	spdlog/fmt/bundled/format.cc	/^FMT_FUNC void report_windows_error($/;"	f	namespace:fmt	typeref:typename:FMT_FUNC void
report_windows_error	spdlog/fmt/bundled/format.h	/^FMT_API void report_windows_error(int error_code, StringRef message) FMT_NOEXCEPT;$/;"	p	namespace:fmt	typeref:typename:FMT_API void
req_	http-request.h	/^    http::request<http::string_body> req_;$/;"	m	class:HTTPSession	typeref:typename:http::request<http::string_body>
req_complete_setup	simple.pb-c.h	/^  ReqCompleteSetup *req_complete_setup;$/;"	m	struct:_ToHi	typeref:typename:ReqCompleteSetup *
req_complete_setup	simple.proto	/^    optional ReqCompleteSetup req_complete_setup = 204;$/;"	f
req_complete_setup__descriptor	simple.pb-c.c	/^const ProtobufCMessageDescriptor req_complete_setup__descriptor =$/;"	v	typeref:typename:const ProtobufCMessageDescriptor
req_complete_setup__field_descriptors	simple.pb-c.c	/^static const ProtobufCFieldDescriptor req_complete_setup__field_descriptors[2] =$/;"	v	typeref:typename:const ProtobufCFieldDescriptor[2]	file:
req_complete_setup__field_indices_by_name	simple.pb-c.c	/^static const unsigned req_complete_setup__field_indices_by_name[] = {$/;"	v	typeref:typename:const unsigned[]	file:
req_complete_setup__free_unpacked	simple.pb-c.c	/^void   req_complete_setup__free_unpacked$/;"	f	typeref:typename:void
req_complete_setup__free_unpacked	simple.pb-c.h	/^void   req_complete_setup__free_unpacked$/;"	p	typeref:typename:void
req_complete_setup__get_packed_size	simple.pb-c.c	/^size_t req_complete_setup__get_packed_size$/;"	f	typeref:typename:size_t
req_complete_setup__get_packed_size	simple.pb-c.h	/^size_t req_complete_setup__get_packed_size$/;"	p	typeref:typename:size_t
req_complete_setup__init	simple.pb-c.c	/^void   req_complete_setup__init$/;"	f	typeref:typename:void
req_complete_setup__init	simple.pb-c.h	/^void   req_complete_setup__init$/;"	p	typeref:typename:void
req_complete_setup__number_ranges	simple.pb-c.c	/^static const ProtobufCIntRange req_complete_setup__number_ranges[1 + 1] =$/;"	v	typeref:typename:const ProtobufCIntRange[]	file:
req_complete_setup__pack	simple.pb-c.c	/^size_t req_complete_setup__pack$/;"	f	typeref:typename:size_t
req_complete_setup__pack	simple.pb-c.h	/^size_t req_complete_setup__pack$/;"	p	typeref:typename:size_t
req_complete_setup__pack_to_buffer	simple.pb-c.c	/^size_t req_complete_setup__pack_to_buffer$/;"	f	typeref:typename:size_t
req_complete_setup__pack_to_buffer	simple.pb-c.h	/^size_t req_complete_setup__pack_to_buffer$/;"	p	typeref:typename:size_t
req_complete_setup__unpack	simple.pb-c.c	/^       req_complete_setup__unpack$/;"	f	typeref:typename:ReqCompleteSetup *
req_complete_setup__unpack	simple.pb-c.h	/^       req_complete_setup__unpack$/;"	p	typeref:typename:ReqCompleteSetup *
req_service_key	simple.pb-c.h	/^  uint32_t req_service_key;$/;"	m	struct:_ToHi	typeref:typename:uint32_t
req_service_key	simple.proto	/^    optional uint32 req_service_key = 203;$/;"	f
request	http-request.h	/^    static void request( $/;"	f	class:HTTPSession	typeref:typename:void
requestActivateAll	gui.h	/^    bool requestActivateAll = false;$/;"	m	class:ClientWindow	typeref:typename:bool
requestSerialKey	gui.h	/^    bool requestSerialKey = false;$/;"	m	class:ClientWindow	typeref:typename:bool
request_bandwidth	simple.pb-c.h	/^  uint32_t request_bandwidth;$/;"	m	struct:_ToHost	typeref:typename:uint32_t
request_bandwidth	simple.proto	/^    optional uint32 request_bandwidth = 10; $/;"	f
request_mic_loop_back	simple.pb-c.h	/^  uint32_t request_mic_loop_back;$/;"	m	struct:_ToHi	typeref:typename:uint32_t
request_mic_loop_back	simple.proto	/^    optional uint32 request_mic_loop_back = 105;$/;"	f
request_st_info	simple.pb-c.h	/^  uint32_t request_st_info;$/;"	m	struct:_ToSt	typeref:typename:uint32_t
request_st_info	simple.proto	/^    optional uint32 request_st_info = 7; \/\/ st 에게 요청하는 정보, StInfo bitwise 연산/;"	f
request_start_qc	simple.pb-c.h	/^  uint32_t request_start_qc;$/;"	m	struct:_ToHost	typeref:typename:uint32_t
request_start_qc	simple.proto	/^    optional uint32 request_start_qc = 9;$/;"	f
request_stop_qc	simple.pb-c.h	/^  uint32_t request_stop_qc;$/;"	m	struct:_ToHi	typeref:typename:uint32_t
request_stop_qc	simple.proto	/^    optional uint32 request_stop_qc = 104; $/;"	f
require_numeric_argument	spdlog/fmt/bundled/format.h	/^inline void require_numeric_argument(const Arg &arg, char spec)$/;"	f	namespace:fmt::internal	typeref:typename:void
require_wchar	spdlog/fmt/bundled/core.h	/^    require_wchar<typename C::char_type>();$/;"	p	namespace:internal
require_wchar	spdlog/fmt/bundled/core.h	/^inline void require_wchar()$/;"	f	namespace:internal	typeref:typename:void
required_field_get_packed_size	protobuf-c/protobuf-c.c	/^required_field_get_packed_size(const ProtobufCFieldDescriptor *field,$/;"	f	typeref:typename:size_t	file:
required_field_pack	protobuf-c/protobuf-c.c	/^required_field_pack(const ProtobufCFieldDescriptor *field,$/;"	f	typeref:typename:size_t	file:
required_field_pack_to_buffer	protobuf-c/protobuf-c.c	/^required_field_pack_to_buffer(const ProtobufCFieldDescriptor *field,$/;"	f	typeref:typename:size_t	file:
res_	http-request.h	/^    http::response<http::string_body> res_; $/;"	m	class:HTTPSession	typeref:typename:http::response<http::string_body>
resample	stb_image.h	/^   resample_row_func resample;$/;"	m	struct:__anon84e4e8860808	typeref:typename:resample_row_func
resample_row_1	stb_image.h	/^static stbi_uc *resample_row_1(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f	typeref:typename:stbi_uc *
resample_row_func	stb_image.h	/^typedef stbi_uc *(*resample_row_func)(stbi_uc *out, stbi_uc *in0, stbi_uc *in1,$/;"	t	typeref:typename:stbi_uc * (*)(stbi_uc * out,stbi_uc * in0,stbi_uc * in1,int w,int hs)
resample_row_hv_2_kernel	stb_image.h	/^   stbi_uc *(*resample_row_hv_2_kernel)(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, /;"	m	struct:__anon84e4e8860608	typeref:typename:stbi_uc * (*)(stbi_uc * out,stbi_uc * in_near,stbi_uc * in_far,int w,int hs)
rescale	qcustomplot.cpp	/^void QCPAxis::rescale(bool onlyVisiblePlottables)$/;"	f	class:QCPAxis	typeref:typename:void
rescale	qcustomplot.h	/^  void rescale(bool onlyVisiblePlottables=false);$/;"	p	class:QCPAxis	typeref:typename:void
rescaleAxes	qcustomplot.cpp	/^void QCPAbstractPlottable::rescaleAxes(bool onlyEnlarge) const$/;"	f	class:QCPAbstractPlottable	typeref:typename:void
rescaleAxes	qcustomplot.cpp	/^void QCustomPlot::rescaleAxes(bool onlyVisiblePlottables)$/;"	f	class:QCustomPlot	typeref:typename:void
rescaleAxes	qcustomplot.h	/^  Q_SLOT void rescaleAxes(bool onlyVisiblePlottables=false);$/;"	p	class:QCustomPlot	typeref:typename:Q_SLOT void
rescaleAxes	qcustomplot.h	/^  void rescaleAxes(bool onlyEnlarge=false) const;$/;"	p	class:QCPAbstractPlottable	typeref:typename:void
rescaleDataRange	qcustomplot.cpp	/^void QCPColorMap::rescaleDataRange(bool recalculateDataBounds)$/;"	f	class:QCPColorMap	typeref:typename:void
rescaleDataRange	qcustomplot.cpp	/^void QCPColorScale::rescaleDataRange(bool onlyVisibleMaps)$/;"	f	class:QCPColorScale	typeref:typename:void
rescaleDataRange	qcustomplot.h	/^  void rescaleDataRange(bool onlyVisibleMaps);$/;"	p	class:QCPColorScale	typeref:typename:void
rescaleDataRange	qcustomplot.h	/^  void rescaleDataRange(bool recalculateDataBounds=false);$/;"	p	class:QCPColorMap	typeref:typename:void
rescaleKeyAxis	qcustomplot.cpp	/^void QCPAbstractPlottable::rescaleKeyAxis(bool onlyEnlarge) const$/;"	f	class:QCPAbstractPlottable	typeref:typename:void
rescaleKeyAxis	qcustomplot.h	/^  void rescaleKeyAxis(bool onlyEnlarge=false) const;$/;"	p	class:QCPAbstractPlottable	typeref:typename:void
rescaleValueAxis	qcustomplot.cpp	/^void QCPAbstractPlottable::rescaleValueAxis(bool onlyEnlarge, bool inKeyRange) const$/;"	f	class:QCPAbstractPlottable	typeref:typename:void
rescaleValueAxis	qcustomplot.h	/^  void rescaleValueAxis(bool onlyEnlarge=false, bool inKeyRange=false) const;$/;"	p	class:QCPAbstractPlottable	typeref:typename:void
reserve	spdlog/fmt/bundled/core.h	/^    void reserve(std::size_t new_capacity)$/;"	f	class:internal::basic_buffer	typeref:typename:void
reserve	spdlog/fmt/bundled/format.h	/^    void reserve(std::size_t capacity)$/;"	f	class:fmt::Buffer	typeref:typename:void
reserved1	protobuf-c/protobuf-c.h	/^	void				*reserved1;$/;"	m	struct:ProtobufCEnumDescriptor	typeref:typename:void *
reserved1	protobuf-c/protobuf-c.h	/^	void				*reserved1;$/;"	m	struct:ProtobufCMessageDescriptor	typeref:typename:void *
reserved2	protobuf-c/protobuf-c.h	/^	void				*reserved2;$/;"	m	struct:ProtobufCEnumDescriptor	typeref:typename:void *
reserved2	protobuf-c/protobuf-c.h	/^	void				*reserved2;$/;"	m	struct:ProtobufCMessageDescriptor	typeref:typename:void *
reserved2	protobuf-c/protobuf-c.h	/^	void			*reserved2;$/;"	m	struct:ProtobufCFieldDescriptor	typeref:typename:void *
reserved3	protobuf-c/protobuf-c.h	/^	void				*reserved3;$/;"	m	struct:ProtobufCEnumDescriptor	typeref:typename:void *
reserved3	protobuf-c/protobuf-c.h	/^	void				*reserved3;$/;"	m	struct:ProtobufCMessageDescriptor	typeref:typename:void *
reserved3	protobuf-c/protobuf-c.h	/^	void			*reserved3;$/;"	m	struct:ProtobufCFieldDescriptor	typeref:typename:void *
reserved4	protobuf-c/protobuf-c.h	/^	void				*reserved4;$/;"	m	struct:ProtobufCEnumDescriptor	typeref:typename:void *
reserved_flags	protobuf-c/protobuf-c.h	/^	unsigned		reserved_flags;$/;"	m	struct:ProtobufCFieldDescriptor	typeref:typename:unsigned
reset	json.hpp	/^    void reset() noexcept$/;"	f	class:nlohmann::detail::lexer	typeref:typename:void
reset	spdlog/sinks/ansicolor_sink.h	/^    const std::string reset = "\\033[m";$/;"	m	class:spdlog::sinks::ansicolor_sink	typeref:typename:const std::string
reset_if_no_serial	simple.pb-c.h	/^  uint32_t reset_if_no_serial;$/;"	m	struct:_ToSt	typeref:typename:uint32_t
reset_if_no_serial	simple.proto	/^    optional uint32 reset_if_no_serial = 10; \/\/ 1 이면 시리얼이 특정 시간만큼 안들/;"	f
resize	spdlog/fmt/bundled/core.h	/^    void resize(std::size_t new_size)$/;"	f	class:internal::basic_buffer	typeref:typename:void
resize	spdlog/fmt/bundled/format.h	/^    void resize(std::size_t new_size)$/;"	f	class:fmt::Buffer	typeref:typename:void
resizeEvent	qcustomplot.cpp	/^void QCustomPlot::resizeEvent(QResizeEvent *event)$/;"	f	class:QCustomPlot	typeref:typename:void
resizeEvent	qcustomplot.h	/^  virtual void resizeEvent(QResizeEvent *event) Q_DECL_OVERRIDE;$/;"	p	class:QCustomPlot	typeref:typename:void
resolver_	http-request.h	/^    tcp::resolver resolver_;$/;"	m	class:HTTPSession	typeref:typename:tcp::resolver
restart_interval	stb_image.h	/^   int restart_interval, todo;$/;"	m	struct:__anon84e4e8860608	typeref:typename:int
restore	qcustomplot.cpp	/^void QCPPainter::restore()$/;"	f	class:QCPPainter	typeref:typename:void
restore	qcustomplot.h	/^  void restore();$/;"	p	class:QCPPainter	typeref:typename:void
result	qcustomplot.h	/^  QCPDataSelection result(a);$/;"	p	typeref:typename:QCPDataSelection
result_of	spdlog/fmt/bundled/core.h	/^struct result_of<F(Args...)>$/;"	s	namespace:internal
reverse	spdlog/sinks/ansicolor_sink.h	/^    const std::string reverse = "\\033[7m";$/;"	m	class:spdlog::sinks::ansicolor_sink	typeref:typename:const std::string
reverse_iterator	json.hpp	/^    using reverse_iterator = json_reverse_iterator<typename basic_json::iterator>;$/;"	t	class:nlohmann::basic_json	typeref:typename:json_reverse_iterator<typename basic_json::iterator>
reversedEndings	qcustomplot.h	/^  bool reversedEndings;$/;"	m	class:QCPAxisPainterPrivate	typeref:typename:bool
rgb	spdlog/fmt/bundled/colors.h	/^    FMT_CONSTEXPR_DECL rgb()$/;"	f	struct:rgb	typeref:typename:FMT_CONSTEXPR_DECL
rgb	spdlog/fmt/bundled/colors.h	/^    FMT_CONSTEXPR_DECL rgb(uint32_t hex)$/;"	f	struct:rgb	typeref:typename:FMT_CONSTEXPR_DECL
rgb	spdlog/fmt/bundled/colors.h	/^    FMT_CONSTEXPR_DECL rgb(uint8_t r_, uint8_t g_, uint8_t b_)$/;"	f	struct:rgb	typeref:typename:FMT_CONSTEXPR_DECL
rgb	spdlog/fmt/bundled/colors.h	/^struct rgb$/;"	s
right	protocol-struct.h	/^    int16_t right;$/;"	m	struct:CONTROL_REMOTE	typeref:typename:int16_t
right	qcustomplot.h	/^  QCPItemAnchor * const right;$/;"	m	class:QCPItemEllipse	typeref:typename:QCPItemAnchor * const
right	qcustomplot.h	/^  QCPItemAnchor * const right;$/;"	m	class:QCPItemPixmap	typeref:typename:QCPItemAnchor * const
right	qcustomplot.h	/^  QCPItemAnchor * const right;$/;"	m	class:QCPItemRect	typeref:typename:QCPItemAnchor * const
right	qcustomplot.h	/^  QCPItemAnchor * const right;$/;"	m	class:QCPItemText	typeref:typename:QCPItemAnchor * const
right	qcustomplot.h	/^  QCPItemPosition * const right;$/;"	m	class:QCPItemBracket	typeref:typename:QCPItemPosition * const
right	qcustomplot.h	/^  int right() const { return mRect.right(); }$/;"	f	class:QCPAxisRect	typeref:typename:int
right	simple.pb-c.h	/^  uint32_t right;$/;"	m	struct:_EncoderControl	typeref:typename:uint32_t
right	simple.pb-c.h	/^  uint32_t right;$/;"	m	struct:_LedControl	typeref:typename:uint32_t
right	simple.proto	/^    optional uint32 right = 2;$/;"	f
right_motor	qc-message.pb.h	/^inline ::google::protobuf::int32 Protocol::right_motor() const {$/;"	f	class:Protocol	typeref:typename:::google::protobuf::int32
right_motor	qc-message.proto	/^optional int32 right_motor = 3;$/;"	f
right_motor	simple.pb-c.h	/^  int32_t right_motor;$/;"	m	struct:_RoughMotorControl	typeref:typename:int32_t
right_motor	simple.pb-c.h	/^  int32_t right_motor;$/;"	m	struct:_SmoothMotorControlDeprecated	typeref:typename:int32_t
right_motor	simple.proto	/^    optional int32 right_motor = 2;		\/\/0~60rpm$/;"	f
right_motor	simple.proto	/^    optional int32 right_motor = 2;$/;"	f
rng	ks19937.cpp	/^std::mt19937 ks19937::rng;$/;"	m	class:ks19937	typeref:typename:std::mt19937
rng	ks19937.h	/^	static std::mt19937 rng;$/;"	m	struct:ks19937	typeref:typename:std::mt19937
roll	simple.pb-c.h	/^  float roll;$/;"	m	struct:_ToHi	typeref:typename:float
roll	simple.proto	/^    optional float roll = 13; 	\/\/rad$/;"	f
rosy_brown	spdlog/fmt/bundled/colors.h	/^    rosy_brown = 0xBC8F8F,              \/\/ rgb(188,143,143)$/;"	e	enum:color
rotate_	spdlog/sinks/rotating_file_sink.h	/^    void rotate_()$/;"	f	class:spdlog::sinks::SPDLOG_FINAL	typeref:typename:void
rotatedTotalBounds	qcustomplot.h	/^    QRect baseBounds, expBounds, suffixBounds, totalBounds, rotatedTotalBounds;$/;"	m	struct:QCPAxisPainterPrivate::TickLabelData	typeref:typename:QRect
rotating_file_sink	spdlog/sinks/file_sinks.h	/^    rotating_file_sink(filename_t base_filename, std::size_t max_size, std::size_t max_files)$/;"	f	class:spdlog::sinks::SPDLOG_FINAL
rotating_file_sink	spdlog/sinks/rotating_file_sink.h	/^    rotating_file_sink(filename_t base_filename, std::size_t max_size, std::size_t max_files)$/;"	f	class:spdlog::sinks::SPDLOG_FINAL
rotating_file_sink_mt	spdlog/sinks/file_sinks.h	/^using rotating_file_sink_mt = rotating_file_sink<std::mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:rotating_file_sink<std::mutex>
rotating_file_sink_mt	spdlog/sinks/rotating_file_sink.h	/^using rotating_file_sink_mt = rotating_file_sink<std::mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:rotating_file_sink<std::mutex>
rotating_file_sink_st	spdlog/sinks/file_sinks.h	/^using rotating_file_sink_st = rotating_file_sink<details::null_mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:rotating_file_sink<details::null_mutex>
rotating_file_sink_st	spdlog/sinks/rotating_file_sink.h	/^using rotating_file_sink_st = rotating_file_sink<details::null_mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:rotating_file_sink<details::null_mutex>
rotating_logger_mt	spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::rotating_logger_mt($/;"	f	class:spdlog	typeref:typename:std::shared_ptr<spdlog::logger>
rotating_logger_mt	spdlog/sinks/rotating_file_sink.h	/^inline std::shared_ptr<logger> rotating_logger_mt($/;"	f	namespace:spdlog	typeref:typename:std::shared_ptr<logger>
rotating_logger_mt	spdlog/spdlog.h	/^std::shared_ptr<logger> rotating_logger_mt($/;"	p	namespace:spdlog	typeref:typename:std::shared_ptr<logger>
rotating_logger_st	spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::rotating_logger_st($/;"	f	class:spdlog	typeref:typename:std::shared_ptr<spdlog::logger>
rotating_logger_st	spdlog/sinks/rotating_file_sink.h	/^inline std::shared_ptr<logger> rotating_logger_st($/;"	f	namespace:spdlog	typeref:typename:std::shared_ptr<logger>
rotating_logger_st	spdlog/spdlog.h	/^std::shared_ptr<logger> rotating_logger_st($/;"	p	namespace:spdlog	typeref:typename:std::shared_ptr<logger>
rotation	qcustomplot.h	/^  Q_PROPERTY(double rotation READ rotation WRITE setRotation)$/;"	p	class:QCPItemText	typeref:typename:double
rotation	qcustomplot.h	/^  double rotation() const { return mRotation; }$/;"	f	class:QCPItemText	typeref:typename:double
rotation_h_	spdlog/sinks/daily_file_sink.h	/^    int rotation_h_;$/;"	m	class:spdlog::sinks::SPDLOG_FINAL	typeref:typename:int
rotation_m_	spdlog/sinks/daily_file_sink.h	/^    int rotation_m_;$/;"	m	class:spdlog::sinks::SPDLOG_FINAL	typeref:typename:int
rotation_tp_	spdlog/sinks/daily_file_sink.h	/^    log_clock::time_point rotation_tp_;$/;"	m	class:spdlog::sinks::SPDLOG_FINAL	typeref:typename:log_clock::time_point
rough_motor_control	simple.pb-c.h	/^  RoughMotorControl *rough_motor_control;$/;"	m	struct:_ToSt	typeref:typename:RoughMotorControl *
rough_motor_control	simple.proto	/^    optional RoughMotorControl rough_motor_control = 2;$/;"	f
rough_motor_control__descriptor	simple.pb-c.c	/^const ProtobufCMessageDescriptor rough_motor_control__descriptor =$/;"	v	typeref:typename:const ProtobufCMessageDescriptor
rough_motor_control__field_descriptors	simple.pb-c.c	/^static const ProtobufCFieldDescriptor rough_motor_control__field_descriptors[2] =$/;"	v	typeref:typename:const ProtobufCFieldDescriptor[2]	file:
rough_motor_control__field_indices_by_name	simple.pb-c.c	/^static const unsigned rough_motor_control__field_indices_by_name[] = {$/;"	v	typeref:typename:const unsigned[]	file:
rough_motor_control__free_unpacked	simple.pb-c.c	/^void   rough_motor_control__free_unpacked$/;"	f	typeref:typename:void
rough_motor_control__free_unpacked	simple.pb-c.h	/^void   rough_motor_control__free_unpacked$/;"	p	typeref:typename:void
rough_motor_control__get_packed_size	simple.pb-c.c	/^size_t rough_motor_control__get_packed_size$/;"	f	typeref:typename:size_t
rough_motor_control__get_packed_size	simple.pb-c.h	/^size_t rough_motor_control__get_packed_size$/;"	p	typeref:typename:size_t
rough_motor_control__init	simple.pb-c.c	/^void   rough_motor_control__init$/;"	f	typeref:typename:void
rough_motor_control__init	simple.pb-c.h	/^void   rough_motor_control__init$/;"	p	typeref:typename:void
rough_motor_control__number_ranges	simple.pb-c.c	/^static const ProtobufCIntRange rough_motor_control__number_ranges[1 + 1] =$/;"	v	typeref:typename:const ProtobufCIntRange[]	file:
rough_motor_control__pack	simple.pb-c.c	/^size_t rough_motor_control__pack$/;"	f	typeref:typename:size_t
rough_motor_control__pack	simple.pb-c.h	/^size_t rough_motor_control__pack$/;"	p	typeref:typename:size_t
rough_motor_control__pack_to_buffer	simple.pb-c.c	/^size_t rough_motor_control__pack_to_buffer$/;"	f	typeref:typename:size_t
rough_motor_control__pack_to_buffer	simple.pb-c.h	/^size_t rough_motor_control__pack_to_buffer$/;"	p	typeref:typename:size_t
rough_motor_control__unpack	simple.pb-c.c	/^       rough_motor_control__unpack$/;"	f	typeref:typename:RoughMotorControl *
rough_motor_control__unpack	simple.pb-c.h	/^       rough_motor_control__unpack$/;"	p	typeref:typename:RoughMotorControl *
rowColToIndex	qcustomplot.cpp	/^int QCPLayoutGrid::rowColToIndex(int row, int column) const$/;"	f	class:QCPLayoutGrid	typeref:typename:int
rowColToIndex	qcustomplot.h	/^  int rowColToIndex(int row, int column) const;$/;"	p	class:QCPLayoutGrid	typeref:typename:int
rowCount	qcustomplot.h	/^  Q_PROPERTY(int rowCount READ rowCount)$/;"	p	class:QCPLayoutGrid	typeref:typename:int
rowCount	qcustomplot.h	/^  int rowCount() const { return mElements.size(); }$/;"	f	class:QCPLayoutGrid	typeref:typename:int
rowSpacing	qcustomplot.h	/^  Q_PROPERTY(int rowSpacing READ rowSpacing WRITE setRowSpacing)$/;"	p	class:QCPLayoutGrid	typeref:typename:int
rowSpacing	qcustomplot.h	/^  int rowSpacing() const { return mRowSpacing; }$/;"	f	class:QCPLayoutGrid	typeref:typename:int
rowStretchFactors	qcustomplot.h	/^  QList<double> rowStretchFactors() const { return mRowStretchFactors; }$/;"	f	class:QCPLayoutGrid	typeref:typename:QList<double>
royal_blue	spdlog/fmt/bundled/colors.h	/^    royal_blue = 0x4169E1,              \/\/ rgb(65,105,225)$/;"	e	enum:color
rpImmediateRefresh	qcustomplot.h	/^  enum RefreshPriority { rpImmediateRefresh \/\/\/< Replots immediately and repaints the widget /;"	e	enum:QCustomPlot::RefreshPriority
rpQueuedRefresh	qcustomplot.h	/^                         ,rpQueuedRefresh   \/\/\/< Replots immediately, but queues the widget r/;"	e	enum:QCustomPlot::RefreshPriority
rpQueuedReplot	qcustomplot.h	/^                         ,rpQueuedReplot    \/\/\/< Queues the entire replot for the next event /;"	e	enum:QCustomPlot::RefreshPriority
rpRefreshHint	qcustomplot.h	/^                         ,rpRefreshHint     \/\/\/< Whether to use immediate or queued refresh d/;"	e	enum:QCustomPlot::RefreshPriority
rsp_complete_setup	simple.pb-c.h	/^  uint32_t rsp_complete_setup;$/;"	m	struct:_ToHost	typeref:typename:uint32_t
rsp_complete_setup	simple.proto	/^    optional uint32 rsp_complete_setup = 101; \/\/ ReqCompleteSetup 의 응답$/;"	f
rsp_service_key	simple.pb-c.h	/^  RspServiceKey *rsp_service_key;$/;"	m	struct:_ToHost	typeref:typename:RspServiceKey *
rsp_service_key	simple.proto	/^    optional RspServiceKey rsp_service_key = 100; \/\/ ReqServiceKey 의 응답$/;"	f
rsp_service_key__descriptor	simple.pb-c.c	/^const ProtobufCMessageDescriptor rsp_service_key__descriptor =$/;"	v	typeref:typename:const ProtobufCMessageDescriptor
rsp_service_key__field_descriptors	simple.pb-c.c	/^static const ProtobufCFieldDescriptor rsp_service_key__field_descriptors[4] =$/;"	v	typeref:typename:const ProtobufCFieldDescriptor[4]	file:
rsp_service_key__field_indices_by_name	simple.pb-c.c	/^static const unsigned rsp_service_key__field_indices_by_name[] = {$/;"	v	typeref:typename:const unsigned[]	file:
rsp_service_key__free_unpacked	simple.pb-c.c	/^void   rsp_service_key__free_unpacked$/;"	f	typeref:typename:void
rsp_service_key__free_unpacked	simple.pb-c.h	/^void   rsp_service_key__free_unpacked$/;"	p	typeref:typename:void
rsp_service_key__get_packed_size	simple.pb-c.c	/^size_t rsp_service_key__get_packed_size$/;"	f	typeref:typename:size_t
rsp_service_key__get_packed_size	simple.pb-c.h	/^size_t rsp_service_key__get_packed_size$/;"	p	typeref:typename:size_t
rsp_service_key__init	simple.pb-c.c	/^void   rsp_service_key__init$/;"	f	typeref:typename:void
rsp_service_key__init	simple.pb-c.h	/^void   rsp_service_key__init$/;"	p	typeref:typename:void
rsp_service_key__number_ranges	simple.pb-c.c	/^static const ProtobufCIntRange rsp_service_key__number_ranges[1 + 1] =$/;"	v	typeref:typename:const ProtobufCIntRange[]	file:
rsp_service_key__pack	simple.pb-c.c	/^size_t rsp_service_key__pack$/;"	f	typeref:typename:size_t
rsp_service_key__pack	simple.pb-c.h	/^size_t rsp_service_key__pack$/;"	p	typeref:typename:size_t
rsp_service_key__pack_to_buffer	simple.pb-c.c	/^size_t rsp_service_key__pack_to_buffer$/;"	f	typeref:typename:size_t
rsp_service_key__pack_to_buffer	simple.pb-c.h	/^size_t rsp_service_key__pack_to_buffer$/;"	p	typeref:typename:size_t
rsp_service_key__unpack	simple.pb-c.c	/^       rsp_service_key__unpack$/;"	f	typeref:typename:RspServiceKey *
rsp_service_key__unpack	simple.pb-c.h	/^       rsp_service_key__unpack$/;"	p	typeref:typename:RspServiceKey *
rspeed	simple.pb-c.h	/^  int32_t rspeed;$/;"	m	struct:_ToHi	typeref:typename:int32_t
rspeed	simple.proto	/^    optional int32 rspeed = 17; \/\/-2500~2500$/;"	f
ruDotsPerCentimeter	qcustomplot.h	/^                      ,ruDotsPerCentimeter \/\/\/< Resolution is given in dots per centimeter (d/;"	e	enum:QCP::ResolutionUnit
ruDotsPerInch	qcustomplot.h	/^                      ,ruDotsPerInch       \/\/\/< Resolution is given in dots per inch (DPI\/PP/;"	e	enum:QCP::ResolutionUnit
ruDotsPerMeter	qcustomplot.h	/^enum ResolutionUnit { ruDotsPerMeter       \/\/\/< Resolution is given in dots per meter (dpm)$/;"	e	enum:QCP::ResolutionUnit
run	http-request.h	/^    run($/;"	f	class:HTTPSession	typeref:typename:void
run	spdlog/fmt/bundled/format-inl.h	/^        int run()$/;"	f	class:__anonb519b34f0110::safe_strerror::dispatcher	typeref:typename:int
run	spdlog/fmt/bundled/format.cc	/^    int run() {$/;"	f	class:fmt::__anonf3b7881d0110::safe_strerror::StrError	typeref:typename:int	file:
run	spdlog/fmt/bundled/time.h	/^        bool run()$/;"	f	struct:fmt::gmtime::GMTime	typeref:typename:bool
run	spdlog/fmt/bundled/time.h	/^        bool run()$/;"	f	struct:fmt::localtime::LocalTime	typeref:typename:bool
rx	qcustomplot.h	/^  double &rx() { return mX; }$/;"	f	class:QCPVector2D	typeref:typename:double &
ry	qcustomplot.h	/^  double &ry() { return mY; }$/;"	f	class:QCPVector2D	typeref:typename:double &
s	stb_image.h	/^   stbi__context *s;$/;"	m	struct:__anon84e4e8860608	typeref:typename:stbi__context *
s	stb_image.h	/^   stbi__context *s;$/;"	m	struct:__anon84e4e8860c08	typeref:typename:stbi__context *
s1	tcp-packet.h	/^    u8 s1;$/;"	m	struct:__anonce98fa070408	typeref:typename:u8
s16	tcp-packet.h	/^typedef	signed short s16;$/;"	t	typeref:typename:signed short
s2	tcp-packet.h	/^    u8 s2;$/;"	m	struct:__anonce98fa070408	typeref:typename:u8
s3	tcp-packet.h	/^    u8 s3;$/;"	m	struct:__anonce98fa070408	typeref:typename:u8
s4	tcp-packet.h	/^    u8 s4;$/;"	m	struct:__anonce98fa070408	typeref:typename:u8
s8	tcp-packet.h	/^typedef signed char s8;$/;"	t	typeref:typename:signed char
saddle_brown	spdlog/fmt/bundled/colors.h	/^    saddle_brown = 0x8B4513,            \/\/ rgb(139,69,19)$/;"	e	enum:color
safe_strerror	spdlog/fmt/bundled/format-inl.h	/^int safe_strerror(int error_code, char *&buffer, std::size_t buffer_size) FMT_NOEXCEPT$/;"	f	namespace:__anonb519b34f0110	typeref:typename:int
safe_strerror	spdlog/fmt/bundled/format.cc	/^int safe_strerror($/;"	f	namespace:fmt::__anonf3b7881d0110	typeref:typename:int
salmon	spdlog/fmt/bundled/colors.h	/^    salmon = 0xFA8072,                  \/\/ rgb(250,128,114)$/;"	e	enum:color
sandy_brown	spdlog/fmt/bundled/colors.h	/^    sandy_brown = 0xF4A460,             \/\/ rgb(244,164,96)$/;"	e	enum:color
sanitizedForLinScale	qcustomplot.cpp	/^QCPRange QCPRange::sanitizedForLinScale() const$/;"	f	class:QCPRange	typeref:typename:QCPRange
sanitizedForLinScale	qcustomplot.h	/^  QCPRange sanitizedForLinScale() const;$/;"	p	class:QCPRange	typeref:typename:QCPRange
sanitizedForLogScale	qcustomplot.cpp	/^QCPRange QCPRange::sanitizedForLogScale() const$/;"	f	class:QCPRange	typeref:typename:QCPRange
sanitizedForLogScale	qcustomplot.h	/^  QCPRange sanitizedForLogScale() const;$/;"	p	class:QCPRange	typeref:typename:QCPRange
save	qcustomplot.cpp	/^void QCPPainter::save()$/;"	f	class:QCPPainter	typeref:typename:void
save	qcustomplot.h	/^  void save();$/;"	p	class:QCPPainter	typeref:typename:void
saveBmp	qcustomplot.cpp	/^bool QCustomPlot::saveBmp(const QString &fileName, int width, int height, double scale, int reso/;"	f	class:QCustomPlot	typeref:typename:bool
saveBmp	qcustomplot.h	/^  bool saveBmp(const QString &fileName, int width=0, int height=0, double scale=1.0, int resolut/;"	p	class:QCustomPlot	typeref:typename:bool
saveJpg	qcustomplot.cpp	/^bool QCustomPlot::saveJpg(const QString &fileName, int width, int height, double scale, int qual/;"	f	class:QCustomPlot	typeref:typename:bool
saveJpg	qcustomplot.h	/^  bool saveJpg(const QString &fileName, int width=0, int height=0, double scale=1.0, int quality/;"	p	class:QCustomPlot	typeref:typename:bool
savePdf	qcustomplot.cpp	/^bool QCustomPlot::savePdf(const QString &fileName, int width, int height, QCP::ExportPen exportP/;"	f	class:QCustomPlot	typeref:typename:bool
savePdf	qcustomplot.h	/^  bool savePdf(const QString &fileName, int width=0, int height=0, QCP::ExportPen exportPen=QCP:/;"	p	class:QCustomPlot	typeref:typename:bool
savePng	qcustomplot.cpp	/^bool QCustomPlot::savePng(const QString &fileName, int width, int height, double scale, int qual/;"	f	class:QCustomPlot	typeref:typename:bool
savePng	qcustomplot.h	/^  bool savePng(const QString &fileName, int width=0, int height=0, double scale=1.0, int quality/;"	p	class:QCustomPlot	typeref:typename:bool
saveRastered	qcustomplot.cpp	/^bool QCustomPlot::saveRastered(const QString &fileName, int width, int height, double scale, con/;"	f	class:QCustomPlot	typeref:typename:bool
saveRastered	qcustomplot.h	/^  bool saveRastered(const QString &fileName, int width, int height, double scale, const char *fo/;"	p	class:QCustomPlot	typeref:typename:bool
sb	json.hpp	/^    std::streambuf& sb;$/;"	m	class:nlohmann::detail::input_stream_adapter	typeref:typename:std::streambuf &
scaleRange	qcustomplot.cpp	/^void QCPAxis::scaleRange(double factor)$/;"	f	class:QCPAxis	typeref:typename:void
scaleRange	qcustomplot.cpp	/^void QCPAxis::scaleRange(double factor, double center)$/;"	f	class:QCPAxis	typeref:typename:void
scaleRange	qcustomplot.h	/^  void scaleRange(double factor);$/;"	p	class:QCPAxis	typeref:typename:void
scaleRange	qcustomplot.h	/^  void scaleRange(double factor, double center);$/;"	p	class:QCPAxis	typeref:typename:void
scaleStrategy	qcustomplot.h	/^  ScaleStrategy scaleStrategy() const { return mScaleStrategy; }$/;"	f	class:QCPAxisTickerFixed	typeref:typename:ScaleStrategy
scaleType	qcustomplot.h	/^  Q_PROPERTY(ScaleType scaleType READ scaleType WRITE setScaleType NOTIFY scaleTypeChanged)$/;"	p	class:QCPAxis	typeref:typename:ScaleType
scaleType	qcustomplot.h	/^  ScaleType scaleType() const { return mScaleType; }$/;"	f	class:QCPAxis	typeref:typename:ScaleType
scaleTypeChanged	qcustomplot.h	/^  void scaleTypeChanged(QCPAxis::ScaleType scaleType);$/;"	S	class:QCPAxis	typeref:typename:void
scaleTypeChanged	qcustomplot.h	/^  void scaleTypeChanged(QCPAxis::ScaleType scaleType);$/;"	p	class:QCPAxis	typeref:typename:void
scaled	qcustomplot.h	/^  Q_PROPERTY(bool scaled READ scaled WRITE setScaled)$/;"	p	class:QCPItemPixmap	typeref:typename:bool
scaled	qcustomplot.h	/^  bool scaled() const { return mScaled; }$/;"	f	class:QCPItemPixmap	typeref:typename:bool
scan	json.hpp	/^    token_type scan()$/;"	f	class:nlohmann::detail::lexer	typeref:typename:token_type
scanAP	ble.cpp	/^int BLESession::scanAP() {$/;"	f	class:BLESession	typeref:typename:int
scanAP	ble.h	/^    int scanAP();$/;"	p	class:BLESession	typeref:typename:int
scan_length_prefixed_data	protobuf-c/protobuf-c.c	/^scan_length_prefixed_data(size_t len, const uint8_t *data,$/;"	f	typeref:typename:uint32_t	file:
scan_literal	json.hpp	/^    token_type scan_literal(const char* literal_text, const std::size_t length,$/;"	f	class:nlohmann::detail::lexer	typeref:typename:token_type
scan_n	stb_image.h	/^   int scan_n, order[4];$/;"	m	struct:__anon84e4e8860608	typeref:typename:int
scan_number	json.hpp	/^    token_type scan_number()$/;"	f	class:nlohmann::detail::lexer	typeref:typename:token_type
scan_string	json.hpp	/^    token_type scan_string()$/;"	f	class:nlohmann::detail::lexer	typeref:typename:token_type
scan_varint	protobuf-c/protobuf-c.c	/^scan_varint(unsigned len, const uint8_t *data)$/;"	f	typeref:typename:unsigned	file:
scatterSkip	qcustomplot.h	/^  Q_PROPERTY(int scatterSkip READ scatterSkip WRITE setScatterSkip)$/;"	p	class:QCPCurve	typeref:typename:int
scatterSkip	qcustomplot.h	/^  Q_PROPERTY(int scatterSkip READ scatterSkip WRITE setScatterSkip)$/;"	p	class:QCPGraph	typeref:typename:int
scatterSkip	qcustomplot.h	/^  int scatterSkip() const { return mScatterSkip; }$/;"	f	class:QCPCurve	typeref:typename:int
scatterSkip	qcustomplot.h	/^  int scatterSkip() const { return mScatterSkip; }$/;"	f	class:QCPGraph	typeref:typename:int
scatterStyle	qcustomplot.h	/^  QCPScatterStyle scatterStyle() const { return mScatterStyle; }$/;"	f	class:QCPCurve	typeref:typename:QCPScatterStyle
scatterStyle	qcustomplot.h	/^  QCPScatterStyle scatterStyle() const { return mScatterStyle; }$/;"	f	class:QCPGraph	typeref:typename:QCPScatterStyle
scatterStyle	qcustomplot.h	/^  QCPScatterStyle scatterStyle() const { return mScatterStyle; }$/;"	f	class:QCPSelectionDecorator	typeref:typename:QCPScatterStyle
scatterStyle	qcustomplot.h	/^  Q_PROPERTY(QCPScatterStyle scatterStyle READ scatterStyle WRITE setScatterStyle)$/;"	p	class:QCPCurve	typeref:typename:QCPScatterStyle
scatterStyle	qcustomplot.h	/^  Q_PROPERTY(QCPScatterStyle scatterStyle READ scatterStyle WRITE setScatterStyle)$/;"	p	class:QCPGraph	typeref:typename:QCPScatterStyle
schema	qc-message.pb.h	/^  static const ::google::protobuf::internal::ParseTable schema[2];$/;"	m	struct:protobuf_qc_2dmessage_2eproto::TableStruct	typeref:typename:const::google::protobuf::internal::ParseTable[2]
scrInnerRect	qcustomplot.h	/^  enum SizeConstraintRect { scrInnerRect \/\/\/< Minimum\/Maximum size constraints apply to inne/;"	e	enum:QCPLayoutElement::SizeConstraintRect
scrOuterRect	qcustomplot.h	/^                            , scrOuterRect \/\/\/< Minimum\/Maximum size constraints apply to ou/;"	e	enum:QCPLayoutElement::SizeConstraintRect
sdBoth	qcustomplot.h	/^                  ,sdBoth     \/\/\/< Both sign domains, including zero, i.e. all numbers$/;"	e	enum:QCP::SignDomain
sdNegative	qcustomplot.h	/^enum SignDomain { sdNegative  \/\/\/< The negative sign domain, i.e. numbers smaller than zero$/;"	e	enum:QCP::SignDomain
sdPositive	qcustomplot.h	/^                  ,sdPositive \/\/\/< The positive sign domain, i.e. numbers greater than zero$/;"	e	enum:QCP::SignDomain
sea_green	spdlog/fmt/bundled/colors.h	/^    sea_green = 0x2E8B57,               \/\/ rgb(46,139,87)$/;"	e	enum:color
sea_shell	spdlog/fmt/bundled/colors.h	/^    sea_shell = 0xFFF5EE,               \/\/ rgb(255,245,238)$/;"	e	enum:color
seed	ks19937.h	/^	static void seed(std::mt19937::result_type new_seed = std::mt19937::default_seed) {$/;"	f	struct:ks19937	typeref:typename:void
segmentsIntersect	qcustomplot.cpp	/^bool QCPGraph::segmentsIntersect(double aLower, double aUpper, double bLower, double bUpper, int/;"	f	class:QCPGraph	typeref:typename:bool
segmentsIntersect	qcustomplot.h	/^  bool segmentsIntersect(double aLower, double aUpper, double bLower, double bUpper, int &bPrece/;"	p	class:QCPGraph	typeref:typename:bool
selectEvent	qcustomplot.cpp	/^void QCPAbstractItem::selectEvent(QMouseEvent *event, bool additive, const QVariant &details, bo/;"	f	class:QCPAbstractItem	typeref:typename:void
selectEvent	qcustomplot.cpp	/^void QCPAbstractLegendItem::selectEvent(QMouseEvent *event, bool additive, const QVariant &detai/;"	f	class:QCPAbstractLegendItem	typeref:typename:void
selectEvent	qcustomplot.cpp	/^void QCPAbstractPlottable::selectEvent(QMouseEvent *event, bool additive, const QVariant &detail/;"	f	class:QCPAbstractPlottable	typeref:typename:void
selectEvent	qcustomplot.cpp	/^void QCPAxis::selectEvent(QMouseEvent *event, bool additive, const QVariant &details, bool *sele/;"	f	class:QCPAxis	typeref:typename:void
selectEvent	qcustomplot.cpp	/^void QCPLayerable::selectEvent(QMouseEvent *event, bool additive, const QVariant &details, bool /;"	f	class:QCPLayerable	typeref:typename:void
selectEvent	qcustomplot.cpp	/^void QCPLegend::selectEvent(QMouseEvent *event, bool additive, const QVariant &details, bool *se/;"	f	class:QCPLegend	typeref:typename:void
selectEvent	qcustomplot.cpp	/^void QCPTextElement::selectEvent(QMouseEvent *event, bool additive, const QVariant &details, boo/;"	f	class:QCPTextElement	typeref:typename:void
selectEvent	qcustomplot.h	/^  virtual void selectEvent(QMouseEvent *event, bool additive, const QVariant &details, bool *sel/;"	p	class:QCPAbstractItem	typeref:typename:void
selectEvent	qcustomplot.h	/^  virtual void selectEvent(QMouseEvent *event, bool additive, const QVariant &details, bool *sel/;"	p	class:QCPAbstractLegendItem	typeref:typename:void
selectEvent	qcustomplot.h	/^  virtual void selectEvent(QMouseEvent *event, bool additive, const QVariant &details, bool *sel/;"	p	class:QCPAbstractPlottable	typeref:typename:void
selectEvent	qcustomplot.h	/^  virtual void selectEvent(QMouseEvent *event, bool additive, const QVariant &details, bool *sel/;"	p	class:QCPAxis	typeref:typename:void
selectEvent	qcustomplot.h	/^  virtual void selectEvent(QMouseEvent *event, bool additive, const QVariant &details, bool *sel/;"	p	class:QCPLayerable	typeref:typename:void
selectEvent	qcustomplot.h	/^  virtual void selectEvent(QMouseEvent *event, bool additive, const QVariant &details, bool *sel/;"	p	class:QCPLegend	typeref:typename:void
selectEvent	qcustomplot.h	/^  virtual void selectEvent(QMouseEvent *event, bool additive, const QVariant &details, bool *sel/;"	p	class:QCPTextElement	typeref:typename:void
selectTest	qcustomplot.cpp	/^double QCPAbstractLegendItem::selectTest(const QPointF &pos, bool onlySelectable, QVariant *deta/;"	f	class:QCPAbstractLegendItem	typeref:typename:double
selectTest	qcustomplot.cpp	/^double QCPAxis::selectTest(const QPointF &pos, bool onlySelectable, QVariant *details) const$/;"	f	class:QCPAxis	typeref:typename:double
selectTest	qcustomplot.cpp	/^double QCPBars::selectTest(const QPointF &pos, bool onlySelectable, QVariant *details) const$/;"	f	class:QCPBars	typeref:typename:double
selectTest	qcustomplot.cpp	/^double QCPColorMap::selectTest(const QPointF &pos, bool onlySelectable, QVariant *details) const$/;"	f	class:QCPColorMap	typeref:typename:double
selectTest	qcustomplot.cpp	/^double QCPCurve::selectTest(const QPointF &pos, bool onlySelectable, QVariant *details) const$/;"	f	class:QCPCurve	typeref:typename:double
selectTest	qcustomplot.cpp	/^double QCPErrorBars::selectTest(const QPointF &pos, bool onlySelectable, QVariant *details) cons/;"	f	class:QCPErrorBars	typeref:typename:double
selectTest	qcustomplot.cpp	/^double QCPFinancial::selectTest(const QPointF &pos, bool onlySelectable, QVariant *details) cons/;"	f	class:QCPFinancial	typeref:typename:double
selectTest	qcustomplot.cpp	/^double QCPGraph::selectTest(const QPointF &pos, bool onlySelectable, QVariant *details) const$/;"	f	class:QCPGraph	typeref:typename:double
selectTest	qcustomplot.cpp	/^double QCPItemBracket::selectTest(const QPointF &pos, bool onlySelectable, QVariant *details) co/;"	f	class:QCPItemBracket	typeref:typename:double
selectTest	qcustomplot.cpp	/^double QCPItemCurve::selectTest(const QPointF &pos, bool onlySelectable, QVariant *details) cons/;"	f	class:QCPItemCurve	typeref:typename:double
selectTest	qcustomplot.cpp	/^double QCPItemEllipse::selectTest(const QPointF &pos, bool onlySelectable, QVariant *details) co/;"	f	class:QCPItemEllipse	typeref:typename:double
selectTest	qcustomplot.cpp	/^double QCPItemLine::selectTest(const QPointF &pos, bool onlySelectable, QVariant *details) const$/;"	f	class:QCPItemLine	typeref:typename:double
selectTest	qcustomplot.cpp	/^double QCPItemPixmap::selectTest(const QPointF &pos, bool onlySelectable, QVariant *details) con/;"	f	class:QCPItemPixmap	typeref:typename:double
selectTest	qcustomplot.cpp	/^double QCPItemRect::selectTest(const QPointF &pos, bool onlySelectable, QVariant *details) const$/;"	f	class:QCPItemRect	typeref:typename:double
selectTest	qcustomplot.cpp	/^double QCPItemStraightLine::selectTest(const QPointF &pos, bool onlySelectable, QVariant *detail/;"	f	class:QCPItemStraightLine	typeref:typename:double
selectTest	qcustomplot.cpp	/^double QCPItemText::selectTest(const QPointF &pos, bool onlySelectable, QVariant *details) const$/;"	f	class:QCPItemText	typeref:typename:double
selectTest	qcustomplot.cpp	/^double QCPItemTracer::selectTest(const QPointF &pos, bool onlySelectable, QVariant *details) con/;"	f	class:QCPItemTracer	typeref:typename:double
selectTest	qcustomplot.cpp	/^double QCPLayerable::selectTest(const QPointF &pos, bool onlySelectable, QVariant *details) cons/;"	f	class:QCPLayerable	typeref:typename:double
selectTest	qcustomplot.cpp	/^double QCPLayoutElement::selectTest(const QPointF &pos, bool onlySelectable, QVariant *details) /;"	f	class:QCPLayoutElement	typeref:typename:double
selectTest	qcustomplot.cpp	/^double QCPLayoutInset::selectTest(const QPointF &pos, bool onlySelectable, QVariant *details) co/;"	f	class:QCPLayoutInset	typeref:typename:double
selectTest	qcustomplot.cpp	/^double QCPLegend::selectTest(const QPointF &pos, bool onlySelectable, QVariant *details) const$/;"	f	class:QCPLegend	typeref:typename:double
selectTest	qcustomplot.cpp	/^double QCPStatisticalBox::selectTest(const QPointF &pos, bool onlySelectable, QVariant *details)/;"	f	class:QCPStatisticalBox	typeref:typename:double
selectTest	qcustomplot.cpp	/^double QCPTextElement::selectTest(const QPointF &pos, bool onlySelectable, QVariant *details) co/;"	f	class:QCPTextElement	typeref:typename:double
selectTest	qcustomplot.h	/^  virtual double selectTest(const QPointF &pos, bool onlySelectable, QVariant *details=0) const /;"	p	class:QCPAbstractItem	typeref:typename:double
selectTest	qcustomplot.h	/^  virtual double selectTest(const QPointF &pos, bool onlySelectable, QVariant *details=0) const /;"	p	class:QCPAbstractLegendItem	typeref:typename:double
selectTest	qcustomplot.h	/^  virtual double selectTest(const QPointF &pos, bool onlySelectable, QVariant *details=0) const /;"	p	class:QCPAbstractPlottable	typeref:typename:double
selectTest	qcustomplot.h	/^  virtual double selectTest(const QPointF &pos, bool onlySelectable, QVariant *details=0) const /;"	p	class:QCPAbstractPlottable1D	typeref:typename:double
selectTest	qcustomplot.h	/^  virtual double selectTest(const QPointF &pos, bool onlySelectable, QVariant *details=0) const /;"	p	class:QCPAxis	typeref:typename:double
selectTest	qcustomplot.h	/^  virtual double selectTest(const QPointF &pos, bool onlySelectable, QVariant *details=0) const /;"	p	class:QCPBars	typeref:typename:double
selectTest	qcustomplot.h	/^  virtual double selectTest(const QPointF &pos, bool onlySelectable, QVariant *details=0) const /;"	p	class:QCPColorMap	typeref:typename:double
selectTest	qcustomplot.h	/^  virtual double selectTest(const QPointF &pos, bool onlySelectable, QVariant *details=0) const /;"	p	class:QCPCurve	typeref:typename:double
selectTest	qcustomplot.h	/^  virtual double selectTest(const QPointF &pos, bool onlySelectable, QVariant *details=0) const /;"	p	class:QCPErrorBars	typeref:typename:double
selectTest	qcustomplot.h	/^  virtual double selectTest(const QPointF &pos, bool onlySelectable, QVariant *details=0) const /;"	p	class:QCPFinancial	typeref:typename:double
selectTest	qcustomplot.h	/^  virtual double selectTest(const QPointF &pos, bool onlySelectable, QVariant *details=0) const /;"	p	class:QCPGraph	typeref:typename:double
selectTest	qcustomplot.h	/^  virtual double selectTest(const QPointF &pos, bool onlySelectable, QVariant *details=0) const /;"	p	class:QCPItemBracket	typeref:typename:double
selectTest	qcustomplot.h	/^  virtual double selectTest(const QPointF &pos, bool onlySelectable, QVariant *details=0) const /;"	p	class:QCPItemCurve	typeref:typename:double
selectTest	qcustomplot.h	/^  virtual double selectTest(const QPointF &pos, bool onlySelectable, QVariant *details=0) const /;"	p	class:QCPItemEllipse	typeref:typename:double
selectTest	qcustomplot.h	/^  virtual double selectTest(const QPointF &pos, bool onlySelectable, QVariant *details=0) const /;"	p	class:QCPItemLine	typeref:typename:double
selectTest	qcustomplot.h	/^  virtual double selectTest(const QPointF &pos, bool onlySelectable, QVariant *details=0) const /;"	p	class:QCPItemPixmap	typeref:typename:double
selectTest	qcustomplot.h	/^  virtual double selectTest(const QPointF &pos, bool onlySelectable, QVariant *details=0) const /;"	p	class:QCPItemRect	typeref:typename:double
selectTest	qcustomplot.h	/^  virtual double selectTest(const QPointF &pos, bool onlySelectable, QVariant *details=0) const /;"	p	class:QCPItemStraightLine	typeref:typename:double
selectTest	qcustomplot.h	/^  virtual double selectTest(const QPointF &pos, bool onlySelectable, QVariant *details=0) const /;"	p	class:QCPItemText	typeref:typename:double
selectTest	qcustomplot.h	/^  virtual double selectTest(const QPointF &pos, bool onlySelectable, QVariant *details=0) const /;"	p	class:QCPItemTracer	typeref:typename:double
selectTest	qcustomplot.h	/^  virtual double selectTest(const QPointF &pos, bool onlySelectable, QVariant *details=0) const /;"	p	class:QCPLayoutElement	typeref:typename:double
selectTest	qcustomplot.h	/^  virtual double selectTest(const QPointF &pos, bool onlySelectable, QVariant *details=0) const /;"	p	class:QCPLayoutInset	typeref:typename:double
selectTest	qcustomplot.h	/^  virtual double selectTest(const QPointF &pos, bool onlySelectable, QVariant *details=0) const /;"	p	class:QCPLegend	typeref:typename:double
selectTest	qcustomplot.h	/^  virtual double selectTest(const QPointF &pos, bool onlySelectable, QVariant *details=0) const /;"	p	class:QCPStatisticalBox	typeref:typename:double
selectTest	qcustomplot.h	/^  virtual double selectTest(const QPointF &pos, bool onlySelectable, QVariant *details=0) const /;"	p	class:QCPTextElement	typeref:typename:double
selectTest	qcustomplot.h	/^  virtual double selectTest(const QPointF &pos, bool onlySelectable, QVariant *details=0) const;$/;"	p	class:QCPLayerable	typeref:typename:double
selectTest	qcustomplot.h	/^double QCPAbstractPlottable1D<DataType>::selectTest(const QPointF &pos, bool onlySelectable, QVa/;"	f	class:QCPAbstractPlottable1D	typeref:typename:double
selectTestRect	qcustomplot.cpp	/^QCPDataSelection QCPBars::selectTestRect(const QRectF &rect, bool onlySelectable) const$/;"	f	class:QCPBars	typeref:typename:QCPDataSelection
selectTestRect	qcustomplot.cpp	/^QCPDataSelection QCPErrorBars::selectTestRect(const QRectF &rect, bool onlySelectable) const$/;"	f	class:QCPErrorBars	typeref:typename:QCPDataSelection
selectTestRect	qcustomplot.cpp	/^QCPDataSelection QCPFinancial::selectTestRect(const QRectF &rect, bool onlySelectable) const$/;"	f	class:QCPFinancial	typeref:typename:QCPDataSelection
selectTestRect	qcustomplot.cpp	/^QCPDataSelection QCPStatisticalBox::selectTestRect(const QRectF &rect, bool onlySelectable) cons/;"	f	class:QCPStatisticalBox	typeref:typename:QCPDataSelection
selectTestRect	qcustomplot.h	/^  virtual QCPDataSelection selectTestRect(const QRectF &rect, bool onlySelectable) const = 0;$/;"	p	class:QCPPlottableInterface1D	typeref:typename:QCPDataSelection
selectTestRect	qcustomplot.h	/^  virtual QCPDataSelection selectTestRect(const QRectF &rect, bool onlySelectable) const Q_DECL_/;"	p	class:QCPAbstractPlottable1D	typeref:typename:QCPDataSelection
selectTestRect	qcustomplot.h	/^  virtual QCPDataSelection selectTestRect(const QRectF &rect, bool onlySelectable) const Q_DECL_/;"	p	class:QCPBars	typeref:typename:QCPDataSelection
selectTestRect	qcustomplot.h	/^  virtual QCPDataSelection selectTestRect(const QRectF &rect, bool onlySelectable) const Q_DECL_/;"	p	class:QCPErrorBars	typeref:typename:QCPDataSelection
selectTestRect	qcustomplot.h	/^  virtual QCPDataSelection selectTestRect(const QRectF &rect, bool onlySelectable) const Q_DECL_/;"	p	class:QCPFinancial	typeref:typename:QCPDataSelection
selectTestRect	qcustomplot.h	/^  virtual QCPDataSelection selectTestRect(const QRectF &rect, bool onlySelectable) const Q_DECL_/;"	p	class:QCPStatisticalBox	typeref:typename:QCPDataSelection
selectTestRect	qcustomplot.h	/^QCPDataSelection QCPAbstractPlottable1D<DataType>::selectTestRect(const QRectF &rect, bool onlyS/;"	f	class:QCPAbstractPlottable1D	typeref:typename:QCPDataSelection
selectable	qcustomplot.h	/^  QCP::SelectionType selectable() const { return mSelectable; }$/;"	f	class:QCPAbstractPlottable	typeref:typename:QCP::SelectionType
selectable	qcustomplot.h	/^  Q_PROPERTY(bool selectable READ selectable WRITE setSelectable NOTIFY selectableChanged)$/;"	p	class:QCPAbstractItem	typeref:typename:bool
selectable	qcustomplot.h	/^  Q_PROPERTY(bool selectable READ selectable WRITE setSelectable NOTIFY selectableChanged)$/;"	p	class:QCPTextElement	typeref:typename:bool
selectable	qcustomplot.h	/^  Q_PROPERTY(bool selectable READ selectable WRITE setSelectable NOTIFY selectionChanged)$/;"	p	class:QCPAbstractLegendItem	typeref:typename:bool
selectable	qcustomplot.h	/^  bool selectable() const { return mSelectable; }$/;"	f	class:QCPAbstractItem	typeref:typename:bool
selectable	qcustomplot.h	/^  bool selectable() const { return mSelectable; }$/;"	f	class:QCPAbstractLegendItem	typeref:typename:bool
selectable	qcustomplot.h	/^  bool selectable() const { return mSelectable; }$/;"	f	class:QCPTextElement	typeref:typename:bool
selectableChanged	qcustomplot.h	/^  void selectableChanged(QCP::SelectionType selectable);$/;"	S	class:QCPAbstractPlottable	typeref:typename:void
selectableChanged	qcustomplot.h	/^  void selectableChanged(QCP::SelectionType selectable);$/;"	p	class:QCPAbstractPlottable	typeref:typename:void
selectableChanged	qcustomplot.h	/^  void selectableChanged(QCPLegend::SelectableParts parts);$/;"	S	class:QCPLegend	typeref:typename:void
selectableChanged	qcustomplot.h	/^  void selectableChanged(QCPLegend::SelectableParts parts);$/;"	p	class:QCPLegend	typeref:typename:void
selectableChanged	qcustomplot.h	/^  void selectableChanged(bool selectable);$/;"	S	class:QCPAbstractItem	typeref:typename:void
selectableChanged	qcustomplot.h	/^  void selectableChanged(bool selectable);$/;"	S	class:QCPAbstractLegendItem	typeref:typename:void
selectableChanged	qcustomplot.h	/^  void selectableChanged(bool selectable);$/;"	S	class:QCPTextElement	typeref:typename:void
selectableChanged	qcustomplot.h	/^  void selectableChanged(bool selectable);$/;"	p	class:QCPAbstractItem	typeref:typename:void
selectableChanged	qcustomplot.h	/^  void selectableChanged(bool selectable);$/;"	p	class:QCPAbstractLegendItem	typeref:typename:void
selectableChanged	qcustomplot.h	/^  void selectableChanged(bool selectable);$/;"	p	class:QCPTextElement	typeref:typename:void
selectableChanged	qcustomplot.h	/^  void selectableChanged(const QCPAxis::SelectableParts &parts);$/;"	S	class:QCPAxis	typeref:typename:void
selectableChanged	qcustomplot.h	/^  void selectableChanged(const QCPAxis::SelectableParts &parts);$/;"	p	class:QCPAxis	typeref:typename:void
selectableParts	qcustomplot.h	/^  Q_PROPERTY(SelectableParts selectableParts READ selectableParts WRITE setSelectableParts NOTIF/;"	p	class:QCPAxis	typeref:typename:SelectableParts
selectableParts	qcustomplot.h	/^  Q_PROPERTY(SelectableParts selectableParts READ selectableParts WRITE setSelectableParts NOTIF/;"	p	class:QCPLegend	typeref:typename:SelectableParts
selectableParts	qcustomplot.h	/^  SelectableParts selectableParts() const { return mSelectableParts; }$/;"	f	class:QCPAxis	typeref:typename:SelectableParts
selectableParts	qcustomplot.h	/^  SelectableParts selectableParts() const { return mSelectableParts; }$/;"	f	class:QCPLegend	typeref:typename:SelectableParts
selected	qcustomplot.h	/^  Q_PROPERTY(bool selected READ selected WRITE setSelected NOTIFY selectableChanged)$/;"	p	class:QCPAbstractLegendItem	typeref:typename:bool
selected	qcustomplot.h	/^  Q_PROPERTY(bool selected READ selected WRITE setSelected NOTIFY selectionChanged)$/;"	p	class:QCPAbstractItem	typeref:typename:bool
selected	qcustomplot.h	/^  Q_PROPERTY(bool selected READ selected WRITE setSelected NOTIFY selectionChanged)$/;"	p	class:QCPTextElement	typeref:typename:bool
selected	qcustomplot.h	/^  bool selected() const { return !mSelection.isEmpty(); }$/;"	f	class:QCPAbstractPlottable	typeref:typename:bool
selected	qcustomplot.h	/^  bool selected() const { return mSelected; }$/;"	f	class:QCPAbstractItem	typeref:typename:bool
selected	qcustomplot.h	/^  bool selected() const { return mSelected; }$/;"	f	class:QCPAbstractLegendItem	typeref:typename:bool
selected	qcustomplot.h	/^  bool selected() const { return mSelected; }$/;"	f	class:QCPTextElement	typeref:typename:bool
selectedAxes	qcustomplot.cpp	/^QList<QCPAxis*> QCustomPlot::selectedAxes() const$/;"	f	class:QCustomPlot	typeref:typename:QList<QCPAxis * >
selectedAxes	qcustomplot.h	/^  QList<QCPAxis*> selectedAxes() const;$/;"	p	class:QCustomPlot	typeref:typename:QList<QCPAxis * >
selectedBasePen	qcustomplot.h	/^  QPen selectedBasePen() const { return mSelectedBasePen; }$/;"	f	class:QCPAxis	typeref:typename:QPen
selectedBasePen	qcustomplot.h	/^  Q_PROPERTY(QPen selectedBasePen READ selectedBasePen WRITE setSelectedBasePen)$/;"	p	class:QCPAxis	typeref:typename:QPen
selectedBorderPen	qcustomplot.h	/^  QPen selectedBorderPen() const { return mSelectedBorderPen; }$/;"	f	class:QCPLegend	typeref:typename:QPen
selectedBorderPen	qcustomplot.h	/^  Q_PROPERTY(QPen selectedBorderPen READ selectedBorderPen WRITE setSelectedBorderPen)$/;"	p	class:QCPLegend	typeref:typename:QPen
selectedBrush	qcustomplot.h	/^  QBrush selectedBrush() const { return mSelectedBrush; }$/;"	f	class:QCPItemEllipse	typeref:typename:QBrush
selectedBrush	qcustomplot.h	/^  QBrush selectedBrush() const { return mSelectedBrush; }$/;"	f	class:QCPItemRect	typeref:typename:QBrush
selectedBrush	qcustomplot.h	/^  QBrush selectedBrush() const { return mSelectedBrush; }$/;"	f	class:QCPItemText	typeref:typename:QBrush
selectedBrush	qcustomplot.h	/^  QBrush selectedBrush() const { return mSelectedBrush; }$/;"	f	class:QCPItemTracer	typeref:typename:QBrush
selectedBrush	qcustomplot.h	/^  QBrush selectedBrush() const { return mSelectedBrush; }$/;"	f	class:QCPLegend	typeref:typename:QBrush
selectedBrush	qcustomplot.h	/^  Q_PROPERTY(QBrush selectedBrush READ selectedBrush WRITE setSelectedBrush)$/;"	p	class:QCPItemEllipse	typeref:typename:QBrush
selectedBrush	qcustomplot.h	/^  Q_PROPERTY(QBrush selectedBrush READ selectedBrush WRITE setSelectedBrush)$/;"	p	class:QCPItemRect	typeref:typename:QBrush
selectedBrush	qcustomplot.h	/^  Q_PROPERTY(QBrush selectedBrush READ selectedBrush WRITE setSelectedBrush)$/;"	p	class:QCPItemText	typeref:typename:QBrush
selectedBrush	qcustomplot.h	/^  Q_PROPERTY(QBrush selectedBrush READ selectedBrush WRITE setSelectedBrush)$/;"	p	class:QCPItemTracer	typeref:typename:QBrush
selectedBrush	qcustomplot.h	/^  Q_PROPERTY(QBrush selectedBrush READ selectedBrush WRITE setSelectedBrush)$/;"	p	class:QCPLegend	typeref:typename:QBrush
selectedColor	qcustomplot.h	/^  QColor selectedColor() const { return mSelectedColor; }$/;"	f	class:QCPItemText	typeref:typename:QColor
selectedColor	qcustomplot.h	/^  Q_PROPERTY(QColor selectedColor READ selectedColor WRITE setSelectedColor)$/;"	p	class:QCPItemText	typeref:typename:QColor
selectedFont	qcustomplot.h	/^  QFont selectedFont() const { return mSelectedFont; }$/;"	f	class:QCPAbstractLegendItem	typeref:typename:QFont
selectedFont	qcustomplot.h	/^  QFont selectedFont() const { return mSelectedFont; }$/;"	f	class:QCPItemText	typeref:typename:QFont
selectedFont	qcustomplot.h	/^  QFont selectedFont() const { return mSelectedFont; }$/;"	f	class:QCPLegend	typeref:typename:QFont
selectedFont	qcustomplot.h	/^  QFont selectedFont() const { return mSelectedFont; }$/;"	f	class:QCPTextElement	typeref:typename:QFont
selectedFont	qcustomplot.h	/^  Q_PROPERTY(QFont selectedFont READ selectedFont WRITE setSelectedFont)$/;"	p	class:QCPAbstractLegendItem	typeref:typename:QFont
selectedFont	qcustomplot.h	/^  Q_PROPERTY(QFont selectedFont READ selectedFont WRITE setSelectedFont)$/;"	p	class:QCPItemText	typeref:typename:QFont
selectedFont	qcustomplot.h	/^  Q_PROPERTY(QFont selectedFont READ selectedFont WRITE setSelectedFont)$/;"	p	class:QCPLegend	typeref:typename:QFont
selectedFont	qcustomplot.h	/^  Q_PROPERTY(QFont selectedFont READ selectedFont WRITE setSelectedFont)$/;"	p	class:QCPTextElement	typeref:typename:QFont
selectedGraphs	qcustomplot.cpp	/^QList<QCPGraph*> QCustomPlot::selectedGraphs() const$/;"	f	class:QCustomPlot	typeref:typename:QList<QCPGraph * >
selectedGraphs	qcustomplot.h	/^  QList<QCPGraph*> selectedGraphs() const;$/;"	p	class:QCustomPlot	typeref:typename:QList<QCPGraph * >
selectedIconBorderPen	qcustomplot.h	/^  QPen selectedIconBorderPen() const { return mSelectedIconBorderPen; }$/;"	f	class:QCPLegend	typeref:typename:QPen
selectedIconBorderPen	qcustomplot.h	/^  Q_PROPERTY(QPen selectedIconBorderPen READ selectedIconBorderPen WRITE setSelectedIconBorderPe/;"	p	class:QCPLegend	typeref:typename:QPen
selectedItems	qcustomplot.cpp	/^QList<QCPAbstractItem*> QCustomPlot::selectedItems() const$/;"	f	class:QCustomPlot	typeref:typename:QList<QCPAbstractItem * >
selectedItems	qcustomplot.cpp	/^QList<QCPAbstractLegendItem *> QCPLegend::selectedItems() const$/;"	f	class:QCPLegend	typeref:typename:QList<QCPAbstractLegendItem * >
selectedItems	qcustomplot.h	/^  QList<QCPAbstractItem*> selectedItems() const;$/;"	p	class:QCustomPlot	typeref:typename:QList<QCPAbstractItem * >
selectedItems	qcustomplot.h	/^  QList<QCPAbstractLegendItem*> selectedItems() const;$/;"	p	class:QCPLegend	typeref:typename:QList<QCPAbstractLegendItem * >
selectedLabelColor	qcustomplot.h	/^  QColor selectedLabelColor() const { return mSelectedLabelColor; }$/;"	f	class:QCPAxis	typeref:typename:QColor
selectedLabelColor	qcustomplot.h	/^  Q_PROPERTY(QColor selectedLabelColor READ selectedLabelColor WRITE setSelectedLabelColor)$/;"	p	class:QCPAxis	typeref:typename:QColor
selectedLabelFont	qcustomplot.h	/^  QFont selectedLabelFont() const { return mSelectedLabelFont; }$/;"	f	class:QCPAxis	typeref:typename:QFont
selectedLabelFont	qcustomplot.h	/^  Q_PROPERTY(QFont selectedLabelFont READ selectedLabelFont WRITE setSelectedLabelFont)$/;"	p	class:QCPAxis	typeref:typename:QFont
selectedLegends	qcustomplot.cpp	/^QList<QCPLegend*> QCustomPlot::selectedLegends() const$/;"	f	class:QCustomPlot	typeref:typename:QList<QCPLegend * >
selectedLegends	qcustomplot.h	/^  QList<QCPLegend*> selectedLegends() const;$/;"	p	class:QCustomPlot	typeref:typename:QList<QCPLegend * >
selectedParts	qcustomplot.cpp	/^QCPLegend::SelectableParts QCPLegend::selectedParts() const$/;"	f	class:QCPLegend	typeref:typename:QCPLegend::SelectableParts
selectedParts	qcustomplot.h	/^  Q_PROPERTY(SelectableParts selectedParts READ selectedParts WRITE setSelectedParts NOTIFY sele/;"	p	class:QCPAxis	typeref:typename:SelectableParts
selectedParts	qcustomplot.h	/^  Q_PROPERTY(SelectableParts selectedParts READ selectedParts WRITE setSelectedParts NOTIFY sele/;"	p	class:QCPLegend	typeref:typename:SelectableParts
selectedParts	qcustomplot.h	/^  SelectableParts selectedParts() const { return mSelectedParts; }$/;"	f	class:QCPAxis	typeref:typename:SelectableParts
selectedParts	qcustomplot.h	/^  SelectableParts selectedParts() const;$/;"	p	class:QCPLegend	typeref:typename:SelectableParts
selectedPen	qcustomplot.h	/^  QPen selectedPen() const { return mSelectedPen; }$/;"	f	class:QCPItemBracket	typeref:typename:QPen
selectedPen	qcustomplot.h	/^  QPen selectedPen() const { return mSelectedPen; }$/;"	f	class:QCPItemCurve	typeref:typename:QPen
selectedPen	qcustomplot.h	/^  QPen selectedPen() const { return mSelectedPen; }$/;"	f	class:QCPItemEllipse	typeref:typename:QPen
selectedPen	qcustomplot.h	/^  QPen selectedPen() const { return mSelectedPen; }$/;"	f	class:QCPItemLine	typeref:typename:QPen
selectedPen	qcustomplot.h	/^  QPen selectedPen() const { return mSelectedPen; }$/;"	f	class:QCPItemPixmap	typeref:typename:QPen
selectedPen	qcustomplot.h	/^  QPen selectedPen() const { return mSelectedPen; }$/;"	f	class:QCPItemRect	typeref:typename:QPen
selectedPen	qcustomplot.h	/^  QPen selectedPen() const { return mSelectedPen; }$/;"	f	class:QCPItemStraightLine	typeref:typename:QPen
selectedPen	qcustomplot.h	/^  QPen selectedPen() const { return mSelectedPen; }$/;"	f	class:QCPItemText	typeref:typename:QPen
selectedPen	qcustomplot.h	/^  QPen selectedPen() const { return mSelectedPen; }$/;"	f	class:QCPItemTracer	typeref:typename:QPen
selectedPen	qcustomplot.h	/^  Q_PROPERTY(QPen selectedPen READ selectedPen WRITE setSelectedPen)$/;"	p	class:QCPItemBracket	typeref:typename:QPen
selectedPen	qcustomplot.h	/^  Q_PROPERTY(QPen selectedPen READ selectedPen WRITE setSelectedPen)$/;"	p	class:QCPItemCurve	typeref:typename:QPen
selectedPen	qcustomplot.h	/^  Q_PROPERTY(QPen selectedPen READ selectedPen WRITE setSelectedPen)$/;"	p	class:QCPItemEllipse	typeref:typename:QPen
selectedPen	qcustomplot.h	/^  Q_PROPERTY(QPen selectedPen READ selectedPen WRITE setSelectedPen)$/;"	p	class:QCPItemLine	typeref:typename:QPen
selectedPen	qcustomplot.h	/^  Q_PROPERTY(QPen selectedPen READ selectedPen WRITE setSelectedPen)$/;"	p	class:QCPItemPixmap	typeref:typename:QPen
selectedPen	qcustomplot.h	/^  Q_PROPERTY(QPen selectedPen READ selectedPen WRITE setSelectedPen)$/;"	p	class:QCPItemRect	typeref:typename:QPen
selectedPen	qcustomplot.h	/^  Q_PROPERTY(QPen selectedPen READ selectedPen WRITE setSelectedPen)$/;"	p	class:QCPItemStraightLine	typeref:typename:QPen
selectedPen	qcustomplot.h	/^  Q_PROPERTY(QPen selectedPen READ selectedPen WRITE setSelectedPen)$/;"	p	class:QCPItemText	typeref:typename:QPen
selectedPen	qcustomplot.h	/^  Q_PROPERTY(QPen selectedPen READ selectedPen WRITE setSelectedPen)$/;"	p	class:QCPItemTracer	typeref:typename:QPen
selectedPlottables	qcustomplot.cpp	/^QList<QCPAbstractPlottable*> QCustomPlot::selectedPlottables() const$/;"	f	class:QCustomPlot	typeref:typename:QList<QCPAbstractPlottable * >
selectedPlottables	qcustomplot.h	/^  QList<QCPAbstractPlottable*> selectedPlottables() const;$/;"	p	class:QCustomPlot	typeref:typename:QList<QCPAbstractPlottable * >
selectedSubTickPen	qcustomplot.h	/^  QPen selectedSubTickPen() const { return mSelectedSubTickPen; }$/;"	f	class:QCPAxis	typeref:typename:QPen
selectedSubTickPen	qcustomplot.h	/^  Q_PROPERTY(QPen selectedSubTickPen READ selectedSubTickPen WRITE setSelectedSubTickPen)$/;"	p	class:QCPAxis	typeref:typename:QPen
selectedTextColor	qcustomplot.h	/^  QColor selectedTextColor() const { return mSelectedTextColor; }$/;"	f	class:QCPAbstractLegendItem	typeref:typename:QColor
selectedTextColor	qcustomplot.h	/^  QColor selectedTextColor() const { return mSelectedTextColor; }$/;"	f	class:QCPLegend	typeref:typename:QColor
selectedTextColor	qcustomplot.h	/^  QColor selectedTextColor() const { return mSelectedTextColor; }$/;"	f	class:QCPTextElement	typeref:typename:QColor
selectedTextColor	qcustomplot.h	/^  Q_PROPERTY(QColor selectedTextColor READ selectedTextColor WRITE setSelectedTextColor)$/;"	p	class:QCPAbstractLegendItem	typeref:typename:QColor
selectedTextColor	qcustomplot.h	/^  Q_PROPERTY(QColor selectedTextColor READ selectedTextColor WRITE setSelectedTextColor)$/;"	p	class:QCPLegend	typeref:typename:QColor
selectedTextColor	qcustomplot.h	/^  Q_PROPERTY(QColor selectedTextColor READ selectedTextColor WRITE setSelectedTextColor)$/;"	p	class:QCPTextElement	typeref:typename:QColor
selectedTickLabelColor	qcustomplot.h	/^  QColor selectedTickLabelColor() const { return mSelectedTickLabelColor; }$/;"	f	class:QCPAxis	typeref:typename:QColor
selectedTickLabelColor	qcustomplot.h	/^  Q_PROPERTY(QColor selectedTickLabelColor READ selectedTickLabelColor WRITE setSelectedTickLabe/;"	p	class:QCPAxis	typeref:typename:QColor
selectedTickLabelFont	qcustomplot.h	/^  QFont selectedTickLabelFont() const { return mSelectedTickLabelFont; }$/;"	f	class:QCPAxis	typeref:typename:QFont
selectedTickLabelFont	qcustomplot.h	/^  Q_PROPERTY(QFont selectedTickLabelFont READ selectedTickLabelFont WRITE setSelectedTickLabelFo/;"	p	class:QCPAxis	typeref:typename:QFont
selectedTickPen	qcustomplot.h	/^  QPen selectedTickPen() const { return mSelectedTickPen; }$/;"	f	class:QCPAxis	typeref:typename:QPen
selectedTickPen	qcustomplot.h	/^  Q_PROPERTY(QPen selectedTickPen READ selectedTickPen WRITE setSelectedTickPen)$/;"	p	class:QCPAxis	typeref:typename:QPen
selection	qcustomplot.h	/^  QCPDataSelection selection() const { return mSelection; }$/;"	f	class:QCPAbstractPlottable	typeref:typename:QCPDataSelection
selection	qcustomplot.h	/^  Q_PROPERTY(QCPDataSelection selection READ selection WRITE setSelection NOTIFY selectionChange/;"	p	class:QCPAbstractPlottable	typeref:typename:QCPDataSelection
selectionCategory	qcustomplot.cpp	/^QCP::Interaction QCPAbstractItem::selectionCategory() const$/;"	f	class:QCPAbstractItem	typeref:typename:QCP::Interaction
selectionCategory	qcustomplot.cpp	/^QCP::Interaction QCPAbstractLegendItem::selectionCategory() const$/;"	f	class:QCPAbstractLegendItem	typeref:typename:QCP::Interaction
selectionCategory	qcustomplot.cpp	/^QCP::Interaction QCPAbstractPlottable::selectionCategory() const$/;"	f	class:QCPAbstractPlottable	typeref:typename:QCP::Interaction
selectionCategory	qcustomplot.cpp	/^QCP::Interaction QCPAxis::selectionCategory() const$/;"	f	class:QCPAxis	typeref:typename:QCP::Interaction
selectionCategory	qcustomplot.cpp	/^QCP::Interaction QCPLayerable::selectionCategory() const$/;"	f	class:QCPLayerable	typeref:typename:QCP::Interaction
selectionCategory	qcustomplot.cpp	/^QCP::Interaction QCPLegend::selectionCategory() const$/;"	f	class:QCPLegend	typeref:typename:QCP::Interaction
selectionCategory	qcustomplot.h	/^  virtual QCP::Interaction selectionCategory() const Q_DECL_OVERRIDE;$/;"	p	class:QCPAbstractItem	typeref:typename:QCP::Interaction
selectionCategory	qcustomplot.h	/^  virtual QCP::Interaction selectionCategory() const Q_DECL_OVERRIDE;$/;"	p	class:QCPAbstractLegendItem	typeref:typename:QCP::Interaction
selectionCategory	qcustomplot.h	/^  virtual QCP::Interaction selectionCategory() const Q_DECL_OVERRIDE;$/;"	p	class:QCPAbstractPlottable	typeref:typename:QCP::Interaction
selectionCategory	qcustomplot.h	/^  virtual QCP::Interaction selectionCategory() const Q_DECL_OVERRIDE;$/;"	p	class:QCPAxis	typeref:typename:QCP::Interaction
selectionCategory	qcustomplot.h	/^  virtual QCP::Interaction selectionCategory() const Q_DECL_OVERRIDE;$/;"	p	class:QCPLegend	typeref:typename:QCP::Interaction
selectionCategory	qcustomplot.h	/^  virtual QCP::Interaction selectionCategory() const;$/;"	p	class:QCPLayerable	typeref:typename:QCP::Interaction
selectionChanged	qcustomplot.h	/^  void selectionChanged(QCPLegend::SelectableParts parts);$/;"	S	class:QCPLegend	typeref:typename:void
selectionChanged	qcustomplot.h	/^  void selectionChanged(QCPLegend::SelectableParts parts);$/;"	p	class:QCPLegend	typeref:typename:void
selectionChanged	qcustomplot.h	/^  void selectionChanged(bool selected);$/;"	S	class:QCPAbstractItem	typeref:typename:void
selectionChanged	qcustomplot.h	/^  void selectionChanged(bool selected);$/;"	S	class:QCPAbstractLegendItem	typeref:typename:void
selectionChanged	qcustomplot.h	/^  void selectionChanged(bool selected);$/;"	S	class:QCPAbstractPlottable	typeref:typename:void
selectionChanged	qcustomplot.h	/^  void selectionChanged(bool selected);$/;"	S	class:QCPTextElement	typeref:typename:void
selectionChanged	qcustomplot.h	/^  void selectionChanged(bool selected);$/;"	p	class:QCPAbstractItem	typeref:typename:void
selectionChanged	qcustomplot.h	/^  void selectionChanged(bool selected);$/;"	p	class:QCPAbstractLegendItem	typeref:typename:void
selectionChanged	qcustomplot.h	/^  void selectionChanged(bool selected);$/;"	p	class:QCPAbstractPlottable	typeref:typename:void
selectionChanged	qcustomplot.h	/^  void selectionChanged(bool selected);$/;"	p	class:QCPTextElement	typeref:typename:void
selectionChanged	qcustomplot.h	/^  void selectionChanged(const QCPAxis::SelectableParts &parts);$/;"	S	class:QCPAxis	typeref:typename:void
selectionChanged	qcustomplot.h	/^  void selectionChanged(const QCPAxis::SelectableParts &parts);$/;"	p	class:QCPAxis	typeref:typename:void
selectionChanged	qcustomplot.h	/^  void selectionChanged(const QCPDataSelection &selection);$/;"	S	class:QCPAbstractPlottable	typeref:typename:void
selectionChanged	qcustomplot.h	/^  void selectionChanged(const QCPDataSelection &selection);$/;"	p	class:QCPAbstractPlottable	typeref:typename:void
selectionChangedByUser	qcustomplot.h	/^  void selectionChangedByUser();$/;"	S	class:QCustomPlot	typeref:typename:void
selectionChangedByUser	qcustomplot.h	/^  void selectionChangedByUser();$/;"	p	class:QCustomPlot	typeref:typename:void
selectionDecorator	qcustomplot.h	/^  QCPSelectionDecorator *selectionDecorator() const { return mSelectionDecorator; }$/;"	f	class:QCPAbstractPlottable	typeref:typename:QCPSelectionDecorator *
selectionHitBox	qcustomplot.cpp	/^QRectF QCPFinancial::selectionHitBox(QCPFinancialDataContainer::const_iterator it) const$/;"	f	class:QCPFinancial	typeref:typename:QRectF
selectionHitBox	qcustomplot.h	/^  QRectF selectionHitBox(QCPFinancialDataContainer::const_iterator it) const;$/;"	p	class:QCPFinancial	typeref:typename:QRectF
selectionRect	qcustomplot.h	/^  QCPSelectionRect *selectionRect() const { return mSelectionRect; }$/;"	f	class:QCustomPlot	typeref:typename:QCPSelectionRect *
selectionRectMode	qcustomplot.h	/^  QCP::SelectionRectMode selectionRectMode() const { return mSelectionRectMode; }$/;"	f	class:QCustomPlot	typeref:typename:QCP::SelectionRectMode
selectionTolerance	qcustomplot.h	/^  Q_PROPERTY(int selectionTolerance READ selectionTolerance WRITE setSelectionTolerance)$/;"	p	class:QCustomPlot	typeref:typename:int
selectionTolerance	qcustomplot.h	/^  int selectionTolerance() const { return mSelectionTolerance; }$/;"	f	class:QCustomPlot	typeref:typename:int
sendBuffer	ble.cpp	/^char sendBuffer[100];$/;"	v	typeref:typename:char[100]
sendStream	license-session.cpp	/^void LicenseSession::sendStream() {$/;"	f	class:LicenseSession	typeref:typename:void
sendStream	license-session.h	/^        void sendStream();$/;"	p	class:LicenseSession	typeref:typename:void
sender	ble.cpp	/^int BLESession::sender() {$/;"	f	class:BLESession	typeref:typename:int
sender	ble.h	/^    int sender();$/;"	p	class:BLESession	typeref:typename:int
sep	spdlog/fmt/bundled/format.h	/^    BasicCStringRef<Char> sep;$/;"	m	struct:fmt::ArgJoin	typeref:typename:BasicCStringRef<Char>
sep_	spdlog/fmt/bundled/format.h	/^    fmt::StringRef sep_;$/;"	m	class:fmt::internal::ThousandsSep	typeref:typename:fmt::StringRef
seq	simple.pb-c.h	/^  uint32_t seq;$/;"	m	struct:_ToSt	typeref:typename:uint32_t
seq	simple.proto	/^    required uint32 seq = 99; \/\/\/&lt; 증가하는값인데, 이미 처리된 명령이라면/;"	f
serial_bandwidth_test	simple.pb-c.h	/^  BandwidthTest *serial_bandwidth_test;$/;"	m	struct:_ToHost	typeref:typename:BandwidthTest *
serial_bandwidth_test	simple.proto	/^    optional BandwidthTest serial_bandwidth_test = 13; $/;"	f
serial_number	simple.pb-c.h	/^  char *serial_number;$/;"	m	struct:_RspServiceKey	typeref:typename:char *
serial_number	simple.proto	/^    optional string serial_number = 4;$/;"	f
serialization_table	qc-message.pb.h	/^  static const ::google::protobuf::internal::SerializationTable serialization_table[];$/;"	m	struct:protobuf_qc_2dmessage_2eproto::TableStruct	typeref:typename:const::google::protobuf::internal::SerializationTable[]
serializer	json.hpp	/^    serializer(const serializer&) = delete;$/;"	p	class:nlohmann::detail::serializer
serializer	json.hpp	/^    serializer(output_adapter_t<char> s, const char ichar)$/;"	f	class:nlohmann::detail::serializer
serializer	json.hpp	/^    using serializer = ::nlohmann::detail::serializer<basic_json>;$/;"	t	class:nlohmann::basic_json	typeref:typename:::nlohmann::detail::serializer<basic_json>
serializer	json.hpp	/^class serializer$/;"	c	namespace:nlohmann::detail
service_key	simple.pb-c.h	/^  char *service_key;$/;"	m	struct:_RspServiceKey	typeref:typename:char *
service_key	simple.proto	/^    optional string service_key = 1;$/;"	f
set	qcustomplot.h	/^  void set(const QCPDataContainer<DataType> &data);$/;"	p	class:QCPDataContainer	typeref:typename:void
set	qcustomplot.h	/^  void set(const QVector<DataType> &data, bool alreadySorted=false);$/;"	p	class:QCPDataContainer	typeref:typename:void
set	qcustomplot.h	/^void QCPDataContainer<DataType>::set(const QCPDataContainer<DataType> &data)$/;"	f	class:QCPDataContainer	typeref:typename:void
set	qcustomplot.h	/^void QCPDataContainer<DataType>::set(const QVector<DataType> &data, bool alreadySorted)$/;"	f	class:QCPDataContainer	typeref:typename:void
set	spdlog/fmt/bundled/core.h	/^    void set(T *buf_data, std::size_t buf_capacity) FMT_NOEXCEPT$/;"	f	class:internal::basic_buffer	typeref:typename:void
setAdaptiveSampling	qcustomplot.cpp	/^void QCPGraph::setAdaptiveSampling(bool enabled)$/;"	f	class:QCPGraph	typeref:typename:void
setAdaptiveSampling	qcustomplot.h	/^  void setAdaptiveSampling(bool enabled);$/;"	p	class:QCPGraph	typeref:typename:void
setAlpha	qcustomplot.cpp	/^void QCPColorMapData::setAlpha(int keyIndex, int valueIndex, unsigned char alpha)$/;"	f	class:QCPColorMapData	typeref:typename:void
setAlpha	qcustomplot.h	/^  void setAlpha(int keyIndex, int valueIndex, unsigned char alpha);$/;"	p	class:QCPColorMapData	typeref:typename:void
setAntialiased	qcustomplot.cpp	/^void QCPLayerable::setAntialiased(bool enabled)$/;"	f	class:QCPLayerable	typeref:typename:void
setAntialiased	qcustomplot.h	/^  void setAntialiased(bool enabled);$/;"	p	class:QCPLayerable	typeref:typename:void
setAntialiasedElement	qcustomplot.cpp	/^void QCustomPlot::setAntialiasedElement(QCP::AntialiasedElement antialiasedElement, bool enabled/;"	f	class:QCustomPlot	typeref:typename:void
setAntialiasedElement	qcustomplot.h	/^  void setAntialiasedElement(QCP::AntialiasedElement antialiasedElement, bool enabled=true);$/;"	p	class:QCustomPlot	typeref:typename:void
setAntialiasedElements	qcustomplot.cpp	/^void QCustomPlot::setAntialiasedElements(const QCP::AntialiasedElements &antialiasedElements)$/;"	f	class:QCustomPlot	typeref:typename:void
setAntialiasedElements	qcustomplot.h	/^  void setAntialiasedElements(const QCP::AntialiasedElements &antialiasedElements);$/;"	p	class:QCustomPlot	typeref:typename:void
setAntialiasedFill	qcustomplot.cpp	/^void QCPAbstractPlottable::setAntialiasedFill(bool enabled)$/;"	f	class:QCPAbstractPlottable	typeref:typename:void
setAntialiasedFill	qcustomplot.h	/^  void setAntialiasedFill(bool enabled);$/;"	p	class:QCPAbstractPlottable	typeref:typename:void
setAntialiasedScatters	qcustomplot.cpp	/^void QCPAbstractPlottable::setAntialiasedScatters(bool enabled)$/;"	f	class:QCPAbstractPlottable	typeref:typename:void
setAntialiasedScatters	qcustomplot.h	/^  void setAntialiasedScatters(bool enabled);$/;"	p	class:QCPAbstractPlottable	typeref:typename:void
setAntialiasedSubGrid	qcustomplot.cpp	/^void QCPGrid::setAntialiasedSubGrid(bool enabled)$/;"	f	class:QCPGrid	typeref:typename:void
setAntialiasedSubGrid	qcustomplot.h	/^  void setAntialiasedSubGrid(bool enabled);$/;"	p	class:QCPGrid	typeref:typename:void
setAntialiasedZeroLine	qcustomplot.cpp	/^void QCPGrid::setAntialiasedZeroLine(bool enabled)$/;"	f	class:QCPGrid	typeref:typename:void
setAntialiasedZeroLine	qcustomplot.h	/^  void setAntialiasedZeroLine(bool enabled);$/;"	p	class:QCPGrid	typeref:typename:void
setAntialiasing	qcustomplot.cpp	/^void QCPPainter::setAntialiasing(bool enabled)$/;"	f	class:QCPPainter	typeref:typename:void
setAntialiasing	qcustomplot.h	/^  void setAntialiasing(bool enabled);$/;"	p	class:QCPPainter	typeref:typename:void
setAutoAddPlottableToLegend	qcustomplot.cpp	/^void QCustomPlot::setAutoAddPlottableToLegend(bool on)$/;"	f	class:QCustomPlot	typeref:typename:void
setAutoAddPlottableToLegend	qcustomplot.h	/^  void setAutoAddPlottableToLegend(bool on);$/;"	p	class:QCustomPlot	typeref:typename:void
setAutoMargins	qcustomplot.cpp	/^void QCPLayoutElement::setAutoMargins(QCP::MarginSides sides)$/;"	f	class:QCPLayoutElement	typeref:typename:void
setAutoMargins	qcustomplot.h	/^  void setAutoMargins(QCP::MarginSides sides);$/;"	p	class:QCPLayoutElement	typeref:typename:void
setAutoSqueeze	qcustomplot.h	/^  void setAutoSqueeze(bool enabled);$/;"	p	class:QCPDataContainer	typeref:typename:void
setAutoSqueeze	qcustomplot.h	/^void QCPDataContainer<DataType>::setAutoSqueeze(bool enabled)$/;"	f	class:QCPDataContainer	typeref:typename:void
setAxes	qcustomplot.cpp	/^void QCPItemPosition::setAxes(QCPAxis *keyAxis, QCPAxis *valueAxis)$/;"	f	class:QCPItemPosition	typeref:typename:void
setAxes	qcustomplot.h	/^  void setAxes(QCPAxis* keyAxis, QCPAxis* valueAxis);$/;"	p	class:QCPItemPosition	typeref:typename:void
setAxisRect	qcustomplot.cpp	/^void QCPItemPosition::setAxisRect(QCPAxisRect *axisRect)$/;"	f	class:QCPItemPosition	typeref:typename:void
setAxisRect	qcustomplot.h	/^  void setAxisRect(QCPAxisRect *axisRect);$/;"	p	class:QCPItemPosition	typeref:typename:void
setBackground	qcustomplot.cpp	/^void QCPAxisRect::setBackground(const QBrush &brush)$/;"	f	class:QCPAxisRect	typeref:typename:void
setBackground	qcustomplot.cpp	/^void QCPAxisRect::setBackground(const QPixmap &pm)$/;"	f	class:QCPAxisRect	typeref:typename:void
setBackground	qcustomplot.cpp	/^void QCPAxisRect::setBackground(const QPixmap &pm, bool scaled, Qt::AspectRatioMode mode)$/;"	f	class:QCPAxisRect	typeref:typename:void
setBackground	qcustomplot.cpp	/^void QCustomPlot::setBackground(const QBrush &brush)$/;"	f	class:QCustomPlot	typeref:typename:void
setBackground	qcustomplot.cpp	/^void QCustomPlot::setBackground(const QPixmap &pm)$/;"	f	class:QCustomPlot	typeref:typename:void
setBackground	qcustomplot.cpp	/^void QCustomPlot::setBackground(const QPixmap &pm, bool scaled, Qt::AspectRatioMode mode)$/;"	f	class:QCustomPlot	typeref:typename:void
setBackground	qcustomplot.h	/^  void setBackground(const QBrush &brush);$/;"	p	class:QCPAxisRect	typeref:typename:void
setBackground	qcustomplot.h	/^  void setBackground(const QBrush &brush);$/;"	p	class:QCustomPlot	typeref:typename:void
setBackground	qcustomplot.h	/^  void setBackground(const QPixmap &pm);$/;"	p	class:QCPAxisRect	typeref:typename:void
setBackground	qcustomplot.h	/^  void setBackground(const QPixmap &pm);$/;"	p	class:QCustomPlot	typeref:typename:void
setBackground	qcustomplot.h	/^  void setBackground(const QPixmap &pm, bool scaled, Qt::AspectRatioMode mode=Qt::KeepAspectRati/;"	p	class:QCPAxisRect	typeref:typename:void
setBackground	qcustomplot.h	/^  void setBackground(const QPixmap &pm, bool scaled, Qt::AspectRatioMode mode=Qt::KeepAspectRati/;"	p	class:QCustomPlot	typeref:typename:void
setBackgroundScaled	qcustomplot.cpp	/^void QCPAxisRect::setBackgroundScaled(bool scaled)$/;"	f	class:QCPAxisRect	typeref:typename:void
setBackgroundScaled	qcustomplot.cpp	/^void QCustomPlot::setBackgroundScaled(bool scaled)$/;"	f	class:QCustomPlot	typeref:typename:void
setBackgroundScaled	qcustomplot.h	/^  void setBackgroundScaled(bool scaled);$/;"	p	class:QCPAxisRect	typeref:typename:void
setBackgroundScaled	qcustomplot.h	/^  void setBackgroundScaled(bool scaled);$/;"	p	class:QCustomPlot	typeref:typename:void
setBackgroundScaledMode	qcustomplot.cpp	/^void QCPAxisRect::setBackgroundScaledMode(Qt::AspectRatioMode mode)$/;"	f	class:QCPAxisRect	typeref:typename:void
setBackgroundScaledMode	qcustomplot.cpp	/^void QCustomPlot::setBackgroundScaledMode(Qt::AspectRatioMode mode)$/;"	f	class:QCustomPlot	typeref:typename:void
setBackgroundScaledMode	qcustomplot.h	/^  void setBackgroundScaledMode(Qt::AspectRatioMode mode);$/;"	p	class:QCPAxisRect	typeref:typename:void
setBackgroundScaledMode	qcustomplot.h	/^  void setBackgroundScaledMode(Qt::AspectRatioMode mode);$/;"	p	class:QCustomPlot	typeref:typename:void
setBarWidth	qcustomplot.cpp	/^void QCPColorScale::setBarWidth(int width)$/;"	f	class:QCPColorScale	typeref:typename:void
setBarWidth	qcustomplot.h	/^  void setBarWidth(int width);$/;"	p	class:QCPColorScale	typeref:typename:void
setBarsGroup	qcustomplot.cpp	/^void QCPBars::setBarsGroup(QCPBarsGroup *barsGroup)$/;"	f	class:QCPBars	typeref:typename:void
setBarsGroup	qcustomplot.h	/^  void setBarsGroup(QCPBarsGroup *barsGroup);$/;"	p	class:QCPBars	typeref:typename:void
setBasePen	qcustomplot.cpp	/^void QCPAxis::setBasePen(const QPen &pen)$/;"	f	class:QCPAxis	typeref:typename:void
setBasePen	qcustomplot.h	/^  void setBasePen(const QPen &pen);$/;"	p	class:QCPAxis	typeref:typename:void
setBaseTime	chrono-util.cpp	/^void ChronoDuration::setBaseTime() {$/;"	f	class:ChronoDuration	typeref:typename:void
setBaseTime	chrono-util.h	/^    void setBaseTime();$/;"	p	class:ChronoDuration	typeref:typename:void
setBaseValue	qcustomplot.cpp	/^void QCPBars::setBaseValue(double baseValue)$/;"	f	class:QCPBars	typeref:typename:void
setBaseValue	qcustomplot.h	/^  void setBaseValue(double baseValue);$/;"	p	class:QCPBars	typeref:typename:void
setBegin	qcustomplot.h	/^  void setBegin(int begin) { mBegin = begin; }$/;"	f	class:QCPDataRange	typeref:typename:void
setBorderPen	qcustomplot.cpp	/^void QCPLegend::setBorderPen(const QPen &pen)$/;"	f	class:QCPLegend	typeref:typename:void
setBorderPen	qcustomplot.h	/^  void setBorderPen(const QPen &pen);$/;"	p	class:QCPLegend	typeref:typename:void
setBracketBrush	qcustomplot.cpp	/^void QCPSelectionDecoratorBracket::setBracketBrush(const QBrush &brush)$/;"	f	class:QCPSelectionDecoratorBracket	typeref:typename:void
setBracketBrush	qcustomplot.h	/^  void setBracketBrush(const QBrush &brush);$/;"	p	class:QCPSelectionDecoratorBracket	typeref:typename:void
setBracketHeight	qcustomplot.cpp	/^void QCPSelectionDecoratorBracket::setBracketHeight(int height)$/;"	f	class:QCPSelectionDecoratorBracket	typeref:typename:void
setBracketHeight	qcustomplot.h	/^  void setBracketHeight(int height);$/;"	p	class:QCPSelectionDecoratorBracket	typeref:typename:void
setBracketPen	qcustomplot.cpp	/^void QCPSelectionDecoratorBracket::setBracketPen(const QPen &pen)$/;"	f	class:QCPSelectionDecoratorBracket	typeref:typename:void
setBracketPen	qcustomplot.h	/^  void setBracketPen(const QPen &pen);$/;"	p	class:QCPSelectionDecoratorBracket	typeref:typename:void
setBracketStyle	qcustomplot.cpp	/^void QCPSelectionDecoratorBracket::setBracketStyle(QCPSelectionDecoratorBracket::BracketStyle st/;"	f	class:QCPSelectionDecoratorBracket	typeref:typename:void
setBracketStyle	qcustomplot.h	/^  void setBracketStyle(BracketStyle style);$/;"	p	class:QCPSelectionDecoratorBracket	typeref:typename:void
setBracketWidth	qcustomplot.cpp	/^void QCPSelectionDecoratorBracket::setBracketWidth(int width)$/;"	f	class:QCPSelectionDecoratorBracket	typeref:typename:void
setBracketWidth	qcustomplot.h	/^  void setBracketWidth(int width);$/;"	p	class:QCPSelectionDecoratorBracket	typeref:typename:void
setBrush	qcustomplot.cpp	/^void QCPAbstractPlottable::setBrush(const QBrush &brush)$/;"	f	class:QCPAbstractPlottable	typeref:typename:void
setBrush	qcustomplot.cpp	/^void QCPItemEllipse::setBrush(const QBrush &brush)$/;"	f	class:QCPItemEllipse	typeref:typename:void
setBrush	qcustomplot.cpp	/^void QCPItemRect::setBrush(const QBrush &brush)$/;"	f	class:QCPItemRect	typeref:typename:void
setBrush	qcustomplot.cpp	/^void QCPItemText::setBrush(const QBrush &brush)$/;"	f	class:QCPItemText	typeref:typename:void
setBrush	qcustomplot.cpp	/^void QCPItemTracer::setBrush(const QBrush &brush)$/;"	f	class:QCPItemTracer	typeref:typename:void
setBrush	qcustomplot.cpp	/^void QCPLegend::setBrush(const QBrush &brush)$/;"	f	class:QCPLegend	typeref:typename:void
setBrush	qcustomplot.cpp	/^void QCPScatterStyle::setBrush(const QBrush &brush)$/;"	f	class:QCPScatterStyle	typeref:typename:void
setBrush	qcustomplot.cpp	/^void QCPSelectionDecorator::setBrush(const QBrush &brush)$/;"	f	class:QCPSelectionDecorator	typeref:typename:void
setBrush	qcustomplot.cpp	/^void QCPSelectionRect::setBrush(const QBrush &brush)$/;"	f	class:QCPSelectionRect	typeref:typename:void
setBrush	qcustomplot.h	/^  void setBrush(const QBrush &brush);$/;"	p	class:QCPAbstractPlottable	typeref:typename:void
setBrush	qcustomplot.h	/^  void setBrush(const QBrush &brush);$/;"	p	class:QCPItemEllipse	typeref:typename:void
setBrush	qcustomplot.h	/^  void setBrush(const QBrush &brush);$/;"	p	class:QCPItemRect	typeref:typename:void
setBrush	qcustomplot.h	/^  void setBrush(const QBrush &brush);$/;"	p	class:QCPItemText	typeref:typename:void
setBrush	qcustomplot.h	/^  void setBrush(const QBrush &brush);$/;"	p	class:QCPItemTracer	typeref:typename:void
setBrush	qcustomplot.h	/^  void setBrush(const QBrush &brush);$/;"	p	class:QCPLegend	typeref:typename:void
setBrush	qcustomplot.h	/^  void setBrush(const QBrush &brush);$/;"	p	class:QCPScatterStyle	typeref:typename:void
setBrush	qcustomplot.h	/^  void setBrush(const QBrush &brush);$/;"	p	class:QCPSelectionDecorator	typeref:typename:void
setBrush	qcustomplot.h	/^  void setBrush(const QBrush &brush);$/;"	p	class:QCPSelectionRect	typeref:typename:void
setBrushNegative	qcustomplot.cpp	/^void QCPFinancial::setBrushNegative(const QBrush &brush)$/;"	f	class:QCPFinancial	typeref:typename:void
setBrushNegative	qcustomplot.h	/^  void setBrushNegative(const QBrush &brush);$/;"	p	class:QCPFinancial	typeref:typename:void
setBrushPositive	qcustomplot.cpp	/^void QCPFinancial::setBrushPositive(const QBrush &brush)$/;"	f	class:QCPFinancial	typeref:typename:void
setBrushPositive	qcustomplot.h	/^  void setBrushPositive(const QBrush &brush);$/;"	p	class:QCPFinancial	typeref:typename:void
setBufferDevicePixelRatio	qcustomplot.cpp	/^void QCustomPlot::setBufferDevicePixelRatio(double ratio)$/;"	f	class:QCustomPlot	typeref:typename:void
setBufferDevicePixelRatio	qcustomplot.h	/^  void setBufferDevicePixelRatio(double ratio);$/;"	p	class:QCustomPlot	typeref:typename:void
setCell	qcustomplot.cpp	/^void QCPColorMapData::setCell(int keyIndex, int valueIndex, double z)$/;"	f	class:QCPColorMapData	typeref:typename:void
setCell	qcustomplot.h	/^  void setCell(int keyIndex, int valueIndex, double z);$/;"	p	class:QCPColorMapData	typeref:typename:void
setChannelFillGraph	qcustomplot.cpp	/^void QCPGraph::setChannelFillGraph(QCPGraph *targetGraph)$/;"	f	class:QCPGraph	typeref:typename:void
setChannelFillGraph	qcustomplot.h	/^  void setChannelFillGraph(QCPGraph *targetGraph);$/;"	p	class:QCPGraph	typeref:typename:void
setChartStyle	qcustomplot.cpp	/^void QCPFinancial::setChartStyle(QCPFinancial::ChartStyle style)$/;"	f	class:QCPFinancial	typeref:typename:void
setChartStyle	qcustomplot.h	/^  void setChartStyle(ChartStyle style);$/;"	p	class:QCPFinancial	typeref:typename:void
setClipAxisRect	qcustomplot.cpp	/^void QCPAbstractItem::setClipAxisRect(QCPAxisRect *rect)$/;"	f	class:QCPAbstractItem	typeref:typename:void
setClipAxisRect	qcustomplot.h	/^  void setClipAxisRect(QCPAxisRect *rect);$/;"	p	class:QCPAbstractItem	typeref:typename:void
setClipToAxisRect	qcustomplot.cpp	/^void QCPAbstractItem::setClipToAxisRect(bool clip)$/;"	f	class:QCPAbstractItem	typeref:typename:void
setClipToAxisRect	qcustomplot.h	/^  void setClipToAxisRect(bool clip);$/;"	p	class:QCPAbstractItem	typeref:typename:void
setColor	qcustomplot.cpp	/^void QCPItemText::setColor(const QColor &color)$/;"	f	class:QCPItemText	typeref:typename:void
setColor	qcustomplot.h	/^  void setColor(const QColor &color);$/;"	p	class:QCPItemText	typeref:typename:void
setColorInterpolation	qcustomplot.cpp	/^void QCPColorGradient::setColorInterpolation(QCPColorGradient::ColorInterpolation interpolation)$/;"	f	class:QCPColorGradient	typeref:typename:void
setColorInterpolation	qcustomplot.h	/^  void setColorInterpolation(ColorInterpolation interpolation);$/;"	p	class:QCPColorGradient	typeref:typename:void
setColorScale	qcustomplot.cpp	/^void QCPColorMap::setColorScale(QCPColorScale *colorScale)$/;"	f	class:QCPColorMap	typeref:typename:void
setColorScale	qcustomplot.h	/^  void setColorScale(QCPColorScale *colorScale);$/;"	p	class:QCPColorMap	typeref:typename:void
setColorStopAt	qcustomplot.cpp	/^void QCPColorGradient::setColorStopAt(double position, const QColor &color)$/;"	f	class:QCPColorGradient	typeref:typename:void
setColorStopAt	qcustomplot.h	/^  void setColorStopAt(double position, const QColor &color);$/;"	p	class:QCPColorGradient	typeref:typename:void
setColorStops	qcustomplot.cpp	/^void QCPColorGradient::setColorStops(const QMap<double, QColor> &colorStops)$/;"	f	class:QCPColorGradient	typeref:typename:void
setColorStops	qcustomplot.h	/^  void setColorStops(const QMap<double, QColor> &colorStops);$/;"	p	class:QCPColorGradient	typeref:typename:void
setColumnSpacing	qcustomplot.cpp	/^void QCPLayoutGrid::setColumnSpacing(int pixels)$/;"	f	class:QCPLayoutGrid	typeref:typename:void
setColumnSpacing	qcustomplot.h	/^  void setColumnSpacing(int pixels);$/;"	p	class:QCPLayoutGrid	typeref:typename:void
setColumnStretchFactor	qcustomplot.cpp	/^void QCPLayoutGrid::setColumnStretchFactor(int column, double factor)$/;"	f	class:QCPLayoutGrid	typeref:typename:void
setColumnStretchFactor	qcustomplot.h	/^  void setColumnStretchFactor(int column, double factor);$/;"	p	class:QCPLayoutGrid	typeref:typename:void
setColumnStretchFactors	qcustomplot.cpp	/^void QCPLayoutGrid::setColumnStretchFactors(const QList<double> &factors)$/;"	f	class:QCPLayoutGrid	typeref:typename:void
setColumnStretchFactors	qcustomplot.h	/^  void setColumnStretchFactors(const QList<double> &factors);$/;"	p	class:QCPLayoutGrid	typeref:typename:void
setCoords	qcustomplot.cpp	/^void QCPItemPosition::setCoords(const QPointF &pos)$/;"	f	class:QCPItemPosition	typeref:typename:void
setCoords	qcustomplot.cpp	/^void QCPItemPosition::setCoords(double key, double value)$/;"	f	class:QCPItemPosition	typeref:typename:void
setCoords	qcustomplot.h	/^  void setCoords(const QPointF &coords);$/;"	p	class:QCPItemPosition	typeref:typename:void
setCoords	qcustomplot.h	/^  void setCoords(double key, double value);$/;"	p	class:QCPItemPosition	typeref:typename:void
setCurrentLayer	qcustomplot.cpp	/^bool QCustomPlot::setCurrentLayer(QCPLayer *layer)$/;"	f	class:QCustomPlot	typeref:typename:bool
setCurrentLayer	qcustomplot.cpp	/^bool QCustomPlot::setCurrentLayer(const QString &name)$/;"	f	class:QCustomPlot	typeref:typename:bool
setCurrentLayer	qcustomplot.h	/^  bool setCurrentLayer(QCPLayer *layer);$/;"	p	class:QCustomPlot	typeref:typename:bool
setCurrentLayer	qcustomplot.h	/^  bool setCurrentLayer(const QString &name);$/;"	p	class:QCustomPlot	typeref:typename:bool
setCustomPath	qcustomplot.cpp	/^void QCPScatterStyle::setCustomPath(const QPainterPath &customPath)$/;"	f	class:QCPScatterStyle	typeref:typename:void
setCustomPath	qcustomplot.h	/^  void setCustomPath(const QPainterPath &customPath);$/;"	p	class:QCPScatterStyle	typeref:typename:void
setData	qcustomplot.cpp	/^void QCPBars::setData(QSharedPointer<QCPBarsDataContainer> data)$/;"	f	class:QCPBars	typeref:typename:void
setData	qcustomplot.cpp	/^void QCPBars::setData(const QVector<double> &keys, const QVector<double> &values, bool alreadySo/;"	f	class:QCPBars	typeref:typename:void
setData	qcustomplot.cpp	/^void QCPColorMap::setData(QCPColorMapData *data, bool copy)$/;"	f	class:QCPColorMap	typeref:typename:void
setData	qcustomplot.cpp	/^void QCPColorMapData::setData(double key, double value, double z)$/;"	f	class:QCPColorMapData	typeref:typename:void
setData	qcustomplot.cpp	/^void QCPCurve::setData(QSharedPointer<QCPCurveDataContainer> data)$/;"	f	class:QCPCurve	typeref:typename:void
setData	qcustomplot.cpp	/^void QCPCurve::setData(const QVector<double> &keys, const QVector<double> &values)$/;"	f	class:QCPCurve	typeref:typename:void
setData	qcustomplot.cpp	/^void QCPCurve::setData(const QVector<double> &t, const QVector<double> &keys, const QVector<doub/;"	f	class:QCPCurve	typeref:typename:void
setData	qcustomplot.cpp	/^void QCPErrorBars::setData(QSharedPointer<QCPErrorBarsDataContainer> data)$/;"	f	class:QCPErrorBars	typeref:typename:void
setData	qcustomplot.cpp	/^void QCPErrorBars::setData(const QVector<double> &error)$/;"	f	class:QCPErrorBars	typeref:typename:void
setData	qcustomplot.cpp	/^void QCPErrorBars::setData(const QVector<double> &errorMinus, const QVector<double> &errorPlus)$/;"	f	class:QCPErrorBars	typeref:typename:void
setData	qcustomplot.cpp	/^void QCPFinancial::setData(QSharedPointer<QCPFinancialDataContainer> data)$/;"	f	class:QCPFinancial	typeref:typename:void
setData	qcustomplot.cpp	/^void QCPFinancial::setData(const QVector<double> &keys, const QVector<double> &open, const QVect/;"	f	class:QCPFinancial	typeref:typename:void
setData	qcustomplot.cpp	/^void QCPGraph::setData(QSharedPointer<QCPGraphDataContainer> data)$/;"	f	class:QCPGraph	typeref:typename:void
setData	qcustomplot.cpp	/^void QCPGraph::setData(const QVector<double> &keys, const QVector<double> &values, bool alreadyS/;"	f	class:QCPGraph	typeref:typename:void
setData	qcustomplot.cpp	/^void QCPStatisticalBox::setData(QSharedPointer<QCPStatisticalBoxDataContainer> data)$/;"	f	class:QCPStatisticalBox	typeref:typename:void
setData	qcustomplot.cpp	/^void QCPStatisticalBox::setData(const QVector<double> &keys, const QVector<double> &minimum, con/;"	f	class:QCPStatisticalBox	typeref:typename:void
setData	qcustomplot.h	/^  void setData(QCPColorMapData *data, bool copy=false);$/;"	p	class:QCPColorMap	typeref:typename:void
setData	qcustomplot.h	/^  void setData(QSharedPointer<QCPBarsDataContainer> data);$/;"	p	class:QCPBars	typeref:typename:void
setData	qcustomplot.h	/^  void setData(QSharedPointer<QCPCurveDataContainer> data);$/;"	p	class:QCPCurve	typeref:typename:void
setData	qcustomplot.h	/^  void setData(QSharedPointer<QCPErrorBarsDataContainer> data);$/;"	p	class:QCPErrorBars	typeref:typename:void
setData	qcustomplot.h	/^  void setData(QSharedPointer<QCPFinancialDataContainer> data);$/;"	p	class:QCPFinancial	typeref:typename:void
setData	qcustomplot.h	/^  void setData(QSharedPointer<QCPGraphDataContainer> data);$/;"	p	class:QCPGraph	typeref:typename:void
setData	qcustomplot.h	/^  void setData(QSharedPointer<QCPStatisticalBoxDataContainer> data);$/;"	p	class:QCPStatisticalBox	typeref:typename:void
setData	qcustomplot.h	/^  void setData(const QVector<double> &error);$/;"	p	class:QCPErrorBars	typeref:typename:void
setData	qcustomplot.h	/^  void setData(const QVector<double> &errorMinus, const QVector<double> &errorPlus);$/;"	p	class:QCPErrorBars	typeref:typename:void
setData	qcustomplot.h	/^  void setData(const QVector<double> &keys, const QVector<double> &minimum, const QVector<double/;"	p	class:QCPStatisticalBox	typeref:typename:void
setData	qcustomplot.h	/^  void setData(const QVector<double> &keys, const QVector<double> &open, const QVector<double> &/;"	p	class:QCPFinancial	typeref:typename:void
setData	qcustomplot.h	/^  void setData(const QVector<double> &keys, const QVector<double> &values);$/;"	p	class:QCPCurve	typeref:typename:void
setData	qcustomplot.h	/^  void setData(const QVector<double> &keys, const QVector<double> &values, bool alreadySorted=fa/;"	p	class:QCPBars	typeref:typename:void
setData	qcustomplot.h	/^  void setData(const QVector<double> &keys, const QVector<double> &values, bool alreadySorted=fa/;"	p	class:QCPGraph	typeref:typename:void
setData	qcustomplot.h	/^  void setData(const QVector<double> &t, const QVector<double> &keys, const QVector<double> &val/;"	p	class:QCPCurve	typeref:typename:void
setData	qcustomplot.h	/^  void setData(double key, double value, double z);$/;"	p	class:QCPColorMapData	typeref:typename:void
setDataPlottable	qcustomplot.cpp	/^void QCPErrorBars::setDataPlottable(QCPAbstractPlottable *plottable)$/;"	f	class:QCPErrorBars	typeref:typename:void
setDataPlottable	qcustomplot.h	/^  void setDataPlottable(QCPAbstractPlottable* plottable);$/;"	p	class:QCPErrorBars	typeref:typename:void
setDataRange	qcustomplot.cpp	/^void QCPColorMap::setDataRange(const QCPRange &dataRange)$/;"	f	class:QCPColorMap	typeref:typename:void
setDataRange	qcustomplot.cpp	/^void QCPColorScale::setDataRange(const QCPRange &dataRange)$/;"	f	class:QCPColorScale	typeref:typename:void
setDataRange	qcustomplot.h	/^  Q_SLOT void setDataRange(const QCPRange &dataRange);$/;"	p	class:QCPColorMap	typeref:typename:Q_SLOT void
setDataRange	qcustomplot.h	/^  Q_SLOT void setDataRange(const QCPRange &dataRange);$/;"	p	class:QCPColorScale	typeref:typename:Q_SLOT void
setDataScaleType	qcustomplot.cpp	/^void QCPColorMap::setDataScaleType(QCPAxis::ScaleType scaleType)$/;"	f	class:QCPColorMap	typeref:typename:void
setDataScaleType	qcustomplot.cpp	/^void QCPColorScale::setDataScaleType(QCPAxis::ScaleType scaleType)$/;"	f	class:QCPColorScale	typeref:typename:void
setDataScaleType	qcustomplot.h	/^  Q_SLOT void setDataScaleType(QCPAxis::ScaleType scaleType);$/;"	p	class:QCPColorMap	typeref:typename:Q_SLOT void
setDataScaleType	qcustomplot.h	/^  Q_SLOT void setDataScaleType(QCPAxis::ScaleType scaleType);$/;"	p	class:QCPColorScale	typeref:typename:Q_SLOT void
setDateTimeFormat	qcustomplot.cpp	/^void QCPAxisTickerDateTime::setDateTimeFormat(const QString &format)$/;"	f	class:QCPAxisTickerDateTime	typeref:typename:void
setDateTimeFormat	qcustomplot.h	/^  void setDateTimeFormat(const QString &format);$/;"	p	class:QCPAxisTickerDateTime	typeref:typename:void
setDateTimeSpec	qcustomplot.cpp	/^void QCPAxisTickerDateTime::setDateTimeSpec(Qt::TimeSpec spec)$/;"	f	class:QCPAxisTickerDateTime	typeref:typename:void
setDateTimeSpec	qcustomplot.h	/^  void setDateTimeSpec(Qt::TimeSpec spec);$/;"	p	class:QCPAxisTickerDateTime	typeref:typename:void
setDevicePixelRatio	qcustomplot.cpp	/^void QCPAbstractPaintBuffer::setDevicePixelRatio(double ratio)$/;"	f	class:QCPAbstractPaintBuffer	typeref:typename:void
setDevicePixelRatio	qcustomplot.h	/^  void setDevicePixelRatio(double ratio);$/;"	p	class:QCPAbstractPaintBuffer	typeref:typename:void
setEnd	qcustomplot.h	/^  void setEnd(int end)  { mEnd = end; }$/;"	f	class:QCPDataRange	typeref:typename:void
setErrorType	qcustomplot.cpp	/^void QCPErrorBars::setErrorType(ErrorType type)$/;"	f	class:QCPErrorBars	typeref:typename:void
setErrorType	qcustomplot.h	/^  void setErrorType(ErrorType type);$/;"	p	class:QCPErrorBars	typeref:typename:void
setFieldWidth	qcustomplot.cpp	/^void QCPAxisTickerTime::setFieldWidth(QCPAxisTickerTime::TimeUnit unit, int width)$/;"	f	class:QCPAxisTickerTime	typeref:typename:void
setFieldWidth	qcustomplot.h	/^  void setFieldWidth(TimeUnit unit, int width);$/;"	p	class:QCPAxisTickerTime	typeref:typename:void
setFillOrder	qcustomplot.cpp	/^void QCPLayoutGrid::setFillOrder(FillOrder order, bool rearrange)$/;"	f	class:QCPLayoutGrid	typeref:typename:void
setFillOrder	qcustomplot.h	/^  void setFillOrder(FillOrder order, bool rearrange=true);$/;"	p	class:QCPLayoutGrid	typeref:typename:void
setFont	qcustomplot.cpp	/^void QCPAbstractLegendItem::setFont(const QFont &font)$/;"	f	class:QCPAbstractLegendItem	typeref:typename:void
setFont	qcustomplot.cpp	/^void QCPItemText::setFont(const QFont &font)$/;"	f	class:QCPItemText	typeref:typename:void
setFont	qcustomplot.cpp	/^void QCPLegend::setFont(const QFont &font)$/;"	f	class:QCPLegend	typeref:typename:void
setFont	qcustomplot.cpp	/^void QCPTextElement::setFont(const QFont &font)$/;"	f	class:QCPTextElement	typeref:typename:void
setFont	qcustomplot.h	/^  void setFont(const QFont &font);$/;"	p	class:QCPAbstractLegendItem	typeref:typename:void
setFont	qcustomplot.h	/^  void setFont(const QFont &font);$/;"	p	class:QCPItemText	typeref:typename:void
setFont	qcustomplot.h	/^  void setFont(const QFont &font);$/;"	p	class:QCPLegend	typeref:typename:void
setFont	qcustomplot.h	/^  void setFont(const QFont &font);$/;"	p	class:QCPTextElement	typeref:typename:void
setFractionStyle	qcustomplot.cpp	/^void QCPAxisTickerPi::setFractionStyle(QCPAxisTickerPi::FractionStyle style)$/;"	f	class:QCPAxisTickerPi	typeref:typename:void
setFractionStyle	qcustomplot.h	/^  void setFractionStyle(FractionStyle style);$/;"	p	class:QCPAxisTickerPi	typeref:typename:void
setFromOther	qcustomplot.cpp	/^void QCPScatterStyle::setFromOther(const QCPScatterStyle &other, ScatterProperties properties)$/;"	f	class:QCPScatterStyle	typeref:typename:void
setFromOther	qcustomplot.h	/^  void setFromOther(const QCPScatterStyle &other, ScatterProperties properties);$/;"	p	class:QCPScatterStyle	typeref:typename:void
setGradient	qcustomplot.cpp	/^void QCPColorMap::setGradient(const QCPColorGradient &gradient)$/;"	f	class:QCPColorMap	typeref:typename:void
setGradient	qcustomplot.cpp	/^void QCPColorScale::setGradient(const QCPColorGradient &gradient)$/;"	f	class:QCPColorScale	typeref:typename:void
setGradient	qcustomplot.h	/^  Q_SLOT void setGradient(const QCPColorGradient &gradient);$/;"	p	class:QCPColorMap	typeref:typename:Q_SLOT void
setGradient	qcustomplot.h	/^  Q_SLOT void setGradient(const QCPColorGradient &gradient);$/;"	p	class:QCPColorScale	typeref:typename:Q_SLOT void
setGraph	qcustomplot.cpp	/^void QCPItemTracer::setGraph(QCPGraph *graph)$/;"	f	class:QCPItemTracer	typeref:typename:void
setGraph	qcustomplot.h	/^  void setGraph(QCPGraph *graph);$/;"	p	class:QCPItemTracer	typeref:typename:void
setGraphKey	qcustomplot.cpp	/^void QCPItemTracer::setGraphKey(double key)$/;"	f	class:QCPItemTracer	typeref:typename:void
setGraphKey	qcustomplot.h	/^  void setGraphKey(double key);$/;"	p	class:QCPItemTracer	typeref:typename:void
setHead	qcustomplot.cpp	/^void QCPItemCurve::setHead(const QCPLineEnding &head)$/;"	f	class:QCPItemCurve	typeref:typename:void
setHead	qcustomplot.cpp	/^void QCPItemLine::setHead(const QCPLineEnding &head)$/;"	f	class:QCPItemLine	typeref:typename:void
setHead	qcustomplot.h	/^  void setHead(const QCPLineEnding &head);$/;"	p	class:QCPItemCurve	typeref:typename:void
setHead	qcustomplot.h	/^  void setHead(const QCPLineEnding &head);$/;"	p	class:QCPItemLine	typeref:typename:void
setIconBorderPen	qcustomplot.cpp	/^void QCPLegend::setIconBorderPen(const QPen &pen)$/;"	f	class:QCPLegend	typeref:typename:void
setIconBorderPen	qcustomplot.h	/^  void setIconBorderPen(const QPen &pen);$/;"	p	class:QCPLegend	typeref:typename:void
setIconSize	qcustomplot.cpp	/^void QCPLegend::setIconSize(const QSize &size)$/;"	f	class:QCPLegend	typeref:typename:void
setIconSize	qcustomplot.cpp	/^void QCPLegend::setIconSize(int width, int height)$/;"	f	class:QCPLegend	typeref:typename:void
setIconSize	qcustomplot.h	/^  void setIconSize(const QSize &size);$/;"	p	class:QCPLegend	typeref:typename:void
setIconSize	qcustomplot.h	/^  void setIconSize(int width, int height);$/;"	p	class:QCPLegend	typeref:typename:void
setIconTextPadding	qcustomplot.cpp	/^void QCPLegend::setIconTextPadding(int padding)$/;"	f	class:QCPLegend	typeref:typename:void
setIconTextPadding	qcustomplot.h	/^  void setIconTextPadding(int padding);$/;"	p	class:QCPLegend	typeref:typename:void
setInsetAlignment	qcustomplot.cpp	/^void QCPLayoutInset::setInsetAlignment(int index, Qt::Alignment alignment)$/;"	f	class:QCPLayoutInset	typeref:typename:void
setInsetAlignment	qcustomplot.h	/^  void setInsetAlignment(int index, Qt::Alignment alignment);$/;"	p	class:QCPLayoutInset	typeref:typename:void
setInsetPlacement	qcustomplot.cpp	/^void QCPLayoutInset::setInsetPlacement(int index, QCPLayoutInset::InsetPlacement placement)$/;"	f	class:QCPLayoutInset	typeref:typename:void
setInsetPlacement	qcustomplot.h	/^  void setInsetPlacement(int index, InsetPlacement placement);$/;"	p	class:QCPLayoutInset	typeref:typename:void
setInsetRect	qcustomplot.cpp	/^void QCPLayoutInset::setInsetRect(int index, const QRectF &rect)$/;"	f	class:QCPLayoutInset	typeref:typename:void
setInsetRect	qcustomplot.h	/^  void setInsetRect(int index, const QRectF &rect);$/;"	p	class:QCPLayoutInset	typeref:typename:void
setInteraction	qcustomplot.cpp	/^void QCustomPlot::setInteraction(const QCP::Interaction &interaction, bool enabled)$/;"	f	class:QCustomPlot	typeref:typename:void
setInteraction	qcustomplot.h	/^  void setInteraction(const QCP::Interaction &interaction, bool enabled=true);$/;"	p	class:QCustomPlot	typeref:typename:void
setInteractions	qcustomplot.cpp	/^void QCustomPlot::setInteractions(const QCP::Interactions &interactions)$/;"	f	class:QCustomPlot	typeref:typename:void
setInteractions	qcustomplot.h	/^  void setInteractions(const QCP::Interactions &interactions);$/;"	p	class:QCustomPlot	typeref:typename:void
setInterpolate	qcustomplot.cpp	/^void QCPColorMap::setInterpolate(bool enabled)$/;"	f	class:QCPColorMap	typeref:typename:void
setInterpolate	qcustomplot.h	/^  void setInterpolate(bool enabled);$/;"	p	class:QCPColorMap	typeref:typename:void
setInterpolating	qcustomplot.cpp	/^void QCPItemTracer::setInterpolating(bool enabled)$/;"	f	class:QCPItemTracer	typeref:typename:void
setInterpolating	qcustomplot.h	/^  void setInterpolating(bool enabled);$/;"	p	class:QCPItemTracer	typeref:typename:void
setInvalidated	qcustomplot.cpp	/^void QCPAbstractPaintBuffer::setInvalidated(bool invalidated)$/;"	f	class:QCPAbstractPaintBuffer	typeref:typename:void
setInvalidated	qcustomplot.h	/^  void setInvalidated(bool invalidated=true);$/;"	p	class:QCPAbstractPaintBuffer	typeref:typename:void
setInverted	qcustomplot.cpp	/^void QCPLineEnding::setInverted(bool inverted)$/;"	f	class:QCPLineEnding	typeref:typename:void
setInverted	qcustomplot.h	/^  void setInverted(bool inverted);$/;"	p	class:QCPLineEnding	typeref:typename:void
setKeyAxis	qcustomplot.cpp	/^void QCPAbstractPlottable::setKeyAxis(QCPAxis *axis)$/;"	f	class:QCPAbstractPlottable	typeref:typename:void
setKeyAxis	qcustomplot.h	/^  void setKeyAxis(QCPAxis *axis);$/;"	p	class:QCPAbstractPlottable	typeref:typename:void
setKeyRange	qcustomplot.cpp	/^void QCPColorMapData::setKeyRange(const QCPRange &keyRange)$/;"	f	class:QCPColorMapData	typeref:typename:void
setKeyRange	qcustomplot.h	/^  void setKeyRange(const QCPRange &keyRange);$/;"	p	class:QCPColorMapData	typeref:typename:void
setKeySize	qcustomplot.cpp	/^void QCPColorMapData::setKeySize(int keySize)$/;"	f	class:QCPColorMapData	typeref:typename:void
setKeySize	qcustomplot.h	/^  void setKeySize(int keySize);$/;"	p	class:QCPColorMapData	typeref:typename:void
setLabel	qcustomplot.cpp	/^void QCPAxis::setLabel(const QString &str)$/;"	f	class:QCPAxis	typeref:typename:void
setLabel	qcustomplot.cpp	/^void QCPColorScale::setLabel(const QString &str)$/;"	f	class:QCPColorScale	typeref:typename:void
setLabel	qcustomplot.h	/^  void setLabel(const QString &str);$/;"	p	class:QCPAxis	typeref:typename:void
setLabel	qcustomplot.h	/^  void setLabel(const QString &str);$/;"	p	class:QCPColorScale	typeref:typename:void
setLabelColor	qcustomplot.cpp	/^void QCPAxis::setLabelColor(const QColor &color)$/;"	f	class:QCPAxis	typeref:typename:void
setLabelColor	qcustomplot.h	/^  void setLabelColor(const QColor &color);$/;"	p	class:QCPAxis	typeref:typename:void
setLabelFont	qcustomplot.cpp	/^void QCPAxis::setLabelFont(const QFont &font)$/;"	f	class:QCPAxis	typeref:typename:void
setLabelFont	qcustomplot.h	/^  void setLabelFont(const QFont &font);$/;"	p	class:QCPAxis	typeref:typename:void
setLabelPadding	qcustomplot.cpp	/^void QCPAxis::setLabelPadding(int padding)$/;"	f	class:QCPAxis	typeref:typename:void
setLabelPadding	qcustomplot.h	/^  void setLabelPadding(int padding);$/;"	p	class:QCPAxis	typeref:typename:void
setLayer	qcustomplot.cpp	/^bool QCPLayerable::setLayer(QCPLayer *layer)$/;"	f	class:QCPLayerable	typeref:typename:bool
setLayer	qcustomplot.cpp	/^bool QCPLayerable::setLayer(const QString &layerName)$/;"	f	class:QCPLayerable	typeref:typename:bool
setLayer	qcustomplot.h	/^  Q_SLOT bool setLayer(QCPLayer *layer);$/;"	p	class:QCPLayerable	typeref:typename:Q_SLOT bool
setLayer	qcustomplot.h	/^  bool setLayer(const QString &layerName);$/;"	p	class:QCPLayerable	typeref:typename:bool
setLength	qcustomplot.cpp	/^void QCPItemBracket::setLength(double length)$/;"	f	class:QCPItemBracket	typeref:typename:void
setLength	qcustomplot.cpp	/^void QCPLineEnding::setLength(double length)$/;"	f	class:QCPLineEnding	typeref:typename:void
setLength	qcustomplot.h	/^  void setLength(double length);$/;"	p	class:QCPItemBracket	typeref:typename:void
setLength	qcustomplot.h	/^  void setLength(double length);$/;"	p	class:QCPLineEnding	typeref:typename:void
setLevelCount	qcustomplot.cpp	/^void QCPColorGradient::setLevelCount(int n)$/;"	f	class:QCPColorGradient	typeref:typename:void
setLevelCount	qcustomplot.h	/^  void setLevelCount(int n);$/;"	p	class:QCPColorGradient	typeref:typename:void
setLineStyle	qcustomplot.cpp	/^void QCPCurve::setLineStyle(QCPCurve::LineStyle style)$/;"	f	class:QCPCurve	typeref:typename:void
setLineStyle	qcustomplot.cpp	/^void QCPGraph::setLineStyle(LineStyle ls)$/;"	f	class:QCPGraph	typeref:typename:void
setLineStyle	qcustomplot.h	/^  void setLineStyle(LineStyle ls);$/;"	p	class:QCPGraph	typeref:typename:void
setLineStyle	qcustomplot.h	/^  void setLineStyle(LineStyle style);$/;"	p	class:QCPCurve	typeref:typename:void
setLogBase	qcustomplot.cpp	/^void QCPAxisTickerLog::setLogBase(double base)$/;"	f	class:QCPAxisTickerLog	typeref:typename:void
setLogBase	qcustomplot.h	/^  void setLogBase(double base);$/;"	p	class:QCPAxisTickerLog	typeref:typename:void
setLowerEnding	qcustomplot.cpp	/^void QCPAxis::setLowerEnding(const QCPLineEnding &ending)$/;"	f	class:QCPAxis	typeref:typename:void
setLowerEnding	qcustomplot.h	/^  void setLowerEnding(const QCPLineEnding &ending);$/;"	p	class:QCPAxis	typeref:typename:void
setMarginGroup	qcustomplot.cpp	/^void QCPLayoutElement::setMarginGroup(QCP::MarginSides sides, QCPMarginGroup *group)$/;"	f	class:QCPLayoutElement	typeref:typename:void
setMarginGroup	qcustomplot.h	/^  void setMarginGroup(QCP::MarginSides sides, QCPMarginGroup *group);$/;"	p	class:QCPLayoutElement	typeref:typename:void
setMarginValue	qcustomplot.h	/^inline void setMarginValue(QMargins &margins, QCP::MarginSide side, int value)$/;"	f	namespace:QCP	typeref:typename:void
setMargins	qcustomplot.cpp	/^void QCPLayoutElement::setMargins(const QMargins &margins)$/;"	f	class:QCPLayoutElement	typeref:typename:void
setMargins	qcustomplot.h	/^  void setMargins(const QMargins &margins);$/;"	p	class:QCPLayoutElement	typeref:typename:void
setMaximumSize	qcustomplot.cpp	/^void QCPLayoutElement::setMaximumSize(const QSize &size)$/;"	f	class:QCPLayoutElement	typeref:typename:void
setMaximumSize	qcustomplot.cpp	/^void QCPLayoutElement::setMaximumSize(int width, int height)$/;"	f	class:QCPLayoutElement	typeref:typename:void
setMaximumSize	qcustomplot.h	/^  void setMaximumSize(const QSize &size);$/;"	p	class:QCPLayoutElement	typeref:typename:void
setMaximumSize	qcustomplot.h	/^  void setMaximumSize(int width, int height);$/;"	p	class:QCPLayoutElement	typeref:typename:void
setMedianPen	qcustomplot.cpp	/^void QCPStatisticalBox::setMedianPen(const QPen &pen)$/;"	f	class:QCPStatisticalBox	typeref:typename:void
setMedianPen	qcustomplot.h	/^  void setMedianPen(const QPen &pen);$/;"	p	class:QCPStatisticalBox	typeref:typename:void
setMinimumMargins	qcustomplot.cpp	/^void QCPLayoutElement::setMinimumMargins(const QMargins &margins)$/;"	f	class:QCPLayoutElement	typeref:typename:void
setMinimumMargins	qcustomplot.h	/^  void setMinimumMargins(const QMargins &margins);$/;"	p	class:QCPLayoutElement	typeref:typename:void
setMinimumSize	qcustomplot.cpp	/^void QCPLayoutElement::setMinimumSize(const QSize &size)$/;"	f	class:QCPLayoutElement	typeref:typename:void
setMinimumSize	qcustomplot.cpp	/^void QCPLayoutElement::setMinimumSize(int width, int height)$/;"	f	class:QCPLayoutElement	typeref:typename:void
setMinimumSize	qcustomplot.h	/^  void setMinimumSize(const QSize &size);$/;"	p	class:QCPLayoutElement	typeref:typename:void
setMinimumSize	qcustomplot.h	/^  void setMinimumSize(int width, int height);$/;"	p	class:QCPLayoutElement	typeref:typename:void
setMode	qcustomplot.cpp	/^void QCPLayer::setMode(QCPLayer::LayerMode mode)$/;"	f	class:QCPLayer	typeref:typename:void
setMode	qcustomplot.cpp	/^void QCPPainter::setMode(QCPPainter::PainterMode mode, bool enabled)$/;"	f	class:QCPPainter	typeref:typename:void
setMode	qcustomplot.h	/^  void setMode(LayerMode mode);$/;"	p	class:QCPLayer	typeref:typename:void
setMode	qcustomplot.h	/^  void setMode(PainterMode mode, bool enabled=true);$/;"	p	class:QCPPainter	typeref:typename:void
setModes	qcustomplot.cpp	/^void QCPPainter::setModes(QCPPainter::PainterModes modes)$/;"	f	class:QCPPainter	typeref:typename:void
setModes	qcustomplot.h	/^  void setModes(PainterModes modes);$/;"	p	class:QCPPainter	typeref:typename:void
setMultiSelectModifier	qcustomplot.cpp	/^void QCustomPlot::setMultiSelectModifier(Qt::KeyboardModifier modifier)$/;"	f	class:QCustomPlot	typeref:typename:void
setMultiSelectModifier	qcustomplot.h	/^  void setMultiSelectModifier(Qt::KeyboardModifier modifier);$/;"	p	class:QCustomPlot	typeref:typename:void
setName	qcustomplot.cpp	/^void QCPAbstractPlottable::setName(const QString &name)$/;"	f	class:QCPAbstractPlottable	typeref:typename:void
setName	qcustomplot.h	/^  void setName(const QString &name);$/;"	p	class:QCPAbstractPlottable	typeref:typename:void
setNoAntialiasingOnDrag	qcustomplot.cpp	/^void QCustomPlot::setNoAntialiasingOnDrag(bool enabled)$/;"	f	class:QCustomPlot	typeref:typename:void
setNoAntialiasingOnDrag	qcustomplot.h	/^  void setNoAntialiasingOnDrag(bool enabled);$/;"	p	class:QCustomPlot	typeref:typename:void
setNotAntialiasedElement	qcustomplot.cpp	/^void QCustomPlot::setNotAntialiasedElement(QCP::AntialiasedElement notAntialiasedElement, bool e/;"	f	class:QCustomPlot	typeref:typename:void
setNotAntialiasedElement	qcustomplot.h	/^  void setNotAntialiasedElement(QCP::AntialiasedElement notAntialiasedElement, bool enabled=true/;"	p	class:QCustomPlot	typeref:typename:void
setNotAntialiasedElements	qcustomplot.cpp	/^void QCustomPlot::setNotAntialiasedElements(const QCP::AntialiasedElements &notAntialiasedElemen/;"	f	class:QCustomPlot	typeref:typename:void
setNotAntialiasedElements	qcustomplot.h	/^  void setNotAntialiasedElements(const QCP::AntialiasedElements &notAntialiasedElements);$/;"	p	class:QCustomPlot	typeref:typename:void
setNumberFormat	qcustomplot.cpp	/^void QCPAxis::setNumberFormat(const QString &formatCode)$/;"	f	class:QCPAxis	typeref:typename:void
setNumberFormat	qcustomplot.h	/^  void setNumberFormat(const QString &formatCode);$/;"	p	class:QCPAxis	typeref:typename:void
setNumberPrecision	qcustomplot.cpp	/^void QCPAxis::setNumberPrecision(int precision)$/;"	f	class:QCPAxis	typeref:typename:void
setNumberPrecision	qcustomplot.h	/^  void setNumberPrecision(int precision);$/;"	p	class:QCPAxis	typeref:typename:void
setOffset	qcustomplot.cpp	/^void QCPAxis::setOffset(int offset)$/;"	f	class:QCPAxis	typeref:typename:void
setOffset	qcustomplot.h	/^  void setOffset(int offset);$/;"	p	class:QCPAxis	typeref:typename:void
setOpenGl	qcustomplot.cpp	/^void QCustomPlot::setOpenGl(bool enabled, int multisampling)$/;"	f	class:QCustomPlot	typeref:typename:void
setOpenGl	qcustomplot.h	/^  void setOpenGl(bool enabled, int multisampling=16);$/;"	p	class:QCustomPlot	typeref:typename:void
setOuterRect	qcustomplot.cpp	/^void QCPLayoutElement::setOuterRect(const QRect &rect)$/;"	f	class:QCPLayoutElement	typeref:typename:void
setOuterRect	qcustomplot.h	/^  void setOuterRect(const QRect &rect);$/;"	p	class:QCPLayoutElement	typeref:typename:void
setOutlierStyle	qcustomplot.cpp	/^void QCPStatisticalBox::setOutlierStyle(const QCPScatterStyle &style)$/;"	f	class:QCPStatisticalBox	typeref:typename:void
setOutlierStyle	qcustomplot.h	/^  void setOutlierStyle(const QCPScatterStyle &style);$/;"	p	class:QCPStatisticalBox	typeref:typename:void
setPadding	qcustomplot.cpp	/^void QCPAxis::setPadding(int padding)$/;"	f	class:QCPAxis	typeref:typename:void
setPadding	qcustomplot.cpp	/^void QCPItemText::setPadding(const QMargins &padding)$/;"	f	class:QCPItemText	typeref:typename:void
setPadding	qcustomplot.h	/^  void setPadding(const QMargins &padding);$/;"	p	class:QCPItemText	typeref:typename:void
setPadding	qcustomplot.h	/^  void setPadding(int padding);$/;"	p	class:QCPAxis	typeref:typename:void
setParentAnchor	qcustomplot.cpp	/^bool QCPItemPosition::setParentAnchor(QCPItemAnchor *parentAnchor, bool keepPixelPosition)$/;"	f	class:QCPItemPosition	typeref:typename:bool
setParentAnchor	qcustomplot.h	/^  bool setParentAnchor(QCPItemAnchor *parentAnchor, bool keepPixelPosition=false);$/;"	p	class:QCPItemPosition	typeref:typename:bool
setParentAnchorX	qcustomplot.cpp	/^bool QCPItemPosition::setParentAnchorX(QCPItemAnchor *parentAnchor, bool keepPixelPosition)$/;"	f	class:QCPItemPosition	typeref:typename:bool
setParentAnchorX	qcustomplot.h	/^  bool setParentAnchorX(QCPItemAnchor *parentAnchor, bool keepPixelPosition=false);$/;"	p	class:QCPItemPosition	typeref:typename:bool
setParentAnchorY	qcustomplot.cpp	/^bool QCPItemPosition::setParentAnchorY(QCPItemAnchor *parentAnchor, bool keepPixelPosition)$/;"	f	class:QCPItemPosition	typeref:typename:bool
setParentAnchorY	qcustomplot.h	/^  bool setParentAnchorY(QCPItemAnchor *parentAnchor, bool keepPixelPosition=false);$/;"	p	class:QCPItemPosition	typeref:typename:bool
setParentLayerable	qcustomplot.cpp	/^void QCPLayerable::setParentLayerable(QCPLayerable *parentLayerable)$/;"	f	class:QCPLayerable	typeref:typename:void
setParentLayerable	qcustomplot.h	/^  void setParentLayerable(QCPLayerable* parentLayerable);$/;"	p	class:QCPLayerable	typeref:typename:void
setPen	qcustomplot.cpp	/^void QCPAbstractPlottable::setPen(const QPen &pen)$/;"	f	class:QCPAbstractPlottable	typeref:typename:void
setPen	qcustomplot.cpp	/^void QCPGrid::setPen(const QPen &pen)$/;"	f	class:QCPGrid	typeref:typename:void
setPen	qcustomplot.cpp	/^void QCPItemBracket::setPen(const QPen &pen)$/;"	f	class:QCPItemBracket	typeref:typename:void
setPen	qcustomplot.cpp	/^void QCPItemCurve::setPen(const QPen &pen)$/;"	f	class:QCPItemCurve	typeref:typename:void
setPen	qcustomplot.cpp	/^void QCPItemEllipse::setPen(const QPen &pen)$/;"	f	class:QCPItemEllipse	typeref:typename:void
setPen	qcustomplot.cpp	/^void QCPItemLine::setPen(const QPen &pen)$/;"	f	class:QCPItemLine	typeref:typename:void
setPen	qcustomplot.cpp	/^void QCPItemPixmap::setPen(const QPen &pen)$/;"	f	class:QCPItemPixmap	typeref:typename:void
setPen	qcustomplot.cpp	/^void QCPItemRect::setPen(const QPen &pen)$/;"	f	class:QCPItemRect	typeref:typename:void
setPen	qcustomplot.cpp	/^void QCPItemStraightLine::setPen(const QPen &pen)$/;"	f	class:QCPItemStraightLine	typeref:typename:void
setPen	qcustomplot.cpp	/^void QCPItemText::setPen(const QPen &pen)$/;"	f	class:QCPItemText	typeref:typename:void
setPen	qcustomplot.cpp	/^void QCPItemTracer::setPen(const QPen &pen)$/;"	f	class:QCPItemTracer	typeref:typename:void
setPen	qcustomplot.cpp	/^void QCPPainter::setPen(Qt::PenStyle penStyle)$/;"	f	class:QCPPainter	typeref:typename:void
setPen	qcustomplot.cpp	/^void QCPPainter::setPen(const QColor &color)$/;"	f	class:QCPPainter	typeref:typename:void
setPen	qcustomplot.cpp	/^void QCPPainter::setPen(const QPen &pen)$/;"	f	class:QCPPainter	typeref:typename:void
setPen	qcustomplot.cpp	/^void QCPScatterStyle::setPen(const QPen &pen)$/;"	f	class:QCPScatterStyle	typeref:typename:void
setPen	qcustomplot.cpp	/^void QCPSelectionDecorator::setPen(const QPen &pen)$/;"	f	class:QCPSelectionDecorator	typeref:typename:void
setPen	qcustomplot.cpp	/^void QCPSelectionRect::setPen(const QPen &pen)$/;"	f	class:QCPSelectionRect	typeref:typename:void
setPen	qcustomplot.h	/^  void setPen(Qt::PenStyle penStyle);$/;"	p	class:QCPPainter	typeref:typename:void
setPen	qcustomplot.h	/^  void setPen(const QColor &color);$/;"	p	class:QCPPainter	typeref:typename:void
setPen	qcustomplot.h	/^  void setPen(const QPen &pen);$/;"	p	class:QCPAbstractPlottable	typeref:typename:void
setPen	qcustomplot.h	/^  void setPen(const QPen &pen);$/;"	p	class:QCPGrid	typeref:typename:void
setPen	qcustomplot.h	/^  void setPen(const QPen &pen);$/;"	p	class:QCPItemBracket	typeref:typename:void
setPen	qcustomplot.h	/^  void setPen(const QPen &pen);$/;"	p	class:QCPItemCurve	typeref:typename:void
setPen	qcustomplot.h	/^  void setPen(const QPen &pen);$/;"	p	class:QCPItemEllipse	typeref:typename:void
setPen	qcustomplot.h	/^  void setPen(const QPen &pen);$/;"	p	class:QCPItemLine	typeref:typename:void
setPen	qcustomplot.h	/^  void setPen(const QPen &pen);$/;"	p	class:QCPItemPixmap	typeref:typename:void
setPen	qcustomplot.h	/^  void setPen(const QPen &pen);$/;"	p	class:QCPItemRect	typeref:typename:void
setPen	qcustomplot.h	/^  void setPen(const QPen &pen);$/;"	p	class:QCPItemStraightLine	typeref:typename:void
setPen	qcustomplot.h	/^  void setPen(const QPen &pen);$/;"	p	class:QCPItemText	typeref:typename:void
setPen	qcustomplot.h	/^  void setPen(const QPen &pen);$/;"	p	class:QCPItemTracer	typeref:typename:void
setPen	qcustomplot.h	/^  void setPen(const QPen &pen);$/;"	p	class:QCPPainter	typeref:typename:void
setPen	qcustomplot.h	/^  void setPen(const QPen &pen);$/;"	p	class:QCPScatterStyle	typeref:typename:void
setPen	qcustomplot.h	/^  void setPen(const QPen &pen);$/;"	p	class:QCPSelectionDecorator	typeref:typename:void
setPen	qcustomplot.h	/^  void setPen(const QPen &pen);$/;"	p	class:QCPSelectionRect	typeref:typename:void
setPenNegative	qcustomplot.cpp	/^void QCPFinancial::setPenNegative(const QPen &pen)$/;"	f	class:QCPFinancial	typeref:typename:void
setPenNegative	qcustomplot.h	/^  void setPenNegative(const QPen &pen);$/;"	p	class:QCPFinancial	typeref:typename:void
setPenPositive	qcustomplot.cpp	/^void QCPFinancial::setPenPositive(const QPen &pen)$/;"	f	class:QCPFinancial	typeref:typename:void
setPenPositive	qcustomplot.h	/^  void setPenPositive(const QPen &pen);$/;"	p	class:QCPFinancial	typeref:typename:void
setPeriodic	qcustomplot.cpp	/^void QCPColorGradient::setPeriodic(bool enabled)$/;"	f	class:QCPColorGradient	typeref:typename:void
setPeriodic	qcustomplot.h	/^  void setPeriodic(bool enabled);$/;"	p	class:QCPColorGradient	typeref:typename:void
setPeriodicity	qcustomplot.cpp	/^void QCPAxisTickerPi::setPeriodicity(int multiplesOfPi)$/;"	f	class:QCPAxisTickerPi	typeref:typename:void
setPeriodicity	qcustomplot.h	/^  void setPeriodicity(int multiplesOfPi);$/;"	p	class:QCPAxisTickerPi	typeref:typename:void
setPiSymbol	qcustomplot.cpp	/^void QCPAxisTickerPi::setPiSymbol(QString symbol)$/;"	f	class:QCPAxisTickerPi	typeref:typename:void
setPiSymbol	qcustomplot.h	/^  void setPiSymbol(QString symbol);$/;"	p	class:QCPAxisTickerPi	typeref:typename:void
setPiValue	qcustomplot.cpp	/^void QCPAxisTickerPi::setPiValue(double pi)$/;"	f	class:QCPAxisTickerPi	typeref:typename:void
setPiValue	qcustomplot.h	/^  void setPiValue(double pi);$/;"	p	class:QCPAxisTickerPi	typeref:typename:void
setPixelPosition	qcustomplot.cpp	/^void QCPItemPosition::setPixelPosition(const QPointF &pixelPosition)$/;"	f	class:QCPItemPosition	typeref:typename:void
setPixelPosition	qcustomplot.h	/^  void setPixelPosition(const QPointF &pixelPosition);$/;"	p	class:QCPItemPosition	typeref:typename:void
setPixmap	qcustomplot.cpp	/^void QCPItemPixmap::setPixmap(const QPixmap &pixmap)$/;"	f	class:QCPItemPixmap	typeref:typename:void
setPixmap	qcustomplot.cpp	/^void QCPScatterStyle::setPixmap(const QPixmap &pixmap)$/;"	f	class:QCPScatterStyle	typeref:typename:void
setPixmap	qcustomplot.h	/^  void setPixmap(const QPixmap &pixmap);$/;"	p	class:QCPItemPixmap	typeref:typename:void
setPixmap	qcustomplot.h	/^  void setPixmap(const QPixmap &pixmap);$/;"	p	class:QCPScatterStyle	typeref:typename:void
setPlottingHint	qcustomplot.cpp	/^void QCustomPlot::setPlottingHint(QCP::PlottingHint hint, bool enabled)$/;"	f	class:QCustomPlot	typeref:typename:void
setPlottingHint	qcustomplot.h	/^  void setPlottingHint(QCP::PlottingHint hint, bool enabled=true);$/;"	p	class:QCustomPlot	typeref:typename:void
setPlottingHints	qcustomplot.cpp	/^void QCustomPlot::setPlottingHints(const QCP::PlottingHints &hints)$/;"	f	class:QCustomPlot	typeref:typename:void
setPlottingHints	qcustomplot.h	/^  void setPlottingHints(const QCP::PlottingHints &hints);$/;"	p	class:QCustomPlot	typeref:typename:void
setPositionAlignment	qcustomplot.cpp	/^void QCPItemText::setPositionAlignment(Qt::Alignment alignment)$/;"	f	class:QCPItemText	typeref:typename:void
setPositionAlignment	qcustomplot.h	/^  void setPositionAlignment(Qt::Alignment alignment);$/;"	p	class:QCPItemText	typeref:typename:void
setRange	qcustomplot.cpp	/^void QCPAxis::setRange(const QCPRange &range)$/;"	f	class:QCPAxis	typeref:typename:void
setRange	qcustomplot.cpp	/^void QCPAxis::setRange(double lower, double upper)$/;"	f	class:QCPAxis	typeref:typename:void
setRange	qcustomplot.cpp	/^void QCPAxis::setRange(double position, double size, Qt::AlignmentFlag alignment)$/;"	f	class:QCPAxis	typeref:typename:void
setRange	qcustomplot.cpp	/^void QCPColorMapData::setRange(const QCPRange &keyRange, const QCPRange &valueRange)$/;"	f	class:QCPColorMapData	typeref:typename:void
setRange	qcustomplot.h	/^  Q_SLOT void setRange(const QCPRange &range);$/;"	p	class:QCPAxis	typeref:typename:Q_SLOT void
setRange	qcustomplot.h	/^  void setRange(const QCPRange &keyRange, const QCPRange &valueRange);$/;"	p	class:QCPColorMapData	typeref:typename:void
setRange	qcustomplot.h	/^  void setRange(double lower, double upper);$/;"	p	class:QCPAxis	typeref:typename:void
setRange	qcustomplot.h	/^  void setRange(double position, double size, Qt::AlignmentFlag alignment);$/;"	p	class:QCPAxis	typeref:typename:void
setRangeDrag	qcustomplot.cpp	/^void QCPAxisRect::setRangeDrag(Qt::Orientations orientations)$/;"	f	class:QCPAxisRect	typeref:typename:void
setRangeDrag	qcustomplot.cpp	/^void QCPColorScale::setRangeDrag(bool enabled)$/;"	f	class:QCPColorScale	typeref:typename:void
setRangeDrag	qcustomplot.h	/^  void setRangeDrag(Qt::Orientations orientations);$/;"	p	class:QCPAxisRect	typeref:typename:void
setRangeDrag	qcustomplot.h	/^  void setRangeDrag(bool enabled);$/;"	p	class:QCPColorScale	typeref:typename:void
setRangeDragAxes	qcustomplot.cpp	/^void QCPAxisRect::setRangeDragAxes(QCPAxis *horizontal, QCPAxis *vertical)$/;"	f	class:QCPAxisRect	typeref:typename:void
setRangeDragAxes	qcustomplot.cpp	/^void QCPAxisRect::setRangeDragAxes(QList<QCPAxis*> axes)$/;"	f	class:QCPAxisRect	typeref:typename:void
setRangeDragAxes	qcustomplot.cpp	/^void QCPAxisRect::setRangeDragAxes(QList<QCPAxis*> horizontal, QList<QCPAxis*> vertical)$/;"	f	class:QCPAxisRect	typeref:typename:void
setRangeDragAxes	qcustomplot.h	/^  void setRangeDragAxes(QCPAxis *horizontal, QCPAxis *vertical);$/;"	p	class:QCPAxisRect	typeref:typename:void
setRangeDragAxes	qcustomplot.h	/^  void setRangeDragAxes(QList<QCPAxis*> axes);$/;"	p	class:QCPAxisRect	typeref:typename:void
setRangeDragAxes	qcustomplot.h	/^  void setRangeDragAxes(QList<QCPAxis*> horizontal, QList<QCPAxis*> vertical);$/;"	p	class:QCPAxisRect	typeref:typename:void
setRangeLower	qcustomplot.cpp	/^void QCPAxis::setRangeLower(double lower)$/;"	f	class:QCPAxis	typeref:typename:void
setRangeLower	qcustomplot.h	/^  void setRangeLower(double lower);$/;"	p	class:QCPAxis	typeref:typename:void
setRangeReversed	qcustomplot.cpp	/^void QCPAxis::setRangeReversed(bool reversed)$/;"	f	class:QCPAxis	typeref:typename:void
setRangeReversed	qcustomplot.h	/^  void setRangeReversed(bool reversed);$/;"	p	class:QCPAxis	typeref:typename:void
setRangeUpper	qcustomplot.cpp	/^void QCPAxis::setRangeUpper(double upper)$/;"	f	class:QCPAxis	typeref:typename:void
setRangeUpper	qcustomplot.h	/^  void setRangeUpper(double upper);$/;"	p	class:QCPAxis	typeref:typename:void
setRangeZoom	qcustomplot.cpp	/^void QCPAxisRect::setRangeZoom(Qt::Orientations orientations)$/;"	f	class:QCPAxisRect	typeref:typename:void
setRangeZoom	qcustomplot.cpp	/^void QCPColorScale::setRangeZoom(bool enabled)$/;"	f	class:QCPColorScale	typeref:typename:void
setRangeZoom	qcustomplot.h	/^  void setRangeZoom(Qt::Orientations orientations);$/;"	p	class:QCPAxisRect	typeref:typename:void
setRangeZoom	qcustomplot.h	/^  void setRangeZoom(bool enabled);$/;"	p	class:QCPColorScale	typeref:typename:void
setRangeZoomAxes	qcustomplot.cpp	/^void QCPAxisRect::setRangeZoomAxes(QCPAxis *horizontal, QCPAxis *vertical)$/;"	f	class:QCPAxisRect	typeref:typename:void
setRangeZoomAxes	qcustomplot.cpp	/^void QCPAxisRect::setRangeZoomAxes(QList<QCPAxis*> axes)$/;"	f	class:QCPAxisRect	typeref:typename:void
setRangeZoomAxes	qcustomplot.cpp	/^void QCPAxisRect::setRangeZoomAxes(QList<QCPAxis*> horizontal, QList<QCPAxis*> vertical)$/;"	f	class:QCPAxisRect	typeref:typename:void
setRangeZoomAxes	qcustomplot.h	/^  void setRangeZoomAxes(QCPAxis *horizontal, QCPAxis *vertical);$/;"	p	class:QCPAxisRect	typeref:typename:void
setRangeZoomAxes	qcustomplot.h	/^  void setRangeZoomAxes(QList<QCPAxis*> axes);$/;"	p	class:QCPAxisRect	typeref:typename:void
setRangeZoomAxes	qcustomplot.h	/^  void setRangeZoomAxes(QList<QCPAxis*> horizontal, QList<QCPAxis*> vertical);$/;"	p	class:QCPAxisRect	typeref:typename:void
setRangeZoomFactor	qcustomplot.cpp	/^void QCPAxisRect::setRangeZoomFactor(double factor)$/;"	f	class:QCPAxisRect	typeref:typename:void
setRangeZoomFactor	qcustomplot.cpp	/^void QCPAxisRect::setRangeZoomFactor(double horizontalFactor, double verticalFactor)$/;"	f	class:QCPAxisRect	typeref:typename:void
setRangeZoomFactor	qcustomplot.h	/^  void setRangeZoomFactor(double factor);$/;"	p	class:QCPAxisRect	typeref:typename:void
setRangeZoomFactor	qcustomplot.h	/^  void setRangeZoomFactor(double horizontalFactor, double verticalFactor);$/;"	p	class:QCPAxisRect	typeref:typename:void
setRotation	qcustomplot.cpp	/^void QCPItemText::setRotation(double degrees)$/;"	f	class:QCPItemText	typeref:typename:void
setRotation	qcustomplot.h	/^  void setRotation(double degrees);$/;"	p	class:QCPItemText	typeref:typename:void
setRowSpacing	qcustomplot.cpp	/^void QCPLayoutGrid::setRowSpacing(int pixels)$/;"	f	class:QCPLayoutGrid	typeref:typename:void
setRowSpacing	qcustomplot.h	/^  void setRowSpacing(int pixels);$/;"	p	class:QCPLayoutGrid	typeref:typename:void
setRowStretchFactor	qcustomplot.cpp	/^void QCPLayoutGrid::setRowStretchFactor(int row, double factor)$/;"	f	class:QCPLayoutGrid	typeref:typename:void
setRowStretchFactor	qcustomplot.h	/^  void setRowStretchFactor(int row, double factor);$/;"	p	class:QCPLayoutGrid	typeref:typename:void
setRowStretchFactors	qcustomplot.cpp	/^void QCPLayoutGrid::setRowStretchFactors(const QList<double> &factors)$/;"	f	class:QCPLayoutGrid	typeref:typename:void
setRowStretchFactors	qcustomplot.h	/^  void setRowStretchFactors(const QList<double> &factors);$/;"	p	class:QCPLayoutGrid	typeref:typename:void
setScaleRatio	qcustomplot.cpp	/^void QCPAxis::setScaleRatio(const QCPAxis *otherAxis, double ratio)$/;"	f	class:QCPAxis	typeref:typename:void
setScaleRatio	qcustomplot.h	/^  void setScaleRatio(const QCPAxis *otherAxis, double ratio=1.0);$/;"	p	class:QCPAxis	typeref:typename:void
setScaleStrategy	qcustomplot.cpp	/^void QCPAxisTickerFixed::setScaleStrategy(QCPAxisTickerFixed::ScaleStrategy strategy)$/;"	f	class:QCPAxisTickerFixed	typeref:typename:void
setScaleStrategy	qcustomplot.h	/^  void setScaleStrategy(ScaleStrategy strategy);$/;"	p	class:QCPAxisTickerFixed	typeref:typename:void
setScaleType	qcustomplot.cpp	/^void QCPAxis::setScaleType(QCPAxis::ScaleType type)$/;"	f	class:QCPAxis	typeref:typename:void
setScaleType	qcustomplot.h	/^  Q_SLOT void setScaleType(QCPAxis::ScaleType type);$/;"	p	class:QCPAxis	typeref:typename:Q_SLOT void
setScaled	qcustomplot.cpp	/^void QCPItemPixmap::setScaled(bool scaled, Qt::AspectRatioMode aspectRatioMode, Qt::Transformati/;"	f	class:QCPItemPixmap	typeref:typename:void
setScaled	qcustomplot.h	/^  void setScaled(bool scaled, Qt::AspectRatioMode aspectRatioMode=Qt::KeepAspectRatio, Qt::Trans/;"	p	class:QCPItemPixmap	typeref:typename:void
setScatterSkip	qcustomplot.cpp	/^void QCPCurve::setScatterSkip(int skip)$/;"	f	class:QCPCurve	typeref:typename:void
setScatterSkip	qcustomplot.cpp	/^void QCPGraph::setScatterSkip(int skip)$/;"	f	class:QCPGraph	typeref:typename:void
setScatterSkip	qcustomplot.h	/^  void setScatterSkip(int skip);$/;"	p	class:QCPCurve	typeref:typename:void
setScatterSkip	qcustomplot.h	/^  void setScatterSkip(int skip);$/;"	p	class:QCPGraph	typeref:typename:void
setScatterStyle	qcustomplot.cpp	/^void QCPCurve::setScatterStyle(const QCPScatterStyle &style)$/;"	f	class:QCPCurve	typeref:typename:void
setScatterStyle	qcustomplot.cpp	/^void QCPGraph::setScatterStyle(const QCPScatterStyle &style)$/;"	f	class:QCPGraph	typeref:typename:void
setScatterStyle	qcustomplot.cpp	/^void QCPSelectionDecorator::setScatterStyle(const QCPScatterStyle &scatterStyle, QCPScatterStyle/;"	f	class:QCPSelectionDecorator	typeref:typename:void
setScatterStyle	qcustomplot.h	/^  void setScatterStyle(const QCPScatterStyle &scatterStyle, QCPScatterStyle::ScatterProperties u/;"	p	class:QCPSelectionDecorator	typeref:typename:void
setScatterStyle	qcustomplot.h	/^  void setScatterStyle(const QCPScatterStyle &style);$/;"	p	class:QCPCurve	typeref:typename:void
setScatterStyle	qcustomplot.h	/^  void setScatterStyle(const QCPScatterStyle &style);$/;"	p	class:QCPGraph	typeref:typename:void
setSelectable	qcustomplot.cpp	/^void QCPAbstractItem::setSelectable(bool selectable)$/;"	f	class:QCPAbstractItem	typeref:typename:void
setSelectable	qcustomplot.cpp	/^void QCPAbstractLegendItem::setSelectable(bool selectable)$/;"	f	class:QCPAbstractLegendItem	typeref:typename:void
setSelectable	qcustomplot.cpp	/^void QCPAbstractPlottable::setSelectable(QCP::SelectionType selectable)$/;"	f	class:QCPAbstractPlottable	typeref:typename:void
setSelectable	qcustomplot.cpp	/^void QCPTextElement::setSelectable(bool selectable)$/;"	f	class:QCPTextElement	typeref:typename:void
setSelectable	qcustomplot.h	/^  Q_SLOT void setSelectable(QCP::SelectionType selectable);$/;"	p	class:QCPAbstractPlottable	typeref:typename:Q_SLOT void
setSelectable	qcustomplot.h	/^  Q_SLOT void setSelectable(bool selectable);$/;"	p	class:QCPAbstractItem	typeref:typename:Q_SLOT void
setSelectable	qcustomplot.h	/^  Q_SLOT void setSelectable(bool selectable);$/;"	p	class:QCPAbstractLegendItem	typeref:typename:Q_SLOT void
setSelectable	qcustomplot.h	/^  Q_SLOT void setSelectable(bool selectable);$/;"	p	class:QCPTextElement	typeref:typename:Q_SLOT void
setSelectableParts	qcustomplot.cpp	/^void QCPAxis::setSelectableParts(const SelectableParts &selectable)$/;"	f	class:QCPAxis	typeref:typename:void
setSelectableParts	qcustomplot.cpp	/^void QCPLegend::setSelectableParts(const SelectableParts &selectable)$/;"	f	class:QCPLegend	typeref:typename:void
setSelectableParts	qcustomplot.h	/^  Q_SLOT void setSelectableParts(const QCPAxis::SelectableParts &selectableParts);$/;"	p	class:QCPAxis	typeref:typename:Q_SLOT void
setSelectableParts	qcustomplot.h	/^  Q_SLOT void setSelectableParts(const SelectableParts &selectableParts);$/;"	p	class:QCPLegend	typeref:typename:Q_SLOT void
setSelected	qcustomplot.cpp	/^void QCPAbstractItem::setSelected(bool selected)$/;"	f	class:QCPAbstractItem	typeref:typename:void
setSelected	qcustomplot.cpp	/^void QCPAbstractLegendItem::setSelected(bool selected)$/;"	f	class:QCPAbstractLegendItem	typeref:typename:void
setSelected	qcustomplot.cpp	/^void QCPTextElement::setSelected(bool selected)$/;"	f	class:QCPTextElement	typeref:typename:void
setSelected	qcustomplot.h	/^  Q_SLOT void setSelected(bool selected);$/;"	p	class:QCPAbstractItem	typeref:typename:Q_SLOT void
setSelected	qcustomplot.h	/^  Q_SLOT void setSelected(bool selected);$/;"	p	class:QCPAbstractLegendItem	typeref:typename:Q_SLOT void
setSelected	qcustomplot.h	/^  Q_SLOT void setSelected(bool selected);$/;"	p	class:QCPTextElement	typeref:typename:Q_SLOT void
setSelectedBasePen	qcustomplot.cpp	/^void QCPAxis::setSelectedBasePen(const QPen &pen)$/;"	f	class:QCPAxis	typeref:typename:void
setSelectedBasePen	qcustomplot.h	/^  void setSelectedBasePen(const QPen &pen);$/;"	p	class:QCPAxis	typeref:typename:void
setSelectedBorderPen	qcustomplot.cpp	/^void QCPLegend::setSelectedBorderPen(const QPen &pen)$/;"	f	class:QCPLegend	typeref:typename:void
setSelectedBorderPen	qcustomplot.h	/^  void setSelectedBorderPen(const QPen &pen);$/;"	p	class:QCPLegend	typeref:typename:void
setSelectedBrush	qcustomplot.cpp	/^void QCPItemEllipse::setSelectedBrush(const QBrush &brush)$/;"	f	class:QCPItemEllipse	typeref:typename:void
setSelectedBrush	qcustomplot.cpp	/^void QCPItemRect::setSelectedBrush(const QBrush &brush)$/;"	f	class:QCPItemRect	typeref:typename:void
setSelectedBrush	qcustomplot.cpp	/^void QCPItemText::setSelectedBrush(const QBrush &brush)$/;"	f	class:QCPItemText	typeref:typename:void
setSelectedBrush	qcustomplot.cpp	/^void QCPItemTracer::setSelectedBrush(const QBrush &brush)$/;"	f	class:QCPItemTracer	typeref:typename:void
setSelectedBrush	qcustomplot.cpp	/^void QCPLegend::setSelectedBrush(const QBrush &brush)$/;"	f	class:QCPLegend	typeref:typename:void
setSelectedBrush	qcustomplot.h	/^  void setSelectedBrush(const QBrush &brush);$/;"	p	class:QCPItemEllipse	typeref:typename:void
setSelectedBrush	qcustomplot.h	/^  void setSelectedBrush(const QBrush &brush);$/;"	p	class:QCPItemRect	typeref:typename:void
setSelectedBrush	qcustomplot.h	/^  void setSelectedBrush(const QBrush &brush);$/;"	p	class:QCPItemText	typeref:typename:void
setSelectedBrush	qcustomplot.h	/^  void setSelectedBrush(const QBrush &brush);$/;"	p	class:QCPItemTracer	typeref:typename:void
setSelectedBrush	qcustomplot.h	/^  void setSelectedBrush(const QBrush &brush);$/;"	p	class:QCPLegend	typeref:typename:void
setSelectedColor	qcustomplot.cpp	/^void QCPItemText::setSelectedColor(const QColor &color)$/;"	f	class:QCPItemText	typeref:typename:void
setSelectedColor	qcustomplot.h	/^  void setSelectedColor(const QColor &color);$/;"	p	class:QCPItemText	typeref:typename:void
setSelectedFont	qcustomplot.cpp	/^void QCPAbstractLegendItem::setSelectedFont(const QFont &font)$/;"	f	class:QCPAbstractLegendItem	typeref:typename:void
setSelectedFont	qcustomplot.cpp	/^void QCPItemText::setSelectedFont(const QFont &font)$/;"	f	class:QCPItemText	typeref:typename:void
setSelectedFont	qcustomplot.cpp	/^void QCPLegend::setSelectedFont(const QFont &font)$/;"	f	class:QCPLegend	typeref:typename:void
setSelectedFont	qcustomplot.cpp	/^void QCPTextElement::setSelectedFont(const QFont &font)$/;"	f	class:QCPTextElement	typeref:typename:void
setSelectedFont	qcustomplot.h	/^  void setSelectedFont(const QFont &font);$/;"	p	class:QCPAbstractLegendItem	typeref:typename:void
setSelectedFont	qcustomplot.h	/^  void setSelectedFont(const QFont &font);$/;"	p	class:QCPItemText	typeref:typename:void
setSelectedFont	qcustomplot.h	/^  void setSelectedFont(const QFont &font);$/;"	p	class:QCPLegend	typeref:typename:void
setSelectedFont	qcustomplot.h	/^  void setSelectedFont(const QFont &font);$/;"	p	class:QCPTextElement	typeref:typename:void
setSelectedIconBorderPen	qcustomplot.cpp	/^void QCPLegend::setSelectedIconBorderPen(const QPen &pen)$/;"	f	class:QCPLegend	typeref:typename:void
setSelectedIconBorderPen	qcustomplot.h	/^  void setSelectedIconBorderPen(const QPen &pen);$/;"	p	class:QCPLegend	typeref:typename:void
setSelectedLabelColor	qcustomplot.cpp	/^void QCPAxis::setSelectedLabelColor(const QColor &color)$/;"	f	class:QCPAxis	typeref:typename:void
setSelectedLabelColor	qcustomplot.h	/^  void setSelectedLabelColor(const QColor &color);$/;"	p	class:QCPAxis	typeref:typename:void
setSelectedLabelFont	qcustomplot.cpp	/^void QCPAxis::setSelectedLabelFont(const QFont &font)$/;"	f	class:QCPAxis	typeref:typename:void
setSelectedLabelFont	qcustomplot.h	/^  void setSelectedLabelFont(const QFont &font);$/;"	p	class:QCPAxis	typeref:typename:void
setSelectedParts	qcustomplot.cpp	/^void QCPAxis::setSelectedParts(const SelectableParts &selected)$/;"	f	class:QCPAxis	typeref:typename:void
setSelectedParts	qcustomplot.cpp	/^void QCPLegend::setSelectedParts(const SelectableParts &selected)$/;"	f	class:QCPLegend	typeref:typename:void
setSelectedParts	qcustomplot.h	/^  Q_SLOT void setSelectedParts(const QCPAxis::SelectableParts &selectedParts);$/;"	p	class:QCPAxis	typeref:typename:Q_SLOT void
setSelectedParts	qcustomplot.h	/^  Q_SLOT void setSelectedParts(const SelectableParts &selectedParts);$/;"	p	class:QCPLegend	typeref:typename:Q_SLOT void
setSelectedPen	qcustomplot.cpp	/^void QCPItemBracket::setSelectedPen(const QPen &pen)$/;"	f	class:QCPItemBracket	typeref:typename:void
setSelectedPen	qcustomplot.cpp	/^void QCPItemCurve::setSelectedPen(const QPen &pen)$/;"	f	class:QCPItemCurve	typeref:typename:void
setSelectedPen	qcustomplot.cpp	/^void QCPItemEllipse::setSelectedPen(const QPen &pen)$/;"	f	class:QCPItemEllipse	typeref:typename:void
setSelectedPen	qcustomplot.cpp	/^void QCPItemLine::setSelectedPen(const QPen &pen)$/;"	f	class:QCPItemLine	typeref:typename:void
setSelectedPen	qcustomplot.cpp	/^void QCPItemPixmap::setSelectedPen(const QPen &pen)$/;"	f	class:QCPItemPixmap	typeref:typename:void
setSelectedPen	qcustomplot.cpp	/^void QCPItemRect::setSelectedPen(const QPen &pen)$/;"	f	class:QCPItemRect	typeref:typename:void
setSelectedPen	qcustomplot.cpp	/^void QCPItemStraightLine::setSelectedPen(const QPen &pen)$/;"	f	class:QCPItemStraightLine	typeref:typename:void
setSelectedPen	qcustomplot.cpp	/^void QCPItemText::setSelectedPen(const QPen &pen)$/;"	f	class:QCPItemText	typeref:typename:void
setSelectedPen	qcustomplot.cpp	/^void QCPItemTracer::setSelectedPen(const QPen &pen)$/;"	f	class:QCPItemTracer	typeref:typename:void
setSelectedPen	qcustomplot.h	/^  void setSelectedPen(const QPen &pen);$/;"	p	class:QCPItemBracket	typeref:typename:void
setSelectedPen	qcustomplot.h	/^  void setSelectedPen(const QPen &pen);$/;"	p	class:QCPItemCurve	typeref:typename:void
setSelectedPen	qcustomplot.h	/^  void setSelectedPen(const QPen &pen);$/;"	p	class:QCPItemEllipse	typeref:typename:void
setSelectedPen	qcustomplot.h	/^  void setSelectedPen(const QPen &pen);$/;"	p	class:QCPItemLine	typeref:typename:void
setSelectedPen	qcustomplot.h	/^  void setSelectedPen(const QPen &pen);$/;"	p	class:QCPItemPixmap	typeref:typename:void
setSelectedPen	qcustomplot.h	/^  void setSelectedPen(const QPen &pen);$/;"	p	class:QCPItemRect	typeref:typename:void
setSelectedPen	qcustomplot.h	/^  void setSelectedPen(const QPen &pen);$/;"	p	class:QCPItemStraightLine	typeref:typename:void
setSelectedPen	qcustomplot.h	/^  void setSelectedPen(const QPen &pen);$/;"	p	class:QCPItemText	typeref:typename:void
setSelectedPen	qcustomplot.h	/^  void setSelectedPen(const QPen &pen);$/;"	p	class:QCPItemTracer	typeref:typename:void
setSelectedSubTickPen	qcustomplot.cpp	/^void QCPAxis::setSelectedSubTickPen(const QPen &pen)$/;"	f	class:QCPAxis	typeref:typename:void
setSelectedSubTickPen	qcustomplot.h	/^  void setSelectedSubTickPen(const QPen &pen);$/;"	p	class:QCPAxis	typeref:typename:void
setSelectedTextColor	qcustomplot.cpp	/^void QCPAbstractLegendItem::setSelectedTextColor(const QColor &color)$/;"	f	class:QCPAbstractLegendItem	typeref:typename:void
setSelectedTextColor	qcustomplot.cpp	/^void QCPLegend::setSelectedTextColor(const QColor &color)$/;"	f	class:QCPLegend	typeref:typename:void
setSelectedTextColor	qcustomplot.cpp	/^void QCPTextElement::setSelectedTextColor(const QColor &color)$/;"	f	class:QCPTextElement	typeref:typename:void
setSelectedTextColor	qcustomplot.h	/^  void setSelectedTextColor(const QColor &color);$/;"	p	class:QCPAbstractLegendItem	typeref:typename:void
setSelectedTextColor	qcustomplot.h	/^  void setSelectedTextColor(const QColor &color);$/;"	p	class:QCPLegend	typeref:typename:void
setSelectedTextColor	qcustomplot.h	/^  void setSelectedTextColor(const QColor &color);$/;"	p	class:QCPTextElement	typeref:typename:void
setSelectedTickLabelColor	qcustomplot.cpp	/^void QCPAxis::setSelectedTickLabelColor(const QColor &color)$/;"	f	class:QCPAxis	typeref:typename:void
setSelectedTickLabelColor	qcustomplot.h	/^  void setSelectedTickLabelColor(const QColor &color);$/;"	p	class:QCPAxis	typeref:typename:void
setSelectedTickLabelFont	qcustomplot.cpp	/^void QCPAxis::setSelectedTickLabelFont(const QFont &font)$/;"	f	class:QCPAxis	typeref:typename:void
setSelectedTickLabelFont	qcustomplot.h	/^  void setSelectedTickLabelFont(const QFont &font);$/;"	p	class:QCPAxis	typeref:typename:void
setSelectedTickPen	qcustomplot.cpp	/^void QCPAxis::setSelectedTickPen(const QPen &pen)$/;"	f	class:QCPAxis	typeref:typename:void
setSelectedTickPen	qcustomplot.h	/^  void setSelectedTickPen(const QPen &pen);$/;"	p	class:QCPAxis	typeref:typename:void
setSelection	qcustomplot.cpp	/^void QCPAbstractPlottable::setSelection(QCPDataSelection selection)$/;"	f	class:QCPAbstractPlottable	typeref:typename:void
setSelection	qcustomplot.h	/^  Q_SLOT void setSelection(QCPDataSelection selection);$/;"	p	class:QCPAbstractPlottable	typeref:typename:Q_SLOT void
setSelectionDecorator	qcustomplot.cpp	/^void QCPAbstractPlottable::setSelectionDecorator(QCPSelectionDecorator *decorator)$/;"	f	class:QCPAbstractPlottable	typeref:typename:void
setSelectionDecorator	qcustomplot.h	/^  void setSelectionDecorator(QCPSelectionDecorator *decorator);$/;"	p	class:QCPAbstractPlottable	typeref:typename:void
setSelectionRect	qcustomplot.cpp	/^void QCustomPlot::setSelectionRect(QCPSelectionRect *selectionRect)$/;"	f	class:QCustomPlot	typeref:typename:void
setSelectionRect	qcustomplot.h	/^  void setSelectionRect(QCPSelectionRect *selectionRect);$/;"	p	class:QCustomPlot	typeref:typename:void
setSelectionRectMode	qcustomplot.cpp	/^void QCustomPlot::setSelectionRectMode(QCP::SelectionRectMode mode)$/;"	f	class:QCustomPlot	typeref:typename:void
setSelectionRectMode	qcustomplot.h	/^  void setSelectionRectMode(QCP::SelectionRectMode mode);$/;"	p	class:QCustomPlot	typeref:typename:void
setSelectionTolerance	qcustomplot.cpp	/^void QCustomPlot::setSelectionTolerance(int pixels)$/;"	f	class:QCustomPlot	typeref:typename:void
setSelectionTolerance	qcustomplot.h	/^  void setSelectionTolerance(int pixels);$/;"	p	class:QCustomPlot	typeref:typename:void
setShape	qcustomplot.cpp	/^void QCPScatterStyle::setShape(QCPScatterStyle::ScatterShape shape)$/;"	f	class:QCPScatterStyle	typeref:typename:void
setShape	qcustomplot.h	/^  void setShape(ScatterShape shape);$/;"	p	class:QCPScatterStyle	typeref:typename:void
setSize	qcustomplot.cpp	/^void QCPAbstractPaintBuffer::setSize(const QSize &size)$/;"	f	class:QCPAbstractPaintBuffer	typeref:typename:void
setSize	qcustomplot.cpp	/^void QCPColorMapData::setSize(int keySize, int valueSize)$/;"	f	class:QCPColorMapData	typeref:typename:void
setSize	qcustomplot.cpp	/^void QCPItemTracer::setSize(double size)$/;"	f	class:QCPItemTracer	typeref:typename:void
setSize	qcustomplot.cpp	/^void QCPScatterStyle::setSize(double size)$/;"	f	class:QCPScatterStyle	typeref:typename:void
setSize	qcustomplot.h	/^  void setSize(const QSize &size);$/;"	p	class:QCPAbstractPaintBuffer	typeref:typename:void
setSize	qcustomplot.h	/^  void setSize(double size);$/;"	p	class:QCPItemTracer	typeref:typename:void
setSize	qcustomplot.h	/^  void setSize(double size);$/;"	p	class:QCPScatterStyle	typeref:typename:void
setSize	qcustomplot.h	/^  void setSize(int keySize, int valueSize);$/;"	p	class:QCPColorMapData	typeref:typename:void
setSizeConstraintRect	qcustomplot.cpp	/^void QCPLayoutElement::setSizeConstraintRect(SizeConstraintRect constraintRect)$/;"	f	class:QCPLayoutElement	typeref:typename:void
setSizeConstraintRect	qcustomplot.h	/^  void setSizeConstraintRect(SizeConstraintRect constraintRect);$/;"	p	class:QCPLayoutElement	typeref:typename:void
setSpacing	qcustomplot.cpp	/^void QCPBarsGroup::setSpacing(double spacing)$/;"	f	class:QCPBarsGroup	typeref:typename:void
setSpacing	qcustomplot.h	/^  void setSpacing(double spacing);$/;"	p	class:QCPBarsGroup	typeref:typename:void
setSpacingType	qcustomplot.cpp	/^void QCPBarsGroup::setSpacingType(SpacingType spacingType)$/;"	f	class:QCPBarsGroup	typeref:typename:void
setSpacingType	qcustomplot.h	/^  void setSpacingType(SpacingType spacingType);$/;"	p	class:QCPBarsGroup	typeref:typename:void
setStackingGap	qcustomplot.cpp	/^void QCPBars::setStackingGap(double pixels)$/;"	f	class:QCPBars	typeref:typename:void
setStackingGap	qcustomplot.h	/^  void setStackingGap(double pixels);$/;"	p	class:QCPBars	typeref:typename:void
setStyle	qcustomplot.cpp	/^void QCPItemBracket::setStyle(QCPItemBracket::BracketStyle style)$/;"	f	class:QCPItemBracket	typeref:typename:void
setStyle	qcustomplot.cpp	/^void QCPItemTracer::setStyle(QCPItemTracer::TracerStyle style)$/;"	f	class:QCPItemTracer	typeref:typename:void
setStyle	qcustomplot.cpp	/^void QCPLineEnding::setStyle(QCPLineEnding::EndingStyle style)$/;"	f	class:QCPLineEnding	typeref:typename:void
setStyle	qcustomplot.h	/^  void setStyle(BracketStyle style);$/;"	p	class:QCPItemBracket	typeref:typename:void
setStyle	qcustomplot.h	/^  void setStyle(EndingStyle style);$/;"	p	class:QCPLineEnding	typeref:typename:void
setStyle	qcustomplot.h	/^  void setStyle(TracerStyle style);$/;"	p	class:QCPItemTracer	typeref:typename:void
setSubGridPen	qcustomplot.cpp	/^void QCPGrid::setSubGridPen(const QPen &pen)$/;"	f	class:QCPGrid	typeref:typename:void
setSubGridPen	qcustomplot.h	/^  void setSubGridPen(const QPen &pen);$/;"	p	class:QCPGrid	typeref:typename:void
setSubGridVisible	qcustomplot.cpp	/^void QCPGrid::setSubGridVisible(bool visible)$/;"	f	class:QCPGrid	typeref:typename:void
setSubGridVisible	qcustomplot.h	/^  void setSubGridVisible(bool visible);$/;"	p	class:QCPGrid	typeref:typename:void
setSubTickCount	qcustomplot.cpp	/^void QCPAxisTickerLog::setSubTickCount(int subTicks)$/;"	f	class:QCPAxisTickerLog	typeref:typename:void
setSubTickCount	qcustomplot.cpp	/^void QCPAxisTickerText::setSubTickCount(int subTicks)$/;"	f	class:QCPAxisTickerText	typeref:typename:void
setSubTickCount	qcustomplot.h	/^  void setSubTickCount(int subTicks);$/;"	p	class:QCPAxisTickerLog	typeref:typename:void
setSubTickCount	qcustomplot.h	/^  void setSubTickCount(int subTicks);$/;"	p	class:QCPAxisTickerText	typeref:typename:void
setSubTickLength	qcustomplot.cpp	/^void QCPAxis::setSubTickLength(int inside, int outside)$/;"	f	class:QCPAxis	typeref:typename:void
setSubTickLength	qcustomplot.h	/^  void setSubTickLength(int inside, int outside=0);$/;"	p	class:QCPAxis	typeref:typename:void
setSubTickLengthIn	qcustomplot.cpp	/^void QCPAxis::setSubTickLengthIn(int inside)$/;"	f	class:QCPAxis	typeref:typename:void
setSubTickLengthIn	qcustomplot.h	/^  void setSubTickLengthIn(int inside);$/;"	p	class:QCPAxis	typeref:typename:void
setSubTickLengthOut	qcustomplot.cpp	/^void QCPAxis::setSubTickLengthOut(int outside)$/;"	f	class:QCPAxis	typeref:typename:void
setSubTickLengthOut	qcustomplot.h	/^  void setSubTickLengthOut(int outside);$/;"	p	class:QCPAxis	typeref:typename:void
setSubTickPen	qcustomplot.cpp	/^void QCPAxis::setSubTickPen(const QPen &pen)$/;"	f	class:QCPAxis	typeref:typename:void
setSubTickPen	qcustomplot.h	/^  void setSubTickPen(const QPen &pen);$/;"	p	class:QCPAxis	typeref:typename:void
setSubTicks	qcustomplot.cpp	/^void QCPAxis::setSubTicks(bool show)$/;"	f	class:QCPAxis	typeref:typename:void
setSubTicks	qcustomplot.h	/^  void setSubTicks(bool show);$/;"	p	class:QCPAxis	typeref:typename:void
setSymbolGap	qcustomplot.cpp	/^void QCPErrorBars::setSymbolGap(double pixels)$/;"	f	class:QCPErrorBars	typeref:typename:void
setSymbolGap	qcustomplot.h	/^  void setSymbolGap(double pixels);$/;"	p	class:QCPErrorBars	typeref:typename:void
setTail	qcustomplot.cpp	/^void QCPItemCurve::setTail(const QCPLineEnding &tail)$/;"	f	class:QCPItemCurve	typeref:typename:void
setTail	qcustomplot.cpp	/^void QCPItemLine::setTail(const QCPLineEnding &tail)$/;"	f	class:QCPItemLine	typeref:typename:void
setTail	qcustomplot.h	/^  void setTail(const QCPLineEnding &tail);$/;"	p	class:QCPItemCurve	typeref:typename:void
setTail	qcustomplot.h	/^  void setTail(const QCPLineEnding &tail);$/;"	p	class:QCPItemLine	typeref:typename:void
setTangentAverage	qcustomplot.cpp	/^void QCPSelectionDecoratorBracket::setTangentAverage(int pointCount)$/;"	f	class:QCPSelectionDecoratorBracket	typeref:typename:void
setTangentAverage	qcustomplot.h	/^  void setTangentAverage(int pointCount);$/;"	p	class:QCPSelectionDecoratorBracket	typeref:typename:void
setTangentToData	qcustomplot.cpp	/^void QCPSelectionDecoratorBracket::setTangentToData(bool enabled)$/;"	f	class:QCPSelectionDecoratorBracket	typeref:typename:void
setTangentToData	qcustomplot.h	/^  void setTangentToData(bool enabled);$/;"	p	class:QCPSelectionDecoratorBracket	typeref:typename:void
setText	qcustomplot.cpp	/^void QCPItemText::setText(const QString &text)$/;"	f	class:QCPItemText	typeref:typename:void
setText	qcustomplot.cpp	/^void QCPTextElement::setText(const QString &text)$/;"	f	class:QCPTextElement	typeref:typename:void
setText	qcustomplot.h	/^  void setText(const QString &text);$/;"	p	class:QCPItemText	typeref:typename:void
setText	qcustomplot.h	/^  void setText(const QString &text);$/;"	p	class:QCPTextElement	typeref:typename:void
setTextAlignment	qcustomplot.cpp	/^void QCPItemText::setTextAlignment(Qt::Alignment alignment)$/;"	f	class:QCPItemText	typeref:typename:void
setTextAlignment	qcustomplot.h	/^  void setTextAlignment(Qt::Alignment alignment);$/;"	p	class:QCPItemText	typeref:typename:void
setTextColor	qcustomplot.cpp	/^void QCPAbstractLegendItem::setTextColor(const QColor &color)$/;"	f	class:QCPAbstractLegendItem	typeref:typename:void
setTextColor	qcustomplot.cpp	/^void QCPLegend::setTextColor(const QColor &color)$/;"	f	class:QCPLegend	typeref:typename:void
setTextColor	qcustomplot.cpp	/^void QCPTextElement::setTextColor(const QColor &color)$/;"	f	class:QCPTextElement	typeref:typename:void
setTextColor	qcustomplot.h	/^  void setTextColor(const QColor &color);$/;"	p	class:QCPAbstractLegendItem	typeref:typename:void
setTextColor	qcustomplot.h	/^  void setTextColor(const QColor &color);$/;"	p	class:QCPLegend	typeref:typename:void
setTextColor	qcustomplot.h	/^  void setTextColor(const QColor &color);$/;"	p	class:QCPTextElement	typeref:typename:void
setTextFlags	qcustomplot.cpp	/^void QCPTextElement::setTextFlags(int flags)$/;"	f	class:QCPTextElement	typeref:typename:void
setTextFlags	qcustomplot.h	/^  void setTextFlags(int flags);$/;"	p	class:QCPTextElement	typeref:typename:void
setTickCount	qcustomplot.cpp	/^void QCPAxisTicker::setTickCount(int count)$/;"	f	class:QCPAxisTicker	typeref:typename:void
setTickCount	qcustomplot.h	/^  void setTickCount(int count);$/;"	p	class:QCPAxisTicker	typeref:typename:void
setTickLabelColor	qcustomplot.cpp	/^void QCPAxis::setTickLabelColor(const QColor &color)$/;"	f	class:QCPAxis	typeref:typename:void
setTickLabelColor	qcustomplot.h	/^  void setTickLabelColor(const QColor &color);$/;"	p	class:QCPAxis	typeref:typename:void
setTickLabelFont	qcustomplot.cpp	/^void QCPAxis::setTickLabelFont(const QFont &font)$/;"	f	class:QCPAxis	typeref:typename:void
setTickLabelFont	qcustomplot.h	/^  void setTickLabelFont(const QFont &font);$/;"	p	class:QCPAxis	typeref:typename:void
setTickLabelPadding	qcustomplot.cpp	/^void QCPAxis::setTickLabelPadding(int padding)$/;"	f	class:QCPAxis	typeref:typename:void
setTickLabelPadding	qcustomplot.h	/^  void setTickLabelPadding(int padding);$/;"	p	class:QCPAxis	typeref:typename:void
setTickLabelRotation	qcustomplot.cpp	/^void QCPAxis::setTickLabelRotation(double degrees)$/;"	f	class:QCPAxis	typeref:typename:void
setTickLabelRotation	qcustomplot.h	/^  void setTickLabelRotation(double degrees);$/;"	p	class:QCPAxis	typeref:typename:void
setTickLabelSide	qcustomplot.cpp	/^void QCPAxis::setTickLabelSide(LabelSide side)$/;"	f	class:QCPAxis	typeref:typename:void
setTickLabelSide	qcustomplot.h	/^  void setTickLabelSide(LabelSide side);$/;"	p	class:QCPAxis	typeref:typename:void
setTickLabels	qcustomplot.cpp	/^void QCPAxis::setTickLabels(bool show)$/;"	f	class:QCPAxis	typeref:typename:void
setTickLabels	qcustomplot.h	/^  void setTickLabels(bool show);$/;"	p	class:QCPAxis	typeref:typename:void
setTickLength	qcustomplot.cpp	/^void QCPAxis::setTickLength(int inside, int outside)$/;"	f	class:QCPAxis	typeref:typename:void
setTickLength	qcustomplot.h	/^  void setTickLength(int inside, int outside=0);$/;"	p	class:QCPAxis	typeref:typename:void
setTickLengthIn	qcustomplot.cpp	/^void QCPAxis::setTickLengthIn(int inside)$/;"	f	class:QCPAxis	typeref:typename:void
setTickLengthIn	qcustomplot.h	/^  void setTickLengthIn(int inside);$/;"	p	class:QCPAxis	typeref:typename:void
setTickLengthOut	qcustomplot.cpp	/^void QCPAxis::setTickLengthOut(int outside)$/;"	f	class:QCPAxis	typeref:typename:void
setTickLengthOut	qcustomplot.h	/^  void setTickLengthOut(int outside);$/;"	p	class:QCPAxis	typeref:typename:void
setTickOrigin	qcustomplot.cpp	/^void QCPAxisTicker::setTickOrigin(double origin)$/;"	f	class:QCPAxisTicker	typeref:typename:void
setTickOrigin	qcustomplot.cpp	/^void QCPAxisTickerDateTime::setTickOrigin(const QDateTime &origin)$/;"	f	class:QCPAxisTickerDateTime	typeref:typename:void
setTickOrigin	qcustomplot.cpp	/^void QCPAxisTickerDateTime::setTickOrigin(double origin)$/;"	f	class:QCPAxisTickerDateTime	typeref:typename:void
setTickOrigin	qcustomplot.h	/^  void setTickOrigin(const QDateTime &origin);$/;"	p	class:QCPAxisTickerDateTime	typeref:typename:void
setTickOrigin	qcustomplot.h	/^  void setTickOrigin(double origin); \/\/ hides base class method but calls baseclass implementa/;"	p	class:QCPAxisTickerDateTime	typeref:typename:void
setTickOrigin	qcustomplot.h	/^  void setTickOrigin(double origin);$/;"	p	class:QCPAxisTicker	typeref:typename:void
setTickPen	qcustomplot.cpp	/^void QCPAxis::setTickPen(const QPen &pen)$/;"	f	class:QCPAxis	typeref:typename:void
setTickPen	qcustomplot.h	/^  void setTickPen(const QPen &pen);$/;"	p	class:QCPAxis	typeref:typename:void
setTickStep	qcustomplot.cpp	/^void QCPAxisTickerFixed::setTickStep(double step)$/;"	f	class:QCPAxisTickerFixed	typeref:typename:void
setTickStep	qcustomplot.h	/^  void setTickStep(double step);$/;"	p	class:QCPAxisTickerFixed	typeref:typename:void
setTickStepStrategy	qcustomplot.cpp	/^void QCPAxisTicker::setTickStepStrategy(QCPAxisTicker::TickStepStrategy strategy)$/;"	f	class:QCPAxisTicker	typeref:typename:void
setTickStepStrategy	qcustomplot.h	/^  void setTickStepStrategy(TickStepStrategy strategy);$/;"	p	class:QCPAxisTicker	typeref:typename:void
setTicker	qcustomplot.cpp	/^void QCPAxis::setTicker(QSharedPointer<QCPAxisTicker> ticker)$/;"	f	class:QCPAxis	typeref:typename:void
setTicker	qcustomplot.h	/^  void setTicker(QSharedPointer<QCPAxisTicker> ticker);$/;"	p	class:QCPAxis	typeref:typename:void
setTicks	qcustomplot.cpp	/^void QCPAxis::setTicks(bool show)$/;"	f	class:QCPAxis	typeref:typename:void
setTicks	qcustomplot.cpp	/^void QCPAxisTickerText::setTicks(const QMap<double, QString> &ticks)$/;"	f	class:QCPAxisTickerText	typeref:typename:void
setTicks	qcustomplot.cpp	/^void QCPAxisTickerText::setTicks(const QVector<double> &positions, const QVector<QString> &label/;"	f	class:QCPAxisTickerText	typeref:typename:void
setTicks	qcustomplot.h	/^  void setTicks(bool show);$/;"	p	class:QCPAxis	typeref:typename:void
setTicks	qcustomplot.h	/^  void setTicks(const QMap<double, QString> &ticks);$/;"	p	class:QCPAxisTickerText	typeref:typename:void
setTicks	qcustomplot.h	/^  void setTicks(const QVector<double> &positions, const QVector<QString> &labels);$/;"	p	class:QCPAxisTickerText	typeref:typename:void
setTightBoundary	qcustomplot.cpp	/^void QCPColorMap::setTightBoundary(bool enabled)$/;"	f	class:QCPColorMap	typeref:typename:void
setTightBoundary	qcustomplot.h	/^  void setTightBoundary(bool enabled);$/;"	p	class:QCPColorMap	typeref:typename:void
setTimeFormat	qcustomplot.cpp	/^void QCPAxisTickerTime::setTimeFormat(const QString &format)$/;"	f	class:QCPAxisTickerTime	typeref:typename:void
setTimeFormat	qcustomplot.h	/^  void setTimeFormat(const QString &format);$/;"	p	class:QCPAxisTickerTime	typeref:typename:void
setTwoColored	qcustomplot.cpp	/^void QCPFinancial::setTwoColored(bool twoColored)$/;"	f	class:QCPFinancial	typeref:typename:void
setTwoColored	qcustomplot.h	/^  void setTwoColored(bool twoColored);$/;"	p	class:QCPFinancial	typeref:typename:void
setType	qcustomplot.cpp	/^void QCPColorScale::setType(QCPAxis::AxisType type)$/;"	f	class:QCPColorScale	typeref:typename:void
setType	qcustomplot.cpp	/^void QCPItemPosition::setType(QCPItemPosition::PositionType type)$/;"	f	class:QCPItemPosition	typeref:typename:void
setType	qcustomplot.h	/^  void setType(PositionType type);$/;"	p	class:QCPItemPosition	typeref:typename:void
setType	qcustomplot.h	/^  void setType(QCPAxis::AxisType type);$/;"	p	class:QCPColorScale	typeref:typename:void
setTypeX	qcustomplot.cpp	/^void QCPItemPosition::setTypeX(QCPItemPosition::PositionType type)$/;"	f	class:QCPItemPosition	typeref:typename:void
setTypeX	qcustomplot.h	/^  void setTypeX(PositionType type);$/;"	p	class:QCPItemPosition	typeref:typename:void
setTypeY	qcustomplot.cpp	/^void QCPItemPosition::setTypeY(QCPItemPosition::PositionType type)$/;"	f	class:QCPItemPosition	typeref:typename:void
setTypeY	qcustomplot.h	/^  void setTypeY(PositionType type);$/;"	p	class:QCPItemPosition	typeref:typename:void
setUpperEnding	qcustomplot.cpp	/^void QCPAxis::setUpperEnding(const QCPLineEnding &ending)$/;"	f	class:QCPAxis	typeref:typename:void
setUpperEnding	qcustomplot.h	/^  void setUpperEnding(const QCPLineEnding &ending);$/;"	p	class:QCPAxis	typeref:typename:void
setUsedScatterProperties	qcustomplot.cpp	/^void QCPSelectionDecorator::setUsedScatterProperties(const QCPScatterStyle::ScatterProperties &p/;"	f	class:QCPSelectionDecorator	typeref:typename:void
setUsedScatterProperties	qcustomplot.h	/^  void setUsedScatterProperties(const QCPScatterStyle::ScatterProperties &properties);$/;"	p	class:QCPSelectionDecorator	typeref:typename:void
setValueAxis	qcustomplot.cpp	/^void QCPAbstractPlottable::setValueAxis(QCPAxis *axis)$/;"	f	class:QCPAbstractPlottable	typeref:typename:void
setValueAxis	qcustomplot.h	/^  void setValueAxis(QCPAxis *axis);$/;"	p	class:QCPAbstractPlottable	typeref:typename:void
setValueRange	qcustomplot.cpp	/^void QCPColorMapData::setValueRange(const QCPRange &valueRange)$/;"	f	class:QCPColorMapData	typeref:typename:void
setValueRange	qcustomplot.h	/^  void setValueRange(const QCPRange &valueRange);$/;"	p	class:QCPColorMapData	typeref:typename:void
setValueSize	qcustomplot.cpp	/^void QCPColorMapData::setValueSize(int valueSize)$/;"	f	class:QCPColorMapData	typeref:typename:void
setValueSize	qcustomplot.h	/^  void setValueSize(int valueSize);$/;"	p	class:QCPColorMapData	typeref:typename:void
setViewport	qcustomplot.cpp	/^void QCustomPlot::setViewport(const QRect &rect)$/;"	f	class:QCustomPlot	typeref:typename:void
setViewport	qcustomplot.h	/^  void setViewport(const QRect &rect);$/;"	p	class:QCustomPlot	typeref:typename:void
setVisible	qcustomplot.cpp	/^void QCPLayer::setVisible(bool visible)$/;"	f	class:QCPLayer	typeref:typename:void
setVisible	qcustomplot.cpp	/^void QCPLayerable::setVisible(bool on)$/;"	f	class:QCPLayerable	typeref:typename:void
setVisible	qcustomplot.h	/^  void setVisible(bool on);$/;"	p	class:QCPLayerable	typeref:typename:void
setVisible	qcustomplot.h	/^  void setVisible(bool visible);$/;"	p	class:QCPLayer	typeref:typename:void
setWhiskerAntialiased	qcustomplot.cpp	/^void QCPStatisticalBox::setWhiskerAntialiased(bool enabled)$/;"	f	class:QCPStatisticalBox	typeref:typename:void
setWhiskerAntialiased	qcustomplot.h	/^  void setWhiskerAntialiased(bool enabled);$/;"	p	class:QCPStatisticalBox	typeref:typename:void
setWhiskerBarPen	qcustomplot.cpp	/^void QCPStatisticalBox::setWhiskerBarPen(const QPen &pen)$/;"	f	class:QCPStatisticalBox	typeref:typename:void
setWhiskerBarPen	qcustomplot.h	/^  void setWhiskerBarPen(const QPen &pen);$/;"	p	class:QCPStatisticalBox	typeref:typename:void
setWhiskerPen	qcustomplot.cpp	/^void QCPStatisticalBox::setWhiskerPen(const QPen &pen)$/;"	f	class:QCPStatisticalBox	typeref:typename:void
setWhiskerPen	qcustomplot.h	/^  void setWhiskerPen(const QPen &pen);$/;"	p	class:QCPStatisticalBox	typeref:typename:void
setWhiskerWidth	qcustomplot.cpp	/^void QCPErrorBars::setWhiskerWidth(double pixels)$/;"	f	class:QCPErrorBars	typeref:typename:void
setWhiskerWidth	qcustomplot.cpp	/^void QCPStatisticalBox::setWhiskerWidth(double width)$/;"	f	class:QCPStatisticalBox	typeref:typename:void
setWhiskerWidth	qcustomplot.h	/^  void setWhiskerWidth(double pixels);$/;"	p	class:QCPErrorBars	typeref:typename:void
setWhiskerWidth	qcustomplot.h	/^  void setWhiskerWidth(double width);$/;"	p	class:QCPStatisticalBox	typeref:typename:void
setWidth	qcustomplot.cpp	/^void QCPBars::setWidth(double width)$/;"	f	class:QCPBars	typeref:typename:void
setWidth	qcustomplot.cpp	/^void QCPFinancial::setWidth(double width)$/;"	f	class:QCPFinancial	typeref:typename:void
setWidth	qcustomplot.cpp	/^void QCPLineEnding::setWidth(double width)$/;"	f	class:QCPLineEnding	typeref:typename:void
setWidth	qcustomplot.cpp	/^void QCPStatisticalBox::setWidth(double width)$/;"	f	class:QCPStatisticalBox	typeref:typename:void
setWidth	qcustomplot.h	/^  void setWidth(double width);$/;"	p	class:QCPBars	typeref:typename:void
setWidth	qcustomplot.h	/^  void setWidth(double width);$/;"	p	class:QCPFinancial	typeref:typename:void
setWidth	qcustomplot.h	/^  void setWidth(double width);$/;"	p	class:QCPLineEnding	typeref:typename:void
setWidth	qcustomplot.h	/^  void setWidth(double width);$/;"	p	class:QCPStatisticalBox	typeref:typename:void
setWidthType	qcustomplot.cpp	/^void QCPBars::setWidthType(QCPBars::WidthType widthType)$/;"	f	class:QCPBars	typeref:typename:void
setWidthType	qcustomplot.cpp	/^void QCPFinancial::setWidthType(QCPFinancial::WidthType widthType)$/;"	f	class:QCPFinancial	typeref:typename:void
setWidthType	qcustomplot.h	/^  void setWidthType(WidthType widthType);$/;"	p	class:QCPBars	typeref:typename:void
setWidthType	qcustomplot.h	/^  void setWidthType(WidthType widthType);$/;"	p	class:QCPFinancial	typeref:typename:void
setWrap	qcustomplot.cpp	/^void QCPLayoutGrid::setWrap(int count)$/;"	f	class:QCPLayoutGrid	typeref:typename:void
setWrap	qcustomplot.h	/^  void setWrap(int count);$/;"	p	class:QCPLayoutGrid	typeref:typename:void
setX	qcustomplot.h	/^  void setX(double x) { mX = x; }$/;"	f	class:QCPVector2D	typeref:typename:void
setY	qcustomplot.h	/^  void setY(double y) { mY = y; }$/;"	f	class:QCPVector2D	typeref:typename:void
setZeroLinePen	qcustomplot.cpp	/^void QCPGrid::setZeroLinePen(const QPen &pen)$/;"	f	class:QCPGrid	typeref:typename:void
setZeroLinePen	qcustomplot.h	/^  void setZeroLinePen(const QPen &pen);$/;"	p	class:QCPGrid	typeref:typename:void
set_allocated_audio	qc-message.pb.h	/^  void set_allocated_audio(::std::string* audio);$/;"	p	class:Protocol	typeref:typename:void
set_allocated_audio	qc-message.pb.h	/^inline void Protocol::set_allocated_audio(::std::string* audio) {$/;"	f	class:Protocol	typeref:typename:void
set_allocated_imu	qc-message.pb.h	/^  void set_allocated_imu(::Imu* imu);$/;"	p	class:Protocol	typeref:typename:void
set_allocated_imu	qc-message.pb.h	/^inline void Protocol::set_allocated_imu(::Imu* imu) {$/;"	f	class:Protocol	typeref:typename:void
set_allocated_video	qc-message.pb.h	/^  void set_allocated_video(::std::string* video);$/;"	p	class:Protocol	typeref:typename:void
set_allocated_video	qc-message.pb.h	/^inline void Protocol::set_allocated_video(::std::string* video) {$/;"	f	class:Protocol	typeref:typename:void
set_async_mode	spdlog/details/registry.h	/^    void set_async_mode(size_t q_size, const async_overflow_policy overflow_policy, const std::f/;"	f	class:spdlog::details::registry_t	typeref:typename:void
set_async_mode	spdlog/details/spdlog_impl.h	/^inline void spdlog::set_async_mode(size_t queue_size, const async_overflow_policy overflow_polic/;"	f	class:spdlog	typeref:typename:void
set_async_mode	spdlog/spdlog.h	/^void set_async_mode(size_t queue_size, const async_overflow_policy overflow_policy = async_overf/;"	p	namespace:spdlog	typeref:typename:void
set_audio	qc-message.pb.h	/^  void set_audio(::std::string&& value);$/;"	p	class:Protocol	typeref:typename:void
set_audio	qc-message.pb.h	/^  void set_audio(const ::std::string& value);$/;"	p	class:Protocol	typeref:typename:void
set_audio	qc-message.pb.h	/^  void set_audio(const char* value);$/;"	p	class:Protocol	typeref:typename:void
set_audio	qc-message.pb.h	/^  void set_audio(const void* value, size_t size);$/;"	p	class:Protocol	typeref:typename:void
set_audio	qc-message.pb.h	/^inline void Protocol::set_audio(::std::string&& value) {$/;"	f	class:Protocol	typeref:typename:void
set_audio	qc-message.pb.h	/^inline void Protocol::set_audio(const ::std::string& value) {$/;"	f	class:Protocol	typeref:typename:void
set_audio	qc-message.pb.h	/^inline void Protocol::set_audio(const char* value) {$/;"	f	class:Protocol	typeref:typename:void
set_audio	qc-message.pb.h	/^inline void Protocol::set_audio(const void* value, size_t size) {$/;"	f	class:Protocol	typeref:typename:void
set_begin	json.hpp	/^    void set_begin() noexcept$/;"	f	class:nlohmann::detail::iter_impl	typeref:typename:void
set_begin	json.hpp	/^    void set_begin() noexcept$/;"	f	class:nlohmann::detail::primitive_iterator_t	typeref:typename:void
set_color	spdlog/sinks/ansicolor_sink.h	/^    void set_color(level::level_enum color_level, const std::string &color)$/;"	f	class:spdlog::sinks::ansicolor_sink	typeref:typename:void
set_color	spdlog/sinks/wincolor_sink.h	/^    void set_color(level::level_enum level, WORD color)$/;"	f	class:spdlog::sinks::wincolor_sink	typeref:typename:void
set_console_attribs	spdlog/sinks/wincolor_sink.h	/^    WORD set_console_attribs(WORD attribs)$/;"	f	class:spdlog::sinks::wincolor_sink	typeref:typename:WORD
set_data	spdlog/fmt/bundled/core.h	/^    void set_data(const format_arg *args)$/;"	f	class:basic_format_args	typeref:typename:void
set_data	spdlog/fmt/bundled/core.h	/^    void set_data(const internal::value<Context> *values)$/;"	f	class:basic_format_args	typeref:typename:void
set_end	json.hpp	/^    void set_end() noexcept$/;"	f	class:nlohmann::detail::iter_impl	typeref:typename:void
set_end	json.hpp	/^    void set_end() noexcept$/;"	f	class:nlohmann::detail::primitive_iterator_t	typeref:typename:void
set_error_handler	spdlog/async_logger.h	/^    void set_error_handler(log_err_handler) override;$/;"	p	class:spdlog::SPDLOG_FINAL	typeref:typename:void
set_error_handler	spdlog/details/async_log_helper.h	/^    void set_error_handler(spdlog::log_err_handler err_handler);$/;"	p	class:spdlog::details::async_log_helper	typeref:typename:void
set_error_handler	spdlog/details/async_log_helper.h	/^inline void spdlog::details::async_log_helper::set_error_handler(spdlog::log_err_handler err_han/;"	f	class:spdlog::details::async_log_helper	typeref:typename:void
set_error_handler	spdlog/details/async_logger_impl.h	/^inline void spdlog::async_logger::set_error_handler(spdlog::log_err_handler err_handler)$/;"	f	class:spdlog::async_logger	typeref:typename:void
set_error_handler	spdlog/details/logger_impl.h	/^inline void spdlog::logger::set_error_handler(spdlog::log_err_handler err_handler)$/;"	f	class:spdlog::logger	typeref:typename:void
set_error_handler	spdlog/details/registry.h	/^    void set_error_handler(log_err_handler handler)$/;"	f	class:spdlog::details::registry_t	typeref:typename:void
set_error_handler	spdlog/details/spdlog_impl.h	/^inline void spdlog::set_error_handler(log_err_handler handler)$/;"	f	class:spdlog	typeref:typename:void
set_error_handler	spdlog/logger.h	/^    virtual void set_error_handler(log_err_handler err_handler);$/;"	p	class:spdlog::logger	typeref:typename:void
set_error_handler	spdlog/spdlog.h	/^void set_error_handler(log_err_handler handler);$/;"	p	namespace:spdlog	typeref:typename:void
set_force_flush	spdlog/sinks/file_sinks.h	/^    void set_force_flush(bool force_flush)$/;"	f	class:spdlog::sinks::SPDLOG_FINAL	typeref:typename:void
set_formatter	spdlog/details/async_log_helper.h	/^    void set_formatter(formatter_ptr msg_formatter);$/;"	p	class:spdlog::details::async_log_helper	typeref:typename:void
set_formatter	spdlog/details/async_log_helper.h	/^inline void spdlog::details::async_log_helper::set_formatter(formatter_ptr msg_formatter)$/;"	f	class:spdlog::details::async_log_helper	typeref:typename:void
set_formatter	spdlog/details/logger_impl.h	/^inline void spdlog::logger::set_formatter(spdlog::formatter_ptr msg_formatter)$/;"	f	class:spdlog::logger	typeref:typename:void
set_formatter	spdlog/details/spdlog_impl.h	/^inline void spdlog::set_formatter(spdlog::formatter_ptr f)$/;"	f	class:spdlog	typeref:typename:void
set_formatter	spdlog/logger.h	/^    void set_formatter(formatter_ptr msg_formatter);$/;"	p	class:spdlog::logger	typeref:typename:void
set_formatter	spdlog/spdlog.h	/^void set_formatter(formatter_ptr f);$/;"	p	namespace:spdlog	typeref:typename:void
set_has_audio	qc-message.pb.h	/^  void set_has_audio();$/;"	p	class:Protocol	typeref:typename:void
set_has_audio	qc-message.pb.h	/^inline void Protocol::set_has_audio() {$/;"	f	class:Protocol	typeref:typename:void
set_has_imu	qc-message.pb.h	/^  void set_has_imu();$/;"	p	class:Protocol	typeref:typename:void
set_has_imu	qc-message.pb.h	/^inline void Protocol::set_has_imu() {$/;"	f	class:Protocol	typeref:typename:void
set_has_ksoo	qc-message.pb.h	/^  void set_has_ksoo();$/;"	p	class:Protocol	typeref:typename:void
set_has_ksoo	qc-message.pb.h	/^inline void Protocol::set_has_ksoo() {$/;"	f	class:Protocol	typeref:typename:void
set_has_left_motor	qc-message.pb.h	/^  void set_has_left_motor();$/;"	p	class:Protocol	typeref:typename:void
set_has_left_motor	qc-message.pb.h	/^inline void Protocol::set_has_left_motor() {$/;"	f	class:Protocol	typeref:typename:void
set_has_right_motor	qc-message.pb.h	/^  void set_has_right_motor();$/;"	p	class:Protocol	typeref:typename:void
set_has_right_motor	qc-message.pb.h	/^inline void Protocol::set_has_right_motor() {$/;"	f	class:Protocol	typeref:typename:void
set_has_video	qc-message.pb.h	/^  void set_has_video();$/;"	p	class:Protocol	typeref:typename:void
set_has_video	qc-message.pb.h	/^inline void Protocol::set_has_video() {$/;"	f	class:Protocol	typeref:typename:void
set_has_x	qc-message.pb.h	/^  void set_has_x();$/;"	p	class:Imu	typeref:typename:void
set_has_x	qc-message.pb.h	/^inline void Imu::set_has_x() {$/;"	f	class:Imu	typeref:typename:void
set_has_y	qc-message.pb.h	/^  void set_has_y();$/;"	p	class:Imu	typeref:typename:void
set_has_y	qc-message.pb.h	/^inline void Imu::set_has_y() {$/;"	f	class:Imu	typeref:typename:void
set_invert_horiz	simple.pb-c.h	/^  uint32_t set_invert_horiz;$/;"	m	struct:_ToHi	typeref:typename:uint32_t
set_invert_horiz	simple.proto	/^    optional uint32 set_invert_horiz = 107; $/;"	f
set_invert_vert	simple.pb-c.h	/^  uint32_t set_invert_vert;$/;"	m	struct:_ToHi	typeref:typename:uint32_t
set_invert_vert	simple.proto	/^    optional uint32 set_invert_vert = 106; $/;"	f
set_ir_cut1	simple.pb-c.h	/^  uint32_t set_ir_cut1;$/;"	m	struct:_ToHi	typeref:typename:uint32_t
set_ir_cut1	simple.proto	/^    optional uint32 set_ir_cut1 = 110; $/;"	f
set_ir_cut2	simple.pb-c.h	/^  uint32_t set_ir_cut2;$/;"	m	struct:_ToHi	typeref:typename:uint32_t
set_ir_cut2	simple.proto	/^    optional uint32 set_ir_cut2 = 111; $/;"	f
set_ksoo	qc-message.pb.h	/^  void set_ksoo(::google::protobuf::int32 value);$/;"	p	class:Protocol	typeref:typename:void
set_ksoo	qc-message.pb.h	/^inline void Protocol::set_ksoo(::google::protobuf::int32 value) {$/;"	f	class:Protocol	typeref:typename:void
set_left_motor	qc-message.pb.h	/^  void set_left_motor(::google::protobuf::int32 value);$/;"	p	class:Protocol	typeref:typename:void
set_left_motor	qc-message.pb.h	/^inline void Protocol::set_left_motor(::google::protobuf::int32 value) {$/;"	f	class:Protocol	typeref:typename:void
set_level	spdlog/details/logger_impl.h	/^inline void spdlog::logger::set_level(spdlog::level::level_enum log_level)$/;"	f	class:spdlog::logger	typeref:typename:void
set_level	spdlog/details/registry.h	/^    void set_level(level::level_enum log_level)$/;"	f	class:spdlog::details::registry_t	typeref:typename:void
set_level	spdlog/details/spdlog_impl.h	/^inline void spdlog::set_level(level::level_enum log_level)$/;"	f	class:spdlog	typeref:typename:void
set_level	spdlog/logger.h	/^    void set_level(level::level_enum log_level);$/;"	p	class:spdlog::logger	typeref:typename:void
set_level	spdlog/sinks/sink.h	/^    void set_level(level::level_enum log_level);$/;"	p	class:spdlog::sinks::sink	typeref:typename:void
set_level	spdlog/sinks/sink.h	/^inline void sink::set_level(level::level_enum log_level)$/;"	f	class:spdlog::sinks::sink	typeref:typename:void
set_level	spdlog/spdlog.h	/^void set_level(level::level_enum log_level);$/;"	p	namespace:spdlog	typeref:typename:void
set_mic_vol	simple.pb-c.h	/^  int32_t set_mic_vol;$/;"	m	struct:_ToHi	typeref:typename:int32_t
set_mic_vol	simple.proto	/^    optional int32 set_mic_vol = 108; $/;"	f
set_mute	simple.pb-c.h	/^  int32_t set_mute;$/;"	m	struct:_ToHi	typeref:typename:int32_t
set_mute	simple.proto	/^    optional int32 set_mute = 113; $/;"	f
set_pattern	spdlog/details/logger_impl.h	/^inline void spdlog::logger::set_pattern(const std::string &pattern, pattern_time_type pattern_ti/;"	f	class:spdlog::logger	typeref:typename:void
set_pattern	spdlog/details/registry.h	/^    void set_pattern(const std::string &pattern)$/;"	f	class:spdlog::details::registry_t	typeref:typename:void
set_pattern	spdlog/details/spdlog_impl.h	/^inline void spdlog::set_pattern(const std::string &format_string)$/;"	f	class:spdlog	typeref:typename:void
set_pattern	spdlog/logger.h	/^    void set_pattern(const std::string &pattern, pattern_time_type pattern_time = pattern_time_t/;"	p	class:spdlog::logger	typeref:typename:void
set_pattern	spdlog/spdlog.h	/^void set_pattern(const std::string &format_string);$/;"	p	namespace:spdlog	typeref:typename:void
set_right_motor	qc-message.pb.h	/^  void set_right_motor(::google::protobuf::int32 value);$/;"	p	class:Protocol	typeref:typename:void
set_right_motor	qc-message.pb.h	/^inline void Protocol::set_right_motor(::google::protobuf::int32 value) {$/;"	f	class:Protocol	typeref:typename:void
set_speaker_vol	simple.pb-c.h	/^  uint32_t set_speaker_vol;$/;"	m	struct:_ToHi	typeref:typename:uint32_t
set_speaker_vol	simple.proto	/^    optional uint32 set_speaker_vol = 109; $/;"	f
set_string	spdlog/fmt/bundled/format.h	/^    void set_string(StringRef str)$/;"	f	class:fmt::internal::MakeValue	typeref:typename:void
set_string	spdlog/fmt/bundled/format.h	/^    void set_string(WStringRef str)$/;"	f	class:fmt::internal::MakeValue	typeref:typename:void
set_sync_mode	spdlog/details/registry.h	/^    void set_sync_mode()$/;"	f	class:spdlog::details::registry_t	typeref:typename:void
set_sync_mode	spdlog/details/spdlog_impl.h	/^inline void spdlog::set_sync_mode()$/;"	f	class:spdlog	typeref:typename:void
set_sync_mode	spdlog/spdlog.h	/^void set_sync_mode();$/;"	p	namespace:spdlog	typeref:typename:void
set_video	qc-message.pb.h	/^  void set_video(::std::string&& value);$/;"	p	class:Protocol	typeref:typename:void
set_video	qc-message.pb.h	/^  void set_video(const ::std::string& value);$/;"	p	class:Protocol	typeref:typename:void
set_video	qc-message.pb.h	/^  void set_video(const char* value);$/;"	p	class:Protocol	typeref:typename:void
set_video	qc-message.pb.h	/^  void set_video(const void* value, size_t size);$/;"	p	class:Protocol	typeref:typename:void
set_video	qc-message.pb.h	/^inline void Protocol::set_video(::std::string&& value) {$/;"	f	class:Protocol	typeref:typename:void
set_video	qc-message.pb.h	/^inline void Protocol::set_video(const ::std::string& value) {$/;"	f	class:Protocol	typeref:typename:void
set_video	qc-message.pb.h	/^inline void Protocol::set_video(const char* value) {$/;"	f	class:Protocol	typeref:typename:void
set_video	qc-message.pb.h	/^inline void Protocol::set_video(const void* value, size_t size) {$/;"	f	class:Protocol	typeref:typename:void
set_x	qc-message.pb.h	/^  void set_x(::google::protobuf::int32 value);$/;"	p	class:Imu	typeref:typename:void
set_x	qc-message.pb.h	/^inline void Imu::set_x(::google::protobuf::int32 value) {$/;"	f	class:Imu	typeref:typename:void
set_y	qc-message.pb.h	/^  void set_y(::google::protobuf::int32 value);$/;"	p	class:Imu	typeref:typename:void
set_y	qc-message.pb.h	/^inline void Imu::set_y(::google::protobuf::int32 value) {$/;"	f	class:Imu	typeref:typename:void
setupFullAxesBox	qcustomplot.cpp	/^void QCPAxisRect::setupFullAxesBox(bool connectRanges)$/;"	f	class:QCPAxisRect	typeref:typename:void
setupFullAxesBox	qcustomplot.h	/^  void setupFullAxesBox(bool connectRanges=false);$/;"	p	class:QCPAxisRect	typeref:typename:void
setupOpenGl	qcustomplot.cpp	/^bool QCustomPlot::setupOpenGl()$/;"	f	class:QCustomPlot	typeref:typename:bool
setupOpenGl	qcustomplot.h	/^  bool setupOpenGl();$/;"	p	class:QCustomPlot	typeref:typename:bool
setupPaintBuffers	qcustomplot.cpp	/^void QCustomPlot::setupPaintBuffers()$/;"	f	class:QCustomPlot	typeref:typename:void
setupPaintBuffers	qcustomplot.h	/^  void setupPaintBuffers();$/;"	p	class:QCustomPlot	typeref:typename:void
setupTickVectors	qcustomplot.cpp	/^void QCPAxis::setupTickVectors()$/;"	f	class:QCPAxis	typeref:typename:void
setupTickVectors	qcustomplot.h	/^  void setupTickVectors();$/;"	p	class:QCPAxis	typeref:typename:void
shape	qcustomplot.h	/^  ScatterShape shape() const { return mShape; }$/;"	f	class:QCPScatterStyle	typeref:typename:ScatterShape
shared_const_buffer	packet-buffer.h	/^  explicit shared_const_buffer(const char* data, size_t len)$/;"	f	class:shared_const_buffer
shared_const_buffer	packet-buffer.h	/^  explicit shared_const_buffer(const std::vector<char>& data)$/;"	f	class:shared_const_buffer
shared_const_buffer	packet-buffer.h	/^class shared_const_buffer$/;"	c
short_level_formatter	spdlog/details/pattern_formatter.h	/^class short_level_formatter : public flag_formatter$/;"	c	namespace:spdlog::details
short_level_formatter	spdlog/details/pattern_formatter_impl.h	/^class short_level_formatter : public flag_formatter$/;"	c	namespace:spdlog::details
short_level_names	spdlog/common.h	/^static const char *short_level_names[]{"T", "D", "I", "W", "E", "C", "O"};$/;"	v	namespace:spdlog::level	typeref:typename:const char * []
short_name	protobuf-c/protobuf-c.h	/^	const char			*short_name;$/;"	m	struct:ProtobufCEnumDescriptor	typeref:typename:const char *
short_name	protobuf-c/protobuf-c.h	/^	const char			*short_name;$/;"	m	struct:ProtobufCMessageDescriptor	typeref:typename:const char *
short_name	protobuf-c/protobuf-c.h	/^	const char			*short_name;$/;"	m	struct:ProtobufCServiceDescriptor	typeref:typename:const char *
should_do_colors_	spdlog/sinks/ansicolor_sink.h	/^    bool should_do_colors_;$/;"	m	class:spdlog::sinks::ansicolor_sink	typeref:typename:bool
should_log	spdlog/details/logger_impl.h	/^inline bool spdlog::logger::should_log(spdlog::level::level_enum msg_level) const$/;"	f	class:spdlog::logger	typeref:typename:bool
should_log	spdlog/logger.h	/^    bool should_log(level::level_enum msg_level) const;$/;"	p	class:spdlog::logger	typeref:typename:bool
should_log	spdlog/sinks/sink.h	/^    bool should_log(level::level_enum msg_level) const;$/;"	p	class:spdlog::sinks::sink	typeref:typename:bool
should_log	spdlog/sinks/sink.h	/^inline bool sink::should_log(level::level_enum msg_level) const$/;"	f	class:spdlog::sinks::sink	typeref:typename:bool
showBandwidth	mdi-child.cpp	/^void MdiChild::showBandwidth(int download, int upload) {$/;"	f	class:MdiChild	typeref:typename:void
showBandwidth	mdi-child.h	/^    void showBandwidth(int download, int upload);$/;"	p	class:MdiChild	typeref:typename:void
showBandwidth	mdi-child.h	/^    void showBandwidth(int download, int upload);$/;"	s	class:MdiChild	typeref:typename:void
showRecvBytes	mdi-child.cpp	/^void MdiChild::showRecvBytes(const QString& message) {$/;"	f	class:MdiChild	typeref:typename:void
showRecvBytes	mdi-child.h	/^    void showRecvBytes(const QString& message);$/;"	p	class:MdiChild	typeref:typename:void
showRecvBytes	mdi-child.h	/^    void showRecvBytes(const QString& message);$/;"	s	class:MdiChild	typeref:typename:void
showStatus	circular-buffer.cpp	/^void CircularBuffer::showStatus(const char* msg) {$/;"	f	class:CircularBuffer	typeref:typename:void
showStatus	circular-buffer.h	/^    void showStatus(const char* msg);$/;"	p	class:CircularBuffer	typeref:typename:void
showStatus	mdi-child.cpp	/^void MdiChild::showStatus(const QString& message) {$/;"	f	class:MdiChild	typeref:typename:void
showStatus	mdi-child.h	/^    void showStatus(const QString& message);$/;"	p	class:MdiChild	typeref:typename:void
showStatus	mdi-child.h	/^    void showStatus(const QString& message);$/;"	s	class:MdiChild	typeref:typename:void
show_another_window	gui-session.h	/^        bool show_another_window = false;$/;"	m	class:GuiSession_depre	typeref:typename:bool
show_demo_window	gui-session.h	/^        bool show_demo_window = true;$/;"	m	class:GuiSession_depre	typeref:typename:bool
sienna	spdlog/fmt/bundled/colors.h	/^    sienna = 0xA0522D,                  \/\/ rgb(160,82,45)$/;"	e	enum:color
sig1	protocol-struct.h	/^    uint8_t sig1;$/;"	m	struct:InnerProtocolWithSTM	typeref:typename:uint8_t
sig1	protocol-struct.h	/^    uint8_t sig1;$/;"	m	struct:ModernProtocolWithSTM	typeref:typename:uint8_t
sig1	protocol-struct.h	/^    uint8_t sig1;$/;"	m	struct:ProtocolWithSTM	typeref:typename:uint8_t
sig2	protocol-struct.h	/^    uint8_t sig2;$/;"	m	struct:InnerProtocolWithSTM	typeref:typename:uint8_t
sig2	protocol-struct.h	/^    uint8_t sig2;$/;"	m	struct:ModernProtocolWithSTM	typeref:typename:uint8_t
sig2	protocol-struct.h	/^    uint8_t sig2;$/;"	m	struct:ProtocolWithSTM	typeref:typename:uint8_t
signbit	spdlog/fmt/bundled/format.h	/^inline DummyInt signbit(...)$/;"	f	namespace:fmt::internal	typeref:typename:DummyInt
silver	spdlog/fmt/bundled/colors.h	/^    silver = 0xC0C0C0,                  \/\/ rgb(192,192,192)$/;"	e	enum:color
simple_file_sink	spdlog/sinks/file_sinks.h	/^    explicit simple_file_sink(const filename_t &filename, bool truncate = false)$/;"	f	class:spdlog::sinks::SPDLOG_FINAL
simple_file_sink_mt	spdlog/sinks/file_sinks.h	/^using simple_file_sink_mt = simple_file_sink<std::mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:simple_file_sink<std::mutex>
simple_file_sink_st	spdlog/sinks/file_sinks.h	/^using simple_file_sink_st = simple_file_sink<details::null_mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:simple_file_sink<details::null_mutex>
simplify	qcustomplot.cpp	/^void QCPDataSelection::simplify()$/;"	f	class:QCPDataSelection	typeref:typename:void
simplify	qcustomplot.cpp	/^void QCPLayout::simplify()$/;"	f	class:QCPLayout	typeref:typename:void
simplify	qcustomplot.cpp	/^void QCPLayoutGrid::simplify()$/;"	f	class:QCPLayoutGrid	typeref:typename:void
simplify	qcustomplot.h	/^  virtual void simplify() Q_DECL_OVERRIDE {}$/;"	f	class:QCPLayoutInset	typeref:typename:void
simplify	qcustomplot.h	/^  virtual void simplify() Q_DECL_OVERRIDE;$/;"	p	class:QCPLayoutGrid	typeref:typename:void
simplify	qcustomplot.h	/^  virtual void simplify();$/;"	p	class:QCPLayout	typeref:typename:void
simplify	qcustomplot.h	/^  void simplify();$/;"	p	class:QCPDataSelection	typeref:typename:void
simplifyFraction	qcustomplot.cpp	/^void QCPAxisTickerPi::simplifyFraction(int &numerator, int &denominator) const$/;"	f	class:QCPAxisTickerPi	typeref:typename:void
simplifyFraction	qcustomplot.h	/^  void simplifyFraction(int &numerator, int &denominator) const;$/;"	p	class:QCPAxisTickerPi	typeref:typename:void
sink	spdlog/sinks/sink.h	/^class sink$/;"	c	namespace:spdlog::sinks
sink_it_	spdlog/sinks/basic_file_sink.h	/^    void sink_it_(const details::log_msg &msg) override$/;"	f	class:spdlog::sinks::SPDLOG_FINAL	typeref:typename:void
sink_it_	spdlog/sinks/daily_file_sink.h	/^    void sink_it_(const details::log_msg &msg) override$/;"	f	class:spdlog::sinks::SPDLOG_FINAL	typeref:typename:void
sink_it_	spdlog/sinks/rotating_file_sink.h	/^    void sink_it_(const details::log_msg &msg) override$/;"	f	class:spdlog::sinks::SPDLOG_FINAL	typeref:typename:void
sink_ptr	spdlog/common.h	/^using sink_ptr = std::shared_ptr<sinks::sink>;$/;"	t	namespace:spdlog	typeref:typename:std::shared_ptr<sinks::sink>
sinks	spdlog/common.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	spdlog/contrib/sinks/step_file_sink.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	spdlog/details/logger_impl.h	/^inline const std::vector<spdlog::sink_ptr> &spdlog::logger::sinks() const$/;"	f	class:spdlog::logger	typeref:typename:const std::vector<spdlog::sink_ptr> &
sinks	spdlog/logger.h	/^    const std::vector<sink_ptr> &sinks() const;$/;"	p	class:spdlog::logger	typeref:typename:const std::vector<sink_ptr> &
sinks	spdlog/sinks/android_sink.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	spdlog/sinks/ansicolor_sink.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	spdlog/sinks/base_sink.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	spdlog/sinks/basic_file_sink.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	spdlog/sinks/daily_file_sink.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	spdlog/sinks/dist_sink.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	spdlog/sinks/file_sinks.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	spdlog/sinks/msvc_sink.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	spdlog/sinks/null_sink.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	spdlog/sinks/ostream_sink.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	spdlog/sinks/rotating_file_sink.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	spdlog/sinks/sink.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	spdlog/sinks/stdout_color_sinks.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	spdlog/sinks/stdout_sinks.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	spdlog/sinks/syslog_sink.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	spdlog/sinks/wincolor_sink.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	spdlog/sinks/windebug_sink.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks_init_list	spdlog/common.h	/^using sinks_init_list = std::initializer_list<sink_ptr>;$/;"	t	namespace:spdlog	typeref:typename:std::initializer_list<sink_ptr>
sint32_pack	protobuf-c/protobuf-c.c	/^sint32_pack(int32_t value, uint8_t *out)$/;"	f	typeref:typename:size_t	file:
sint32_size	protobuf-c/protobuf-c.c	/^sint32_size(int32_t v)$/;"	f	typeref:typename:size_t	file:
sint64_pack	protobuf-c/protobuf-c.c	/^sint64_pack(int64_t value, uint8_t *out)$/;"	f	typeref:typename:size_t	file:
sint64_size	protobuf-c/protobuf-c.c	/^sint64_size(int64_t v)$/;"	f	typeref:typename:size_t	file:
size	circular-buffer.h	/^    size_t size() const { return size_; }$/;"	f	class:CircularBuffer	typeref:typename:size_t
size	json.hpp	/^    size_type size() const noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:size_type
size	json.hpp	/^    static constexpr std::size_t size() noexcept$/;"	f	struct:nlohmann::detail::index_sequence	typeref:typename:std::size_t
size	qcustomplot.cpp	/^int QCPAxisPainterPrivate::size() const$/;"	f	class:QCPAxisPainterPrivate	typeref:typename:int
size	qcustomplot.h	/^  QSize size() const { return mRect.size(); }$/;"	f	class:QCPAxisRect	typeref:typename:QSize
size	qcustomplot.h	/^  QSize size() const { return mSize; }$/;"	f	class:QCPAbstractPaintBuffer	typeref:typename:QSize
size	qcustomplot.h	/^  Q_PROPERTY(double size READ size WRITE setSize)$/;"	p	class:QCPItemTracer	typeref:typename:double
size	qcustomplot.h	/^  double size() const { return mSize; }$/;"	f	class:QCPItemTracer	typeref:typename:double
size	qcustomplot.h	/^  double size() const { return mSize; }$/;"	f	class:QCPScatterStyle	typeref:typename:double
size	qcustomplot.h	/^  double size() const { return upper-lower; }$/;"	f	class:QCPRange	typeref:typename:double
size	qcustomplot.h	/^  int size() const { return mBars.size(); }$/;"	f	class:QCPBarsGroup	typeref:typename:int
size	qcustomplot.h	/^  int size() const { return mData.size()-mPreallocSize; }$/;"	f	class:QCPDataContainer	typeref:typename:int
size	qcustomplot.h	/^  int size() const { return mEnd-mBegin; }$/;"	f	class:QCPDataRange	typeref:typename:int
size	qcustomplot.h	/^  virtual int size() const;$/;"	p	class:QCPAxisPainterPrivate	typeref:typename:int
size	spdlog/details/file_helper.h	/^    size_t size() const$/;"	f	class:spdlog::details::file_helper	typeref:typename:size_t
size	spdlog/fmt/bundled/core.h	/^        size_t size() const$/;"	f	struct:basic_string_view::type	typeref:typename:size_t
size	spdlog/fmt/bundled/core.h	/^    FMT_CONSTEXPR size_t size() const$/;"	f	class:basic_string_view	typeref:typename:FMT_CONSTEXPR size_t
size	spdlog/fmt/bundled/core.h	/^    std::size_t size() const FMT_NOEXCEPT$/;"	f	class:internal::basic_buffer	typeref:typename:std::size_t
size	spdlog/fmt/bundled/core.h	/^    std::size_t size;$/;"	m	struct:internal::string_value	typeref:typename:std::size_t
size	spdlog/fmt/bundled/format.h	/^        std::size_t size;$/;"	m	struct:fmt::internal::Value::StringValue	typeref:typename:std::size_t
size	spdlog/fmt/bundled/format.h	/^    size_t size() const$/;"	f	class:fmt::internal::UTF16ToUTF8	typeref:typename:size_t
size	spdlog/fmt/bundled/format.h	/^    size_t size() const$/;"	f	class:fmt::internal::UTF8ToUTF16	typeref:typename:size_t
size	spdlog/fmt/bundled/format.h	/^    std::size_t size() const$/;"	f	class:fmt::BasicStringRef	typeref:typename:std::size_t
size	spdlog/fmt/bundled/format.h	/^    std::size_t size() const$/;"	f	class:fmt::BasicWriter	typeref:typename:std::size_t
size	spdlog/fmt/bundled/format.h	/^    std::size_t size() const$/;"	f	class:fmt::Buffer	typeref:typename:std::size_t
size	spdlog/fmt/bundled/format.h	/^    std::size_t size() const$/;"	f	class:fmt::FormatInt	typeref:typename:std::size_t
size	spdlog/fmt/bundled/posix.cc	/^fmt::LongLong fmt::File::size() const {$/;"	f	class:fmt::File	typeref:typename:fmt::LongLong
size	spdlog/fmt/bundled/posix.h	/^    FMT_API LongLong size() const;$/;"	p	class:fmt::File	typeref:typename:FMT_API LongLong
size	spdlog/fmt/bundled/ranges.h	/^    static FMT_CONSTEXPR std::size_t size()$/;"	f	struct:internal::integer_sequence	typeref:typename:FMT_CONSTEXPR std::size_t
size	stb_image.h	/^   stbi_uc  size[257];$/;"	m	struct:__anon84e4e8860508	typeref:typename:stbi_uc[257]
size	stb_image.h	/^   stbi_uc  size[288];$/;"	m	struct:__anon84e4e8860908	typeref:typename:stbi_uc[288]
size	stb_image.h	/^   stbi_uc size,type,channel;$/;"	m	struct:__anon84e4e8860f08	typeref:typename:stbi_uc
sizeConstraintRect	qcustomplot.h	/^  Q_PROPERTY(SizeConstraintRect sizeConstraintRect READ sizeConstraintRect WRITE setSizeConstrai/;"	p	class:QCPLayoutElement	typeref:typename:SizeConstraintRect
sizeConstraintRect	qcustomplot.h	/^  SizeConstraintRect sizeConstraintRect() const { return mSizeConstraintRect; }$/;"	f	class:QCPLayoutElement	typeref:typename:SizeConstraintRect
sizeConstraintsChanged	qcustomplot.cpp	/^void QCPLayout::sizeConstraintsChanged() const$/;"	f	class:QCPLayout	typeref:typename:void
sizeConstraintsChanged	qcustomplot.h	/^  void sizeConstraintsChanged() const;$/;"	p	class:QCPLayout	typeref:typename:void
sizeHint	qcustomplot.cpp	/^QSize QCustomPlot::sizeHint() const$/;"	f	class:QCustomPlot	typeref:typename:QSize
sizeHint	qcustomplot.h	/^  virtual QSize sizeHint() const Q_DECL_OVERRIDE;$/;"	p	class:QCustomPlot	typeref:typename:QSize
size_	circular-buffer.h	/^    size_t beg_index_, end_index_, size_;$/;"	m	class:CircularBuffer	typeref:typename:size_t
size_	spdlog/fmt/bundled/core.h	/^    size_t size_;$/;"	m	class:basic_string_view	typeref:typename:size_t
size_	spdlog/fmt/bundled/core.h	/^    std::size_t size_;$/;"	m	class:internal::basic_buffer	typeref:typename:std::size_t
size_	spdlog/fmt/bundled/core.h	/^    unsigned size_;$/;"	m	class:internal::arg_map	typeref:typename:unsigned
size_	spdlog/fmt/bundled/format.h	/^    std::size_t size_;$/;"	m	class:fmt::BasicStringRef	typeref:typename:std::size_t
size_	spdlog/fmt/bundled/format.h	/^    std::size_t size_;$/;"	m	class:fmt::Buffer	typeref:typename:std::size_t
size_type	json.hpp	/^        using size_type = typename BasicJsonType::size_type;$/;"	t	function:nlohmann::json_pointer::get_and_create	typeref:typename:BasicJsonType::size_type
size_type	json.hpp	/^        using size_type = typename BasicJsonType::size_type;$/;"	t	function:nlohmann::json_pointer::get_checked	typeref:typename:BasicJsonType::size_type
size_type	json.hpp	/^        using size_type = typename BasicJsonType::size_type;$/;"	t	function:nlohmann::json_pointer::get_unchecked	typeref:typename:BasicJsonType::size_type
size_type	json.hpp	/^    using size_type = std::size_t;$/;"	t	class:nlohmann::basic_json	typeref:typename:std::size_t
size_type	spdlog/fmt/bundled/core.h	/^    typedef unsigned size_type;$/;"	t	class:basic_format_args	typeref:typename:unsigned
sizeof_elt_in_repeated_array	protobuf-c/protobuf-c.c	/^sizeof_elt_in_repeated_array(ProtobufCType type)$/;"	f	typeref:typename:size_t	file:
sizeof_message	protobuf-c/protobuf-c.h	/^	size_t				sizeof_message;$/;"	m	struct:ProtobufCMessageDescriptor	typeref:typename:size_t
skip	stb_image.h	/^   void     (*skip)  (void *user,int n);                 \/\/ skip the next 'n' bytes, or 'unget/;"	m	struct:__anon84e4e8860208	typeref:typename:void (*)(void * user,int n)
sky_blue	spdlog/fmt/bundled/colors.h	/^    sky_blue = 0x87CEEB,                \/\/ rgb(135,206,235)$/;"	e	enum:color
slate_blue	spdlog/fmt/bundled/colors.h	/^    slate_blue = 0x6A5ACD,              \/\/ rgb(106,90,205)$/;"	e	enum:color
slate_gray	spdlog/fmt/bundled/colors.h	/^    slate_gray = 0x708090,              \/\/ rgb(112,128,144)$/;"	e	enum:color
sleep_for_millis	spdlog/details/os.h	/^inline void sleep_for_millis(int milliseconds)$/;"	f	namespace:spdlog::details::os	typeref:typename:void
smooth_motor_control_deprecated	simple.pb-c.h	/^  SmoothMotorControlDeprecated *smooth_motor_control_deprecated;$/;"	m	struct:_ToSt	typeref:typename:SmoothMotorControlDeprecated *
smooth_motor_control_deprecated	simple.proto	/^    optional SmoothMotorControlDeprecated smooth_motor_control_deprecated = 1;$/;"	f
smooth_motor_control_deprecated__descriptor	simple.pb-c.c	/^const ProtobufCMessageDescriptor smooth_motor_control_deprecated__descriptor =$/;"	v	typeref:typename:const ProtobufCMessageDescriptor
smooth_motor_control_deprecated__field_descriptors	simple.pb-c.c	/^static const ProtobufCFieldDescriptor smooth_motor_control_deprecated__field_descriptors[4] =$/;"	v	typeref:typename:const ProtobufCFieldDescriptor[4]	file:
smooth_motor_control_deprecated__field_indices_by_name	simple.pb-c.c	/^static const unsigned smooth_motor_control_deprecated__field_indices_by_name[] = {$/;"	v	typeref:typename:const unsigned[]	file:
smooth_motor_control_deprecated__free_unpacked	simple.pb-c.c	/^void   smooth_motor_control_deprecated__free_unpacked$/;"	f	typeref:typename:void
smooth_motor_control_deprecated__free_unpacked	simple.pb-c.h	/^void   smooth_motor_control_deprecated__free_unpacked$/;"	p	typeref:typename:void
smooth_motor_control_deprecated__get_packed_size	simple.pb-c.c	/^size_t smooth_motor_control_deprecated__get_packed_size$/;"	f	typeref:typename:size_t
smooth_motor_control_deprecated__get_packed_size	simple.pb-c.h	/^size_t smooth_motor_control_deprecated__get_packed_size$/;"	p	typeref:typename:size_t
smooth_motor_control_deprecated__init	simple.pb-c.c	/^void   smooth_motor_control_deprecated__init$/;"	f	typeref:typename:void
smooth_motor_control_deprecated__init	simple.pb-c.h	/^void   smooth_motor_control_deprecated__init$/;"	p	typeref:typename:void
smooth_motor_control_deprecated__number_ranges	simple.pb-c.c	/^static const ProtobufCIntRange smooth_motor_control_deprecated__number_ranges[1 + 1] =$/;"	v	typeref:typename:const ProtobufCIntRange[]	file:
smooth_motor_control_deprecated__pack	simple.pb-c.c	/^size_t smooth_motor_control_deprecated__pack$/;"	f	typeref:typename:size_t
smooth_motor_control_deprecated__pack	simple.pb-c.h	/^size_t smooth_motor_control_deprecated__pack$/;"	p	typeref:typename:size_t
smooth_motor_control_deprecated__pack_to_buffer	simple.pb-c.c	/^size_t smooth_motor_control_deprecated__pack_to_buffer$/;"	f	typeref:typename:size_t
smooth_motor_control_deprecated__pack_to_buffer	simple.pb-c.h	/^size_t smooth_motor_control_deprecated__pack_to_buffer$/;"	p	typeref:typename:size_t
smooth_motor_control_deprecated__unpack	simple.pb-c.c	/^       smooth_motor_control_deprecated__unpack$/;"	f	typeref:typename:SmoothMotorControlDeprecated *
smooth_motor_control_deprecated__unpack	simple.pb-c.h	/^       smooth_motor_control_deprecated__unpack$/;"	p	typeref:typename:SmoothMotorControlDeprecated *
snow	spdlog/fmt/bundled/colors.h	/^    snow = 0xFFFAFA,                    \/\/ rgb(255,250,250)$/;"	e	enum:color
socket	license-session.h	/^        tcp::socket& socket()$/;"	f	class:LicenseSession	typeref:typename:tcp::socket &
socket	qc-session.h	/^        tcp::socket& socket()$/;"	f	class:QcSession	typeref:typename:tcp::socket &
socket_	http-request.h	/^    tcp::socket socket_;$/;"	m	class:HTTPSession	typeref:typename:tcp::socket
socket_	qc-session.h	/^        tcp::socket socket_;$/;"	m	class:QcSession	typeref:typename:tcp::socket
sort	qcustomplot.h	/^  void sort();$/;"	p	class:QCPDataContainer	typeref:typename:void
sort	qcustomplot.h	/^void QCPDataContainer<DataType>::sort()$/;"	f	class:QCPDataContainer	typeref:typename:void
sortKey	qcustomplot.h	/^  inline double sortKey() const { return key; }$/;"	f	class:QCPBarsData	typeref:typename:double
sortKey	qcustomplot.h	/^  inline double sortKey() const { return key; }$/;"	f	class:QCPFinancialData	typeref:typename:double
sortKey	qcustomplot.h	/^  inline double sortKey() const { return key; }$/;"	f	class:QCPGraphData	typeref:typename:double
sortKey	qcustomplot.h	/^  inline double sortKey() const { return key; }$/;"	f	class:QCPStatisticalBoxData	typeref:typename:double
sortKey	qcustomplot.h	/^  inline double sortKey() const { return t; }$/;"	f	class:QCPCurveData	typeref:typename:double
sortKeyIsMainKey	qcustomplot.cpp	/^bool QCPErrorBars::sortKeyIsMainKey() const$/;"	f	class:QCPErrorBars	typeref:typename:bool
sortKeyIsMainKey	qcustomplot.h	/^  inline static bool sortKeyIsMainKey() { return false; }$/;"	f	class:QCPCurveData	typeref:typename:bool
sortKeyIsMainKey	qcustomplot.h	/^  inline static bool sortKeyIsMainKey() { return true; } $/;"	f	class:QCPBarsData	typeref:typename:bool
sortKeyIsMainKey	qcustomplot.h	/^  inline static bool sortKeyIsMainKey() { return true; } $/;"	f	class:QCPFinancialData	typeref:typename:bool
sortKeyIsMainKey	qcustomplot.h	/^  inline static bool sortKeyIsMainKey() { return true; }$/;"	f	class:QCPGraphData	typeref:typename:bool
sortKeyIsMainKey	qcustomplot.h	/^  inline static bool sortKeyIsMainKey() { return true; }$/;"	f	class:QCPStatisticalBoxData	typeref:typename:bool
sortKeyIsMainKey	qcustomplot.h	/^  virtual bool sortKeyIsMainKey() const = 0;$/;"	p	class:QCPPlottableInterface1D	typeref:typename:bool
sortKeyIsMainKey	qcustomplot.h	/^  virtual bool sortKeyIsMainKey() const Q_DECL_OVERRIDE;$/;"	p	class:QCPAbstractPlottable1D	typeref:typename:bool
sortKeyIsMainKey	qcustomplot.h	/^  virtual bool sortKeyIsMainKey() const Q_DECL_OVERRIDE;$/;"	p	class:QCPErrorBars	typeref:typename:bool
sortKeyIsMainKey	qcustomplot.h	/^bool QCPAbstractPlottable1D<DataType>::sortKeyIsMainKey() const$/;"	f	class:QCPAbstractPlottable1D	typeref:typename:bool
spAll	qcustomplot.h	/^                         ,spAll   = 0xFF  \/\/\/< <tt>0xFF<\/tt> All properties$/;"	e	enum:QCPScatterStyle::ScatterProperty
spAxis	qcustomplot.h	/^                        ,spAxis       = 0x001  \/\/\/< The axis backbone and tick marks$/;"	e	enum:QCPAxis::SelectablePart
spAxisLabel	qcustomplot.h	/^                        ,spAxisLabel  = 0x004  \/\/\/< The axis label$/;"	e	enum:QCPAxis::SelectablePart
spBrush	qcustomplot.h	/^                         ,spBrush = 0x02  \/\/\/< <tt>0x02<\/tt> The brush property, see \\ref s/;"	e	enum:QCPScatterStyle::ScatterProperty
spItems	qcustomplot.h	/^                        ,spItems      = 0x002 \/\/\/< <tt>0x002<\/tt> Legend items individually /;"	e	enum:QCPLegend::SelectablePart
spLegendBox	qcustomplot.h	/^                        ,spLegendBox  = 0x001 \/\/\/< <tt>0x001<\/tt> The legend box (frame)$/;"	e	enum:QCPLegend::SelectablePart
spNone	qcustomplot.h	/^  enum ScatterProperty { spNone  = 0x00  \/\/\/< <tt>0x00<\/tt> None$/;"	e	enum:QCPScatterStyle::ScatterProperty
spNone	qcustomplot.h	/^  enum SelectablePart { spNone        = 0      \/\/\/< None of the selectable parts$/;"	e	enum:QCPAxis::SelectablePart
spNone	qcustomplot.h	/^  enum SelectablePart { spNone        = 0x000 \/\/\/< <tt>0x000<\/tt> None$/;"	e	enum:QCPLegend::SelectablePart
spPen	qcustomplot.h	/^                         ,spPen   = 0x01  \/\/\/< <tt>0x01<\/tt> The pen property, see \\ref set/;"	e	enum:QCPScatterStyle::ScatterProperty
spShape	qcustomplot.h	/^                         ,spShape = 0x08  \/\/\/< <tt>0x08<\/tt> The shape property, see \\ref s/;"	e	enum:QCPScatterStyle::ScatterProperty
spSize	qcustomplot.h	/^                         ,spSize  = 0x04  \/\/\/< <tt>0x04<\/tt> The size property, see \\ref se/;"	e	enum:QCPScatterStyle::ScatterProperty
spTickLabels	qcustomplot.h	/^                        ,spTickLabels = 0x002  \/\/\/< Tick labels (numbers) of this axis (as a /;"	e	enum:QCPAxis::SelectablePart
spacing	qcustomplot.h	/^  Q_PROPERTY(double spacing READ spacing WRITE setSpacing)$/;"	p	class:QCPBarsGroup	typeref:typename:double
spacing	qcustomplot.h	/^  double spacing() const { return mSpacing; }$/;"	f	class:QCPBarsGroup	typeref:typename:double
spacingType	qcustomplot.h	/^  Q_PROPERTY(SpacingType spacingType READ spacingType WRITE setSpacingType)$/;"	p	class:QCPBarsGroup	typeref:typename:SpacingType
spacingType	qcustomplot.h	/^  SpacingType spacingType() const { return mSpacingType; }$/;"	f	class:QCPBarsGroup	typeref:typename:SpacingType
span	qcustomplot.cpp	/^QCPDataRange QCPDataSelection::span() const$/;"	f	class:QCPDataSelection	typeref:typename:QCPDataRange
span	qcustomplot.h	/^  QCPDataRange span() const;$/;"	p	class:QCPDataSelection	typeref:typename:QCPDataRange
spdlog	spdlog/async.h	/^namespace spdlog {$/;"	n
spdlog	spdlog/async_logger.h	/^namespace spdlog {$/;"	n
spdlog	spdlog/common.h	/^namespace spdlog {$/;"	n
spdlog	spdlog/contrib/sinks/step_file_sink.h	/^namespace spdlog {$/;"	n
spdlog	spdlog/details/async_log_helper.h	/^namespace spdlog {$/;"	n
spdlog	spdlog/details/circular_q.h	/^namespace spdlog {$/;"	n
spdlog	spdlog/details/console_globals.h	/^namespace spdlog {$/;"	n
spdlog	spdlog/details/file_helper.h	/^namespace spdlog {$/;"	n
spdlog	spdlog/details/fmt_helper.h	/^namespace spdlog {$/;"	n
spdlog	spdlog/details/log_msg.h	/^namespace spdlog {$/;"	n
spdlog	spdlog/details/mpmc_blocking_q.h	/^namespace spdlog {$/;"	n
spdlog	spdlog/details/null_mutex.h	/^namespace spdlog {$/;"	n
spdlog	spdlog/details/os.h	/^namespace spdlog {$/;"	n
spdlog	spdlog/details/pattern_formatter.h	/^namespace spdlog {$/;"	n
spdlog	spdlog/details/pattern_formatter_impl.h	/^namespace spdlog {$/;"	n
spdlog	spdlog/details/registry.h	/^namespace spdlog {$/;"	n
spdlog	spdlog/details/thread_pool.h	/^namespace spdlog {$/;"	n
spdlog	spdlog/formatter.h	/^namespace spdlog {$/;"	n
spdlog	spdlog/logger.h	/^namespace spdlog {$/;"	n
spdlog	spdlog/sinks/android_sink.h	/^namespace spdlog {$/;"	n
spdlog	spdlog/sinks/ansicolor_sink.h	/^namespace spdlog {$/;"	n
spdlog	spdlog/sinks/base_sink.h	/^namespace spdlog {$/;"	n
spdlog	spdlog/sinks/basic_file_sink.h	/^namespace spdlog {$/;"	n
spdlog	spdlog/sinks/daily_file_sink.h	/^namespace spdlog {$/;"	n
spdlog	spdlog/sinks/dist_sink.h	/^namespace spdlog {$/;"	n
spdlog	spdlog/sinks/file_sinks.h	/^namespace spdlog {$/;"	n
spdlog	spdlog/sinks/msvc_sink.h	/^namespace spdlog {$/;"	n
spdlog	spdlog/sinks/null_sink.h	/^namespace spdlog {$/;"	n
spdlog	spdlog/sinks/ostream_sink.h	/^namespace spdlog {$/;"	n
spdlog	spdlog/sinks/rotating_file_sink.h	/^namespace spdlog {$/;"	n
spdlog	spdlog/sinks/sink.h	/^namespace spdlog {$/;"	n
spdlog	spdlog/sinks/stdout_color_sinks.h	/^namespace spdlog {$/;"	n
spdlog	spdlog/sinks/stdout_sinks.h	/^namespace spdlog {$/;"	n
spdlog	spdlog/sinks/syslog_sink.h	/^namespace spdlog {$/;"	n
spdlog	spdlog/sinks/wincolor_sink.h	/^namespace spdlog {$/;"	n
spdlog	spdlog/sinks/windebug_sink.h	/^namespace spdlog {$/;"	n
spdlog	spdlog/spdlog.h	/^namespace spdlog {$/;"	n
spdlog_ex	spdlog/common.h	/^    explicit spdlog_ex(std::string msg)$/;"	f	class:spdlog::spdlog_ex
spdlog_ex	spdlog/common.h	/^    spdlog_ex(const std::string &msg, int last_errno)$/;"	f	class:spdlog::spdlog_ex
spdlog_ex	spdlog/common.h	/^class spdlog_ex : public std::exception$/;"	c	namespace:spdlog
spec	spdlog/fmt/bundled/format.h	/^    Spec &spec()$/;"	f	class:fmt::internal::ArgFormatterBase	typeref:typename:Spec &
spec_	spdlog/fmt/bundled/format.h	/^    Spec &spec_;$/;"	m	class:fmt::internal::ArgFormatterBase	typeref:typename:Spec &
spec_	spdlog/fmt/bundled/printf.h	/^    FormatSpec &spec_;$/;"	m	class:fmt::internal::WidthHandler	typeref:typename:FormatSpec &
spec_end	stb_image.h	/^   int            spec_end;$/;"	m	struct:__anon84e4e8860608	typeref:typename:int
spec_start	stb_image.h	/^   int            spec_start;$/;"	m	struct:__anon84e4e8860608	typeref:typename:int
split	json.hpp	/^    static std::vector<std::string> split(const std::string& reference_string)$/;"	f	class:nlohmann::json_pointer	typeref:typename:std::vector<std::string>
split_by_extenstion	spdlog/details/file_helper.h	/^    static std::tuple<filename_t, filename_t> split_by_extenstion(const spdlog::filename_t &fnam/;"	f	class:spdlog::details::file_helper	typeref:typename:std::tuple<filename_t,filename_t>
spring_green	spdlog/fmt/bundled/colors.h	/^    spring_green = 0x00FF7F,            \/\/ rgb(0,255,127)$/;"	e	enum:color
squeeze	qcustomplot.h	/^  void squeeze(bool preAllocation=true, bool postAllocation=true);$/;"	p	class:QCPDataContainer	typeref:typename:void
squeeze	qcustomplot.h	/^void QCPDataContainer<DataType>::squeeze(bool preAllocation, bool postAllocation)$/;"	f	class:QCPDataContainer	typeref:typename:void
srmCustom	qcustomplot.h	/^                         ,srmCustom \/\/\/< When dragging the mouse, a selection rect becomes ac/;"	e	enum:QCP::SelectionRectMode
srmNone	qcustomplot.h	/^enum SelectionRectMode { srmNone    \/\/\/< The selection rect is disabled, and all mouse events/;"	e	enum:QCP::SelectionRectMode
srmSelect	qcustomplot.h	/^                         ,srmSelect \/\/\/< When dragging the mouse, a selection rect becomes ac/;"	e	enum:QCP::SelectionRectMode
srmZoom	qcustomplot.h	/^                         ,srmZoom   \/\/\/< When dragging the mouse, a selection rect becomes ac/;"	e	enum:QCP::SelectionRectMode
ssCircle	qcustomplot.h	/^                      ,ssCircle    \/\/\/< \\enumimage{ssCircle.png} a circle$/;"	e	enum:QCPScatterStyle::ScatterShape
ssCross	qcustomplot.h	/^                      ,ssCross     \/\/\/< \\enumimage{ssCross.png} a cross$/;"	e	enum:QCPScatterStyle::ScatterShape
ssCrossCircle	qcustomplot.h	/^                      ,ssCrossCircle      \/\/\/< \\enumimage{ssCrossCircle.png} a circle with a/;"	e	enum:QCPScatterStyle::ScatterShape
ssCrossSquare	qcustomplot.h	/^                      ,ssCrossSquare      \/\/\/< \\enumimage{ssCrossSquare.png} a square with a/;"	e	enum:QCPScatterStyle::ScatterShape
ssCustom	qcustomplot.h	/^                      ,ssCustom    \/\/\/< custom painter operations are performed per scatter (/;"	e	enum:QCPScatterStyle::ScatterShape
ssDiamond	qcustomplot.h	/^                      ,ssDiamond   \/\/\/< \\enumimage{ssDiamond.png} a diamond$/;"	e	enum:QCPScatterStyle::ScatterShape
ssDisc	qcustomplot.h	/^                      ,ssDisc      \/\/\/< \\enumimage{ssDisc.png} a circle which is filled with/;"	e	enum:QCPScatterStyle::ScatterShape
ssDot	qcustomplot.h	/^                      ,ssDot       \/\/\/< \\enumimage{ssDot.png} a single pixel (use \\ref ssDi/;"	e	enum:QCPScatterStyle::ScatterShape
ssMultiples	qcustomplot.h	/^                       ,ssMultiples \/\/\/< An integer multiple of the specified tick step is al/;"	e	enum:QCPAxisTickerFixed::ScaleStrategy
ssNone	qcustomplot.h	/^  enum ScaleStrategy { ssNone      \/\/\/< Modifications are not allowed, the specified tick ste/;"	e	enum:QCPAxisTickerFixed::ScaleStrategy
ssNone	qcustomplot.h	/^  enum ScatterShape { ssNone       \/\/\/< no scatter symbols are drawn (e.g. in QCPGraph, data /;"	e	enum:QCPScatterStyle::ScatterShape
ssPeace	qcustomplot.h	/^                      ,ssPeace     \/\/\/< \\enumimage{ssPeace.png} a circle, with one vertical /;"	e	enum:QCPScatterStyle::ScatterShape
ssPixmap	qcustomplot.h	/^                      ,ssPixmap    \/\/\/< a custom pixmap specified by \\ref setPixmap, centere/;"	e	enum:QCPScatterStyle::ScatterShape
ssPlus	qcustomplot.h	/^                      ,ssPlus      \/\/\/< \\enumimage{ssPlus.png} a plus$/;"	e	enum:QCPScatterStyle::ScatterShape
ssPlusCircle	qcustomplot.h	/^                      ,ssPlusCircle       \/\/\/< \\enumimage{ssPlusCircle.png} a circle with a /;"	e	enum:QCPScatterStyle::ScatterShape
ssPlusSquare	qcustomplot.h	/^                      ,ssPlusSquare       \/\/\/< \\enumimage{ssPlusSquare.png} a square with a /;"	e	enum:QCPScatterStyle::ScatterShape
ssPowers	qcustomplot.h	/^                       ,ssPowers    \/\/\/< An integer power of the specified tick step is allow/;"	e	enum:QCPAxisTickerFixed::ScaleStrategy
ssSquare	qcustomplot.h	/^                      ,ssSquare    \/\/\/< \\enumimage{ssSquare.png} a square$/;"	e	enum:QCPScatterStyle::ScatterShape
ssStar	qcustomplot.h	/^                      ,ssStar      \/\/\/< \\enumimage{ssStar.png} a star with eight arms, i.e. /;"	e	enum:QCPScatterStyle::ScatterShape
ssTriangle	qcustomplot.h	/^                      ,ssTriangle  \/\/\/< \\enumimage{ssTriangle.png} an equilateral triangle, /;"	e	enum:QCPScatterStyle::ScatterShape
ssTriangleInverted	qcustomplot.h	/^                      ,ssTriangleInverted \/\/\/< \\enumimage{ssTriangleInverted.png} an equilat/;"	e	enum:QCPScatterStyle::ScatterShape
ssid	simple.pb-c.h	/^  char *ssid;$/;"	m	struct:_ToHi	typeref:typename:char *
ssid	simple.proto	/^    optional string ssid = 200;$/;"	f
ssid_password	simple.pb-c.h	/^  char *ssid_password;$/;"	m	struct:_ToHi	typeref:typename:char *
ssid_password	simple.proto	/^    optional string ssid_password = 201;$/;"	f
ssid_type	simple.pb-c.h	/^  char *ssid_type;$/;"	m	struct:_ToHi	typeref:typename:char *
ssid_type	simple.proto	/^    optional string ssid_type = 202;$/;"	f
sstring	spdlog/fmt/bundled/core.h	/^        string_value<signed char> sstring;$/;"	m	union:internal::value::__anonef64315f020a	typeref:typename:string_value<signed char>
sstring	spdlog/fmt/bundled/format.h	/^        StringValue<signed char> sstring;$/;"	m	union:fmt::internal::Value::__anon1ea8787f020a	typeref:typename:StringValue<signed char>
stAbsolute	qcustomplot.h	/^  enum SpacingType { stAbsolute       \/\/\/< Bar spacing is in absolute pixels$/;"	e	enum:QCPBarsGroup::SpacingType
stAxisRectRatio	qcustomplot.h	/^                     ,stAxisRectRatio \/\/\/< Bar spacing is given by a fraction of the axis rec/;"	e	enum:QCPBarsGroup::SpacingType
stDataRange	qcustomplot.h	/^                     ,stDataRange          \/\/\/< Multiple contiguous data points (a data range/;"	e	enum:QCP::SelectionType
stLinear	qcustomplot.h	/^  enum ScaleType { stLinear       \/\/\/< Linear scaling$/;"	e	enum:QCPAxis::ScaleType
stLogarithmic	qcustomplot.h	/^                   ,stLogarithmic \/\/\/< Logarithmic scaling with correspondingly transformed a/;"	e	enum:QCPAxis::ScaleType
stMultipleDataRanges	qcustomplot.h	/^                     ,stMultipleDataRanges \/\/\/< Any combination of data points\/ranges can be/;"	e	enum:QCP::SelectionType
stNone	qcustomplot.h	/^enum SelectionType { stNone                \/\/\/< The plottable is not selectable$/;"	e	enum:QCP::SelectionType
stPlotCoords	qcustomplot.h	/^                     ,stPlotCoords    \/\/\/< Bar spacing is in key coordinates and thus scales /;"	e	enum:QCPBarsGroup::SpacingType
stSingleData	qcustomplot.h	/^                     ,stSingleData         \/\/\/< One individual data point can be selected at /;"	e	enum:QCP::SelectionType
stWhole	qcustomplot.h	/^                     ,stWhole              \/\/\/< Selection behaves like \\ref stMultipleDataRa/;"	e	enum:QCP::SelectionType
st_info__descriptor	simple.pb-c.c	/^const ProtobufCEnumDescriptor st_info__descriptor =$/;"	v	typeref:typename:const ProtobufCEnumDescriptor
st_info__enum_values_by_name	simple.pb-c.c	/^static const ProtobufCEnumValueIndex st_info__enum_values_by_name[9] =$/;"	v	typeref:typename:const ProtobufCEnumValueIndex[9]	file:
st_info__enum_values_by_number	simple.pb-c.c	/^static const ProtobufCEnumValue st_info__enum_values_by_number[9] =$/;"	v	typeref:typename:const ProtobufCEnumValue[9]	file:
st_info__value_ranges	simple.pb-c.c	/^static const ProtobufCIntRange st_info__value_ranges[] = {$/;"	v	typeref:typename:const ProtobufCIntRange[]	file:
stackingGap	qcustomplot.h	/^  Q_PROPERTY(double stackingGap READ stackingGap WRITE setStackingGap)$/;"	p	class:QCPBars	typeref:typename:double
stackingGap	qcustomplot.h	/^  double stackingGap() const { return mStackingGap; }$/;"	f	class:QCPBars	typeref:typename:double
start	ble.cpp	/^int BLESession::start() {$/;"	f	class:BLESession	typeref:typename:int
start	ble.h	/^    int start();$/;"	p	class:BLESession	typeref:typename:int
start	gui-session.h	/^        void start()$/;"	f	class:GuiSession_depre	typeref:typename:void
start	json.hpp	/^    const char* start;$/;"	m	class:nlohmann::detail::input_buffer_adapter	typeref:typename:const char *
start	license-session.h	/^        void start()$/;"	f	class:LicenseSession	typeref:typename:void
start	qc-session.h	/^        void start()$/;"	f	class:QcSession	typeref:typename:void
start	qcustomplot.h	/^  QCPItemPosition * const start;$/;"	m	class:QCPItemCurve	typeref:typename:QCPItemPosition * const
start	qcustomplot.h	/^  QCPItemPosition * const start;$/;"	m	class:QCPItemLine	typeref:typename:QCPItemPosition * const
start	simple.pb-c.h	/^  uint32_t start;$/;"	m	struct:_FirmwareUpdate	typeref:typename:uint32_t
start	simple.pb-c.h	/^  uint32_t start;$/;"	m	struct:_FirmwareUpdateFeedback	typeref:typename:uint32_t
start	simple.proto	/^    optional uint32 start = 4;$/;"	f
startDir	qcustomplot.h	/^  QCPItemPosition * const startDir;$/;"	m	class:QCPItemCurve	typeref:typename:QCPItemPosition * const
startOffset	protocol-struct.h	/^    uint32_t startOffset;$/;"	m	struct:FirmwareUpgradeDetail	typeref:typename:uint32_t
startOffset	protocol-struct.h	/^    uint32_t startOffset;$/;"	m	struct:FirmwareUpgradeVerify	typeref:typename:uint32_t
startPainting	qcustomplot.cpp	/^QCPPainter *QCPPaintBufferGlFbo::startPainting()$/;"	f	class:QCPPaintBufferGlFbo	typeref:typename:QCPPainter *
startPainting	qcustomplot.cpp	/^QCPPainter *QCPPaintBufferGlPbuffer::startPainting()$/;"	f	class:QCPPaintBufferGlPbuffer	typeref:typename:QCPPainter *
startPainting	qcustomplot.cpp	/^QCPPainter *QCPPaintBufferPixmap::startPainting()$/;"	f	class:QCPPaintBufferPixmap	typeref:typename:QCPPainter *
startPainting	qcustomplot.h	/^  virtual QCPPainter *startPainting() = 0;$/;"	p	class:QCPAbstractPaintBuffer	typeref:typename:QCPPainter *
startPainting	qcustomplot.h	/^  virtual QCPPainter *startPainting() Q_DECL_OVERRIDE;$/;"	p	class:QCPPaintBufferGlFbo	typeref:typename:QCPPainter *
startPainting	qcustomplot.h	/^  virtual QCPPainter *startPainting() Q_DECL_OVERRIDE;$/;"	p	class:QCPPaintBufferGlPbuffer	typeref:typename:QCPPainter *
startPainting	qcustomplot.h	/^  virtual QCPPainter *startPainting() Q_DECL_OVERRIDE;$/;"	p	class:QCPPaintBufferPixmap	typeref:typename:QCPPainter *
startSelection	qcustomplot.cpp	/^void QCPSelectionRect::startSelection(QMouseEvent *event)$/;"	f	class:QCPSelectionRect	typeref:typename:void
startSelection	qcustomplot.h	/^  virtual void startSelection(QMouseEvent *event);$/;"	p	class:QCPSelectionRect	typeref:typename:void
startTimePoint	mdi-child.h	/^    std::chrono::system_clock::time_point startTimePoint;$/;"	m	class:MdiChild	typeref:typename:std::chrono::system_clock::time_point
start_accept	asio-server.h	/^        void start_accept()$/;"	f	class:ASIOServer	typeref:typename:void
start_accept	mainwindow.cpp	/^void MainWindow::start_accept()$/;"	f	class:MainWindow	typeref:typename:void
start_accept	mainwindow.h	/^    void start_accept();$/;"	p	class:MainWindow	typeref:typename:void
start_offset	simple.pb-c.h	/^  uint32_t start_offset;$/;"	m	struct:_FirmwareUpdate	typeref:typename:uint32_t
start_offset	simple.proto	/^    optional uint32 start_offset = 6;$/;"	f
start_value	protobuf-c/protobuf-c.h	/^	int             start_value;$/;"	m	struct:ProtobufCIntRange	typeref:typename:int
start_x	stb_image.h	/^   int start_x, start_y;$/;"	m	struct:__anon84e4e8861108	typeref:typename:int
start_y	stb_image.h	/^   int start_x, start_y;$/;"	m	struct:__anon84e4e8861108	typeref:typename:int
started	qcustomplot.h	/^  void started(QMouseEvent *event);$/;"	S	class:QCPSelectionRect	typeref:typename:void
started	qcustomplot.h	/^  void started(QMouseEvent *event);$/;"	p	class:QCPSelectionRect	typeref:typename:void
static_const	json.hpp	/^struct static_const$/;"	s	namespace:nlohmann::detail
static_descriptor_initializer	qc-message.pb.cc	/^} static_descriptor_initializer;$/;"	v	namespace:protobuf_qc_2dmessage_2eproto	typeref:struct:protobuf_qc_2dmessage_2eproto::StaticDescriptorInitializer
status	protocol-struct.h	/^    uint8_t status; $/;"	m	struct:FirmwareUpgradeResponse	typeref:typename:uint8_t
status	simple.pb-c.h	/^  uint32_t status;$/;"	m	struct:_ToHi	typeref:typename:uint32_t
status	simple.proto	/^    optional uint32 status = 3;$/;"	f
stbi__DNL	stb_image.h	/^#define stbi__DNL(/;"	d
stbi__EOI	stb_image.h	/^#define stbi__EOI(/;"	d
stbi__SOF	stb_image.h	/^#define stbi__SOF(/;"	d
stbi__SOF_progressive	stb_image.h	/^#define stbi__SOF_progressive(/;"	d
stbi__SOI	stb_image.h	/^#define stbi__SOI(/;"	d
stbi__SOS	stb_image.h	/^#define stbi__SOS(/;"	d
stbi__YCbCr_to_RGB_row	stb_image.h	/^static void stbi__YCbCr_to_RGB_row(stbi_uc *out, const stbi_uc *y, const stbi_uc *pcb, const stb/;"	f	typeref:typename:void
stbi__YCbCr_to_RGB_simd	stb_image.h	/^static void stbi__YCbCr_to_RGB_simd(stbi_uc *out, stbi_uc const *y, stbi_uc const *pcb, stbi_uc /;"	f	typeref:typename:void
stbi__at_eof	stb_image.h	/^stbi_inline static int stbi__at_eof(stbi__context *s)$/;"	f	typeref:typename:stbi_inline int
stbi__bit_reverse	stb_image.h	/^stbi_inline static int stbi__bit_reverse(int v, int bits)$/;"	f	typeref:typename:stbi_inline int
stbi__bitcount	stb_image.h	/^static int stbi__bitcount(unsigned int a)$/;"	f	typeref:typename:int
stbi__bitreverse16	stb_image.h	/^stbi_inline static int stbi__bitreverse16(int n)$/;"	f	typeref:typename:stbi_inline int
stbi__bmask	stb_image.h	/^static stbi__uint32 stbi__bmask[17]={0,1,3,7,15,31,63,127,255,511,1023,2047,4095,8191,16383,3276/;"	v	typeref:typename:stbi__uint32[17]
stbi__bmp_data	stb_image.h	/^} stbi__bmp_data;$/;"	t	typeref:struct:__anon84e4e8860e08
stbi__bmp_info	stb_image.h	/^static int      stbi__bmp_info(stbi__context *s, int *x, int *y, int *comp);$/;"	p	typeref:typename:int
stbi__bmp_info	stb_image.h	/^static int stbi__bmp_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f	typeref:typename:int
stbi__bmp_load	stb_image.h	/^static stbi_uc *stbi__bmp_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f	typeref:typename:stbi_uc *
stbi__bmp_load	stb_image.h	/^static stbi_uc *stbi__bmp_load(stbi__context *s, int *x, int *y, int *comp, int req_comp);$/;"	p	typeref:typename:stbi_uc *
stbi__bmp_parse_header	stb_image.h	/^static void *stbi__bmp_parse_header(stbi__context *s, stbi__bmp_data *info)$/;"	f	typeref:typename:void *
stbi__bmp_test	stb_image.h	/^static int      stbi__bmp_test(stbi__context *s);$/;"	p	typeref:typename:int
stbi__bmp_test	stb_image.h	/^static int stbi__bmp_test(stbi__context *s)$/;"	f	typeref:typename:int
stbi__bmp_test_raw	stb_image.h	/^static int stbi__bmp_test_raw(stbi__context *s)$/;"	f	typeref:typename:int
stbi__build_fast_ac	stb_image.h	/^static void stbi__build_fast_ac(stbi__int16 *fast_ac, stbi__huffman *h)$/;"	f	typeref:typename:void
stbi__build_huffman	stb_image.h	/^static int stbi__build_huffman(stbi__huffman *h, int *count)$/;"	f	typeref:typename:int
stbi__check_png_header	stb_image.h	/^static int stbi__check_png_header(stbi__context *s)$/;"	f	typeref:typename:int
stbi__clamp	stb_image.h	/^stbi_inline static stbi_uc stbi__clamp(int x)$/;"	f	typeref:typename:stbi_inline stbi_uc
stbi__cleanup_jpeg	stb_image.h	/^static void stbi__cleanup_jpeg(stbi__jpeg *j)$/;"	f	typeref:typename:void
stbi__compute_huffman_codes	stb_image.h	/^static int stbi__compute_huffman_codes(stbi__zbuf *a)$/;"	f	typeref:typename:int
stbi__compute_transparency	stb_image.h	/^static int stbi__compute_transparency(stbi__png *z, stbi_uc tc[3], int out_n)$/;"	f	typeref:typename:int
stbi__compute_y	stb_image.h	/^static stbi_uc stbi__compute_y(int r, int g, int b)$/;"	f	typeref:typename:stbi_uc
stbi__context	stb_image.h	/^} stbi__context;$/;"	t	typeref:struct:__anon84e4e8860308
stbi__convert_format	stb_image.h	/^static unsigned char *stbi__convert_format(unsigned char *data, int img_n, int req_comp, unsigne/;"	f	typeref:typename:unsigned char *
stbi__copyval	stb_image.h	/^static void stbi__copyval(int channel,stbi_uc *dest,const stbi_uc *src)$/;"	f	typeref:typename:void
stbi__cpuid3	stb_image.h	/^static int stbi__cpuid3(void)$/;"	f	typeref:typename:int
stbi__create_png_image	stb_image.h	/^static int stbi__create_png_image(stbi__png *a, stbi_uc *image_data, stbi__uint32 image_data_len/;"	f	typeref:typename:int
stbi__create_png_image_raw	stb_image.h	/^static int stbi__create_png_image_raw(stbi__png *a, stbi_uc *raw, stbi__uint32 raw_len, int out_/;"	f	typeref:typename:int
stbi__de_iphone	stb_image.h	/^static void stbi__de_iphone(stbi__png *z)$/;"	f	typeref:typename:void
stbi__de_iphone_flag	stb_image.h	/^static int stbi__de_iphone_flag = 0;$/;"	v	typeref:typename:int
stbi__decode_jpeg_header	stb_image.h	/^static int stbi__decode_jpeg_header(stbi__jpeg *z, int scan)$/;"	f	typeref:typename:int
stbi__decode_jpeg_image	stb_image.h	/^static int stbi__decode_jpeg_image(stbi__jpeg *j)$/;"	f	typeref:typename:int
stbi__depth_scale_table	stb_image.h	/^static stbi_uc stbi__depth_scale_table[9] = { 0, 0xff, 0x55, 0, 0x11, 0,0,0, 0x01 };$/;"	v	typeref:typename:stbi_uc[9]
stbi__div16	stb_image.h	/^#define stbi__div16(/;"	d
stbi__div4	stb_image.h	/^#define stbi__div4(/;"	d
stbi__do_png	stb_image.h	/^static unsigned char *stbi__do_png(stbi__png *p, int *x, int *y, int *n, int req_comp)$/;"	f	typeref:typename:unsigned char *
stbi__do_zlib	stb_image.h	/^static int stbi__do_zlib(stbi__zbuf *a, char *obuf, int olen, int exp, int parse_header)$/;"	f	typeref:typename:int
stbi__err	stb_image.h	/^   #define stbi__err(/;"	d
stbi__err	stb_image.h	/^static int stbi__err(const char *str)$/;"	f	typeref:typename:int
stbi__errpf	stb_image.h	/^#define stbi__errpf(/;"	d
stbi__errpuc	stb_image.h	/^#define stbi__errpuc(/;"	d
stbi__expand_png_palette	stb_image.h	/^static int stbi__expand_png_palette(stbi__png *a, stbi_uc *palette, int len, int pal_img_n)$/;"	f	typeref:typename:int
stbi__extend_receive	stb_image.h	/^stbi_inline static int stbi__extend_receive(stbi__jpeg *j, int n)$/;"	f	typeref:typename:stbi_inline int
stbi__f2f	stb_image.h	/^#define stbi__f2f(/;"	d
stbi__fill_bits	stb_image.h	/^static void stbi__fill_bits(stbi__zbuf *z)$/;"	f	typeref:typename:void
stbi__fill_gif_background	stb_image.h	/^static void stbi__fill_gif_background(stbi__gif *g, int x0, int y0, int x1, int y1)$/;"	f	typeref:typename:void
stbi__float2int	stb_image.h	/^#define stbi__float2int(/;"	d
stbi__float_postprocess	stb_image.h	/^static void stbi__float_postprocess(float *result, int *x, int *y, int *comp, int req_comp)$/;"	f	typeref:typename:void
stbi__fopen	stb_image.h	/^static FILE *stbi__fopen(char const *filename, char const *mode)$/;"	f	typeref:typename:FILE *
stbi__fsh	stb_image.h	/^#define stbi__fsh(/;"	d
stbi__g_failure_reason	stb_image.h	/^static const char *stbi__g_failure_reason;$/;"	v	typeref:typename:const char *
stbi__get16be	stb_image.h	/^static int stbi__get16be(stbi__context *s)$/;"	f	typeref:typename:int
stbi__get16le	stb_image.h	/^static int stbi__get16le(stbi__context *s)$/;"	f	typeref:typename:int
stbi__get32be	stb_image.h	/^static stbi__uint32 stbi__get32be(stbi__context *s)$/;"	f	typeref:typename:stbi__uint32
stbi__get32le	stb_image.h	/^static stbi__uint32 stbi__get32le(stbi__context *s)$/;"	f	typeref:typename:stbi__uint32
stbi__get8	stb_image.h	/^stbi_inline static stbi_uc stbi__get8(stbi__context *s)$/;"	f	typeref:typename:stbi_inline stbi_uc
stbi__get_chunk_header	stb_image.h	/^static stbi__pngchunk stbi__get_chunk_header(stbi__context *s)$/;"	f	typeref:typename:stbi__pngchunk
stbi__get_marker	stb_image.h	/^static stbi_uc stbi__get_marker(stbi__jpeg *j)$/;"	f	typeref:typename:stbi_uc
stbi__getn	stb_image.h	/^static int stbi__getn(stbi__context *s, stbi_uc *buffer, int n)$/;"	f	typeref:typename:int
stbi__gif	stb_image.h	/^} stbi__gif;$/;"	t	typeref:struct:__anon84e4e8861108
stbi__gif_header	stb_image.h	/^static int stbi__gif_header(stbi__context *s, stbi__gif *g, int *comp, int is_info)$/;"	f	typeref:typename:int
stbi__gif_info	stb_image.h	/^static int      stbi__gif_info(stbi__context *s, int *x, int *y, int *comp);$/;"	p	typeref:typename:int
stbi__gif_info	stb_image.h	/^static int stbi__gif_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f	typeref:typename:int
stbi__gif_info_raw	stb_image.h	/^static int stbi__gif_info_raw(stbi__context *s, int *x, int *y, int *comp)$/;"	f	typeref:typename:int
stbi__gif_load	stb_image.h	/^static stbi_uc *stbi__gif_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f	typeref:typename:stbi_uc *
stbi__gif_load	stb_image.h	/^static stbi_uc *stbi__gif_load(stbi__context *s, int *x, int *y, int *comp, int req_comp);$/;"	p	typeref:typename:stbi_uc *
stbi__gif_load_next	stb_image.h	/^static stbi_uc *stbi__gif_load_next(stbi__context *s, stbi__gif *g, int *comp, int req_comp)$/;"	f	typeref:typename:stbi_uc *
stbi__gif_lzw	stb_image.h	/^} stbi__gif_lzw;$/;"	t	typeref:struct:__anon84e4e8861008
stbi__gif_parse_colortable	stb_image.h	/^static void stbi__gif_parse_colortable(stbi__context *s, stbi_uc pal[256][4], int num_entries, i/;"	f	typeref:typename:void
stbi__gif_test	stb_image.h	/^static int      stbi__gif_test(stbi__context *s);$/;"	p	typeref:typename:int
stbi__gif_test	stb_image.h	/^static int stbi__gif_test(stbi__context *s)$/;"	f	typeref:typename:int
stbi__gif_test_raw	stb_image.h	/^static int stbi__gif_test_raw(stbi__context *s)$/;"	f	typeref:typename:int
stbi__grow_buffer_unsafe	stb_image.h	/^static void stbi__grow_buffer_unsafe(stbi__jpeg *j)$/;"	f	typeref:typename:void
stbi__h2l_gamma_i	stb_image.h	/^static float stbi__h2l_gamma_i=1.0f\/2.2f, stbi__h2l_scale_i=1.0f;$/;"	v	typeref:typename:float
stbi__h2l_scale_i	stb_image.h	/^static float stbi__h2l_gamma_i=1.0f\/2.2f, stbi__h2l_scale_i=1.0f;$/;"	v	typeref:typename:float
stbi__hdr_convert	stb_image.h	/^static void stbi__hdr_convert(float *output, stbi_uc *input, int req_comp)$/;"	f	typeref:typename:void
stbi__hdr_gettoken	stb_image.h	/^static char *stbi__hdr_gettoken(stbi__context *z, char *buffer)$/;"	f	typeref:typename:char *
stbi__hdr_info	stb_image.h	/^static int      stbi__hdr_info(stbi__context *s, int *x, int *y, int *comp);$/;"	p	typeref:typename:int
stbi__hdr_info	stb_image.h	/^static int stbi__hdr_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f	typeref:typename:int
stbi__hdr_load	stb_image.h	/^static float   *stbi__hdr_load(stbi__context *s, int *x, int *y, int *comp, int req_comp);$/;"	p	typeref:typename:float *
stbi__hdr_load	stb_image.h	/^static float *stbi__hdr_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f	typeref:typename:float *
stbi__hdr_test	stb_image.h	/^static int      stbi__hdr_test(stbi__context *s);$/;"	p	typeref:typename:int
stbi__hdr_test	stb_image.h	/^static int stbi__hdr_test(stbi__context* s)$/;"	f	typeref:typename:int
stbi__hdr_test_core	stb_image.h	/^static int stbi__hdr_test_core(stbi__context *s)$/;"	f	typeref:typename:int
stbi__hdr_to_ldr	stb_image.h	/^static stbi_uc *stbi__hdr_to_ldr(float   *data, int x, int y, int comp)$/;"	f	typeref:typename:stbi_uc *
stbi__hdr_to_ldr	stb_image.h	/^static stbi_uc *stbi__hdr_to_ldr(float   *data, int x, int y, int comp);$/;"	p	typeref:typename:stbi_uc *
stbi__high_bit	stb_image.h	/^static int stbi__high_bit(unsigned int z)$/;"	f	typeref:typename:int
stbi__huffman	stb_image.h	/^} stbi__huffman;$/;"	t	typeref:struct:__anon84e4e8860508
stbi__idct_block	stb_image.h	/^static void stbi__idct_block(stbi_uc *out, int out_stride, short data[64])$/;"	f	typeref:typename:void
stbi__idct_simd	stb_image.h	/^static void stbi__idct_simd(stbi_uc *out, int out_stride, short data[64])$/;"	f	typeref:typename:void
stbi__info_main	stb_image.h	/^static int stbi__info_main(stbi__context *s, int *x, int *y, int *comp)$/;"	f	typeref:typename:int
stbi__init_zdefaults	stb_image.h	/^static void stbi__init_zdefaults(void)$/;"	f	typeref:typename:void
stbi__int16	stb_image.h	/^typedef   signed short stbi__int16;$/;"	t	typeref:typename:signed short
stbi__int16	stb_image.h	/^typedef int16_t  stbi__int16;$/;"	t	typeref:typename:int16_t
stbi__int32	stb_image.h	/^typedef   signed int   stbi__int32;$/;"	t	typeref:typename:signed int
stbi__int32	stb_image.h	/^typedef int32_t  stbi__int32;$/;"	t	typeref:typename:int32_t
stbi__jbias	stb_image.h	/^static int const stbi__jbias[16] = {0,-1,-3,-7,-15,-31,-63,-127,-255,-511,-1023,-2047,-4095,-819/;"	v	typeref:typename:int const[16]
stbi__jpeg	stb_image.h	/^} stbi__jpeg;$/;"	t	typeref:struct:__anon84e4e8860608
stbi__jpeg_decode_block	stb_image.h	/^static int stbi__jpeg_decode_block(stbi__jpeg *j, short data[64], stbi__huffman *hdc, stbi__huff/;"	f	typeref:typename:int
stbi__jpeg_decode_block_prog_ac	stb_image.h	/^static int stbi__jpeg_decode_block_prog_ac(stbi__jpeg *j, short data[64], stbi__huffman *hac, st/;"	f	typeref:typename:int
stbi__jpeg_decode_block_prog_dc	stb_image.h	/^static int stbi__jpeg_decode_block_prog_dc(stbi__jpeg *j, short data[64], stbi__huffman *hdc, in/;"	f	typeref:typename:int
stbi__jpeg_dequantize	stb_image.h	/^static void stbi__jpeg_dequantize(short *data, stbi_uc *dequant)$/;"	f	typeref:typename:void
stbi__jpeg_dezigzag	stb_image.h	/^static stbi_uc stbi__jpeg_dezigzag[64+15] =$/;"	v	typeref:typename:stbi_uc[]
stbi__jpeg_finish	stb_image.h	/^static void stbi__jpeg_finish(stbi__jpeg *z)$/;"	f	typeref:typename:void
stbi__jpeg_get_bit	stb_image.h	/^stbi_inline static int stbi__jpeg_get_bit(stbi__jpeg *j)$/;"	f	typeref:typename:stbi_inline int
stbi__jpeg_get_bits	stb_image.h	/^stbi_inline static int stbi__jpeg_get_bits(stbi__jpeg *j, int n)$/;"	f	typeref:typename:stbi_inline int
stbi__jpeg_huff_decode	stb_image.h	/^stbi_inline static int stbi__jpeg_huff_decode(stbi__jpeg *j, stbi__huffman *h)$/;"	f	typeref:typename:stbi_inline int
stbi__jpeg_info	stb_image.h	/^static int      stbi__jpeg_info(stbi__context *s, int *x, int *y, int *comp);$/;"	p	typeref:typename:int
stbi__jpeg_info	stb_image.h	/^static int stbi__jpeg_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f	typeref:typename:int
stbi__jpeg_info_raw	stb_image.h	/^static int stbi__jpeg_info_raw(stbi__jpeg *j, int *x, int *y, int *comp)$/;"	f	typeref:typename:int
stbi__jpeg_load	stb_image.h	/^static stbi_uc *stbi__jpeg_load(stbi__context *s, int *x, int *y, int *comp, int req_comp);$/;"	p	typeref:typename:stbi_uc *
stbi__jpeg_load	stb_image.h	/^static unsigned char *stbi__jpeg_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f	typeref:typename:unsigned char *
stbi__jpeg_reset	stb_image.h	/^static void stbi__jpeg_reset(stbi__jpeg *j)$/;"	f	typeref:typename:void
stbi__jpeg_test	stb_image.h	/^static int      stbi__jpeg_test(stbi__context *s);$/;"	p	typeref:typename:int
stbi__jpeg_test	stb_image.h	/^static int stbi__jpeg_test(stbi__context *s)$/;"	f	typeref:typename:int
stbi__l2h_gamma	stb_image.h	/^static float stbi__l2h_gamma=2.2f, stbi__l2h_scale=1.0f;$/;"	v	typeref:typename:float
stbi__l2h_scale	stb_image.h	/^static float stbi__l2h_gamma=2.2f, stbi__l2h_scale=1.0f;$/;"	v	typeref:typename:float
stbi__ldr_to_hdr	stb_image.h	/^static float   *stbi__ldr_to_hdr(stbi_uc *data, int x, int y, int comp)$/;"	f	typeref:typename:float *
stbi__ldr_to_hdr	stb_image.h	/^static float   *stbi__ldr_to_hdr(stbi_uc *data, int x, int y, int comp);$/;"	p	typeref:typename:float *
stbi__load_flip	stb_image.h	/^static unsigned char *stbi__load_flip(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f	typeref:typename:unsigned char *
stbi__load_main	stb_image.h	/^static unsigned char *stbi__load_main(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f	typeref:typename:unsigned char *
stbi__loadf_main	stb_image.h	/^static float *stbi__loadf_main(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f	typeref:typename:float *
stbi__malloc	stb_image.h	/^static void *stbi__malloc(size_t size)$/;"	f	typeref:typename:void *
stbi__out_gif_code	stb_image.h	/^static void stbi__out_gif_code(stbi__gif *g, stbi__uint16 code)$/;"	f	typeref:typename:void
stbi__paeth	stb_image.h	/^static int stbi__paeth(int a, int b, int c)$/;"	f	typeref:typename:int
stbi__parse_entropy_coded_data	stb_image.h	/^static int stbi__parse_entropy_coded_data(stbi__jpeg *z)$/;"	f	typeref:typename:int
stbi__parse_huffman_block	stb_image.h	/^static int stbi__parse_huffman_block(stbi__zbuf *a)$/;"	f	typeref:typename:int
stbi__parse_png_file	stb_image.h	/^static int stbi__parse_png_file(stbi__png *z, int scan, int req_comp)$/;"	f	typeref:typename:int
stbi__parse_uncomperssed_block	stb_image.h	/^static int stbi__parse_uncomperssed_block(stbi__zbuf *a)$/;"	f	typeref:typename:int
stbi__parse_zlib	stb_image.h	/^static int stbi__parse_zlib(stbi__zbuf *a, int parse_header)$/;"	f	typeref:typename:int
stbi__parse_zlib_header	stb_image.h	/^static int stbi__parse_zlib_header(stbi__zbuf *a)$/;"	f	typeref:typename:int
stbi__pic_info	stb_image.h	/^static int      stbi__pic_info(stbi__context *s, int *x, int *y, int *comp);$/;"	p	typeref:typename:int
stbi__pic_info	stb_image.h	/^static int stbi__pic_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f	typeref:typename:int
stbi__pic_is4	stb_image.h	/^static int stbi__pic_is4(stbi__context *s,const char *str)$/;"	f	typeref:typename:int
stbi__pic_load	stb_image.h	/^static stbi_uc *stbi__pic_load(stbi__context *s, int *x, int *y, int *comp, int req_comp);$/;"	p	typeref:typename:stbi_uc *
stbi__pic_load	stb_image.h	/^static stbi_uc *stbi__pic_load(stbi__context *s,int *px,int *py,int *comp,int req_comp)$/;"	f	typeref:typename:stbi_uc *
stbi__pic_load_core	stb_image.h	/^static stbi_uc *stbi__pic_load_core(stbi__context *s,int width,int height,int *comp, stbi_uc *re/;"	f	typeref:typename:stbi_uc *
stbi__pic_packet	stb_image.h	/^} stbi__pic_packet;$/;"	t	typeref:struct:__anon84e4e8860f08
stbi__pic_test	stb_image.h	/^static int      stbi__pic_test(stbi__context *s);$/;"	p	typeref:typename:int
stbi__pic_test	stb_image.h	/^static int stbi__pic_test(stbi__context *s)$/;"	f	typeref:typename:int
stbi__pic_test_core	stb_image.h	/^static int stbi__pic_test_core(stbi__context *s)$/;"	f	typeref:typename:int
stbi__png	stb_image.h	/^} stbi__png;$/;"	t	typeref:struct:__anon84e4e8860c08
stbi__png_info	stb_image.h	/^static int      stbi__png_info(stbi__context *s, int *x, int *y, int *comp);$/;"	p	typeref:typename:int
stbi__png_info	stb_image.h	/^static int stbi__png_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f	typeref:typename:int
stbi__png_info_raw	stb_image.h	/^static int stbi__png_info_raw(stbi__png *p, int *x, int *y, int *comp)$/;"	f	typeref:typename:int
stbi__png_load	stb_image.h	/^static stbi_uc *stbi__png_load(stbi__context *s, int *x, int *y, int *comp, int req_comp);$/;"	p	typeref:typename:stbi_uc *
stbi__png_load	stb_image.h	/^static unsigned char *stbi__png_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f	typeref:typename:unsigned char *
stbi__png_test	stb_image.h	/^static int      stbi__png_test(stbi__context *s);$/;"	p	typeref:typename:int
stbi__png_test	stb_image.h	/^static int stbi__png_test(stbi__context *s)$/;"	f	typeref:typename:int
stbi__pngchunk	stb_image.h	/^} stbi__pngchunk;$/;"	t	typeref:struct:__anon84e4e8860b08
stbi__pnm_getinteger	stb_image.h	/^static int      stbi__pnm_getinteger(stbi__context *s, char *c)$/;"	f	typeref:typename:int
stbi__pnm_info	stb_image.h	/^static int      stbi__pnm_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f	typeref:typename:int
stbi__pnm_info	stb_image.h	/^static int      stbi__pnm_info(stbi__context *s, int *x, int *y, int *comp);$/;"	p	typeref:typename:int
stbi__pnm_isdigit	stb_image.h	/^static int      stbi__pnm_isdigit(char c)$/;"	f	typeref:typename:int
stbi__pnm_isspace	stb_image.h	/^static int      stbi__pnm_isspace(char c)$/;"	f	typeref:typename:int
stbi__pnm_load	stb_image.h	/^static stbi_uc *stbi__pnm_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f	typeref:typename:stbi_uc *
stbi__pnm_load	stb_image.h	/^static stbi_uc *stbi__pnm_load(stbi__context *s, int *x, int *y, int *comp, int req_comp);$/;"	p	typeref:typename:stbi_uc *
stbi__pnm_skip_whitespace	stb_image.h	/^static void     stbi__pnm_skip_whitespace(stbi__context *s, char *c)$/;"	f	typeref:typename:void
stbi__pnm_test	stb_image.h	/^static int      stbi__pnm_test(stbi__context *s)$/;"	f	typeref:typename:int
stbi__pnm_test	stb_image.h	/^static int      stbi__pnm_test(stbi__context *s);$/;"	p	typeref:typename:int
stbi__process_frame_header	stb_image.h	/^static int stbi__process_frame_header(stbi__jpeg *z, int scan)$/;"	f	typeref:typename:int
stbi__process_gif_raster	stb_image.h	/^static stbi_uc *stbi__process_gif_raster(stbi__context *s, stbi__gif *g)$/;"	f	typeref:typename:stbi_uc *
stbi__process_marker	stb_image.h	/^static int stbi__process_marker(stbi__jpeg *z, int m)$/;"	f	typeref:typename:int
stbi__process_scan_header	stb_image.h	/^static int stbi__process_scan_header(stbi__jpeg *z)$/;"	f	typeref:typename:int
stbi__psd_info	stb_image.h	/^static int      stbi__psd_info(stbi__context *s, int *x, int *y, int *comp);$/;"	p	typeref:typename:int
stbi__psd_info	stb_image.h	/^static int stbi__psd_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f	typeref:typename:int
stbi__psd_load	stb_image.h	/^static stbi_uc *stbi__psd_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f	typeref:typename:stbi_uc *
stbi__psd_load	stb_image.h	/^static stbi_uc *stbi__psd_load(stbi__context *s, int *x, int *y, int *comp, int req_comp);$/;"	p	typeref:typename:stbi_uc *
stbi__psd_test	stb_image.h	/^static int      stbi__psd_test(stbi__context *s);$/;"	p	typeref:typename:int
stbi__psd_test	stb_image.h	/^static int stbi__psd_test(stbi__context *s)$/;"	f	typeref:typename:int
stbi__readval	stb_image.h	/^static stbi_uc *stbi__readval(stbi__context *s, int channel, stbi_uc *dest)$/;"	f	typeref:typename:stbi_uc *
stbi__refill_buffer	stb_image.h	/^static void stbi__refill_buffer(stbi__context *s)$/;"	f	typeref:typename:void
stbi__refill_buffer	stb_image.h	/^static void stbi__refill_buffer(stbi__context *s);$/;"	p	typeref:typename:void
stbi__resample	stb_image.h	/^} stbi__resample;$/;"	t	typeref:struct:__anon84e4e8860808
stbi__resample_row_generic	stb_image.h	/^static stbi_uc *stbi__resample_row_generic(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int /;"	f	typeref:typename:stbi_uc *
stbi__resample_row_h_2	stb_image.h	/^static stbi_uc*  stbi__resample_row_h_2(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, /;"	f	typeref:typename:stbi_uc *
stbi__resample_row_hv_2	stb_image.h	/^static stbi_uc *stbi__resample_row_hv_2(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, /;"	f	typeref:typename:stbi_uc *
stbi__resample_row_hv_2_simd	stb_image.h	/^static stbi_uc *stbi__resample_row_hv_2_simd(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, in/;"	f	typeref:typename:stbi_uc *
stbi__resample_row_v_2	stb_image.h	/^static stbi_uc* stbi__resample_row_v_2(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, i/;"	f	typeref:typename:stbi_uc *
stbi__rewind	stb_image.h	/^static void stbi__rewind(stbi__context *s)$/;"	f	typeref:typename:void
stbi__setup_jpeg	stb_image.h	/^static void stbi__setup_jpeg(stbi__jpeg *j)$/;"	f	typeref:typename:void
stbi__shiftsigned	stb_image.h	/^static int stbi__shiftsigned(int v, int shift, int bits)$/;"	f	typeref:typename:int
stbi__skip	stb_image.h	/^static void stbi__skip(stbi__context *s, int n)$/;"	f	typeref:typename:void
stbi__sse2_available	stb_image.h	/^static int stbi__sse2_available()$/;"	f	typeref:typename:int
stbi__start_callbacks	stb_image.h	/^static void stbi__start_callbacks(stbi__context *s, stbi_io_callbacks *c, void *user)$/;"	f	typeref:typename:void
stbi__start_file	stb_image.h	/^static void stbi__start_file(stbi__context *s, FILE *f)$/;"	f	typeref:typename:void
stbi__start_mem	stb_image.h	/^static void stbi__start_mem(stbi__context *s, stbi_uc const *buffer, int len)$/;"	f	typeref:typename:void
stbi__stdio_callbacks	stb_image.h	/^static stbi_io_callbacks stbi__stdio_callbacks =$/;"	v	typeref:typename:stbi_io_callbacks
stbi__stdio_eof	stb_image.h	/^static int stbi__stdio_eof(void *user)$/;"	f	typeref:typename:int
stbi__stdio_read	stb_image.h	/^static int stbi__stdio_read(void *user, char *data, int size)$/;"	f	typeref:typename:int
stbi__stdio_skip	stb_image.h	/^static void stbi__stdio_skip(void *user, int n)$/;"	f	typeref:typename:void
stbi__tga_get_comp	stb_image.h	/^static int stbi__tga_get_comp(int bits_per_pixel, int is_grey, int* is_rgb16)$/;"	f	typeref:typename:int
stbi__tga_info	stb_image.h	/^static int      stbi__tga_info(stbi__context *s, int *x, int *y, int *comp);$/;"	p	typeref:typename:int
stbi__tga_info	stb_image.h	/^static int stbi__tga_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f	typeref:typename:int
stbi__tga_load	stb_image.h	/^static stbi_uc *stbi__tga_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f	typeref:typename:stbi_uc *
stbi__tga_load	stb_image.h	/^static stbi_uc *stbi__tga_load(stbi__context *s, int *x, int *y, int *comp, int req_comp);$/;"	p	typeref:typename:stbi_uc *
stbi__tga_read_rgb16	stb_image.h	/^void stbi__tga_read_rgb16(stbi__context *s, stbi_uc* out)$/;"	f	typeref:typename:void
stbi__tga_test	stb_image.h	/^static int      stbi__tga_test(stbi__context *s);$/;"	p	typeref:typename:int
stbi__tga_test	stb_image.h	/^static int stbi__tga_test(stbi__context *s)$/;"	f	typeref:typename:int
stbi__uint16	stb_image.h	/^typedef uint16_t stbi__uint16;$/;"	t	typeref:typename:uint16_t
stbi__uint16	stb_image.h	/^typedef unsigned short stbi__uint16;$/;"	t	typeref:typename:unsigned short
stbi__uint32	stb_image.h	/^typedef uint32_t stbi__uint32;$/;"	t	typeref:typename:uint32_t
stbi__uint32	stb_image.h	/^typedef unsigned int   stbi__uint32;$/;"	t	typeref:typename:unsigned int
stbi__unpremultiply_on_load	stb_image.h	/^static int stbi__unpremultiply_on_load = 0;$/;"	v	typeref:typename:int
stbi__vertically_flip_on_load	stb_image.h	/^static int stbi__vertically_flip_on_load = 0;$/;"	v	typeref:typename:int
stbi__zbuf	stb_image.h	/^} stbi__zbuf;$/;"	t	typeref:struct:__anon84e4e8860a08
stbi__zbuild_huffman	stb_image.h	/^static int stbi__zbuild_huffman(stbi__zhuffman *z, stbi_uc *sizelist, int num)$/;"	f	typeref:typename:int
stbi__zdefault_distance	stb_image.h	/^static stbi_uc stbi__zdefault_length[288], stbi__zdefault_distance[32];$/;"	v	typeref:typename:stbi_uc[288][32]
stbi__zdefault_length	stb_image.h	/^static stbi_uc stbi__zdefault_length[288], stbi__zdefault_distance[32];$/;"	v	typeref:typename:stbi_uc[288]
stbi__zdist_base	stb_image.h	/^static int stbi__zdist_base[32] = { 1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,$/;"	v	typeref:typename:int[32]
stbi__zdist_extra	stb_image.h	/^static int stbi__zdist_extra[32] =$/;"	v	typeref:typename:int[32]
stbi__zexpand	stb_image.h	/^static int stbi__zexpand(stbi__zbuf *z, char *zout, int n)  \/\/ need to make room for n bytes$/;"	f	typeref:typename:int
stbi__zget8	stb_image.h	/^stbi_inline static stbi_uc stbi__zget8(stbi__zbuf *z)$/;"	f	typeref:typename:stbi_inline stbi_uc
stbi__zhuffman	stb_image.h	/^} stbi__zhuffman;$/;"	t	typeref:struct:__anon84e4e8860908
stbi__zhuffman_decode	stb_image.h	/^stbi_inline static int stbi__zhuffman_decode(stbi__zbuf *a, stbi__zhuffman *z)$/;"	f	typeref:typename:stbi_inline int
stbi__zhuffman_decode_slowpath	stb_image.h	/^static int stbi__zhuffman_decode_slowpath(stbi__zbuf *a, stbi__zhuffman *z)$/;"	f	typeref:typename:int
stbi__zlength_base	stb_image.h	/^static int stbi__zlength_base[31] = {$/;"	v	typeref:typename:int[31]
stbi__zlength_extra	stb_image.h	/^static int stbi__zlength_extra[31]=$/;"	v	typeref:typename:int[31]
stbi__zreceive	stb_image.h	/^stbi_inline static unsigned int stbi__zreceive(stbi__zbuf *z, int n)$/;"	f	typeref:typename:stbi_inline unsigned int
stbi_convert_iphone_png_to_rgb	stb_image.h	/^STBIDEF void stbi_convert_iphone_png_to_rgb(int flag_true_if_should_convert)$/;"	f	typeref:typename:STBIDEF void
stbi_convert_iphone_png_to_rgb	stb_image.h	/^STBIDEF void stbi_convert_iphone_png_to_rgb(int flag_true_if_should_convert);$/;"	p	typeref:typename:STBIDEF void
stbi_failure_reason	stb_image.h	/^STBIDEF const char *stbi_failure_reason  (void);$/;"	p	typeref:typename:STBIDEF const char *
stbi_failure_reason	stb_image.h	/^STBIDEF const char *stbi_failure_reason(void)$/;"	f	typeref:typename:STBIDEF const char *
stbi_hdr_to_ldr_gamma	stb_image.h	/^   STBIDEF void   stbi_hdr_to_ldr_gamma(float gamma);$/;"	p	typeref:typename:STBIDEF void
stbi_hdr_to_ldr_gamma	stb_image.h	/^STBIDEF void   stbi_hdr_to_ldr_gamma(float gamma) { stbi__h2l_gamma_i = 1\/gamma; }$/;"	f	typeref:typename:STBIDEF void
stbi_hdr_to_ldr_scale	stb_image.h	/^   STBIDEF void   stbi_hdr_to_ldr_scale(float scale);$/;"	p	typeref:typename:STBIDEF void
stbi_hdr_to_ldr_scale	stb_image.h	/^STBIDEF void   stbi_hdr_to_ldr_scale(float scale) { stbi__h2l_scale_i = 1\/scale; }$/;"	f	typeref:typename:STBIDEF void
stbi_image_free	stb_image.h	/^STBIDEF void     stbi_image_free      (void *retval_from_stbi_load);$/;"	p	typeref:typename:STBIDEF void
stbi_image_free	stb_image.h	/^STBIDEF void stbi_image_free(void *retval_from_stbi_load)$/;"	f	typeref:typename:STBIDEF void
stbi_info	stb_image.h	/^STBIDEF int      stbi_info            (char const *filename,     int *x, int *y, int *comp);$/;"	p	typeref:typename:STBIDEF int
stbi_info	stb_image.h	/^STBIDEF int stbi_info(char const *filename, int *x, int *y, int *comp)$/;"	f	typeref:typename:STBIDEF int
stbi_info_from_callbacks	stb_image.h	/^STBIDEF int      stbi_info_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int/;"	p	typeref:typename:STBIDEF int
stbi_info_from_callbacks	stb_image.h	/^STBIDEF int stbi_info_from_callbacks(stbi_io_callbacks const *c, void *user, int *x, int *y, int/;"	f	typeref:typename:STBIDEF int
stbi_info_from_file	stb_image.h	/^STBIDEF int      stbi_info_from_file  (FILE *f,                  int *x, int *y, int *comp);$/;"	p	typeref:typename:STBIDEF int
stbi_info_from_file	stb_image.h	/^STBIDEF int stbi_info_from_file(FILE *f, int *x, int *y, int *comp)$/;"	f	typeref:typename:STBIDEF int
stbi_info_from_memory	stb_image.h	/^STBIDEF int      stbi_info_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp/;"	p	typeref:typename:STBIDEF int
stbi_info_from_memory	stb_image.h	/^STBIDEF int stbi_info_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp)$/;"	f	typeref:typename:STBIDEF int
stbi_inline	stb_image.h	/^   #define stbi_inline /;"	d
stbi_inline	stb_image.h	/^   #define stbi_inline$/;"	d
stbi_io_callbacks	stb_image.h	/^} stbi_io_callbacks;$/;"	t	typeref:struct:__anon84e4e8860208
stbi_is_hdr	stb_image.h	/^STBIDEF int      stbi_is_hdr          (char const *filename)$/;"	f	typeref:typename:STBIDEF int
stbi_is_hdr	stb_image.h	/^STBIDEF int      stbi_is_hdr          (char const *filename);$/;"	p	typeref:typename:STBIDEF int
stbi_is_hdr_from_callbacks	stb_image.h	/^STBIDEF int      stbi_is_hdr_from_callbacks(stbi_io_callbacks const *clbk, void *user)$/;"	f	typeref:typename:STBIDEF int
stbi_is_hdr_from_callbacks	stb_image.h	/^STBIDEF int    stbi_is_hdr_from_callbacks(stbi_io_callbacks const *clbk, void *user);$/;"	p	typeref:typename:STBIDEF int
stbi_is_hdr_from_file	stb_image.h	/^STBIDEF int      stbi_is_hdr_from_file(FILE *f)$/;"	f	typeref:typename:STBIDEF int
stbi_is_hdr_from_file	stb_image.h	/^STBIDEF int      stbi_is_hdr_from_file(FILE *f);$/;"	p	typeref:typename:STBIDEF int
stbi_is_hdr_from_memory	stb_image.h	/^STBIDEF int    stbi_is_hdr_from_memory(stbi_uc const *buffer, int len);$/;"	p	typeref:typename:STBIDEF int
stbi_is_hdr_from_memory	stb_image.h	/^STBIDEF int stbi_is_hdr_from_memory(stbi_uc const *buffer, int len)$/;"	f	typeref:typename:STBIDEF int
stbi_ldr_to_hdr_gamma	stb_image.h	/^   STBIDEF void   stbi_ldr_to_hdr_gamma(float gamma);$/;"	p	typeref:typename:STBIDEF void
stbi_ldr_to_hdr_gamma	stb_image.h	/^STBIDEF void   stbi_ldr_to_hdr_gamma(float gamma) { stbi__l2h_gamma = gamma; }$/;"	f	typeref:typename:STBIDEF void
stbi_ldr_to_hdr_scale	stb_image.h	/^   STBIDEF void   stbi_ldr_to_hdr_scale(float scale);$/;"	p	typeref:typename:STBIDEF void
stbi_ldr_to_hdr_scale	stb_image.h	/^STBIDEF void   stbi_ldr_to_hdr_scale(float scale) { stbi__l2h_scale = scale; }$/;"	f	typeref:typename:STBIDEF void
stbi_load	stb_image.h	/^STBIDEF stbi_uc *stbi_load               (char              const *filename,           int *x, i/;"	p	typeref:typename:STBIDEF stbi_uc *
stbi_load	stb_image.h	/^STBIDEF stbi_uc *stbi_load(char const *filename, int *x, int *y, int *comp, int req_comp)$/;"	f	typeref:typename:STBIDEF stbi_uc *
stbi_load_from_callbacks	stb_image.h	/^STBIDEF stbi_uc *stbi_load_from_callbacks(stbi_io_callbacks const *clbk  , void *user, int *x, i/;"	p	typeref:typename:STBIDEF stbi_uc *
stbi_load_from_callbacks	stb_image.h	/^STBIDEF stbi_uc *stbi_load_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int/;"	f	typeref:typename:STBIDEF stbi_uc *
stbi_load_from_file	stb_image.h	/^STBIDEF stbi_uc *stbi_load_from_file  (FILE *f,                  int *x, int *y, int *comp, int /;"	p	typeref:typename:STBIDEF stbi_uc *
stbi_load_from_file	stb_image.h	/^STBIDEF stbi_uc *stbi_load_from_file(FILE *f, int *x, int *y, int *comp, int req_comp)$/;"	f	typeref:typename:STBIDEF stbi_uc *
stbi_load_from_memory	stb_image.h	/^STBIDEF stbi_uc *stbi_load_from_memory   (stbi_uc           const *buffer, int len   , int *x, i/;"	p	typeref:typename:STBIDEF stbi_uc *
stbi_load_from_memory	stb_image.h	/^STBIDEF stbi_uc *stbi_load_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp/;"	f	typeref:typename:STBIDEF stbi_uc *
stbi_loadf	stb_image.h	/^   STBIDEF float *stbi_loadf                 (char const *filename,           int *x, int *y, in/;"	p	typeref:typename:STBIDEF float *
stbi_loadf	stb_image.h	/^STBIDEF float *stbi_loadf(char const *filename, int *x, int *y, int *comp, int req_comp)$/;"	f	typeref:typename:STBIDEF float *
stbi_loadf_from_callbacks	stb_image.h	/^   STBIDEF float *stbi_loadf_from_callbacks  (stbi_io_callbacks const *clbk, void *user, int *x,/;"	p	typeref:typename:STBIDEF float *
stbi_loadf_from_callbacks	stb_image.h	/^STBIDEF float *stbi_loadf_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int /;"	f	typeref:typename:STBIDEF float *
stbi_loadf_from_file	stb_image.h	/^   STBIDEF float *stbi_loadf_from_file  (FILE *f,                int *x, int *y, int *comp, int /;"	p	typeref:typename:STBIDEF float *
stbi_loadf_from_file	stb_image.h	/^STBIDEF float *stbi_loadf_from_file(FILE *f, int *x, int *y, int *comp, int req_comp)$/;"	f	typeref:typename:STBIDEF float *
stbi_loadf_from_memory	stb_image.h	/^   STBIDEF float *stbi_loadf_from_memory     (stbi_uc const *buffer, int len, int *x, int *y, in/;"	p	typeref:typename:STBIDEF float *
stbi_loadf_from_memory	stb_image.h	/^STBIDEF float *stbi_loadf_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp,/;"	f	typeref:typename:STBIDEF float *
stbi_lrot	stb_image.h	/^   #define stbi_lrot(/;"	d
stbi_set_flip_vertically_on_load	stb_image.h	/^STBIDEF void stbi_set_flip_vertically_on_load(int flag_true_if_should_flip)$/;"	f	typeref:typename:STBIDEF void
stbi_set_flip_vertically_on_load	stb_image.h	/^STBIDEF void stbi_set_flip_vertically_on_load(int flag_true_if_should_flip);$/;"	p	typeref:typename:STBIDEF void
stbi_set_unpremultiply_on_load	stb_image.h	/^STBIDEF void stbi_set_unpremultiply_on_load(int flag_true_if_should_unpremultiply)$/;"	f	typeref:typename:STBIDEF void
stbi_set_unpremultiply_on_load	stb_image.h	/^STBIDEF void stbi_set_unpremultiply_on_load(int flag_true_if_should_unpremultiply);$/;"	p	typeref:typename:STBIDEF void
stbi_uc	stb_image.h	/^typedef unsigned char stbi_uc;$/;"	t	typeref:typename:unsigned char
stbi_zlib_decode_buffer	stb_image.h	/^STBIDEF int   stbi_zlib_decode_buffer(char *obuffer, int olen, const char *ibuffer, int ilen);$/;"	p	typeref:typename:STBIDEF int
stbi_zlib_decode_buffer	stb_image.h	/^STBIDEF int stbi_zlib_decode_buffer(char *obuffer, int olen, char const *ibuffer, int ilen)$/;"	f	typeref:typename:STBIDEF int
stbi_zlib_decode_malloc	stb_image.h	/^STBIDEF char *stbi_zlib_decode_malloc(char const *buffer, int len, int *outlen)$/;"	f	typeref:typename:STBIDEF char *
stbi_zlib_decode_malloc	stb_image.h	/^STBIDEF char *stbi_zlib_decode_malloc(const char *buffer, int len, int *outlen);$/;"	p	typeref:typename:STBIDEF char *
stbi_zlib_decode_malloc_guesssize	stb_image.h	/^STBIDEF char *stbi_zlib_decode_malloc_guesssize(const char *buffer, int len, int initial_size, i/;"	f	typeref:typename:STBIDEF char *
stbi_zlib_decode_malloc_guesssize	stb_image.h	/^STBIDEF char *stbi_zlib_decode_malloc_guesssize(const char *buffer, int len, int initial_size, i/;"	p	typeref:typename:STBIDEF char *
stbi_zlib_decode_malloc_guesssize_headerflag	stb_image.h	/^STBIDEF char *stbi_zlib_decode_malloc_guesssize_headerflag(const char *buffer, int len, int init/;"	f	typeref:typename:STBIDEF char *
stbi_zlib_decode_malloc_guesssize_headerflag	stb_image.h	/^STBIDEF char *stbi_zlib_decode_malloc_guesssize_headerflag(const char *buffer, int len, int init/;"	p	typeref:typename:STBIDEF char *
stbi_zlib_decode_noheader_buffer	stb_image.h	/^STBIDEF int   stbi_zlib_decode_noheader_buffer(char *obuffer, int olen, const char *ibuffer, int/;"	p	typeref:typename:STBIDEF int
stbi_zlib_decode_noheader_buffer	stb_image.h	/^STBIDEF int stbi_zlib_decode_noheader_buffer(char *obuffer, int olen, const char *ibuffer, int i/;"	f	typeref:typename:STBIDEF int
stbi_zlib_decode_noheader_malloc	stb_image.h	/^STBIDEF char *stbi_zlib_decode_noheader_malloc(char const *buffer, int len, int *outlen)$/;"	f	typeref:typename:STBIDEF char *
stbi_zlib_decode_noheader_malloc	stb_image.h	/^STBIDEF char *stbi_zlib_decode_noheader_malloc(const char *buffer, int len, int *outlen);$/;"	p	typeref:typename:STBIDEF char *
std	json.hpp	/^namespace std$/;"	n
std	spdlog/fmt/bundled/format.h	/^namespace std {$/;"	n
std	spdlog/fmt/bundled/posix.h	/^namespace std {$/;"	n
stderr_color_mt	spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::stderr_color_mt(const std::string &logger_name)$/;"	f	class:spdlog	typeref:typename:std::shared_ptr<spdlog::logger>
stderr_color_mt	spdlog/sinks/stdout_color_sinks.h	/^inline std::shared_ptr<logger> stderr_color_mt(const std::string &logger_name)$/;"	f	namespace:spdlog	typeref:typename:std::shared_ptr<logger>
stderr_color_mt	spdlog/spdlog.h	/^std::shared_ptr<logger> stderr_color_mt(const std::string &logger_name);$/;"	p	namespace:spdlog	typeref:typename:std::shared_ptr<logger>
stderr_color_sink_mt	spdlog/sinks/stdout_color_sinks.h	/^using stderr_color_sink_mt = wincolor_stderr_sink_mt;$/;"	t	namespace:spdlog::sinks	typeref:typename:wincolor_stderr_sink_mt
stderr_color_sink_st	spdlog/sinks/stdout_color_sinks.h	/^using stderr_color_sink_st = wincolor_stderr_sink_st;$/;"	t	namespace:spdlog::sinks	typeref:typename:wincolor_stderr_sink_st
stderr_color_st	spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::stderr_color_st(const std::string &logger_name)$/;"	f	class:spdlog	typeref:typename:std::shared_ptr<spdlog::logger>
stderr_color_st	spdlog/sinks/stdout_color_sinks.h	/^inline std::shared_ptr<logger> stderr_color_st(const std::string &logger_name)$/;"	f	namespace:spdlog	typeref:typename:std::shared_ptr<logger>
stderr_color_st	spdlog/spdlog.h	/^std::shared_ptr<logger> stderr_color_st(const std::string &logger_name);$/;"	p	namespace:spdlog	typeref:typename:std::shared_ptr<logger>
stderr_logger_mt	spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::stderr_logger_mt(const std::string &logger_name)$/;"	f	class:spdlog	typeref:typename:std::shared_ptr<spdlog::logger>
stderr_logger_mt	spdlog/spdlog.h	/^std::shared_ptr<logger> stderr_logger_mt(const std::string &logger_name);$/;"	p	namespace:spdlog	typeref:typename:std::shared_ptr<logger>
stderr_logger_st	spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::stderr_logger_st(const std::string &logger_name)$/;"	f	class:spdlog	typeref:typename:std::shared_ptr<spdlog::logger>
stderr_logger_st	spdlog/spdlog.h	/^std::shared_ptr<logger> stderr_logger_st(const std::string &logger_name);$/;"	p	namespace:spdlog	typeref:typename:std::shared_ptr<logger>
stderr_sink	spdlog/sinks/stdout_sinks.h	/^    explicit stderr_sink() = default;$/;"	p	class:spdlog::sinks::SPDLOG_FINAL
stderr_sink_mt	spdlog/sinks/stdout_sinks.h	/^using stderr_sink_mt = stderr_sink<std::mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:stderr_sink<std::mutex>
stderr_sink_st	spdlog/sinks/stdout_sinks.h	/^using stderr_sink_st = stderr_sink<details::null_mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:stderr_sink<details::null_mutex>
stdout_color_mt	spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::stdout_color_mt(const std::string &logger_name)$/;"	f	class:spdlog	typeref:typename:std::shared_ptr<spdlog::logger>
stdout_color_mt	spdlog/sinks/stdout_color_sinks.h	/^inline std::shared_ptr<logger> stdout_color_mt(const std::string &logger_name)$/;"	f	namespace:spdlog	typeref:typename:std::shared_ptr<logger>
stdout_color_mt	spdlog/spdlog.h	/^std::shared_ptr<logger> stdout_color_mt(const std::string &logger_name);$/;"	p	namespace:spdlog	typeref:typename:std::shared_ptr<logger>
stdout_color_sink_mt	spdlog/sinks/stdout_color_sinks.h	/^using stdout_color_sink_mt = wincolor_stdout_sink_mt;$/;"	t	namespace:spdlog::sinks	typeref:typename:wincolor_stdout_sink_mt
stdout_color_sink_st	spdlog/sinks/stdout_color_sinks.h	/^using stdout_color_sink_st = wincolor_stdout_sink_st;$/;"	t	namespace:spdlog::sinks	typeref:typename:wincolor_stdout_sink_st
stdout_color_st	spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::stdout_color_st(const std::string &logger_name)$/;"	f	class:spdlog	typeref:typename:std::shared_ptr<spdlog::logger>
stdout_color_st	spdlog/sinks/stdout_color_sinks.h	/^inline std::shared_ptr<logger> stdout_color_st(const std::string &logger_name)$/;"	f	namespace:spdlog	typeref:typename:std::shared_ptr<logger>
stdout_color_st	spdlog/spdlog.h	/^std::shared_ptr<logger> stdout_color_st(const std::string &logger_name);$/;"	p	namespace:spdlog	typeref:typename:std::shared_ptr<logger>
stdout_logger_mt	spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::stdout_logger_mt(const std::string &logger_name)$/;"	f	class:spdlog	typeref:typename:std::shared_ptr<spdlog::logger>
stdout_logger_mt	spdlog/spdlog.h	/^std::shared_ptr<logger> stdout_logger_mt(const std::string &logger_name);$/;"	p	namespace:spdlog	typeref:typename:std::shared_ptr<logger>
stdout_logger_st	spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::stdout_logger_st(const std::string &logger_name)$/;"	f	class:spdlog	typeref:typename:std::shared_ptr<spdlog::logger>
stdout_logger_st	spdlog/spdlog.h	/^std::shared_ptr<logger> stdout_logger_st(const std::string &logger_name);$/;"	p	namespace:spdlog	typeref:typename:std::shared_ptr<logger>
stdout_sink	spdlog/sinks/stdout_sinks.h	/^    explicit stdout_sink() = default;$/;"	p	class:spdlog::sinks::SPDLOG_FINAL
stdout_sink_mt	spdlog/sinks/stdout_sinks.h	/^using stdout_sink_mt = stdout_sink<std::mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:stdout_sink<std::mutex>
stdout_sink_st	spdlog/sinks/stdout_sinks.h	/^using stdout_sink_st = stdout_sink<details::null_mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:stdout_sink<details::null_mutex>
steel_blue	spdlog/fmt/bundled/colors.h	/^    steel_blue = 0x4682B4,              \/\/ rgb(70,130,180)$/;"	e	enum:color
step	simple.pb-c.h	/^  uint32_t step;$/;"	m	struct:_BandwidthTest	typeref:typename:uint32_t
step	simple.proto	/^    optional uint32 step = 2; \/\/ 처음=1, 중간=2, 마지막=3$/;"	f
step	stb_image.h	/^   int parse, step;$/;"	m	struct:__anon84e4e8861108	typeref:typename:int
step_file_sink	spdlog/contrib/sinks/step_file_sink.h	/^    step_file_sink(filename_t base_filename, unsigned step_seconds, filename_t tmp_ext, unsigned/;"	f	class:spdlog::sinks::SPDLOG_FINAL
step_file_sink_mt	spdlog/contrib/sinks/step_file_sink.h	/^using step_file_sink_mt = step_file_sink<std::mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:step_file_sink<std::mutex>
step_file_sink_st	spdlog/contrib/sinks/step_file_sink.h	/^using step_file_sink_st = step_file_sink<details::null_mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:step_file_sink<details::null_mutex>
stm_update	simple.pb-c.h	/^  FirmwareUpdate *stm_update;$/;"	m	struct:_ToSt	typeref:typename:FirmwareUpdate *
stm_update	simple.proto	/^    optional FirmwareUpdate stm_update = 12;$/;"	f
stopsUseAlpha	qcustomplot.cpp	/^bool QCPColorGradient::stopsUseAlpha() const$/;"	f	class:QCPColorGradient	typeref:typename:bool
stopsUseAlpha	qcustomplot.h	/^  bool stopsUseAlpha() const;$/;"	p	class:QCPColorGradient	typeref:typename:bool
store	spdlog/details/null_mutex.h	/^    void store(int val)$/;"	f	struct:spdlog::details::null_atomic_int	typeref:typename:void
str	json.hpp	/^    StringType& str;$/;"	m	class:nlohmann::detail::output_string_adapter	typeref:typename:StringType &
str	spdlog/fmt/bundled/format.h	/^    const Char *str() const$/;"	f	class:fmt::StrFormatSpec	typeref:typename:const Char *
str	spdlog/fmt/bundled/format.h	/^    const Char *str;$/;"	m	struct:fmt::internal::UdlArg	typeref:typename:const Char *
str	spdlog/fmt/bundled/format.h	/^    const Char *str;$/;"	m	struct:fmt::internal::UdlFormat	typeref:typename:const Char *
str	spdlog/fmt/bundled/format.h	/^    std::basic_string<Char> str() const$/;"	f	class:fmt::BasicWriter	typeref:typename:std::basic_string<Char>
str	spdlog/fmt/bundled/format.h	/^    std::string str() const$/;"	f	class:fmt::FormatInt	typeref:typename:std::string
str	spdlog/fmt/bundled/format.h	/^    std::string str() const$/;"	f	class:fmt::internal::UTF16ToUTF8	typeref:typename:std::string
str	spdlog/fmt/bundled/format.h	/^    std::wstring str() const$/;"	f	class:fmt::internal::UTF8ToUTF16	typeref:typename:std::wstring
str_	spdlog/details/pattern_formatter.h	/^    std::string str_;$/;"	m	class:spdlog::details::SPDLOG_FINAL	typeref:typename:std::string
str_	spdlog/fmt/bundled/format.h	/^    char *str_;$/;"	m	class:fmt::FormatInt	typeref:typename:char *
str_	spdlog/fmt/bundled/format.h	/^    const Char *str_;$/;"	m	class:fmt::StrFormatSpec	typeref:typename:const Char *
stream	json.hpp	/^    std::basic_ostream<CharType>& stream;$/;"	m	class:nlohmann::detail::output_stream_adapter	typeref:typename:std::basic_ostream<CharType> &
stream	spdlog/details/console_globals.h	/^    static FILE *stream()$/;"	f	struct:spdlog::details::console_stderr	typeref:typename:FILE *
stream	spdlog/details/console_globals.h	/^    static FILE *stream()$/;"	f	struct:spdlog::details::console_stdout	typeref:typename:FILE *
strerror_r	spdlog/fmt/bundled/format-inl.h	/^inline fmt::internal::null<> strerror_r(int, char *, ...)$/;"	f	typeref:typename:fmt::internal::null<>
strerror_r	spdlog/fmt/bundled/format.cc	/^static inline fmt::internal::Null<> strerror_r(int, char *, ...) {$/;"	f	typeref:typename:FMT_MAYBE_UNUSED fmt::internal::Null<>	file:
strerror_s	spdlog/fmt/bundled/format-inl.h	/^inline fmt::internal::null<> strerror_s(char *, std::size_t, ...)$/;"	f	typeref:typename:fmt::internal::null<>
strerror_s	spdlog/fmt/bundled/format.cc	/^static inline fmt::internal::Null<> strerror_s(char *, std::size_t, ...) {$/;"	f	typeref:typename:FMT_MAYBE_UNUSED fmt::internal::Null<>	file:
string	json.hpp	/^        string_t* string;$/;"	m	union:nlohmann::basic_json::json_value	typeref:typename:string_t *
string	json.hpp	/^    string,           \/\/\/< string value$/;"	e	enum:nlohmann::detail::value_t
string	spdlog/fmt/bundled/core.h	/^        string_value<char_type> string;$/;"	m	union:internal::value::__anonef64315f020a	typeref:typename:string_value<char_type>
string	spdlog/fmt/bundled/format.h	/^        StringValue<char> string;$/;"	m	union:fmt::internal::Value::__anon1ea8787f020a	typeref:typename:StringValue<char>
string_buffer	json.hpp	/^    std::array<char, 512> string_buffer{{}};$/;"	m	class:nlohmann::detail::serializer	typeref:typename:std::array<char,512>
string_pack	protobuf-c/protobuf-c.c	/^string_pack(const char *str, uint8_t *out)$/;"	f	typeref:typename:size_t	file:
string_t	json.hpp	/^    using string_t = StringType;$/;"	t	class:nlohmann::basic_json	typeref:typename:StringType
string_t	json.hpp	/^    using string_t = typename BasicJsonType::string_t;$/;"	t	class:nlohmann::detail::binary_reader	typeref:typename:BasicJsonType::string_t
string_t	json.hpp	/^    using string_t = typename BasicJsonType::string_t;$/;"	t	class:nlohmann::detail::lexer	typeref:typename:BasicJsonType::string_t
string_t	json.hpp	/^    using string_t = typename BasicJsonType::string_t;$/;"	t	class:nlohmann::detail::parser	typeref:typename:BasicJsonType::string_t
string_t	json.hpp	/^    using string_t = typename BasicJsonType::string_t;$/;"	t	class:nlohmann::detail::serializer	typeref:typename:BasicJsonType::string_t
string_type	spdlog/fmt/bundled/core.h	/^    string_type,$/;"	e	enum:internal::type
string_value	spdlog/fmt/bundled/core.h	/^struct string_value$/;"	s	namespace:internal
string_view	spdlog/fmt/bundled/core.h	/^typedef basic_string_view<char> string_view;$/;"	t	typeref:typename:basic_string_view<char>
strtod	spdlog/fmt/bundled/posix.h	/^    double strtod(const char *&str) const$/;"	f	class:fmt::Locale	typeref:typename:double
strtod_l	spdlog/fmt/bundled/posix.h	/^    static double strtod_l(const char *nptr, char **endptr, _locale_t locale)$/;"	f	class:fmt::Locale	typeref:typename:double
strtof	json.hpp	/^    static void strtof(double& f, const char* str, char** endptr) noexcept$/;"	f	class:nlohmann::detail::lexer	typeref:typename:void
strtof	json.hpp	/^    static void strtof(float& f, const char* str, char** endptr) noexcept$/;"	f	class:nlohmann::detail::lexer	typeref:typename:void
strtof	json.hpp	/^    static void strtof(long double& f, const char* str, char** endptr) noexcept$/;"	f	class:nlohmann::detail::lexer	typeref:typename:void
style	qcustomplot.h	/^  BracketStyle style() const { return mStyle; }$/;"	f	class:QCPItemBracket	typeref:typename:BracketStyle
style	qcustomplot.h	/^  EndingStyle style() const { return mStyle; }$/;"	f	class:QCPLineEnding	typeref:typename:EndingStyle
style	qcustomplot.h	/^  Q_PROPERTY(BracketStyle style READ style WRITE setStyle)$/;"	p	class:QCPItemBracket	typeref:typename:BracketStyle
style	qcustomplot.h	/^  Q_PROPERTY(TracerStyle style READ style WRITE setStyle)$/;"	p	class:QCPItemTracer	typeref:typename:TracerStyle
style	qcustomplot.h	/^  TracerStyle style() const { return mStyle; }$/;"	f	class:QCPItemTracer	typeref:typename:TracerStyle
sub	json.hpp	/^    static diyfp sub(const diyfp& x, const diyfp& y) noexcept$/;"	f	struct:nlohmann::detail::dtoa_impl::diyfp	typeref:typename:diyfp
subGridPen	qcustomplot.h	/^  QPen subGridPen() const { return mSubGridPen; }$/;"	f	class:QCPGrid	typeref:typename:QPen
subGridPen	qcustomplot.h	/^  Q_PROPERTY(QPen subGridPen READ subGridPen WRITE setSubGridPen)$/;"	p	class:QCPGrid	typeref:typename:QPen
subGridVisible	qcustomplot.h	/^  Q_PROPERTY(bool subGridVisible READ subGridVisible WRITE setSubGridVisible)$/;"	p	class:QCPGrid	typeref:typename:bool
subGridVisible	qcustomplot.h	/^  bool subGridVisible() const { return mSubGridVisible; }$/;"	f	class:QCPGrid	typeref:typename:bool
subTickCount	qcustomplot.h	/^  int subTickCount() const { return mSubTickCount; }$/;"	f	class:QCPAxisTickerLog	typeref:typename:int
subTickCount	qcustomplot.h	/^  int subTickCount() const { return mSubTickCount; }$/;"	f	class:QCPAxisTickerText	typeref:typename:int
subTickLengthIn	qcustomplot.cpp	/^int QCPAxis::subTickLengthIn() const$/;"	f	class:QCPAxis	typeref:typename:int
subTickLengthIn	qcustomplot.h	/^  Q_PROPERTY(int subTickLengthIn READ subTickLengthIn WRITE setSubTickLengthIn)$/;"	p	class:QCPAxis	typeref:typename:int
subTickLengthIn	qcustomplot.h	/^  int subTickLengthIn() const;$/;"	p	class:QCPAxis	typeref:typename:int
subTickLengthIn	qcustomplot.h	/^  int tickLengthIn, tickLengthOut, subTickLengthIn, subTickLengthOut; \/\/ directly accessed by /;"	m	class:QCPAxisPainterPrivate	typeref:typename:int
subTickLengthOut	qcustomplot.cpp	/^int QCPAxis::subTickLengthOut() const$/;"	f	class:QCPAxis	typeref:typename:int
subTickLengthOut	qcustomplot.h	/^  Q_PROPERTY(int subTickLengthOut READ subTickLengthOut WRITE setSubTickLengthOut)$/;"	p	class:QCPAxis	typeref:typename:int
subTickLengthOut	qcustomplot.h	/^  int subTickLengthOut() const;$/;"	p	class:QCPAxis	typeref:typename:int
subTickLengthOut	qcustomplot.h	/^  int tickLengthIn, tickLengthOut, subTickLengthIn, subTickLengthOut; \/\/ directly accessed by /;"	m	class:QCPAxisPainterPrivate	typeref:typename:int
subTickPen	qcustomplot.h	/^  QPen subTickPen() const { return mSubTickPen; }$/;"	f	class:QCPAxis	typeref:typename:QPen
subTickPen	qcustomplot.h	/^  QPen tickPen, subTickPen;$/;"	m	class:QCPAxisPainterPrivate	typeref:typename:QPen
subTickPen	qcustomplot.h	/^  Q_PROPERTY(QPen subTickPen READ subTickPen WRITE setSubTickPen)$/;"	p	class:QCPAxis	typeref:typename:QPen
subTickPositions	qcustomplot.h	/^  QVector<double> subTickPositions;$/;"	m	class:QCPAxisPainterPrivate	typeref:typename:QVector<double>
subTicks	qcustomplot.h	/^  Q_PROPERTY(bool subTicks READ subTicks WRITE setSubTicks)$/;"	p	class:QCPAxis	typeref:typename:bool
subTicks	qcustomplot.h	/^  bool subTicks() const { return mSubTicks; }$/;"	f	class:QCPAxis	typeref:typename:bool
substituteExponent	qcustomplot.h	/^  bool substituteExponent;$/;"	m	class:QCPAxisPainterPrivate	typeref:typename:bool
succ_high	stb_image.h	/^   int            succ_high;$/;"	m	struct:__anon84e4e8860608	typeref:typename:int
succ_low	stb_image.h	/^   int            succ_low;$/;"	m	struct:__anon84e4e8860608	typeref:typename:int
suffix	stb_image.h	/^   stbi_uc suffix;$/;"	m	struct:__anon84e4e8861008	typeref:typename:stbi_uc
suffixBounds	qcustomplot.h	/^    QRect baseBounds, expBounds, suffixBounds, totalBounds, rotatedTotalBounds;$/;"	m	struct:QCPAxisPainterPrivate::TickLabelData	typeref:typename:QRect
suffixPart	qcustomplot.h	/^    QString basePart, expPart, suffixPart;$/;"	m	struct:QCPAxisPainterPrivate::TickLabelData	typeref:typename:QString
swap	json.hpp	/^    void swap(array_t& other)$/;"	f	class:nlohmann::basic_json	typeref:typename:void
swap	json.hpp	/^    void swap(object_t& other)$/;"	f	class:nlohmann::basic_json	typeref:typename:void
swap	json.hpp	/^    void swap(reference other) noexcept ($/;"	f	class:nlohmann::basic_json	typeref:typename:void
swap	json.hpp	/^    void swap(string_t& other)$/;"	f	class:nlohmann::basic_json	typeref:typename:void
swap	json.hpp	/^inline void swap(nlohmann::json& j1,$/;"	f	namespace:std	typeref:typename:void
swap	qc-message.pb.h	/^  friend void swap(Imu& a, Imu& b) {$/;"	f	typeref:typename:void
swap	qc-message.pb.h	/^  friend void swap(Protocol& a, Protocol& b) {$/;"	f	typeref:typename:void
symbolGap	qcustomplot.h	/^  Q_PROPERTY(double symbolGap READ symbolGap WRITE setSymbolGap)$/;"	p	class:QCPErrorBars	typeref:typename:double
symbolGap	qcustomplot.h	/^  double symbolGap() const { return mSymbolGap; }$/;"	f	class:QCPErrorBars	typeref:typename:double
syslog_logger	spdlog/details/spdlog_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::syslog_logger($/;"	f	class:spdlog	typeref:typename:std::shared_ptr<spdlog::logger>
syslog_logger	spdlog/spdlog.h	/^std::shared_ptr<logger> syslog_logger($/;"	p	namespace:spdlog	typeref:typename:std::shared_ptr<logger>
syslog_prio_from_level	spdlog/sinks/syslog_sink.h	/^    int syslog_prio_from_level(const details::log_msg &msg) const$/;"	f	class:spdlog::sinks::syslog_sink	typeref:typename:int
syslog_sink	spdlog/sinks/syslog_sink.h	/^    syslog_sink(const std::string &ident = "", int syslog_option = 0, int syslog_facility = LOG_/;"	f	class:spdlog::sinks::syslog_sink
syslog_sink	spdlog/sinks/syslog_sink.h	/^    syslog_sink(const syslog_sink &) = delete;$/;"	p	class:spdlog::sinks::syslog_sink
syslog_sink	spdlog/sinks/syslog_sink.h	/^class syslog_sink : public sink$/;"	c	namespace:spdlog::sinks
system	http-request.h	/^    namespace system { $/;"	n	namespace:boost
system_alloc	protobuf-c/protobuf-c.c	/^system_alloc(void *allocator_data, size_t size)$/;"	f	typeref:typename:void *	file:
system_free	protobuf-c/protobuf-c.c	/^system_free(void *allocator_data, void *data)$/;"	f	typeref:typename:void	file:
t	qcustomplot.h	/^  double t, key, value;$/;"	m	class:QCPCurveData	typeref:typename:double
t_speed	simple.pb-c.h	/^  int32_t t_speed;$/;"	m	struct:_ToHi	typeref:typename:int32_t
t_speed	simple.proto	/^    optional int32 t_speed = 18; \/\/-2500~2500   neck speed$/;"	f
tag	protobuf-c/protobuf-c.c	/^	uint32_t tag;              \/**< Field tag. *\/$/;"	m	struct:_ScannedMember	typeref:typename:uint32_t	file:
tag	protobuf-c/protobuf-c.h	/^	uint32_t		tag;$/;"	m	struct:ProtobufCMessageUnknownField	typeref:typename:uint32_t
tag_pack	protobuf-c/protobuf-c.c	/^tag_pack(uint32_t id, uint8_t *out)$/;"	f	typeref:typename:size_t	file:
tail	qcustomplot.h	/^  QCPLineEnding tail() const { return mTail; }$/;"	f	class:QCPItemCurve	typeref:typename:QCPLineEnding
tail	qcustomplot.h	/^  QCPLineEnding tail() const { return mTail; }$/;"	f	class:QCPItemLine	typeref:typename:QCPLineEnding
tail	qcustomplot.h	/^  Q_PROPERTY(QCPLineEnding tail READ tail WRITE setTail)$/;"	p	class:QCPItemCurve	typeref:typename:QCPLineEnding
tail	qcustomplot.h	/^  Q_PROPERTY(QCPLineEnding tail READ tail WRITE setTail)$/;"	p	class:QCPItemLine	typeref:typename:QCPLineEnding
tail_	spdlog/details/circular_q.h	/^    typename std::vector<T>::size_type tail_ = 0;$/;"	m	class:spdlog::details::circular_q	typeref:typename:std::vector<T>::size_type
take	qcustomplot.cpp	/^bool QCPLayoutGrid::take(QCPLayoutElement *element)$/;"	f	class:QCPLayoutGrid	typeref:typename:bool
take	qcustomplot.cpp	/^bool QCPLayoutInset::take(QCPLayoutElement *element)$/;"	f	class:QCPLayoutInset	typeref:typename:bool
take	qcustomplot.h	/^  virtual bool take(QCPLayoutElement* element) = 0;$/;"	p	class:QCPLayout	typeref:typename:bool
take	qcustomplot.h	/^  virtual bool take(QCPLayoutElement* element) Q_DECL_OVERRIDE;$/;"	p	class:QCPLayoutGrid	typeref:typename:bool
take	qcustomplot.h	/^  virtual bool take(QCPLayoutElement* element) Q_DECL_OVERRIDE;$/;"	p	class:QCPLayoutInset	typeref:typename:bool
takeAt	qcustomplot.cpp	/^QCPLayoutElement *QCPLayoutGrid::takeAt(int index)$/;"	f	class:QCPLayoutGrid	typeref:typename:QCPLayoutElement *
takeAt	qcustomplot.cpp	/^QCPLayoutElement *QCPLayoutInset::takeAt(int index)$/;"	f	class:QCPLayoutInset	typeref:typename:QCPLayoutElement *
takeAt	qcustomplot.h	/^  virtual QCPLayoutElement* takeAt(int index) = 0;$/;"	p	class:QCPLayout	typeref:typename:QCPLayoutElement *
takeAt	qcustomplot.h	/^  virtual QCPLayoutElement* takeAt(int index) Q_DECL_OVERRIDE;$/;"	p	class:QCPLayoutGrid	typeref:typename:QCPLayoutElement *
takeAt	qcustomplot.h	/^  virtual QCPLayoutElement* takeAt(int index) Q_DECL_OVERRIDE;$/;"	p	class:QCPLayoutInset	typeref:typename:QCPLayoutElement *
tan	spdlog/fmt/bundled/colors.h	/^    tan = 0xD2B48C,                     \/\/ rgb(210,180,140)$/;"	e	enum:color
tangentAverage	qcustomplot.h	/^  int tangentAverage() const { return mTangentAverage; }$/;"	f	class:QCPSelectionDecoratorBracket	typeref:typename:int
tangentToData	qcustomplot.h	/^  bool tangentToData() const { return mTangentToData; }$/;"	f	class:QCPSelectionDecoratorBracket	typeref:typename:bool
target_file_	spdlog/sinks/ansicolor_sink.h	/^    FILE *target_file_;$/;"	m	class:spdlog::sinks::ansicolor_sink	typeref:typename:FILE *
tcp	asio-server.h	/^    using tcp = boost::asio::ip::tcp;       \/\/ from <boost\/asio\/ip\/tcp.hpp>$/;"	t	class:ASIOServer	typeref:typename:boost::asio::ip::tcp
tcp	gui-session.h	/^using tcp = boost::asio::ip::tcp;       \/\/ from <boost\/asio\/ip\/tcp.hpp>$/;"	t	typeref:typename:boost::asio::ip::tcp
tcp	http-request.h	/^using tcp = boost::asio::ip::tcp;       \/\/ from <boost\/asio\/ip\/tcp.hpp>$/;"	t	typeref:typename:boost::asio::ip::tcp
tcp	qc-session.h	/^using tcp = boost::asio::ip::tcp;       \/\/ from <boost\/asio\/ip\/tcp.hpp>$/;"	t	typeref:typename:boost::asio::ip::tcp
teal	spdlog/fmt/bundled/colors.h	/^    teal = 0x008080,                    \/\/ rgb(0,128,128)$/;"	e	enum:color
terminate	spdlog/details/async_log_helper.h	/^        terminate$/;"	e	enum:spdlog::details::async_log_helper::async_msg_type
terminate	spdlog/details/thread_pool.h	/^    terminate$/;"	e	enum:spdlog::details::async_msg_type
test	json.hpp	/^        enum class patch_operations {add, remove, replace, move, copy, test, invalid};$/;"	e	enum:nlohmann::basic_json::patch::patch_operations
testproject	CMakeLists.txt	/^project(testproject)$/;"	p
texname	gui.h	/^    GLuint texname;$/;"	m	class:ClientWindow	typeref:typename:GLuint
text	qcustomplot.h	/^  QString text() const { return mText; }$/;"	f	class:QCPItemText	typeref:typename:QString
text	qcustomplot.h	/^  QString text() const { return mText; }$/;"	f	class:QCPTextElement	typeref:typename:QString
text	qcustomplot.h	/^  Q_PROPERTY(QString text READ text WRITE setText)$/;"	p	class:QCPItemText	typeref:typename:QString
text	qcustomplot.h	/^  Q_PROPERTY(QString text READ text WRITE setText)$/;"	p	class:QCPTextElement	typeref:typename:QString
textAlignment	qcustomplot.h	/^  Qt::Alignment textAlignment() const { return mTextAlignment; }$/;"	f	class:QCPItemText	typeref:typename:Qt::Alignment
textColor	qcustomplot.h	/^  QColor textColor() const { return mTextColor; }$/;"	f	class:QCPAbstractLegendItem	typeref:typename:QColor
textColor	qcustomplot.h	/^  QColor textColor() const { return mTextColor; }$/;"	f	class:QCPLegend	typeref:typename:QColor
textColor	qcustomplot.h	/^  QColor textColor() const { return mTextColor; }$/;"	f	class:QCPTextElement	typeref:typename:QColor
textColor	qcustomplot.h	/^  Q_PROPERTY(QColor textColor READ textColor WRITE setTextColor)$/;"	p	class:QCPAbstractLegendItem	typeref:typename:QColor
textColor	qcustomplot.h	/^  Q_PROPERTY(QColor textColor READ textColor WRITE setTextColor)$/;"	p	class:QCPLegend	typeref:typename:QColor
textColor	qcustomplot.h	/^  Q_PROPERTY(QColor textColor READ textColor WRITE setTextColor)$/;"	p	class:QCPTextElement	typeref:typename:QColor
textFlags	qcustomplot.h	/^  int textFlags() const { return mTextFlags; }$/;"	f	class:QCPTextElement	typeref:typename:int
texture_data	gui-session.h	/^        GLubyte texture_data[width*height * 3];$/;"	m	class:GuiSession_depre	typeref:typename:GLubyte[]
texture_data	gui.h	/^    GLubyte* texture_data = nullptr;$/;"	m	class:ClientWindow	typeref:typename:GLubyte *
theHTTPCategory	http-request.h	/^const HTTPErrorCategory theHTTPCategory {};$/;"	v	namespace:__anon7a6731110110	typeref:typename:const HTTPErrorCategory
thistle	spdlog/fmt/bundled/colors.h	/^    thistle = 0xD8BFD8,                 \/\/ rgb(216,191,216)$/;"	e	enum:color
thousands_sep	json.hpp	/^    const char thousands_sep = '\\0';$/;"	m	class:nlohmann::detail::serializer	typeref:typename:const char
thousands_sep	spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC Char internal::thousands_sep(locale_provider *lp)$/;"	f	class:internal	typeref:typename:FMT_FUNC Char
thousands_sep	spdlog/fmt/bundled/format.h	/^inline StringRef thousands_sep(LConv *lc, LConvCheck<char * LConv::*, &LConv::thousands_sep> = 0/;"	f	namespace:fmt::internal	typeref:typename:StringRef
thousands_sep	spdlog/fmt/bundled/format.h	/^inline fmt::StringRef thousands_sep(...)$/;"	f	namespace:fmt::internal	typeref:typename:fmt::StringRef
thread_id	spdlog/details/async_log_helper.h	/^        size_t thread_id;$/;"	m	struct:spdlog::details::async_log_helper::async_msg	typeref:typename:size_t
thread_id	spdlog/details/log_msg.h	/^    size_t thread_id;$/;"	m	struct:spdlog::details::log_msg	typeref:typename:size_t
thread_id	spdlog/details/os.h	/^inline size_t thread_id()$/;"	f	namespace:spdlog::details::os	typeref:typename:size_t
thread_id	spdlog/details/thread_pool.h	/^    size_t thread_id;$/;"	m	struct:spdlog::details::async_msg	typeref:typename:size_t
thread_pool	spdlog/async.h	/^inline std::shared_ptr<spdlog::details::thread_pool> thread_pool()$/;"	f	namespace:spdlog	typeref:typename:std::shared_ptr<spdlog::details::thread_pool>
thread_pool	spdlog/details/thread_pool.h	/^    thread_pool(size_t q_max_items, size_t threads_n)$/;"	f	class:spdlog::details::thread_pool
thread_pool	spdlog/details/thread_pool.h	/^class thread_pool$/;"	c	namespace:spdlog::details
threads_	spdlog/details/thread_pool.h	/^    std::vector<std::thread> threads_;$/;"	m	class:spdlog::details::thread_pool	typeref:typename:std::vector<std::thread>
throw_exception	json.hpp	/^    [[noreturn]] void throw_exception() const$/;"	f	class:nlohmann::detail::parser	typeref:typename:[[noreturn]]void
throw_if_exists	spdlog/details/registry.h	/^    void throw_if_exists(const std::string &logger_name)$/;"	f	class:spdlog::details::registry_t	typeref:typename:void
tickCount	chrono-util.h	/^        static uint64_t tickCount() {$/;"	f	class:Chrono	typeref:typename:uint64_t
tickCount	qcustomplot.h	/^  int tickCount() const { return mTickCount; }$/;"	f	class:QCPAxisTicker	typeref:typename:int
tickLabelColor	qcustomplot.h	/^  QColor tickLabelColor() const { return mTickLabelColor; }$/;"	f	class:QCPAxis	typeref:typename:QColor
tickLabelColor	qcustomplot.h	/^  QColor tickLabelColor;$/;"	m	class:QCPAxisPainterPrivate	typeref:typename:QColor
tickLabelColor	qcustomplot.h	/^  Q_PROPERTY(QColor tickLabelColor READ tickLabelColor WRITE setTickLabelColor)$/;"	p	class:QCPAxis	typeref:typename:QColor
tickLabelFont	qcustomplot.h	/^  QFont tickLabelFont() const { return mTickLabelFont; }$/;"	f	class:QCPAxis	typeref:typename:QFont
tickLabelFont	qcustomplot.h	/^  QFont tickLabelFont;$/;"	m	class:QCPAxisPainterPrivate	typeref:typename:QFont
tickLabelFont	qcustomplot.h	/^  Q_PROPERTY(QFont tickLabelFont READ tickLabelFont WRITE setTickLabelFont)$/;"	p	class:QCPAxis	typeref:typename:QFont
tickLabelPadding	qcustomplot.cpp	/^int QCPAxis::tickLabelPadding() const$/;"	f	class:QCPAxis	typeref:typename:int
tickLabelPadding	qcustomplot.h	/^  Q_PROPERTY(int tickLabelPadding READ tickLabelPadding WRITE setTickLabelPadding)$/;"	p	class:QCPAxis	typeref:typename:int
tickLabelPadding	qcustomplot.h	/^  int tickLabelPadding() const;$/;"	p	class:QCPAxis	typeref:typename:int
tickLabelPadding	qcustomplot.h	/^  int tickLabelPadding; \/\/ directly accessed by QCPAxis setters\/getters$/;"	m	class:QCPAxisPainterPrivate	typeref:typename:int
tickLabelRotation	qcustomplot.cpp	/^double QCPAxis::tickLabelRotation() const$/;"	f	class:QCPAxis	typeref:typename:double
tickLabelRotation	qcustomplot.h	/^  Q_PROPERTY(double tickLabelRotation READ tickLabelRotation WRITE setTickLabelRotation)$/;"	p	class:QCPAxis	typeref:typename:double
tickLabelRotation	qcustomplot.h	/^  double tickLabelRotation() const;$/;"	p	class:QCPAxis	typeref:typename:double
tickLabelRotation	qcustomplot.h	/^  double tickLabelRotation; \/\/ directly accessed by QCPAxis setters\/getters$/;"	m	class:QCPAxisPainterPrivate	typeref:typename:double
tickLabelSide	qcustomplot.cpp	/^QCPAxis::LabelSide QCPAxis::tickLabelSide() const$/;"	f	class:QCPAxis	typeref:typename:QCPAxis::LabelSide
tickLabelSide	qcustomplot.h	/^  LabelSide tickLabelSide() const;$/;"	p	class:QCPAxis	typeref:typename:LabelSide
tickLabelSide	qcustomplot.h	/^  QCPAxis::LabelSide tickLabelSide; \/\/ directly accessed by QCPAxis setters\/getters$/;"	m	class:QCPAxisPainterPrivate	typeref:typename:QCPAxis::LabelSide
tickLabelSide	qcustomplot.h	/^  Q_PROPERTY(LabelSide tickLabelSide READ tickLabelSide WRITE setTickLabelSide)$/;"	p	class:QCPAxis	typeref:typename:LabelSide
tickLabels	qcustomplot.h	/^  QVector<QString> tickLabels;$/;"	m	class:QCPAxisPainterPrivate	typeref:typename:QVector<QString>
tickLabels	qcustomplot.h	/^  Q_PROPERTY(bool tickLabels READ tickLabels WRITE setTickLabels)$/;"	p	class:QCPAxis	typeref:typename:bool
tickLabels	qcustomplot.h	/^  bool tickLabels() const { return mTickLabels; }$/;"	f	class:QCPAxis	typeref:typename:bool
tickLabelsSelectionBox	qcustomplot.h	/^  QRect tickLabelsSelectionBox() const { return mTickLabelsSelectionBox; }$/;"	f	class:QCPAxisPainterPrivate	typeref:typename:QRect
tickLengthIn	qcustomplot.cpp	/^int QCPAxis::tickLengthIn() const$/;"	f	class:QCPAxis	typeref:typename:int
tickLengthIn	qcustomplot.h	/^  Q_PROPERTY(int tickLengthIn READ tickLengthIn WRITE setTickLengthIn)$/;"	p	class:QCPAxis	typeref:typename:int
tickLengthIn	qcustomplot.h	/^  int tickLengthIn() const;$/;"	p	class:QCPAxis	typeref:typename:int
tickLengthIn	qcustomplot.h	/^  int tickLengthIn, tickLengthOut, subTickLengthIn, subTickLengthOut; \/\/ directly accessed by /;"	m	class:QCPAxisPainterPrivate	typeref:typename:int
tickLengthOut	qcustomplot.cpp	/^int QCPAxis::tickLengthOut() const$/;"	f	class:QCPAxis	typeref:typename:int
tickLengthOut	qcustomplot.h	/^  Q_PROPERTY(int tickLengthOut READ tickLengthOut WRITE setTickLengthOut)$/;"	p	class:QCPAxis	typeref:typename:int
tickLengthOut	qcustomplot.h	/^  int tickLengthIn, tickLengthOut, subTickLengthIn, subTickLengthOut; \/\/ directly accessed by /;"	m	class:QCPAxisPainterPrivate	typeref:typename:int
tickLengthOut	qcustomplot.h	/^  int tickLengthOut() const;$/;"	p	class:QCPAxis	typeref:typename:int
tickOrigin	qcustomplot.h	/^  double tickOrigin() const { return mTickOrigin; }$/;"	f	class:QCPAxisTicker	typeref:typename:double
tickPen	qcustomplot.h	/^  QPen tickPen() const { return mTickPen; }$/;"	f	class:QCPAxis	typeref:typename:QPen
tickPen	qcustomplot.h	/^  QPen tickPen, subTickPen;$/;"	m	class:QCPAxisPainterPrivate	typeref:typename:QPen
tickPen	qcustomplot.h	/^  Q_PROPERTY(QPen tickPen READ tickPen WRITE setTickPen)$/;"	p	class:QCPAxis	typeref:typename:QPen
tickPositions	qcustomplot.h	/^  QVector<double> tickPositions;$/;"	m	class:QCPAxisPainterPrivate	typeref:typename:QVector<double>
tickStep	qcustomplot.h	/^  double tickStep() const { return mTickStep; }$/;"	f	class:QCPAxisTickerFixed	typeref:typename:double
tickStepStrategy	qcustomplot.h	/^  TickStepStrategy tickStepStrategy() const { return mTickStepStrategy; }$/;"	f	class:QCPAxisTicker	typeref:typename:TickStepStrategy
tickVector	qcustomplot.h	/^  QVector<double> tickVector() const { return mTickVector; }$/;"	f	class:QCPAxis	typeref:typename:QVector<double>
tickVectorLabels	qcustomplot.h	/^  QVector<QString> tickVectorLabels() const { return mTickVectorLabels; }$/;"	f	class:QCPAxis	typeref:typename:QVector<QString>
ticker	qcustomplot.h	/^  QSharedPointer<QCPAxisTicker> ticker() const { return mTicker; }$/;"	f	class:QCPAxis	typeref:typename:QSharedPointer<QCPAxisTicker>
ticks	qcustomplot.h	/^  QMap<double, QString> &ticks() { return mTicks; }$/;"	f	class:QCPAxisTickerText	typeref:typename:QMap<double,QString> &
ticks	qcustomplot.h	/^  Q_PROPERTY(bool ticks READ ticks WRITE setTicks)$/;"	p	class:QCPAxis	typeref:typename:bool
ticks	qcustomplot.h	/^  bool ticks() const { return mTicks; }$/;"	f	class:QCPAxis	typeref:typename:bool
tightBoundary	qcustomplot.h	/^  Q_PROPERTY(bool tightBoundary READ tightBoundary WRITE setTightBoundary)$/;"	p	class:QCPColorMap	typeref:typename:bool
tightBoundary	qcustomplot.h	/^  bool tightBoundary() const { return mTightBoundary; }$/;"	f	class:QCPColorMap	typeref:typename:bool
time	spdlog/details/async_log_helper.h	/^        log_clock::time_point time;$/;"	m	struct:spdlog::details::async_log_helper::async_msg	typeref:typename:log_clock::time_point
time	spdlog/details/log_msg.h	/^    log_clock::time_point time;$/;"	m	struct:spdlog::details::log_msg	typeref:typename:log_clock::time_point
time	spdlog/details/thread_pool.h	/^    log_clock::time_point time;$/;"	m	struct:spdlog::details::async_msg	typeref:typename:log_clock::time_point
timeFormat	qcustomplot.h	/^  QString timeFormat() const { return mTimeFormat; }$/;"	f	class:QCPAxisTickerTime	typeref:typename:QString
timeSeriesToOhlc	qcustomplot.cpp	/^QCPFinancialDataContainer QCPFinancial::timeSeriesToOhlc(const QVector<double> &time, const QVec/;"	f	class:QCPFinancial	typeref:typename:QCPFinancialDataContainer
timeSeriesToOhlc	qcustomplot.h	/^  static QCPFinancialDataContainer timeSeriesToOhlc(const QVector<double> &time, const QVector<d/;"	p	class:QCPFinancial	typeref:typename:QCPFinancialDataContainer
time_	spdlog/fmt/bundled/time.h	/^        std::time_t time_;$/;"	m	struct:fmt::gmtime::GMTime	typeref:typename:std::time_t
time_	spdlog/fmt/bundled/time.h	/^        std::time_t time_;$/;"	m	struct:fmt::localtime::LocalTime	typeref:typename:std::time_t
timerEvent	mainwindow.h	/^    void timerEvent(QTimerEvent *event)$/;"	f	class:MainWindow	typeref:typename:void
timerId	mainwindow.h	/^    int timerId;$/;"	m	class:MainWindow	typeref:typename:int
tm_	spdlog/fmt/bundled/time.h	/^        std::tm tm_;$/;"	m	struct:fmt::gmtime::GMTime	typeref:typename:std::tm
tm_	spdlog/fmt/bundled/time.h	/^        std::tm tm_;$/;"	m	struct:fmt::localtime::LocalTime	typeref:typename:std::tm
to12h	spdlog/details/pattern_formatter.h	/^static int to12h(const tm &t)$/;"	f	namespace:spdlog::details	typeref:typename:int
to12h	spdlog/details/pattern_formatter_impl.h	/^static int to12h(const tm &t)$/;"	f	namespace:spdlog::details	typeref:typename:int
toPainter	qcustomplot.cpp	/^void QCustomPlot::toPainter(QCPPainter *painter, int width, int height)$/;"	f	class:QCustomPlot	typeref:typename:void
toPainter	qcustomplot.h	/^  void toPainter(QCPPainter *painter, int width=0, int height=0);$/;"	p	class:QCustomPlot	typeref:typename:void
toPixmap	qcustomplot.cpp	/^QPixmap QCustomPlot::toPixmap(int width, int height, double scale)$/;"	f	class:QCustomPlot	typeref:typename:QPixmap
toPixmap	qcustomplot.h	/^  QPixmap toPixmap(int width=0, int height=0, double scale=1.0);$/;"	p	class:QCustomPlot	typeref:typename:QPixmap
toPoint	qcustomplot.h	/^  QPoint toPoint() const { return QPoint(mX, mY); }$/;"	f	class:QCPVector2D	typeref:typename:QPoint
toPointF	qcustomplot.h	/^  QPointF toPointF() const { return QPointF(mX, mY); }$/;"	f	class:QCPVector2D	typeref:typename:QPointF
toQCPItemPosition	qcustomplot.h	/^  virtual QCPItemPosition *toQCPItemPosition() Q_DECL_OVERRIDE { return this; }$/;"	f	class:QCPItemPosition	typeref:typename:QCPItemPosition *
toQCPItemPosition	qcustomplot.h	/^  virtual QCPItemPosition *toQCPItemPosition() { return 0; }$/;"	f	class:QCPItemAnchor	typeref:typename:QCPItemPosition *
to_ble__descriptor	simple.pb-c.c	/^const ProtobufCMessageDescriptor to_ble__descriptor =$/;"	v	typeref:typename:const ProtobufCMessageDescriptor
to_ble__field_descriptors	simple.pb-c.c	/^static const ProtobufCFieldDescriptor to_ble__field_descriptors[5] =$/;"	v	typeref:typename:const ProtobufCFieldDescriptor[5]	file:
to_ble__field_indices_by_name	simple.pb-c.c	/^static const unsigned to_ble__field_indices_by_name[] = {$/;"	v	typeref:typename:const unsigned[]	file:
to_ble__free_unpacked	simple.pb-c.c	/^void   to_ble__free_unpacked$/;"	f	typeref:typename:void
to_ble__free_unpacked	simple.pb-c.h	/^void   to_ble__free_unpacked$/;"	p	typeref:typename:void
to_ble__get_packed_size	simple.pb-c.c	/^size_t to_ble__get_packed_size$/;"	f	typeref:typename:size_t
to_ble__get_packed_size	simple.pb-c.h	/^size_t to_ble__get_packed_size$/;"	p	typeref:typename:size_t
to_ble__init	simple.pb-c.c	/^void   to_ble__init$/;"	f	typeref:typename:void
to_ble__init	simple.pb-c.h	/^void   to_ble__init$/;"	p	typeref:typename:void
to_ble__number_ranges	simple.pb-c.c	/^static const ProtobufCIntRange to_ble__number_ranges[2 + 1] =$/;"	v	typeref:typename:const ProtobufCIntRange[]	file:
to_ble__pack	simple.pb-c.c	/^size_t to_ble__pack$/;"	f	typeref:typename:size_t
to_ble__pack	simple.pb-c.h	/^size_t to_ble__pack$/;"	p	typeref:typename:size_t
to_ble__pack_to_buffer	simple.pb-c.c	/^size_t to_ble__pack_to_buffer$/;"	f	typeref:typename:size_t
to_ble__pack_to_buffer	simple.pb-c.h	/^size_t to_ble__pack_to_buffer$/;"	p	typeref:typename:size_t
to_ble__unpack	simple.pb-c.c	/^       to_ble__unpack$/;"	f	typeref:typename:ToBle *
to_ble__unpack	simple.pb-c.h	/^       to_ble__unpack$/;"	p	typeref:typename:ToBle *
to_cbor	json.hpp	/^    static std::vector<uint8_t> to_cbor(const basic_json& j)$/;"	f	class:nlohmann::basic_json	typeref:typename:std::vector<uint8_t>
to_cbor	json.hpp	/^    static void to_cbor(const basic_json& j, detail::output_adapter<char> o)$/;"	f	class:nlohmann::basic_json	typeref:typename:void
to_cbor	json.hpp	/^    static void to_cbor(const basic_json& j, detail::output_adapter<uint8_t> o)$/;"	f	class:nlohmann::basic_json	typeref:typename:void
to_chars	json.hpp	/^char* to_chars(char* first, char* last, FloatType value)$/;"	f	namespace:nlohmann::detail	typeref:typename:char *
to_esc	spdlog/fmt/bundled/colors.h	/^FMT_CONSTEXPR inline void to_esc(uint8_t c, char out[], int offset)$/;"	f	namespace:internal	typeref:typename:FMT_CONSTEXPR void
to_esc	spdlog/fmt/bundled/format-inl.h	/^FMT_CONSTEXPR void to_esc(uint8_t c, char out[], int offset)$/;"	f	namespace:internal	typeref:typename:FMT_CONSTEXPR void
to_hi__descriptor	simple.pb-c.c	/^const ProtobufCMessageDescriptor to_hi__descriptor =$/;"	v	typeref:typename:const ProtobufCMessageDescriptor
to_hi__field_descriptors	simple.pb-c.c	/^static const ProtobufCFieldDescriptor to_hi__field_descriptors[47] =$/;"	v	typeref:typename:const ProtobufCFieldDescriptor[47]	file:
to_hi__field_indices_by_name	simple.pb-c.c	/^static const unsigned to_hi__field_indices_by_name[] = {$/;"	v	typeref:typename:const unsigned[]	file:
to_hi__free_unpacked	simple.pb-c.c	/^void   to_hi__free_unpacked$/;"	f	typeref:typename:void
to_hi__free_unpacked	simple.pb-c.h	/^void   to_hi__free_unpacked$/;"	p	typeref:typename:void
to_hi__get_packed_size	simple.pb-c.c	/^size_t to_hi__get_packed_size$/;"	f	typeref:typename:size_t
to_hi__get_packed_size	simple.pb-c.h	/^size_t to_hi__get_packed_size$/;"	p	typeref:typename:size_t
to_hi__init	simple.pb-c.c	/^void   to_hi__init$/;"	f	typeref:typename:void
to_hi__init	simple.pb-c.h	/^void   to_hi__init$/;"	p	typeref:typename:void
to_hi__number_ranges	simple.pb-c.c	/^static const ProtobufCIntRange to_hi__number_ranges[3 + 1] =$/;"	v	typeref:typename:const ProtobufCIntRange[]	file:
to_hi__pack	simple.pb-c.c	/^size_t to_hi__pack$/;"	f	typeref:typename:size_t
to_hi__pack	simple.pb-c.h	/^size_t to_hi__pack$/;"	p	typeref:typename:size_t
to_hi__pack_to_buffer	simple.pb-c.c	/^size_t to_hi__pack_to_buffer$/;"	f	typeref:typename:size_t
to_hi__pack_to_buffer	simple.pb-c.h	/^size_t to_hi__pack_to_buffer$/;"	p	typeref:typename:size_t
to_hi__unpack	simple.pb-c.c	/^       to_hi__unpack$/;"	f	typeref:typename:ToHi *
to_hi__unpack	simple.pb-c.h	/^       to_hi__unpack$/;"	p	typeref:typename:ToHi *
to_hi_from_phone	simple.pb-c.h	/^  ToHi *to_hi_from_phone;$/;"	m	struct:_ToBle	typeref:typename:ToHi *
to_hi_from_phone	simple.proto	/^    optional ToHi to_hi_from_phone = 50; \/\/ ble data$/;"	f
to_host__descriptor	simple.pb-c.c	/^const ProtobufCMessageDescriptor to_host__descriptor =$/;"	v	typeref:typename:const ProtobufCMessageDescriptor
to_host__field_descriptors	simple.pb-c.c	/^static const ProtobufCFieldDescriptor to_host__field_descriptors[16] =$/;"	v	typeref:typename:const ProtobufCFieldDescriptor[16]	file:
to_host__field_indices_by_name	simple.pb-c.c	/^static const unsigned to_host__field_indices_by_name[] = {$/;"	v	typeref:typename:const unsigned[]	file:
to_host__free_unpacked	simple.pb-c.c	/^void   to_host__free_unpacked$/;"	f	typeref:typename:void
to_host__free_unpacked	simple.pb-c.h	/^void   to_host__free_unpacked$/;"	p	typeref:typename:void
to_host__get_packed_size	simple.pb-c.c	/^size_t to_host__get_packed_size$/;"	f	typeref:typename:size_t
to_host__get_packed_size	simple.pb-c.h	/^size_t to_host__get_packed_size$/;"	p	typeref:typename:size_t
to_host__init	simple.pb-c.c	/^void   to_host__init$/;"	f	typeref:typename:void
to_host__init	simple.pb-c.h	/^void   to_host__init$/;"	p	typeref:typename:void
to_host__number_ranges	simple.pb-c.c	/^static const ProtobufCIntRange to_host__number_ranges[2 + 1] =$/;"	v	typeref:typename:const ProtobufCIntRange[]	file:
to_host__pack	simple.pb-c.c	/^size_t to_host__pack$/;"	f	typeref:typename:size_t
to_host__pack	simple.pb-c.h	/^size_t to_host__pack$/;"	p	typeref:typename:size_t
to_host__pack_to_buffer	simple.pb-c.c	/^size_t to_host__pack_to_buffer$/;"	f	typeref:typename:size_t
to_host__pack_to_buffer	simple.pb-c.h	/^size_t to_host__pack_to_buffer$/;"	p	typeref:typename:size_t
to_host__unpack	simple.pb-c.c	/^       to_host__unpack$/;"	f	typeref:typename:ToHost *
to_host__unpack	simple.pb-c.h	/^       to_host__unpack$/;"	p	typeref:typename:ToHost *
to_host_from_hi	simple.pb-c.h	/^  ToHost *to_host_from_hi;$/;"	m	struct:_ToBle	typeref:typename:ToHost *
to_host_from_hi	simple.proto	/^    optional ToHost to_host_from_hi = 51; \/\/ ble data $/;"	f
to_json	json.hpp	/^    static void to_json(BasicJsonType& j, ValueType&& val) noexcept($/;"	f	struct:nlohmann::adl_serializer	typeref:typename:void
to_json	json.hpp	/^constexpr const auto& to_json = detail::static_const<detail::to_json_fn>::value;$/;"	v	namespace:nlohmann::__anonee2ce1d50610	typeref:typename:const auto &
to_json	json.hpp	/^void to_json(BasicJsonType& j, CompatibleNumberIntegerType val) noexcept$/;"	f	namespace:nlohmann::detail	typeref:typename:void
to_json	json.hpp	/^void to_json(BasicJsonType& j, CompatibleNumberUnsignedType val) noexcept$/;"	f	namespace:nlohmann::detail	typeref:typename:void
to_json	json.hpp	/^void to_json(BasicJsonType& j, EnumType e) noexcept$/;"	f	namespace:nlohmann::detail	typeref:typename:void
to_json	json.hpp	/^void to_json(BasicJsonType& j, FloatType val) noexcept$/;"	f	namespace:nlohmann::detail	typeref:typename:void
to_json	json.hpp	/^void to_json(BasicJsonType& j, T (&arr)[N])$/;"	f	namespace:nlohmann::detail	typeref:typename:void
to_json	json.hpp	/^void to_json(BasicJsonType& j, T b) noexcept$/;"	f	namespace:nlohmann::detail	typeref:typename:void
to_json	json.hpp	/^void to_json(BasicJsonType& j, const CompatibleArrayType& arr)$/;"	f	namespace:nlohmann::detail	typeref:typename:void
to_json	json.hpp	/^void to_json(BasicJsonType& j, const CompatibleObjectType& obj)$/;"	f	namespace:nlohmann::detail	typeref:typename:void
to_json	json.hpp	/^void to_json(BasicJsonType& j, const CompatibleString& s)$/;"	f	namespace:nlohmann::detail	typeref:typename:void
to_json	json.hpp	/^void to_json(BasicJsonType& j, const std::pair<Args...>& p)$/;"	f	namespace:nlohmann::detail	typeref:typename:void
to_json	json.hpp	/^void to_json(BasicJsonType& j, const std::tuple<Args...>& t)$/;"	f	namespace:nlohmann::detail	typeref:typename:void
to_json	json.hpp	/^void to_json(BasicJsonType& j, const std::vector<bool>& e)$/;"	f	namespace:nlohmann::detail	typeref:typename:void
to_json	json.hpp	/^void to_json(BasicJsonType& j, std::valarray<T> arr)$/;"	f	namespace:nlohmann::detail	typeref:typename:void
to_json	json.hpp	/^void to_json(BasicJsonType& j, typename BasicJsonType::array_t&& arr)$/;"	f	namespace:nlohmann::detail	typeref:typename:void
to_json	json.hpp	/^void to_json(BasicJsonType& j, typename BasicJsonType::object_t&& obj)$/;"	f	namespace:nlohmann::detail	typeref:typename:void
to_json	json.hpp	/^void to_json(BasicJsonType& j, typename BasicJsonType::string_t&& s)$/;"	f	namespace:nlohmann::detail	typeref:typename:void
to_json_fn	json.hpp	/^struct to_json_fn$/;"	s	namespace:nlohmann::detail
to_json_tuple_impl	json.hpp	/^void to_json_tuple_impl(BasicJsonType& j, const Tuple& t, index_sequence<Idx...>)$/;"	f	namespace:nlohmann::detail	typeref:typename:void
to_log_msg	spdlog/details/thread_pool.h	/^    void to_log_msg(log_msg &msg)$/;"	f	struct:spdlog::details::async_msg	typeref:typename:void
to_msgpack	json.hpp	/^    static std::vector<uint8_t> to_msgpack(const basic_json& j)$/;"	f	class:nlohmann::basic_json	typeref:typename:std::vector<uint8_t>
to_msgpack	json.hpp	/^    static void to_msgpack(const basic_json& j, detail::output_adapter<char> o)$/;"	f	class:nlohmann::basic_json	typeref:typename:void
to_msgpack	json.hpp	/^    static void to_msgpack(const basic_json& j, detail::output_adapter<uint8_t> o)$/;"	f	class:nlohmann::basic_json	typeref:typename:void
to_short_str	spdlog/common.h	/^inline const char *to_short_str(spdlog::level::level_enum l)$/;"	f	namespace:spdlog::level	typeref:typename:const char *
to_st__descriptor	simple.pb-c.c	/^const ProtobufCMessageDescriptor to_st__descriptor =$/;"	v	typeref:typename:const ProtobufCMessageDescriptor
to_st__field_descriptors	simple.pb-c.c	/^static const ProtobufCFieldDescriptor to_st__field_descriptors[14] =$/;"	v	typeref:typename:const ProtobufCFieldDescriptor[14]	file:
to_st__field_indices_by_name	simple.pb-c.c	/^static const unsigned to_st__field_indices_by_name[] = {$/;"	v	typeref:typename:const unsigned[]	file:
to_st__free_unpacked	simple.pb-c.c	/^void   to_st__free_unpacked$/;"	f	typeref:typename:void
to_st__free_unpacked	simple.pb-c.h	/^void   to_st__free_unpacked$/;"	p	typeref:typename:void
to_st__get_packed_size	simple.pb-c.c	/^size_t to_st__get_packed_size$/;"	f	typeref:typename:size_t
to_st__get_packed_size	simple.pb-c.h	/^size_t to_st__get_packed_size$/;"	p	typeref:typename:size_t
to_st__init	simple.pb-c.c	/^void   to_st__init$/;"	f	typeref:typename:void
to_st__init	simple.pb-c.h	/^void   to_st__init$/;"	p	typeref:typename:void
to_st__number_ranges	simple.pb-c.c	/^static const ProtobufCIntRange to_st__number_ranges[2 + 1] =$/;"	v	typeref:typename:const ProtobufCIntRange[]	file:
to_st__pack	simple.pb-c.c	/^size_t to_st__pack$/;"	f	typeref:typename:size_t
to_st__pack	simple.pb-c.h	/^size_t to_st__pack$/;"	p	typeref:typename:size_t
to_st__pack_to_buffer	simple.pb-c.c	/^size_t to_st__pack_to_buffer$/;"	f	typeref:typename:size_t
to_st__pack_to_buffer	simple.pb-c.h	/^size_t to_st__pack_to_buffer$/;"	p	typeref:typename:size_t
to_st__unpack	simple.pb-c.c	/^       to_st__unpack$/;"	f	typeref:typename:ToSt *
to_st__unpack	simple.pb-c.h	/^       to_st__unpack$/;"	p	typeref:typename:ToSt *
to_str	spdlog/common.h	/^inline const char *to_str(spdlog::level::level_enum l)$/;"	f	namespace:spdlog::level	typeref:typename:const char *
to_string	json.hpp	/^    std::string to_string() const noexcept$/;"	f	class:nlohmann::json_pointer	typeref:typename:std::string
to_string	spdlog/fmt/bundled/format.h	/^    std::basic_string<Char> to_string() const$/;"	f	class:fmt::BasicStringRef	typeref:typename:std::basic_string<Char>
to_ubjson	json.hpp	/^    static std::vector<uint8_t> to_ubjson(const basic_json& j,$/;"	f	class:nlohmann::basic_json	typeref:typename:std::vector<uint8_t>
to_ubjson	json.hpp	/^    static void to_ubjson(const basic_json& j, detail::output_adapter<char> o,$/;"	f	class:nlohmann::basic_json	typeref:typename:void
to_ubjson	json.hpp	/^    static void to_ubjson(const basic_json& j, detail::output_adapter<uint8_t> o,$/;"	f	class:nlohmann::basic_json	typeref:typename:void
to_unsigned	spdlog/fmt/bundled/core.h	/^FMT_CONSTEXPR typename std::make_unsigned<Int>::type to_unsigned(Int value)$/;"	f	namespace:internal	typeref:typename:FMT_CONSTEXPR typename std::make_unsigned<Int>::type
to_unsigned	spdlog/fmt/bundled/format.h	/^inline typename MakeUnsigned<Int>::Type to_unsigned(Int value)$/;"	f	namespace:fmt::internal	typeref:typename:MakeUnsigned<Int>::Type
todo	stb_image.h	/^   int restart_interval, todo;$/;"	m	struct:__anon84e4e8860608	typeref:typename:int
tof	simple.pb-c.h	/^  uint32_t tof;$/;"	m	struct:_ToHi	typeref:typename:uint32_t
tof	simple.proto	/^    optional uint32 tof = 4;	\/\/mm$/;"	f
tohi_bypass	simple.pb-c.h	/^  ToHi *tohi_bypass;$/;"	m	struct:_ToHost	typeref:typename:ToHi *
tohi_bypass	simple.proto	/^    optional ToHi tohi_bypass = 8;$/;"	f
tohost_bypass	simple.pb-c.h	/^  ToHost *tohost_bypass;$/;"	m	struct:_ToHi	typeref:typename:ToHost *
tohost_bypass	simple.proto	/^    optional ToHost tohost_bypass = 1;$/;"	f
token_buffer	json.hpp	/^    string_t token_buffer {};$/;"	m	class:nlohmann::detail::lexer	typeref:typename:string_t
token_string	json.hpp	/^    std::vector<char> token_string {};$/;"	m	class:nlohmann::detail::lexer	typeref:typename:std::vector<char>
token_type	json.hpp	/^    enum class token_type$/;"	g	class:nlohmann::detail::lexer
token_type	json.hpp	/^    using token_type = typename lexer_t::token_type;$/;"	t	class:nlohmann::detail::parser	typeref:typename:lexer_t::token_type
token_type_name	json.hpp	/^    static const char* token_type_name(const token_type t) noexcept$/;"	f	class:nlohmann::detail::lexer	typeref:typename:const char *
tomato	spdlog/fmt/bundled/colors.h	/^    tomato = 0xFF6347,                  \/\/ rgb(255,99,71)$/;"	e	enum:color
top	json.hpp	/^    json_pointer top() const$/;"	f	class:nlohmann::json_pointer	typeref:typename:json_pointer
top	qcustomplot.h	/^  QCPItemAnchor * const top;$/;"	m	class:QCPItemEllipse	typeref:typename:QCPItemAnchor * const
top	qcustomplot.h	/^  QCPItemAnchor * const top;$/;"	m	class:QCPItemPixmap	typeref:typename:QCPItemAnchor * const
top	qcustomplot.h	/^  QCPItemAnchor * const top;$/;"	m	class:QCPItemRect	typeref:typename:QCPItemAnchor * const
top	qcustomplot.h	/^  QCPItemAnchor * const top;$/;"	m	class:QCPItemText	typeref:typename:QCPItemAnchor * const
top	qcustomplot.h	/^  int top() const { return mRect.top(); }$/;"	f	class:QCPAxisRect	typeref:typename:int
topLeft	qcustomplot.h	/^  QCPItemAnchor * const topLeft;$/;"	m	class:QCPItemText	typeref:typename:QCPItemAnchor * const
topLeft	qcustomplot.h	/^  QCPItemPosition * const topLeft;$/;"	m	class:QCPItemEllipse	typeref:typename:QCPItemPosition * const
topLeft	qcustomplot.h	/^  QCPItemPosition * const topLeft;$/;"	m	class:QCPItemPixmap	typeref:typename:QCPItemPosition * const
topLeft	qcustomplot.h	/^  QCPItemPosition * const topLeft;$/;"	m	class:QCPItemRect	typeref:typename:QCPItemPosition * const
topLeft	qcustomplot.h	/^  QPoint topLeft() const { return mRect.topLeft(); }$/;"	f	class:QCPAxisRect	typeref:typename:QPoint
topLeftRim	qcustomplot.h	/^  QCPItemAnchor * const topLeftRim;$/;"	m	class:QCPItemEllipse	typeref:typename:QCPItemAnchor * const
topRight	qcustomplot.h	/^  QCPItemAnchor * const topRight;$/;"	m	class:QCPItemPixmap	typeref:typename:QCPItemAnchor * const
topRight	qcustomplot.h	/^  QCPItemAnchor * const topRight;$/;"	m	class:QCPItemRect	typeref:typename:QCPItemAnchor * const
topRight	qcustomplot.h	/^  QCPItemAnchor * const topRight;$/;"	m	class:QCPItemText	typeref:typename:QCPItemAnchor * const
topRight	qcustomplot.h	/^  QPoint topRight() const { return mRect.topRight(); }$/;"	f	class:QCPAxisRect	typeref:typename:QPoint
topRightRim	qcustomplot.h	/^  QCPItemAnchor * const topRightRim;$/;"	m	class:QCPItemEllipse	typeref:typename:QCPItemAnchor * const
tost_bypass	simple.pb-c.h	/^  ToSt *tost_bypass;$/;"	m	struct:_ToHi	typeref:typename:ToSt *
tost_bypass	simple.proto	/^    optional ToSt tost_bypass = 2;$/;"	f
totalBounds	qcustomplot.h	/^    QRect baseBounds, expBounds, suffixBounds, totalBounds, rotatedTotalBounds;$/;"	m	struct:QCPAxisPainterPrivate::TickLabelData	typeref:typename:QRect
tq	stb_image.h	/^      int tq;$/;"	m	struct:__anon84e4e8860608::__anon84e4e8860708	typeref:typename:int
trace	spdlog/common.h	/^    trace = 0,$/;"	e	enum:spdlog::level::level_enum
trace	spdlog/details/logger_impl.h	/^inline void spdlog::logger::trace(const T &msg)$/;"	f	class:spdlog::logger	typeref:typename:void
trace	spdlog/details/logger_impl.h	/^inline void spdlog::logger::trace(const char *fmt, const Arg1 &arg1, const Args &... args)$/;"	f	class:spdlog::logger	typeref:typename:void
trace	spdlog/details/logger_impl.h	/^inline void spdlog::logger::trace(const wchar_t *fmt, const Args &... args)$/;"	f	class:spdlog::logger	typeref:typename:void
trace	spdlog/logger.h	/^    void trace(const T &msg);$/;"	p	class:spdlog::logger	typeref:typename:void
trace	spdlog/logger.h	/^    void trace(const char *fmt, const Arg1 &, const Args &... args);$/;"	p	class:spdlog::logger	typeref:typename:void
trace	spdlog/logger.h	/^    void trace(const wchar_t *fmt, const Args &... args);$/;"	p	class:spdlog::logger	typeref:typename:void
trace	spdlogger.h	/^		void trace(const char* message, const Args&... args)$/;"	f	class:util::Log	typeref:typename:void
traits_type	spdlog/fmt/bundled/ostream.h	/^    typedef typename std::basic_streambuf<Char>::traits_type traits_type;$/;"	t	class:fmt::internal::FormatBuf	typeref:typename:std::basic_streambuf<Char>::traits_type
transformationMode	qcustomplot.h	/^  Qt::TransformationMode transformationMode() const { return mTransformationMode; }$/;"	f	class:QCPItemPixmap	typeref:typename:Qt::TransformationMode
transparent	stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags, delay;$/;"	m	struct:__anon84e4e8861108	typeref:typename:int
trimTicks	qcustomplot.cpp	/^void QCPAxisTicker::trimTicks(const QCPRange &range, QVector<double> &ticks, bool keepOneOutlier/;"	f	class:QCPAxisTicker	typeref:typename:void
trimTicks	qcustomplot.h	/^  void trimTicks(const QCPRange &range, QVector<double> &ticks, bool keepOneOutlier) const;$/;"	p	class:QCPAxisTicker	typeref:typename:void
try_lock	spdlog/details/null_mutex.h	/^    bool try_lock()$/;"	f	struct:spdlog::details::null_mutex	typeref:typename:bool
tsCircle	qcustomplot.h	/^                     ,tsCircle     \/\/\/< A circle$/;"	e	enum:QCPItemTracer::TracerStyle
tsCrosshair	qcustomplot.h	/^                     ,tsCrosshair  \/\/\/< A plus shaped crosshair which spans the complete axis/;"	e	enum:QCPItemTracer::TracerStyle
tsNone	qcustomplot.h	/^  enum TracerStyle { tsNone        \/\/\/< The tracer is not visible$/;"	e	enum:QCPItemTracer::TracerStyle
tsPlus	qcustomplot.h	/^                     ,tsPlus       \/\/\/< A plus shaped crosshair with limited size$/;"	e	enum:QCPItemTracer::TracerStyle
tsSquare	qcustomplot.h	/^                     ,tsSquare     \/\/\/< A square$/;"	e	enum:QCPItemTracer::TracerStyle
tssMeetTickCount	qcustomplot.h	/^    ,tssMeetTickCount \/\/\/< Less readable tick steps are allowed which in turn facilitates get/;"	e	enum:QCPAxisTicker::TickStepStrategy
tssReadability	qcustomplot.h	/^    tssReadability    \/\/\/< A nicely readable tick step is prioritized over matching the reque/;"	e	enum:QCPAxisTicker::TickStepStrategy
tuDays	qcustomplot.h	/^                  ,tuDays        \/\/\/< Days (%%d in \\ref setTimeFormat)$/;"	e	enum:QCPAxisTickerTime::TimeUnit
tuHours	qcustomplot.h	/^                  ,tuHours       \/\/\/< Hours (%%h in \\ref setTimeFormat)$/;"	e	enum:QCPAxisTickerTime::TimeUnit
tuMilliseconds	qcustomplot.h	/^  enum TimeUnit { tuMilliseconds \/\/\/< Milliseconds, one thousandth of a second (%%z in \\ref /;"	e	enum:QCPAxisTickerTime::TimeUnit
tuMinutes	qcustomplot.h	/^                  ,tuMinutes     \/\/\/< Minutes (%%m in \\ref setTimeFormat)$/;"	e	enum:QCPAxisTickerTime::TimeUnit
tuSeconds	qcustomplot.h	/^                  ,tuSeconds     \/\/\/< Seconds (%%s in \\ref setTimeFormat)$/;"	e	enum:QCPAxisTickerTime::TimeUnit
turquoise	spdlog/fmt/bundled/colors.h	/^    turquoise = 0x40E0D0,               \/\/ rgb(64,224,208)$/;"	e	enum:color
twoColored	qcustomplot.h	/^  Q_PROPERTY(bool twoColored READ twoColored WRITE setTwoColored)$/;"	p	class:QCPFinancial	typeref:typename:bool
twoColored	qcustomplot.h	/^  bool twoColored() const { return mTwoColored; }$/;"	f	class:QCPFinancial	typeref:typename:bool
txt	spdlog/details/async_log_helper.h	/^        std::string txt;$/;"	m	struct:spdlog::details::async_log_helper::async_msg	typeref:typename:std::string
type	json.hpp	/^    constexpr value_t type() const noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:value_t
type	json.hpp	/^    using type = index_sequence;$/;"	t	struct:nlohmann::detail::index_sequence	typeref:typename:index_sequence
type	protobuf-c/protobuf-c.h	/^	ProtobufCType		type;$/;"	m	struct:ProtobufCFieldDescriptor	typeref:typename:ProtobufCType
type	qcustomplot.h	/^  PositionType type() const { return typeX(); }$/;"	f	class:QCPItemPosition	typeref:typename:PositionType
type	qcustomplot.h	/^  QCPAxis::AxisType type() const { return mType; }$/;"	f	class:QCPColorScale	typeref:typename:QCPAxis::AxisType
type	qcustomplot.h	/^  QCPAxis::AxisType type;$/;"	m	class:QCPAxisPainterPrivate	typeref:typename:QCPAxis::AxisType
type	spdlog/fmt/bundled/core.h	/^        typedef formatter<T, char_type> type;$/;"	t	struct:basic_format_context::formatter_type	typeref:typename:formatter<T,char_type>
type	spdlog/fmt/bundled/core.h	/^    internal::type type() const$/;"	f	class:basic_format_arg	typeref:typename:internal::type
type	spdlog/fmt/bundled/core.h	/^    struct type$/;"	s	class:basic_string_view
type	spdlog/fmt/bundled/core.h	/^    typedef basic_format_context<std::back_insert_iterator<internal::basic_buffer<Char>>, Char> /;"	t	struct:buffer_context	typeref:typename:basic_format_context<std::back_insert_iterator<internal::basic_buffer<Char>>,Char>
type	spdlog/fmt/bundled/core.h	/^    typedef std::basic_string_view<Char> type;$/;"	t	class:basic_string_view	typeref:typename:std::basic_string_view<Char>
type	spdlog/fmt/bundled/core.h	/^    typedef std::experimental::basic_string_view<Char> type;$/;"	t	class:basic_string_view	typeref:typename:std::experimental::basic_string_view<Char>
type	spdlog/fmt/bundled/core.h	/^    typedef typename std::result_of<typename std::remove_reference<F>::type(Args...)>::type type/;"	t	struct:internal::result_of
type	spdlog/fmt/bundled/core.h	/^    typename internal::type type(unsigned index) const$/;"	f	class:basic_format_args	typeref:typename:internal::type
type	spdlog/fmt/bundled/core.h	/^enum type$/;"	g	namespace:internal
type	spdlog/fmt/bundled/format.h	/^    Type type;$/;"	m	struct:fmt::internal::Arg	typeref:typename:Type
type	spdlog/fmt/bundled/format.h	/^    char type() const$/;"	f	struct:fmt::AlignTypeSpec	typeref:typename:char
type	spdlog/fmt/bundled/format.h	/^    char type() const$/;"	f	struct:fmt::FormatSpec	typeref:typename:char
type	spdlog/fmt/bundled/format.h	/^    char type() const$/;"	f	struct:fmt::TypeSpec	typeref:typename:char
type	spdlog/fmt/bundled/format.h	/^    internal::Arg::Type type(unsigned index) const$/;"	f	class:fmt::ArgList	typeref:typename:internal::Arg::Type
type	spdlog/fmt/bundled/format.h	/^    static internal::Arg::Type type(uint64_t types, unsigned index)$/;"	f	class:fmt::ArgList	typeref:typename:internal::Arg::Type
type	spdlog/fmt/bundled/format.h	/^    static typename EnableIf<Not<ConvertToInt<T>::value>::value, uint64_t>::type type(const T &)$/;"	f	class:fmt::internal::MakeValue	typeref:typename:EnableIf<Not<ConvertToInt<T>::value>::value,uint64_t>::type
type	spdlog/fmt/bundled/format.h	/^    static uint64_t type(T)$/;"	f	class:fmt::internal::MakeValue	typeref:typename:uint64_t
type	spdlog/fmt/bundled/format.h	/^    static uint64_t type(const NamedArg<Char_> &)$/;"	f	class:fmt::internal::MakeValue	typeref:typename:uint64_t
type	spdlog/fmt/bundled/format.h	/^    static uint64_t type(const NamedArgWithType<Char_, T> &)$/;"	f	class:fmt::internal::MakeValue	typeref:typename:uint64_t
type	spdlog/fmt/bundled/format.h	/^    static uint64_t type(long)$/;"	f	class:fmt::internal::MakeValue	typeref:typename:uint64_t
type	spdlog/fmt/bundled/format.h	/^    static uint64_t type(unsigned long)$/;"	f	class:fmt::internal::MakeValue	typeref:typename:uint64_t
type	spdlog/fmt/bundled/format.h	/^    static uint64_t type(wchar_t)$/;"	f	class:fmt::internal::MakeValue	typeref:typename:uint64_t
type	spdlog/fmt/bundled/format.h	/^    typedef F type;$/;"	t	struct:fmt::internal::Conditional	typeref:typename:F
type	spdlog/fmt/bundled/format.h	/^    typedef T type;$/;"	t	struct:fmt::internal::Conditional	typeref:typename:T
type	spdlog/fmt/bundled/format.h	/^    typedef T type;$/;"	t	struct:fmt::internal::EnableIf	typeref:typename:T
type	spdlog/fmt/bundled/format.h	/^    uint64_t type;$/;"	m	struct:fmt::internal::ArgType	typeref:typename:uint64_t
type	stb_image.h	/^   stbi__uint32 type;$/;"	m	struct:__anon84e4e8860b08	typeref:typename:stbi__uint32
type	stb_image.h	/^   stbi_uc size,type,channel;$/;"	m	struct:__anon84e4e8860f08	typeref:typename:stbi_uc
typeX	qcustomplot.h	/^  PositionType typeX() const { return mPositionTypeX; }$/;"	f	class:QCPItemPosition	typeref:typename:PositionType
typeY	qcustomplot.h	/^  PositionType typeY() const { return mPositionTypeY; }$/;"	f	class:QCPItemPosition	typeref:typename:PositionType
type_	spdlog/fmt/bundled/core.h	/^    internal::type type_;$/;"	m	class:basic_format_arg	typeref:typename:internal::type
type_	spdlog/fmt/bundled/format.h	/^    char type_;$/;"	m	struct:fmt::FormatSpec	typeref:typename:char
type_	spdlog/fmt/bundled/printf.h	/^    wchar_t type_;$/;"	m	class:fmt::internal::ArgConverter	typeref:typename:wchar_t
type_error	json.hpp	/^    type_error(int id_, const char* what_arg) : exception(id_, what_arg) {}$/;"	f	class:nlohmann::detail::type_error
type_error	json.hpp	/^    using type_error = detail::type_error;$/;"	t	class:nlohmann::basic_json	typeref:typename:detail::type_error
type_error	json.hpp	/^class type_error : public exception$/;"	c	namespace:nlohmann::detail
type_name	json.hpp	/^    const char* type_name() const noexcept$/;"	f	class:nlohmann::basic_json	typeref:typename:const char *
type_prefix	spdlog/fmt/bundled/format.h	/^    char type_prefix() const$/;"	f	struct:fmt::AlignTypeSpec	typeref:typename:char
type_prefix	spdlog/fmt/bundled/format.h	/^    char type_prefix() const$/;"	f	struct:fmt::FormatSpec	typeref:typename:char
type_prefix	spdlog/fmt/bundled/format.h	/^    char type_prefix() const$/;"	f	struct:fmt::TypeSpec	typeref:typename:char
type_tag	spdlog/fmt/bundled/core.h	/^    static const type type_tag = TYPE;$/;"	m	struct:internal::typed_value	typeref:typename:const type
typed_value	spdlog/fmt/bundled/core.h	/^    FMT_CONSTEXPR typed_value(const T &val)$/;"	f	struct:internal::typed_value	typeref:typename:FMT_CONSTEXPR
typed_value	spdlog/fmt/bundled/core.h	/^struct typed_value : value<Context>$/;"	s	namespace:internal
types	spdlog/fmt/bundled/format.h	/^    uint64_t types() const$/;"	f	class:fmt::ArgList	typeref:typename:uint64_t
types_	spdlog/fmt/bundled/core.h	/^    unsigned long long types_;$/;"	m	class:basic_format_args	typeref:typename:unsigned long long
types_	spdlog/fmt/bundled/format.h	/^    uint64_t types_;$/;"	m	class:fmt::ArgList	typeref:typename:uint64_t
u16	tcp-packet.h	/^typedef	uint16_t u16;$/;"	t	typeref:typename:uint16_t
u32	tcp-packet.h	/^typedef	uint32_t u32;$/;"	t	typeref:typename:uint32_t
u64	tcp-packet.h	/^typedef uint64_t u64;$/;"	t	typeref:typename:uint64_t
u8	tcp-packet.h	/^typedef uint8_t u8;$/;"	t	typeref:typename:uint8_t
ubjson_prefix	json.hpp	/^    char ubjson_prefix(const BasicJsonType& j) const noexcept$/;"	f	class:nlohmann::detail::binary_writer	typeref:typename:char
ui	mainwindow.h	/^    Ui::MainWindow *ui;$/;"	m	class:MainWindow	typeref:typename:Ui::MainWindow *
ui	mdi-child.h	/^    Ui::MdiChild *ui;$/;"	m	class:MdiChild	typeref:typename:Ui::MdiChild *
uint32_pack	protobuf-c/protobuf-c.c	/^uint32_pack(uint32_t value, uint8_t *out)$/;"	f	typeref:typename:size_t	file:
uint32_size	protobuf-c/protobuf-c.c	/^uint32_size(uint32_t v)$/;"	f	typeref:typename:size_t	file:
uint32_t	spdlog/fmt/bundled/format.h	/^typedef unsigned __int32 uint32_t;$/;"	t	typeref:typename:unsigned __int32
uint64_pack	protobuf-c/protobuf-c.c	/^uint64_pack(uint64_t value, uint8_t *out)$/;"	f	typeref:typename:size_t	file:
uint64_size	protobuf-c/protobuf-c.c	/^uint64_size(uint64_t v)$/;"	f	typeref:typename:size_t	file:
uint64_t	spdlog/fmt/bundled/format.h	/^typedef unsigned __int64 uint64_t;$/;"	t	typeref:typename:unsigned __int64
uint_type	spdlog/fmt/bundled/core.h	/^    uint_type,$/;"	e	enum:internal::type
uint_value	spdlog/fmt/bundled/core.h	/^        unsigned uint_value;$/;"	m	union:internal::value::__anonef64315f020a	typeref:typename:unsigned
uint_value	spdlog/fmt/bundled/format.h	/^        unsigned uint_value;$/;"	m	union:fmt::internal::Value::__anon1ea8787f020a	typeref:typename:unsigned
ulong_long_type	spdlog/fmt/bundled/core.h	/^    ulong_long_type,$/;"	e	enum:internal::type
ulong_long_value	spdlog/fmt/bundled/core.h	/^        unsigned long long ulong_long_value;$/;"	m	union:internal::value::__anonef64315f020a	typeref:typename:unsigned long long
ulong_long_value	spdlog/fmt/bundled/format.h	/^        ULongLong ulong_long_value;$/;"	m	union:fmt::internal::Value::__anon1ea8787f020a	typeref:typename:ULongLong
ulong_type	spdlog/fmt/bundled/core.h	/^typedef std::conditional<sizeof(unsigned long) == sizeof(unsigned), unsigned, unsigned long long/;"	t	namespace:internal
uncvref_t	json.hpp	/^using uncvref_t = typename std::remove_cv<typename std::remove_reference<T>::type>::type;$/;"	t	namespace:nlohmann::detail	typeref:typename:std::remove_cv<typename std::remove_reference<T>::type>::type
undefinePen	qcustomplot.cpp	/^void QCPScatterStyle::undefinePen()$/;"	f	class:QCPScatterStyle	typeref:typename:void
undefinePen	qcustomplot.h	/^  void undefinePen();$/;"	p	class:QCPScatterStyle	typeref:typename:void
underline	spdlog/sinks/ansicolor_sink.h	/^    const std::string underline = "\\033[4m";$/;"	m	class:spdlog::sinks::ansicolor_sink	typeref:typename:const std::string
underlying_type	json.hpp	/^    using underlying_type = typename std::underlying_type<EnumType>::type;$/;"	t	function:nlohmann::detail::to_json	typeref:typename:std::underlying_type<EnumType>::type
unescape	json.hpp	/^    static void unescape(std::string& s)$/;"	f	class:nlohmann::json_pointer	typeref:typename:void
unexpect_eof	json.hpp	/^    void unexpect_eof() const$/;"	f	class:nlohmann::detail::binary_reader	typeref:typename:void
unflatten	json.hpp	/^    basic_json unflatten() const$/;"	f	class:nlohmann::basic_json	typeref:typename:basic_json
unflatten	json.hpp	/^    unflatten(const BasicJsonType& value)$/;"	f	class:nlohmann::json_pointer	typeref:typename:BasicJsonType
unget	json.hpp	/^    void unget()$/;"	f	class:nlohmann::detail::lexer	typeref:typename:void
unget_character	json.hpp	/^    virtual void unget_character() = 0;$/;"	p	struct:nlohmann::detail::input_adapter_protocol	typeref:typename:void
unget_character	json.hpp	/^    void unget_character() noexcept override$/;"	f	class:nlohmann::detail::input_buffer_adapter	typeref:typename:void
unget_character	json.hpp	/^    void unget_character() override$/;"	f	class:nlohmann::detail::input_stream_adapter	typeref:typename:void
unicodeFraction	qcustomplot.cpp	/^QString QCPAxisTickerPi::unicodeFraction(int numerator, int denominator) const$/;"	f	class:QCPAxisTickerPi	typeref:typename:QString
unicodeFraction	qcustomplot.h	/^  QString unicodeFraction(int numerator, int denominator) const;$/;"	p	class:QCPAxisTickerPi	typeref:typename:QString
unicodeSubscript	qcustomplot.cpp	/^QString QCPAxisTickerPi::unicodeSubscript(int number) const$/;"	f	class:QCPAxisTickerPi	typeref:typename:QString
unicodeSubscript	qcustomplot.h	/^  QString unicodeSubscript(int number) const;$/;"	p	class:QCPAxisTickerPi	typeref:typename:QString
unicodeSuperscript	qcustomplot.cpp	/^QString QCPAxisTickerPi::unicodeSuperscript(int number) const$/;"	f	class:QCPAxisTickerPi	typeref:typename:QString
unicodeSuperscript	qcustomplot.h	/^  QString unicodeSuperscript(int number) const;$/;"	p	class:QCPAxisTickerPi	typeref:typename:QString
uninitialized	json.hpp	/^        uninitialized,    \/\/\/< indicating the scanner is uninitialized$/;"	e	enum:nlohmann::detail::lexer::token_type
unknown_field_get_packed_size	protobuf-c/protobuf-c.c	/^unknown_field_get_packed_size(const ProtobufCMessageUnknownField *field)$/;"	f	typeref:typename:size_t	file:
unknown_field_pack	protobuf-c/protobuf-c.c	/^unknown_field_pack(const ProtobufCMessageUnknownField *field, uint8_t *out)$/;"	f	typeref:typename:size_t	file:
unknown_field_pack_to_buffer	protobuf-c/protobuf-c.c	/^unknown_field_pack_to_buffer(const ProtobufCMessageUnknownField *field,$/;"	f	typeref:typename:size_t	file:
unknown_fields	protobuf-c/protobuf-c.h	/^	ProtobufCMessageUnknownField		*unknown_fields;$/;"	m	struct:ProtobufCMessage	typeref:typename:ProtobufCMessageUnknownField *
unknown_fields	qc-message.pb.h	/^  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {$/;"	f	class:Imu	typeref:typename:const::google::protobuf::UnknownFieldSet &
unknown_fields	qc-message.pb.h	/^  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {$/;"	f	class:Protocol	typeref:typename:const::google::protobuf::UnknownFieldSet &
unlabeled_field_get_packed_size	protobuf-c/protobuf-c.c	/^unlabeled_field_get_packed_size(const ProtobufCFieldDescriptor *field,$/;"	f	typeref:typename:size_t	file:
unlabeled_field_pack	protobuf-c/protobuf-c.c	/^unlabeled_field_pack(const ProtobufCFieldDescriptor *field,$/;"	f	typeref:typename:size_t	file:
unlabeled_field_pack_to_buffer	protobuf-c/protobuf-c.c	/^unlabeled_field_pack_to_buffer(const ProtobufCFieldDescriptor *field,$/;"	f	typeref:typename:size_t	file:
unlock	spdlog/details/null_mutex.h	/^    void unlock() {}$/;"	f	struct:spdlog::details::null_mutex	typeref:typename:void
unregisterBars	qcustomplot.cpp	/^void QCPBarsGroup::unregisterBars(QCPBars *bars)$/;"	f	class:QCPBarsGroup	typeref:typename:void
unregisterBars	qcustomplot.h	/^  void unregisterBars(QCPBars *bars);$/;"	p	class:QCPBarsGroup	typeref:typename:void
unzigzag32	protobuf-c/protobuf-c.c	/^unzigzag32(uint32_t v)$/;"	f	typeref:typename:int32_t	file:
unzigzag64	protobuf-c/protobuf-c.c	/^unzigzag64(uint64_t v)$/;"	f	typeref:typename:int64_t	file:
upLayout	qcustomplot.h	/^                     ,upLayout     \/\/\/< Final phase in which the layout system places the rec/;"	e	enum:QCPLayoutElement::UpdatePhase
upMargins	qcustomplot.h	/^                     ,upMargins    \/\/\/< Phase in which the margins are calculated and set$/;"	e	enum:QCPLayoutElement::UpdatePhase
upPreparation	qcustomplot.h	/^  enum UpdatePhase { upPreparation \/\/\/< Phase used for any type of preparation that needs to /;"	e	enum:QCPLayoutElement::UpdatePhase
update	json.hpp	/^    void update(const_iterator first, const_iterator last)$/;"	f	class:nlohmann::basic_json	typeref:typename:void
update	json.hpp	/^    void update(const_reference j)$/;"	f	class:nlohmann::basic_json	typeref:typename:void
update	qcustomplot.cpp	/^void QCPAxisRect::update(UpdatePhase phase)$/;"	f	class:QCPAxisRect	typeref:typename:void
update	qcustomplot.cpp	/^void QCPColorScale::update(UpdatePhase phase)$/;"	f	class:QCPColorScale	typeref:typename:void
update	qcustomplot.cpp	/^void QCPLayout::update(UpdatePhase phase)$/;"	f	class:QCPLayout	typeref:typename:void
update	qcustomplot.cpp	/^void QCPLayoutElement::update(UpdatePhase phase)$/;"	f	class:QCPLayoutElement	typeref:typename:void
update	qcustomplot.h	/^  virtual void update(UpdatePhase phase) Q_DECL_OVERRIDE;$/;"	p	class:QCPAxisRect	typeref:typename:void
update	qcustomplot.h	/^  virtual void update(UpdatePhase phase) Q_DECL_OVERRIDE;$/;"	p	class:QCPColorScale	typeref:typename:void
update	qcustomplot.h	/^  virtual void update(UpdatePhase phase) Q_DECL_OVERRIDE;$/;"	p	class:QCPLayout	typeref:typename:void
update	qcustomplot.h	/^  virtual void update(UpdatePhase phase);$/;"	p	class:QCPLayoutElement	typeref:typename:void
updateAxesOffset	qcustomplot.cpp	/^void QCPAxisRect::updateAxesOffset(QCPAxis::AxisType type)$/;"	f	class:QCPAxisRect	typeref:typename:void
updateAxesOffset	qcustomplot.h	/^  void updateAxesOffset(QCPAxis::AxisType type);$/;"	p	class:QCPAxisRect	typeref:typename:void
updateColorBuffer	qcustomplot.cpp	/^void QCPColorGradient::updateColorBuffer()$/;"	f	class:QCPColorGradient	typeref:typename:void
updateColorBuffer	qcustomplot.h	/^  void updateColorBuffer();$/;"	p	class:QCPColorGradient	typeref:typename:void
updateGradientImage	qcustomplot.cpp	/^void QCPColorScaleAxisRectPrivate::updateGradientImage()$/;"	f	class:QCPColorScaleAxisRectPrivate	typeref:typename:void
updateGradientImage	qcustomplot.h	/^  void updateGradientImage();$/;"	p	class:QCPColorScaleAxisRectPrivate	typeref:typename:void
updateLayerIndices	qcustomplot.cpp	/^void QCustomPlot::updateLayerIndices() const$/;"	f	class:QCustomPlot	typeref:typename:void
updateLayerIndices	qcustomplot.h	/^  void updateLayerIndices() const;$/;"	p	class:QCustomPlot	typeref:typename:void
updateLayout	qcustomplot.cpp	/^void QCPLayout::updateLayout()$/;"	f	class:QCPLayout	typeref:typename:void
updateLayout	qcustomplot.cpp	/^void QCPLayoutGrid::updateLayout()$/;"	f	class:QCPLayoutGrid	typeref:typename:void
updateLayout	qcustomplot.cpp	/^void QCPLayoutInset::updateLayout()$/;"	f	class:QCPLayoutInset	typeref:typename:void
updateLayout	qcustomplot.cpp	/^void QCustomPlot::updateLayout()$/;"	f	class:QCustomPlot	typeref:typename:void
updateLayout	qcustomplot.h	/^  virtual void updateLayout() Q_DECL_OVERRIDE;$/;"	p	class:QCPLayoutGrid	typeref:typename:void
updateLayout	qcustomplot.h	/^  virtual void updateLayout() Q_DECL_OVERRIDE;$/;"	p	class:QCPLayoutInset	typeref:typename:void
updateLayout	qcustomplot.h	/^  virtual void updateLayout();$/;"	p	class:QCPLayout	typeref:typename:void
updateLayout	qcustomplot.h	/^  virtual void updateLayout();$/;"	p	class:QCustomPlot	typeref:typename:void
updateLegendIcon	qcustomplot.cpp	/^void QCPColorMap::updateLegendIcon(Qt::TransformationMode transformMode, const QSize &thumbSize)$/;"	f	class:QCPColorMap	typeref:typename:void
updateLegendIcon	qcustomplot.h	/^  Q_SLOT void updateLegendIcon(Qt::TransformationMode transformMode=Qt::SmoothTransformation, co/;"	p	class:QCPColorMap	typeref:typename:Q_SLOT void
updateMapImage	qcustomplot.cpp	/^void QCPColorMap::updateMapImage()$/;"	f	class:QCPColorMap	typeref:typename:void
updateMapImage	qcustomplot.h	/^  virtual void updateMapImage();$/;"	p	class:QCPColorMap	typeref:typename:void
updateMode	protocol-struct.h	/^    uint8_t updateMode; $/;"	m	struct:FirmwareUpgradeResponse	typeref:typename:uint8_t
updateMode	protocol-struct.h	/^    uint8_t updateMode;$/;"	m	struct:FirmwareUpgradeDetail	typeref:typename:uint8_t
updateMode	protocol-struct.h	/^    uint8_t updateMode;$/;"	m	struct:FirmwareUpgradeSimple	typeref:typename:uint8_t
updateMode	protocol-struct.h	/^    uint8_t updateMode;$/;"	m	struct:FirmwareUpgradeVerify	typeref:typename:uint8_t
updatePosition	qcustomplot.cpp	/^void QCPItemTracer::updatePosition()$/;"	f	class:QCPItemTracer	typeref:typename:void
updatePosition	qcustomplot.h	/^  void updatePosition();$/;"	p	class:QCPItemTracer	typeref:typename:void
updateScaledPixmap	qcustomplot.cpp	/^void QCPItemPixmap::updateScaledPixmap(QRect finalRect, bool flipHorz, bool flipVert)$/;"	f	class:QCPItemPixmap	typeref:typename:void
updateScaledPixmap	qcustomplot.h	/^  void updateScaledPixmap(QRect finalRect=QRect(), bool flipHorz=false, bool flipVert=false);$/;"	p	class:QCPItemPixmap	typeref:typename:void
upper	qcustomplot.h	/^  double lower, upper;$/;"	m	class:QCPRange	typeref:typename:double
upperEnding	qcustomplot.cpp	/^QCPLineEnding QCPAxis::upperEnding() const$/;"	f	class:QCPAxis	typeref:typename:QCPLineEnding
upperEnding	qcustomplot.h	/^  QCPLineEnding lowerEnding, upperEnding; \/\/ directly accessed by QCPAxis setters\/getters$/;"	m	class:QCPAxisPainterPrivate	typeref:typename:QCPLineEnding
upperEnding	qcustomplot.h	/^  QCPLineEnding upperEnding() const;$/;"	p	class:QCPAxis	typeref:typename:QCPLineEnding
upperEnding	qcustomplot.h	/^  Q_PROPERTY(QCPLineEnding upperEnding READ upperEnding WRITE setUpperEnding)$/;"	p	class:QCPAxis	typeref:typename:QCPLineEnding
upperQuartile	qcustomplot.h	/^  double key, minimum, lowerQuartile, median, upperQuartile, maximum;$/;"	m	class:QCPStatisticalBoxData	typeref:typename:double
usb_con	simple.pb-c.h	/^  protobuf_c_boolean usb_con;$/;"	m	struct:_ToHi	typeref:typename:protobuf_c_boolean
usb_con	simple.proto	/^    optional bool usb_con = 22;$/;"	f
usedScatterProperties	qcustomplot.h	/^  QCPScatterStyle::ScatterProperties usedScatterProperties() const { return mUsedScatterProperti/;"	f	class:QCPSelectionDecorator	typeref:typename:QCPScatterStyle::ScatterProperties
user_id	simple.pb-c.h	/^  char *user_id;$/;"	m	struct:_ReqCompleteSetup	typeref:typename:char *
user_id	simple.proto	/^    optional string user_id = 1;$/;"	f
ustring	spdlog/fmt/bundled/core.h	/^        string_value<unsigned char> ustring;$/;"	m	union:internal::value::__anonef64315f020a	typeref:typename:string_value<unsigned char>
ustring	spdlog/fmt/bundled/format.h	/^        StringValue<unsigned char> ustring;$/;"	m	union:fmt::internal::Value::__anon1ea8787f020a	typeref:typename:StringValue<unsigned char>
utc	spdlog/common.h	/^    utc    \/\/ log utc$/;"	e	enum:spdlog::pattern_time_type
utc_minutes_offset	spdlog/details/os.h	/^inline int utc_minutes_offset(const std::tm &tm = details::os::localtime())$/;"	f	namespace:spdlog::details::os	typeref:typename:int
utf16_to_utf8	spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC internal::utf16_to_utf8::utf16_to_utf8(wstring_view s)$/;"	f	class:internal::utf16_to_utf8	typeref:typename:FMT_FUNC
utf8_to_utf16	spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC internal::utf8_to_utf16::utf8_to_utf16(string_view s)$/;"	f	class:internal::utf8_to_utf16	typeref:typename:FMT_FUNC
util	spdlogger.h	/^namespace util$/;"	n
v	json.hpp	/^    std::vector<CharType>& v;$/;"	m	class:nlohmann::detail::output_vector_adapter	typeref:typename:std::vector<CharType> &
v	stb_image.h	/^      int h,v;$/;"	m	struct:__anon84e4e8860608::__anon84e4e8860708	typeref:typename:int
v_	spdlog/details/circular_q.h	/^    std::vector<T> v_;$/;"	m	class:spdlog::details::circular_q	typeref:typename:std::vector<T>
validRange	qcustomplot.cpp	/^bool QCPRange::validRange(const QCPRange &range)$/;"	f	class:QCPRange	typeref:typename:bool
validRange	qcustomplot.cpp	/^bool QCPRange::validRange(double lower, double upper)$/;"	f	class:QCPRange	typeref:typename:bool
validRange	qcustomplot.h	/^  static bool validRange(const QCPRange &range);$/;"	p	class:QCPRange	typeref:typename:bool
validRange	qcustomplot.h	/^  static bool validRange(double lower, double upper);$/;"	p	class:QCPRange	typeref:typename:bool
validate_uint32	stb_image.h	/^typedef unsigned char validate_uint32[sizeof(stbi__uint32)==4 ? 1 : -1];$/;"	t	typeref:typename:unsigned char[sizeof (stbi__uint32)==4?1:-1]
value	http-request.h	/^            static const bool value = true;$/;"	m	struct:boost::system::is_error_code_enum	typeref:typename:const bool
value	json.hpp	/^        typename IteratorType::reference value() const$/;"	f	class:nlohmann::detail::iteration_proxy::iteration_proxy_internal	typeref:typename:IteratorType::reference
value	json.hpp	/^        value$/;"	e	enum:nlohmann::detail::parser::parse_event_t
value	json.hpp	/^    ValueType value(const json_pointer& ptr, const ValueType& default_value) const$/;"	f	class:nlohmann::basic_json	typeref:typename:ValueType
value	json.hpp	/^    ValueType value(const typename object_t::key_type& key, const ValueType& default_value) cons/;"	f	class:nlohmann::basic_json	typeref:typename:ValueType
value	json.hpp	/^    reference value() const$/;"	f	class:nlohmann::detail::iter_impl	typeref:typename:reference
value	json.hpp	/^    reference value() const$/;"	f	class:nlohmann::detail::json_reverse_iterator	typeref:typename:reference
value	json.hpp	/^    static auto constexpr value = is_compatible_object_type_impl <$/;"	m	struct:nlohmann::detail::is_compatible_object_type	typeref:typename:auto 
value	json.hpp	/^    static auto constexpr value = std::is_same<T, typename BasicJsonType::iterator>::value or$/;"	m	struct:nlohmann::detail::is_basic_json_nested_type	typeref:typename:auto 
value	json.hpp	/^    static auto constexpr value =$/;"	m	struct:nlohmann::detail::is_compatible_array_type	typeref:typename:auto 
value	json.hpp	/^    static constexpr T value{};$/;"	m	struct:nlohmann::detail::static_const	typeref:typename:T
value	json.hpp	/^    static constexpr auto value =$/;"	m	struct:nlohmann::detail::is_compatible_integer_type	typeref:typename:auto
value	json.hpp	/^    static constexpr auto value =$/;"	m	struct:nlohmann::detail::is_compatible_integer_type_impl	typeref:typename:auto
value	json.hpp	/^    static constexpr auto value =$/;"	m	struct:nlohmann::detail::is_compatible_object_type_impl	typeref:typename:auto
value	json.hpp	/^    static constexpr bool value = std::is_integral<decltype($/;"	m	struct:nlohmann::detail::has_from_json	typeref:typename:bool
value	json.hpp	/^    static constexpr bool value = std::is_integral<decltype(detect($/;"	m	struct:nlohmann::detail::has_non_default_from_json	typeref:typename:bool
value	json.hpp	/^    static constexpr bool value = std::is_integral<decltype(detect($/;"	m	struct:nlohmann::detail::has_to_json	typeref:typename:bool
value	json.hpp	/^    static constexpr bool value =$/;"	m	struct:nlohmann::detail::is_compatible_complete_type	typeref:typename:bool
value	json.hpp	/^    string_t value(const json_pointer& ptr, const char* default_value) const$/;"	f	class:nlohmann::basic_json	typeref:typename:string_t
value	json.hpp	/^    string_t value(const typename object_t::key_type& key, const char* default_value) const$/;"	f	class:nlohmann::basic_json	typeref:typename:string_t
value	json.hpp	/^constexpr T static_const<T>::value;$/;"	m	class:nlohmann::detail::static_const<T>	typeref:typename:T
value	protobuf-c/protobuf-c.h	/^	int		value;$/;"	m	struct:ProtobufCEnumValue	typeref:typename:int
value	protocol-struct.h	/^    enum {value=0xBA};$/;"	e	enum:CONTROL_ST_AVOID::__anon3a856c1f0103
value	protocol-struct.h	/^    enum {value=0xCA};$/;"	e	enum:CONTROL_ABS_ROTATE::__anon3a856c1f0203
value	protocol-struct.h	/^    enum {value=0xDA};$/;"	e	enum:CONTROL_REL_ROTATE::__anon3a856c1f0303
value	protocol-struct.h	/^    enum {value=0xEA};$/;"	e	enum:CONTROL_STRAIGHT::__anon3a856c1f0403
value	protocol-struct.h	/^    static const int value = 0x4A;$/;"	m	struct:CONTROL_REMOTE	typeref:typename:const int
value	protocol-struct.h	/^    static const int value = 0x7A;$/;"	m	struct:CONTROL_YAW_RESET	typeref:typename:const int
value	protocol-struct.h	/^    static const int value = 0x8A;$/;"	m	struct:CONTROL_WHEEL	typeref:typename:const int
value	protocol-struct.h	/^    static const int value = 0x9A;$/;"	m	struct:CONTROL_ENCODER	typeref:typename:const int
value	qcustomplot.h	/^  double key, value;$/;"	m	class:QCPBarsData	typeref:typename:double
value	qcustomplot.h	/^  double key, value;$/;"	m	class:QCPGraphData	typeref:typename:double
value	qcustomplot.h	/^  double t, key, value;$/;"	m	class:QCPCurveData	typeref:typename:double
value	qcustomplot.h	/^  double value() const { return mValue; }$/;"	f	class:QCPItemPosition	typeref:typename:double
value	spdlog/details/null_mutex.h	/^    int value;$/;"	m	struct:spdlog::details::null_atomic_int	typeref:typename:int
value	spdlog/fmt/bundled/core.h	/^        value = !std::is_arithmetic<T>::value && std::is_convertible<T, int>::value$/;"	e	enum:internal::convert_to_int::__anonef64315f0103
value	spdlog/fmt/bundled/core.h	/^    FMT_CONSTEXPR value(int val = 0)$/;"	f	class:internal::value	typeref:typename:FMT_CONSTEXPR
value	spdlog/fmt/bundled/core.h	/^    const Char *value;$/;"	m	struct:internal::string_value	typeref:typename:const Char *
value	spdlog/fmt/bundled/core.h	/^    const T &value;$/;"	m	struct:internal::named_arg	typeref:typename:const T &
value	spdlog/fmt/bundled/core.h	/^    const void *value;$/;"	m	struct:internal::custom_value	typeref:typename:const void *
value	spdlog/fmt/bundled/core.h	/^    explicit value(const T &val)$/;"	f	class:internal::value
value	spdlog/fmt/bundled/core.h	/^    static const type value = value_type::type_tag;$/;"	m	struct:internal::get_type	typeref:typename:const type
value	spdlog/fmt/bundled/core.h	/^    value(basic_string_view<char_type> val)$/;"	f	class:internal::value
value	spdlog/fmt/bundled/core.h	/^    value(const char_type *val)$/;"	f	class:internal::value
value	spdlog/fmt/bundled/core.h	/^    value(const signed char *val)$/;"	f	class:internal::value
value	spdlog/fmt/bundled/core.h	/^    value(const unsigned char *val)$/;"	f	class:internal::value
value	spdlog/fmt/bundled/core.h	/^    value(const void *val)$/;"	f	class:internal::value
value	spdlog/fmt/bundled/core.h	/^    value(double val)$/;"	f	class:internal::value
value	spdlog/fmt/bundled/core.h	/^    value(long double val)$/;"	f	class:internal::value
value	spdlog/fmt/bundled/core.h	/^    value(long long val)$/;"	f	class:internal::value
value	spdlog/fmt/bundled/core.h	/^    value(unsigned long long val)$/;"	f	class:internal::value
value	spdlog/fmt/bundled/core.h	/^    value(unsigned val)$/;"	f	class:internal::value
value	spdlog/fmt/bundled/core.h	/^class value$/;"	c	namespace:internal
value	spdlog/fmt/bundled/format.h	/^        const Char *value;$/;"	m	struct:fmt::internal::Value::StringValue	typeref:typename:const Char *
value	spdlog/fmt/bundled/format.h	/^        const void *value;$/;"	m	struct:fmt::internal::Value::CustomValue	typeref:typename:const void *
value	spdlog/fmt/bundled/format.h	/^        value = 0$/;"	e	enum:fmt::internal::FalseType::__anon1ea8787f0a03
value	spdlog/fmt/bundled/format.h	/^        value = 0$/;"	e	enum:fmt::internal::Not::__anon1ea8787f0803
value	spdlog/fmt/bundled/format.h	/^        value = 1$/;"	e	enum:fmt::internal::Not::__anon1ea8787f0903
value	spdlog/fmt/bundled/format.h	/^        value = ConvertToIntImpl2<T, enable_conversion>::value$/;"	e	enum:fmt::internal::ConvertToInt::__anon1ea8787f0703
value	spdlog/fmt/bundled/format.h	/^        value = ConvertToIntImpl<T, !std::numeric_limits<T>::is_specialized>::value$/;"	e	enum:fmt::internal::ConvertToIntImpl2::__anon1ea8787f0503
value	spdlog/fmt/bundled/format.h	/^        value = ENABLE_CONVERSION$/;"	e	enum:fmt::internal::ConvertToIntImpl::__anon1ea8787f0303
value	spdlog/fmt/bundled/format.h	/^        value = false$/;"	e	enum:fmt::internal::ConvertToIntImpl2::__anon1ea8787f0403
value	spdlog/fmt/bundled/format.h	/^    T value() const$/;"	f	class:fmt::IntFormatSpec	typeref:typename:T
value	spdlog/fmt/bundled/ostream.h	/^        value = sizeof(convert(get<DummyStream>() << get<T>())) == sizeof(No)$/;"	e	enum:fmt::internal::ConvertToIntImpl::__anon62fc15510103
value	spdlog/fmt/bundled/printf.h	/^        value = 0$/;"	e	enum:fmt::internal::is_same::__anon2b475a090103
value	spdlog/fmt/bundled/printf.h	/^        value = 1$/;"	e	enum:fmt::internal::is_same::__anon2b475a090203
value	spdlog/fmt/bundled/ranges.h	/^    static FMT_CONSTEXPR_DECL const bool value = !std::is_void<decltype(check<T>(FMT_NULL))>::va/;"	m	class:internal::is_like_std_string	typeref:typename:FMT_CONSTEXPR_DECL const bool
value	spdlog/fmt/bundled/ranges.h	/^    static FMT_CONSTEXPR_DECL const bool value = !std::is_void<decltype(check<T>(FMT_NULL))>::va/;"	m	class:internal::is_tuple_like_	typeref:typename:FMT_CONSTEXPR_DECL const bool
value	spdlog/fmt/bundled/ranges.h	/^    static FMT_CONSTEXPR_DECL const bool value = internal::is_range_<T>::value && !internal::is_/;"	m	struct:is_range	typeref:typename:FMT_CONSTEXPR_DECL const bool
value	spdlog/fmt/bundled/ranges.h	/^    static FMT_CONSTEXPR_DECL const bool value = internal::is_tuple_like_<T>::value && !internal/;"	m	struct:is_tuple_like	typeref:typename:FMT_CONSTEXPR_DECL const bool
value	stb_image.h	/^   stbi__uint16 value[288];$/;"	m	struct:__anon84e4e8860908	typeref:typename:stbi__uint16[288]
valueAxis	qcustomplot.h	/^  QCPAxis *valueAxis() const { return mValueAxis.data(); }$/;"	f	class:QCPAbstractPlottable	typeref:typename:QCPAxis *
valueAxis	qcustomplot.h	/^  QCPAxis *valueAxis() const { return mValueAxis.data(); }$/;"	f	class:QCPItemPosition	typeref:typename:QCPAxis *
valueRange	qcustomplot.h	/^  QCPRange valueRange() const { return mValueRange; }$/;"	f	class:QCPColorMapData	typeref:typename:QCPRange
valueRange	qcustomplot.h	/^  QCPRange valueRange(bool &foundRange, QCP::SignDomain signDomain=QCP::sdBoth, const QCPRange &/;"	p	class:QCPDataContainer	typeref:typename:QCPRange
valueRange	qcustomplot.h	/^  inline QCPRange valueRange() const { return QCPRange(low, high); } \/\/ open and close must li/;"	f	class:QCPFinancialData	typeref:typename:QCPRange
valueRange	qcustomplot.h	/^  inline QCPRange valueRange() const { return QCPRange(value, value); } \/\/ note that bar base /;"	f	class:QCPBarsData	typeref:typename:QCPRange
valueRange	qcustomplot.h	/^  inline QCPRange valueRange() const { return QCPRange(value, value); }$/;"	f	class:QCPCurveData	typeref:typename:QCPRange
valueRange	qcustomplot.h	/^  inline QCPRange valueRange() const { return QCPRange(value, value); }$/;"	f	class:QCPGraphData	typeref:typename:QCPRange
valueRange	qcustomplot.h	/^  inline QCPRange valueRange() const$/;"	f	class:QCPStatisticalBoxData	typeref:typename:QCPRange
valueRange	qcustomplot.h	/^QCPRange QCPDataContainer<DataType>::valueRange(bool &foundRange, QCP::SignDomain signDomain, co/;"	f	class:QCPDataContainer	typeref:typename:QCPRange
valueSize	qcustomplot.h	/^  int valueSize() const { return mValueSize; }$/;"	f	class:QCPColorMapData	typeref:typename:int
value_	spdlog/fmt/bundled/core.h	/^    internal::value<Context> value_;$/;"	m	class:basic_format_arg	typeref:typename:internal::value<Context>
value_	spdlog/fmt/bundled/format.h	/^    T value_;$/;"	m	class:fmt::IntFormatSpec	typeref:typename:T
value_	spdlog/fmt/bundled/posix.h	/^    int value_;$/;"	m	class:fmt::ErrorCode	typeref:typename:int
value_float	json.hpp	/^        value_float,      \/\/\/< an floating point number -- use get_number_float() for actual /;"	e	enum:nlohmann::detail::lexer::token_type
value_float	json.hpp	/^    number_float_t value_float = 0;$/;"	m	class:nlohmann::detail::lexer	typeref:typename:number_float_t
value_integer	json.hpp	/^        value_integer,    \/\/\/< a signed integer -- use get_number_integer() for actual value$/;"	e	enum:nlohmann::detail::lexer::token_type
value_integer	json.hpp	/^    number_integer_t value_integer = 0;$/;"	m	class:nlohmann::detail::lexer	typeref:typename:number_integer_t
value_ranges	protobuf-c/protobuf-c.h	/^	const ProtobufCIntRange		*value_ranges;$/;"	m	struct:ProtobufCEnumDescriptor	typeref:typename:const ProtobufCIntRange *
value_ref	json.hpp	/^    value_type* value_ref = nullptr;$/;"	m	class:nlohmann::detail::json_ref	typeref:typename:value_type *
value_separator	json.hpp	/^        value_separator,  \/\/\/< the value separator `,`$/;"	e	enum:nlohmann::detail::lexer::token_type
value_string	json.hpp	/^        value_string,     \/\/\/< a string -- use get_string() for actual value$/;"	e	enum:nlohmann::detail::lexer::token_type
value_t	json.hpp	/^    using value_t = detail::value_t;$/;"	t	class:nlohmann::basic_json	typeref:typename:detail::value_t
value_t	json.hpp	/^enum class value_t : std::uint8_t$/;"	g	namespace:nlohmann::detail	typeref:typename:std::uint8_t
value_type	json.hpp	/^    using value_type = BasicJsonType;$/;"	t	class:nlohmann::detail::json_ref	typeref:typename:BasicJsonType
value_type	json.hpp	/^    using value_type = basic_json;$/;"	t	class:nlohmann::basic_json	typeref:typename:basic_json
value_type	json.hpp	/^    using value_type = std::size_t;$/;"	t	struct:nlohmann::detail::index_sequence	typeref:typename:std::size_t
value_type	json.hpp	/^    using value_type = typename BasicJsonType::value_type;$/;"	t	class:nlohmann::detail::iter_impl	typeref:typename:BasicJsonType::value_type
value_type	json.hpp	/^    using value_type = typename CompatibleObjectType::value_type;$/;"	t	function:nlohmann::detail::from_json	typeref:typename:CompatibleObjectType::value_type
value_type	packet-buffer.h	/^  typedef boost::asio::const_buffer value_type;$/;"	t	class:shared_const_buffer	typeref:typename:boost::asio::const_buffer
value_type	spdlog/fmt/bundled/core.h	/^    typedef T value_type;$/;"	t	class:internal::basic_buffer	typeref:typename:T
value_type	spdlog/fmt/bundled/core.h	/^    typedef decltype(make_value<Context>(declval<typename std::decay<T>::type &>())) value_type;$/;"	t	struct:internal::get_type
value_type	spdlog/fmt/bundled/core.h	/^    typedef typename std::conditional<IS_PACKED, internal::value<Context>, basic_format_arg<Cont/;"	t	class:format_arg_store	typeref:typename:std::conditional<IS_PACKED,internal::value<Context>,basic_format_arg<Context>>::type
value_type	spdlog/fmt/bundled/ranges.h	/^    typedef T value_type;$/;"	t	struct:internal::integer_sequence	typeref:typename:T
value_unsigned	json.hpp	/^        value_unsigned,   \/\/\/< an unsigned integer -- use get_number_unsigned() for actual va/;"	e	enum:nlohmann::detail::lexer::token_type
value_unsigned	json.hpp	/^    number_unsigned_t value_unsigned = 0;$/;"	m	class:nlohmann::detail::lexer	typeref:typename:number_unsigned_t
values	protobuf-c/protobuf-c.h	/^	const ProtobufCEnumValue	*values;$/;"	m	struct:ProtobufCEnumDescriptor	typeref:typename:const ProtobufCEnumValue *
values	stb_image.h	/^   stbi_uc  values[256];$/;"	m	struct:__anon84e4e8860508	typeref:typename:stbi_uc[256]
values_	spdlog/fmt/bundled/core.h	/^        const internal::value<Context> *values_;$/;"	m	union:basic_format_args::__anonef64315f040a	typeref:typename:const internal::value<Context> *
values_	spdlog/fmt/bundled/format.h	/^        const internal::Value *values_;$/;"	m	union:fmt::ArgList::__anon1ea8787f0b0a	typeref:typename:const internal::Value *
values_by_name	protobuf-c/protobuf-c.h	/^	const ProtobufCEnumValueIndex	*values_by_name;$/;"	m	struct:ProtobufCEnumDescriptor	typeref:typename:const ProtobufCEnumValueIndex *
vec3_mul_cross	linmath.h	/^static inline void vec3_mul_cross(vec3 r, vec3 const a, vec3 const b)$/;"	f
vec3_reflect	linmath.h	/^static inline void vec3_reflect(vec3 r, vec3 const v, vec3 const n)$/;"	f	typeref:typename:void
vec4_mul_cross	linmath.h	/^static inline void vec4_mul_cross(vec4 r, vec4 a, vec4 b)$/;"	f	typeref:typename:void
vec4_reflect	linmath.h	/^static inline void vec4_reflect(vec4 r, vec4 v, vec4 n)$/;"	f	typeref:typename:void
verify	simple.pb-c.h	/^  uint32_t verify;$/;"	m	struct:_FirmwareUpdate	typeref:typename:uint32_t
verify	simple.pb-c.h	/^  uint32_t verify;$/;"	m	struct:_FirmwareUpdateFeedback	typeref:typename:uint32_t
verify	simple.proto	/^    optional uint32 verify = 3;$/;"	f
vformat	spdlog/fmt/bundled/core.h	/^std::string vformat(string_view format_str, format_args args);$/;"	p	typeref:typename:std::string
vformat	spdlog/fmt/bundled/core.h	/^std::wstring vformat(wstring_view format_str, wformat_args args);$/;"	p	typeref:typename:std::wstring
vformat_to	spdlog/fmt/bundled/core.h	/^format_context::iterator vformat_to(internal::buffer &buf, string_view format_str, format_args a/;"	p	typeref:typename:format_context::iterator
vformat_to	spdlog/fmt/bundled/core.h	/^typename std::enable_if<is_contiguous<Container>::value, std::back_insert_iterator<Container>>::/;"	f	typeref:typename:std::enable_if<is_contiguous<Container>::value,std::back_insert_iterator<Container>>::type
vformat_to	spdlog/fmt/bundled/core.h	/^wformat_context::iterator vformat_to(internal::wbuffer &buf, wstring_view format_str, wformat_ar/;"	p	typeref:typename:wformat_context::iterator
video	qc-message.pb.h	/^  const ::std::string& video() const;$/;"	p	class:Protocol	typeref:typename:const::std::string &
video	qc-message.pb.h	/^inline const ::std::string& Protocol::video() const {$/;"	f	class:Protocol	typeref:typename:const::std::string &
video	qc-message.proto	/^optional bytes video = 4;$/;"	f
video	simple.pb-c.h	/^  ProtobufCBinaryData video;$/;"	m	struct:_ToHost	typeref:typename:ProtobufCBinaryData
video	simple.proto	/^    optional bytes video = 1; \/\/ host 가 재생할 비디오$/;"	f
videoHeight	gui.h	/^    int videoWidth, videoHeight;$/;"	m	class:ClientWindow	typeref:typename:int
videoWidth	gui.h	/^    int videoWidth, videoHeight;$/;"	m	class:ClientWindow	typeref:typename:int
video_seq	simple.pb-c.h	/^  uint32_t video_seq;$/;"	m	struct:_ToHi	typeref:typename:uint32_t
video_seq	simple.pb-c.h	/^  uint32_t video_seq;$/;"	m	struct:_ToHost	typeref:typename:uint32_t
video_seq	simple.proto	/^    optional uint32 video_seq = 102;$/;"	f
video_seq	simple.proto	/^    optional uint32 video_seq = 4; \/\/ latency 측정용$/;"	f
video_ts	simple.pb-c.h	/^  uint32_t video_ts;$/;"	m	struct:_ToHost	typeref:typename:uint32_t
video_ts	simple.proto	/^    optional uint32 video_ts = 5; \/\/ 참고자료$/;"	f
viewMemory	debugger.cpp	/^void viewMemory(void* address, size_t len) {$/;"	f	typeref:typename:void
viewMemory	debugger.h	/^void viewMemory(void* address, size_t len);$/;"	p	typeref:typename:void
viewport	qcustomplot.h	/^  QRect viewport() const { return mViewport; }$/;"	f	class:QCustomPlot	typeref:typename:QRect
viewport	qcustomplot.h	/^  Q_PROPERTY(QRect viewport READ viewport WRITE setViewport)$/;"	p	class:QCustomPlot	typeref:typename:QRect
viewportRect	qcustomplot.h	/^  QRect axisRect, viewportRect;$/;"	m	class:QCPAxisPainterPrivate	typeref:typename:QRect
violet	spdlog/fmt/bundled/colors.h	/^    violet = 0xEE82EE,                  \/\/ rgb(238,130,238)$/;"	e	enum:color
visible	qcustomplot.h	/^  Q_PROPERTY(bool visible READ visible WRITE setVisible)$/;"	p	class:QCPLayer	typeref:typename:bool
visible	qcustomplot.h	/^  Q_PROPERTY(bool visible READ visible WRITE setVisible)$/;"	p	class:QCPLayerable	typeref:typename:bool
visible	qcustomplot.h	/^  bool visible() const { return mVisible; }$/;"	f	class:QCPLayer	typeref:typename:bool
visible	qcustomplot.h	/^  bool visible() const { return mVisible; }$/;"	f	class:QCPLayerable	typeref:typename:bool
visit	spdlog/fmt/bundled/format.h	/^    Result visit(const Arg &arg)$/;"	f	class:fmt::ArgVisitor	typeref:typename:Result
visit_any_double	spdlog/fmt/bundled/format.h	/^    Result visit_any_double(T)$/;"	f	class:fmt::ArgVisitor	typeref:typename:Result
visit_any_double	spdlog/fmt/bundled/format.h	/^    void visit_any_double(T value)$/;"	f	class:fmt::internal::ArgFormatterBase	typeref:typename:void
visit_any_double	spdlog/fmt/bundled/printf.h	/^    char visit_any_double(T)$/;"	f	class:fmt::internal::DefaultType	typeref:typename:char
visit_any_int	spdlog/fmt/bundled/format.h	/^    Result visit_any_int(T)$/;"	f	class:fmt::ArgVisitor	typeref:typename:Result
visit_any_int	spdlog/fmt/bundled/format.h	/^    void visit_any_int(T value)$/;"	f	class:fmt::internal::ArgFormatterBase	typeref:typename:void
visit_any_int	spdlog/fmt/bundled/printf.h	/^    bool visit_any_int(T value)$/;"	f	class:fmt::internal::IsZeroInt	typeref:typename:bool
visit_any_int	spdlog/fmt/bundled/printf.h	/^    char visit_any_int(T)$/;"	f	class:fmt::internal::DefaultType	typeref:typename:char
visit_any_int	spdlog/fmt/bundled/printf.h	/^    int visit_any_int(T value)$/;"	f	class:fmt::internal::PrecisionHandler	typeref:typename:int
visit_any_int	spdlog/fmt/bundled/printf.h	/^    unsigned visit_any_int(T value)$/;"	f	class:fmt::internal::WidthHandler	typeref:typename:unsigned
visit_any_int	spdlog/fmt/bundled/printf.h	/^    void visit_any_int(T value)$/;"	f	class:fmt::internal::CharConverter	typeref:typename:void
visit_any_int	spdlog/fmt/bundled/printf.h	/^    void visit_any_int(U value)$/;"	f	class:fmt::internal::ArgConverter	typeref:typename:void
visit_bool	spdlog/fmt/bundled/format.h	/^    Result visit_bool(bool value)$/;"	f	class:fmt::ArgVisitor	typeref:typename:Result
visit_bool	spdlog/fmt/bundled/format.h	/^    void visit_bool(bool value)$/;"	f	class:fmt::internal::ArgFormatterBase	typeref:typename:void
visit_bool	spdlog/fmt/bundled/printf.h	/^    char visit_bool(bool)$/;"	f	class:fmt::internal::DefaultType	typeref:typename:char
visit_bool	spdlog/fmt/bundled/printf.h	/^    void visit_bool(bool value)$/;"	f	class:fmt::BasicPrintfArgFormatter	typeref:typename:void
visit_bool	spdlog/fmt/bundled/printf.h	/^    void visit_bool(bool value)$/;"	f	class:fmt::internal::ArgConverter	typeref:typename:void
visit_char	spdlog/fmt/bundled/format.h	/^    Result visit_char(int value)$/;"	f	class:fmt::ArgVisitor	typeref:typename:Result
visit_char	spdlog/fmt/bundled/format.h	/^    void visit_char(int value)$/;"	f	class:fmt::internal::ArgFormatterBase	typeref:typename:void
visit_char	spdlog/fmt/bundled/printf.h	/^    char visit_char(int)$/;"	f	class:fmt::internal::DefaultType	typeref:typename:char
visit_char	spdlog/fmt/bundled/printf.h	/^    void visit_char(int value)$/;"	f	class:fmt::BasicPrintfArgFormatter	typeref:typename:void
visit_char	spdlog/fmt/bundled/printf.h	/^    void visit_char(int value)$/;"	f	class:fmt::internal::ArgConverter	typeref:typename:void
visit_cstring	spdlog/fmt/bundled/format.h	/^    Result visit_cstring(const char *)$/;"	f	class:fmt::ArgVisitor	typeref:typename:Result
visit_cstring	spdlog/fmt/bundled/format.h	/^    void visit_cstring(const char *value)$/;"	f	class:fmt::internal::ArgFormatterBase	typeref:typename:void
visit_cstring	spdlog/fmt/bundled/printf.h	/^    void visit_cstring(const char *value)$/;"	f	class:fmt::BasicPrintfArgFormatter	typeref:typename:void
visit_custom	spdlog/fmt/bundled/format.h	/^    Result visit_custom(Arg::CustomValue)$/;"	f	class:fmt::ArgVisitor	typeref:typename:Result
visit_custom	spdlog/fmt/bundled/format.h	/^    void visit_custom(internal::Arg::CustomValue c)$/;"	f	class:fmt::BasicArgFormatter	typeref:typename:void
visit_custom	spdlog/fmt/bundled/printf.h	/^    void visit_custom(internal::Arg::CustomValue c)$/;"	f	class:fmt::BasicPrintfArgFormatter	typeref:typename:void
visit_double	spdlog/fmt/bundled/format.h	/^    Result visit_double(double value)$/;"	f	class:fmt::ArgVisitor	typeref:typename:Result
visit_int	spdlog/fmt/bundled/format.h	/^    Result visit_int(int value)$/;"	f	class:fmt::ArgVisitor	typeref:typename:Result
visit_long_double	spdlog/fmt/bundled/format.h	/^    Result visit_long_double(long double value)$/;"	f	class:fmt::ArgVisitor	typeref:typename:Result
visit_long_long	spdlog/fmt/bundled/format.h	/^    Result visit_long_long(LongLong value)$/;"	f	class:fmt::ArgVisitor	typeref:typename:Result
visit_pointer	spdlog/fmt/bundled/format.h	/^    Result visit_pointer(const void *)$/;"	f	class:fmt::ArgVisitor	typeref:typename:Result
visit_pointer	spdlog/fmt/bundled/format.h	/^    void visit_pointer(const void *value)$/;"	f	class:fmt::internal::ArgFormatterBase	typeref:typename:void
visit_pointer	spdlog/fmt/bundled/printf.h	/^    char visit_pointer(const void *)$/;"	f	class:fmt::internal::DefaultType	typeref:typename:char
visit_pointer	spdlog/fmt/bundled/printf.h	/^    void visit_pointer(const void *value)$/;"	f	class:fmt::BasicPrintfArgFormatter	typeref:typename:void
visit_string	spdlog/fmt/bundled/format.h	/^    Result visit_string(Arg::StringValue<char>)$/;"	f	class:fmt::ArgVisitor	typeref:typename:Result
visit_string	spdlog/fmt/bundled/format.h	/^    void visit_string(internal::Arg::StringValue<char> value)$/;"	f	class:fmt::internal::ArgFormatterBase	typeref:typename:void
visit_uint	spdlog/fmt/bundled/format.h	/^    Result visit_uint(unsigned value)$/;"	f	class:fmt::ArgVisitor	typeref:typename:Result
visit_ulong_long	spdlog/fmt/bundled/format.h	/^    Result visit_ulong_long(ULongLong value)$/;"	f	class:fmt::ArgVisitor	typeref:typename:Result
visit_unhandled_arg	spdlog/fmt/bundled/format.h	/^    Result visit_unhandled_arg()$/;"	f	class:fmt::ArgVisitor	typeref:typename:Result
visit_unhandled_arg	spdlog/fmt/bundled/printf.h	/^    char visit_unhandled_arg()$/;"	f	class:fmt::internal::DefaultType	typeref:typename:char
visit_wstring	spdlog/fmt/bundled/format.h	/^    Result visit_wstring(Arg::StringValue<wchar_t>)$/;"	f	class:fmt::ArgVisitor	typeref:typename:Result
visit_wstring	spdlog/fmt/bundled/format.h	/^    void visit_wstring(internal::Arg::StringValue<Char> value)$/;"	f	class:fmt::internal::ArgFormatterBase	typeref:typename:void
vprint	spdlog/fmt/bundled/core.h	/^FMT_API void vprint(std::FILE *f, string_view format_str, format_args args);$/;"	p	typeref:typename:FMT_API void
vprint	spdlog/fmt/bundled/core.h	/^FMT_API void vprint(std::FILE *f, wstring_view format_str, wformat_args args);$/;"	p	typeref:typename:FMT_API void
vprint	spdlog/fmt/bundled/core.h	/^FMT_API void vprint(string_view format_str, format_args args);$/;"	p	typeref:typename:FMT_API void
vprint	spdlog/fmt/bundled/core.h	/^FMT_API void vprint(wstring_view format_str, wformat_args args);$/;"	p	typeref:typename:FMT_API void
vprint	spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC void vprint(std::FILE *f, string_view format_str, format_args args)$/;"	f	typeref:typename:FMT_FUNC void
vprint	spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC void vprint(std::FILE *f, wstring_view format_str, wformat_args args)$/;"	f	typeref:typename:FMT_FUNC void
vprint	spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC void vprint(string_view format_str, format_args args)$/;"	f	typeref:typename:FMT_FUNC void
vprint	spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC void vprint(wstring_view format_str, wformat_args args)$/;"	f	typeref:typename:FMT_FUNC void
vprint_colored	spdlog/fmt/bundled/core.h	/^FMT_API void vprint_colored(color c, string_view format, format_args args);$/;"	p	typeref:typename:FMT_API void
vprint_colored	spdlog/fmt/bundled/core.h	/^FMT_API void vprint_colored(color c, wstring_view format, wformat_args args);$/;"	p	typeref:typename:FMT_API void
vprint_colored	spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC void vprint_colored(color c, string_view format, format_args args)$/;"	f	typeref:typename:FMT_FUNC void
vprint_colored	spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC void vprint_colored(color c, wstring_view format, wformat_args args)$/;"	f	typeref:typename:FMT_FUNC void
vprint_rgb	spdlog/fmt/bundled/colors.h	/^FMT_FUNC void vprint_rgb(rgb fd, rgb bg, string_view format, format_args args)$/;"	f	typeref:typename:FMT_FUNC void
vprint_rgb	spdlog/fmt/bundled/colors.h	/^FMT_FUNC void vprint_rgb(rgb fd, string_view format, format_args args)$/;"	f	typeref:typename:FMT_FUNC void
vprint_rgb	spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC void vprint_rgb(rgb fd, rgb bg, string_view format, format_args args)$/;"	f	typeref:typename:FMT_FUNC void
vprint_rgb	spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC void vprint_rgb(rgb fd, string_view format, format_args args)$/;"	f	typeref:typename:FMT_FUNC void
vs	stb_image.h	/^   int hs,vs;   \/\/ expansion factor in each axis$/;"	m	struct:__anon84e4e8860808	typeref:typename:int
w	json.hpp	/^    diyfp w;$/;"	m	struct:nlohmann::detail::dtoa_impl::boundaries	typeref:typename:diyfp
w	stb_image.h	/^   int w,h;$/;"	m	struct:__anon84e4e8861108	typeref:typename:int
w2	stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon84e4e8860608::__anon84e4e8860708	typeref:typename:int
w_lores	stb_image.h	/^   int w_lores; \/\/ horizontal pixels pre-expansion$/;"	m	struct:__anon84e4e8860808	typeref:typename:int
warn	spdlog/common.h	/^    warn = 3,$/;"	e	enum:spdlog::level::level_enum
warn	spdlog/details/logger_impl.h	/^inline void spdlog::logger::warn(const T &msg)$/;"	f	class:spdlog::logger	typeref:typename:void
warn	spdlog/details/logger_impl.h	/^inline void spdlog::logger::warn(const char *fmt, const Arg1 &arg1, const Args &... args)$/;"	f	class:spdlog::logger	typeref:typename:void
warn	spdlog/details/logger_impl.h	/^inline void spdlog::logger::warn(const wchar_t *fmt, const Args &... args)$/;"	f	class:spdlog::logger	typeref:typename:void
warn	spdlog/logger.h	/^    void warn(const T &msg);$/;"	p	class:spdlog::logger	typeref:typename:void
warn	spdlog/logger.h	/^    void warn(const char *fmt, const Arg1 &, const Args &... args);$/;"	p	class:spdlog::logger	typeref:typename:void
warn	spdlog/logger.h	/^    void warn(const wchar_t *fmt, const Args &... args);$/;"	p	class:spdlog::logger	typeref:typename:void
wbuffer	spdlog/fmt/bundled/core.h	/^typedef basic_buffer<wchar_t> wbuffer;$/;"	t	namespace:internal	typeref:typename:basic_buffer<wchar_t>
wformat_args	spdlog/fmt/bundled/core.h	/^    wformat_args(Args &&... arg)$/;"	f	struct:wformat_args
wformat_args	spdlog/fmt/bundled/core.h	/^struct wformat_args : basic_format_args<wformat_context>$/;"	s
wformat_context	spdlog/fmt/bundled/core.h	/^typedef buffer_context<wchar_t>::type wformat_context;$/;"	t	typeref:typename:buffer_context<wchar_t>::type
what	json.hpp	/^    const char* what() const noexcept override$/;"	f	class:nlohmann::detail::exception	typeref:typename:const char *
what	spdlog/common.h	/^    const char *what() const SPDLOG_NOEXCEPT override$/;"	f	class:spdlog::spdlog_ex	typeref:typename:const char *
wheat	spdlog/fmt/bundled/colors.h	/^    wheat = 0xF5DEB3,                   \/\/ rgb(245,222,179)$/;"	e	enum:color
wheelEvent	qcustomplot.cpp	/^void QCPAxis::wheelEvent(QWheelEvent *event)$/;"	f	class:QCPAxis	typeref:typename:void
wheelEvent	qcustomplot.cpp	/^void QCPAxisRect::wheelEvent(QWheelEvent *event)$/;"	f	class:QCPAxisRect	typeref:typename:void
wheelEvent	qcustomplot.cpp	/^void QCPColorScale::wheelEvent(QWheelEvent *event)$/;"	f	class:QCPColorScale	typeref:typename:void
wheelEvent	qcustomplot.cpp	/^void QCPLayerable::wheelEvent(QWheelEvent *event)$/;"	f	class:QCPLayerable	typeref:typename:void
wheelEvent	qcustomplot.cpp	/^void QCustomPlot::wheelEvent(QWheelEvent *event)$/;"	f	class:QCustomPlot	typeref:typename:void
wheelEvent	qcustomplot.h	/^  virtual void wheelEvent(QWheelEvent *event) Q_DECL_OVERRIDE;$/;"	p	class:QCPAxis	typeref:typename:void
wheelEvent	qcustomplot.h	/^  virtual void wheelEvent(QWheelEvent *event) Q_DECL_OVERRIDE;$/;"	p	class:QCPAxisRect	typeref:typename:void
wheelEvent	qcustomplot.h	/^  virtual void wheelEvent(QWheelEvent *event) Q_DECL_OVERRIDE;$/;"	p	class:QCPColorScale	typeref:typename:void
wheelEvent	qcustomplot.h	/^  virtual void wheelEvent(QWheelEvent *event) Q_DECL_OVERRIDE;$/;"	p	class:QCustomPlot	typeref:typename:void
wheelEvent	qcustomplot.h	/^  virtual void wheelEvent(QWheelEvent *event);$/;"	p	class:QCPLayerable	typeref:typename:void
whiskerAntialiased	qcustomplot.h	/^  Q_PROPERTY(bool whiskerAntialiased READ whiskerAntialiased WRITE setWhiskerAntialiased)$/;"	p	class:QCPStatisticalBox	typeref:typename:bool
whiskerAntialiased	qcustomplot.h	/^  bool whiskerAntialiased() const { return mWhiskerAntialiased; }$/;"	f	class:QCPStatisticalBox	typeref:typename:bool
whiskerBarPen	qcustomplot.h	/^  QPen whiskerBarPen() const { return mWhiskerBarPen; }$/;"	f	class:QCPStatisticalBox	typeref:typename:QPen
whiskerBarPen	qcustomplot.h	/^  Q_PROPERTY(QPen whiskerBarPen READ whiskerBarPen WRITE setWhiskerBarPen)$/;"	p	class:QCPStatisticalBox	typeref:typename:QPen
whiskerPen	qcustomplot.h	/^  QPen whiskerPen() const { return mWhiskerPen; }$/;"	f	class:QCPStatisticalBox	typeref:typename:QPen
whiskerPen	qcustomplot.h	/^  Q_PROPERTY(QPen whiskerPen READ whiskerPen WRITE setWhiskerPen)$/;"	p	class:QCPStatisticalBox	typeref:typename:QPen
whiskerWidth	qcustomplot.h	/^  Q_PROPERTY(double whiskerWidth READ whiskerWidth WRITE setWhiskerWidth)$/;"	p	class:QCPErrorBars	typeref:typename:double
whiskerWidth	qcustomplot.h	/^  Q_PROPERTY(double whiskerWidth READ whiskerWidth WRITE setWhiskerWidth)$/;"	p	class:QCPStatisticalBox	typeref:typename:double
whiskerWidth	qcustomplot.h	/^  double whiskerWidth() const { return mWhiskerWidth; }$/;"	f	class:QCPErrorBars	typeref:typename:double
whiskerWidth	qcustomplot.h	/^  double whiskerWidth() const { return mWhiskerWidth; }$/;"	f	class:QCPStatisticalBox	typeref:typename:double
white	spdlog/fmt/bundled/colors.h	/^    white = 0xFFFFFF,                   \/\/ rgb(255,255,255)$/;"	e	enum:color
white	spdlog/fmt/bundled/core.h	/^    white$/;"	e	enum:color
white	spdlog/sinks/ansicolor_sink.h	/^    const std::string white = "\\033[37m";$/;"	m	class:spdlog::sinks::ansicolor_sink	typeref:typename:const std::string
white_smoke	spdlog/fmt/bundled/colors.h	/^    white_smoke = 0xF5F5F5,             \/\/ rgb(245,245,245)$/;"	e	enum:color
width	gui.h	/^static const int width = 640;$/;"	v	typeref:typename:const int
width	qcustomplot.h	/^  Q_PROPERTY(double width READ width WRITE setWidth)$/;"	p	class:QCPBars	typeref:typename:double
width	qcustomplot.h	/^  Q_PROPERTY(double width READ width WRITE setWidth)$/;"	p	class:QCPFinancial	typeref:typename:double
width	qcustomplot.h	/^  Q_PROPERTY(double width READ width WRITE setWidth)$/;"	p	class:QCPStatisticalBox	typeref:typename:double
width	qcustomplot.h	/^  double width() const { return mWidth; }$/;"	f	class:QCPBars	typeref:typename:double
width	qcustomplot.h	/^  double width() const { return mWidth; }$/;"	f	class:QCPFinancial	typeref:typename:double
width	qcustomplot.h	/^  double width() const { return mWidth; }$/;"	f	class:QCPLineEnding	typeref:typename:double
width	qcustomplot.h	/^  double width() const { return mWidth; }$/;"	f	class:QCPStatisticalBox	typeref:typename:double
width	qcustomplot.h	/^  int width() const { return mRect.width(); }$/;"	f	class:QCPAxisRect	typeref:typename:int
width	spdlog/fmt/bundled/format.h	/^    unsigned width() const$/;"	f	struct:fmt::TypeSpec	typeref:typename:unsigned
width	spdlog/fmt/bundled/format.h	/^    unsigned width() const$/;"	f	struct:fmt::WidthSpec	typeref:typename:unsigned
widthType	qcustomplot.h	/^  Q_PROPERTY(WidthType widthType READ widthType WRITE setWidthType)$/;"	p	class:QCPBars	typeref:typename:WidthType
widthType	qcustomplot.h	/^  Q_PROPERTY(WidthType widthType READ widthType WRITE setWidthType)$/;"	p	class:QCPFinancial	typeref:typename:WidthType
widthType	qcustomplot.h	/^  WidthType widthType() const { return mWidthType; }$/;"	f	class:QCPBars	typeref:typename:WidthType
widthType	qcustomplot.h	/^  WidthType widthType() const { return mWidthType; }$/;"	f	class:QCPFinancial	typeref:typename:WidthType
width_	spdlog/fmt/bundled/format.h	/^    unsigned width_;$/;"	m	struct:fmt::WidthSpec	typeref:typename:unsigned
wincolor_sink	spdlog/sinks/wincolor_sink.h	/^    wincolor_sink(HANDLE std_handle)$/;"	f	class:spdlog::sinks::wincolor_sink
wincolor_sink	spdlog/sinks/wincolor_sink.h	/^    wincolor_sink(const wincolor_sink &other) = delete;$/;"	p	class:spdlog::sinks::wincolor_sink
wincolor_sink	spdlog/sinks/wincolor_sink.h	/^class wincolor_sink : public base_sink<Mutex>$/;"	c	namespace:spdlog::sinks
wincolor_stderr_sink	spdlog/sinks/wincolor_sink.h	/^    wincolor_stderr_sink()$/;"	f	class:spdlog::sinks::wincolor_stderr_sink
wincolor_stderr_sink	spdlog/sinks/wincolor_sink.h	/^class wincolor_stderr_sink : public wincolor_sink<Mutex>$/;"	c	namespace:spdlog::sinks
wincolor_stderr_sink_mt	spdlog/sinks/wincolor_sink.h	/^using wincolor_stderr_sink_mt = wincolor_stderr_sink<std::mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:wincolor_stderr_sink<std::mutex>
wincolor_stderr_sink_st	spdlog/sinks/wincolor_sink.h	/^using wincolor_stderr_sink_st = wincolor_stderr_sink<details::null_mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:wincolor_stderr_sink<details::null_mutex>
wincolor_stdout_sink	spdlog/sinks/wincolor_sink.h	/^    wincolor_stdout_sink()$/;"	f	class:spdlog::sinks::wincolor_stdout_sink
wincolor_stdout_sink	spdlog/sinks/wincolor_sink.h	/^class wincolor_stdout_sink : public wincolor_sink<Mutex>$/;"	c	namespace:spdlog::sinks
wincolor_stdout_sink_mt	spdlog/sinks/wincolor_sink.h	/^using wincolor_stdout_sink_mt = wincolor_stdout_sink<std::mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:wincolor_stdout_sink<std::mutex>
wincolor_stdout_sink_st	spdlog/sinks/wincolor_sink.h	/^using wincolor_stdout_sink_st = wincolor_stdout_sink<details::null_mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:wincolor_stdout_sink<details::null_mutex>
windebug_sink	spdlog/sinks/windebug_sink.h	/^using windebug_sink = msvc_sink<Mutex>;$/;"	t	namespace:spdlog::sinks	typeref:typename:msvc_sink<Mutex>
windebug_sink_mt	spdlog/sinks/windebug_sink.h	/^using windebug_sink_mt = msvc_sink_mt;$/;"	t	namespace:spdlog::sinks	typeref:typename:msvc_sink_mt
windebug_sink_st	spdlog/sinks/windebug_sink.h	/^using windebug_sink_st = msvc_sink_st;$/;"	t	namespace:spdlog::sinks	typeref:typename:msvc_sink_st
windowId	gui.h	/^    int windowId = 0;$/;"	m	class:ClientWindow	typeref:typename:int
wire_type	protobuf-c/protobuf-c.c	/^	uint8_t wire_type;         \/**< Field type. *\/$/;"	m	struct:_ScannedMember	typeref:typename:uint8_t	file:
wire_type	protobuf-c/protobuf-c.h	/^	ProtobufCWireType	wire_type;$/;"	m	struct:ProtobufCMessageUnknownField	typeref:typename:ProtobufCWireType
worker_loop	spdlog/details/async_log_helper.h	/^    void worker_loop();$/;"	p	class:spdlog::details::async_log_helper	typeref:typename:void
worker_loop	spdlog/details/async_log_helper.h	/^inline void spdlog::details::async_log_helper::worker_loop()$/;"	f	class:spdlog::details::async_log_helper	typeref:typename:void
worker_loop_	spdlog/details/thread_pool.h	/^    void worker_loop_()$/;"	f	class:spdlog::details::thread_pool	typeref:typename:void
worker_ptr	spdlog/details/thread_pool.h	/^    async_logger_ptr worker_ptr;$/;"	m	struct:spdlog::details::async_msg	typeref:typename:async_logger_ptr
wparse_context	spdlog/fmt/bundled/core.h	/^typedef basic_parse_context<wchar_t> wparse_context;$/;"	t	typeref:typename:basic_parse_context<wchar_t>
wrap	qcustomplot.h	/^  Q_PROPERTY(int wrap READ wrap WRITE setWrap)$/;"	p	class:QCPLayoutGrid	typeref:typename:int
wrap	qcustomplot.h	/^  int wrap() const { return mWrap; }$/;"	f	class:QCPLayoutGrid	typeref:typename:int
write	spdlog/details/file_helper.h	/^    void write(const log_msg &msg)$/;"	f	class:spdlog::details::file_helper	typeref:typename:void
write	spdlog/fmt/bundled/format.h	/^    void write(BasicCStringRef<Char> format, ArgList args)$/;"	f	class:fmt::BasicWriter	typeref:typename:void
write	spdlog/fmt/bundled/format.h	/^    void write(BasicWriter<Char> &w, const Char *start, const Char *end)$/;"	f	class:fmt::internal::FormatterBase	typeref:typename:void
write	spdlog/fmt/bundled/format.h	/^    void write(bool value)$/;"	f	class:fmt::internal::ArgFormatterBase	typeref:typename:void
write	spdlog/fmt/bundled/format.h	/^    void write(const char *value)$/;"	f	class:fmt::internal::ArgFormatterBase	typeref:typename:void
write	spdlog/fmt/bundled/ostream.cc	/^FMT_FUNC void write(std::ostream &os, Writer &w) {$/;"	f	namespace:fmt::internal	typeref:typename:FMT_FUNC void
write	spdlog/fmt/bundled/ostream.h	/^FMT_API void write(std::ostream &os, Writer &w);$/;"	p	namespace:fmt::internal	typeref:typename:FMT_API void
write	spdlog/fmt/bundled/posix.cc	/^std::size_t fmt::File::write(const void *buffer, std::size_t count) {$/;"	f	class:fmt::File	typeref:typename:std::size_t
write	spdlog/fmt/bundled/posix.h	/^    FMT_API std::size_t write(const void *buffer, std::size_t count);$/;"	p	class:fmt::File	typeref:typename:FMT_API std::size_t
writeBytes	circular-buffer.cpp	/^ssize_t CircularBuffer::writeBytes(const void * dataParam, size_t bytes, const char* msg) {$/;"	f	class:CircularBuffer	typeref:typename:ssize_t
writeBytes	circular-buffer.cpp	/^ssize_t CircularBuffer::writeBytes(const void *data, size_t bytes) {$/;"	f	class:CircularBuffer	typeref:typename:ssize_t
writeBytes	circular-buffer.h	/^    ssize_t writeBytes(const void * data, size_t bytes, const char* msg);$/;"	p	class:CircularBuffer	typeref:typename:ssize_t
writeBytes	circular-buffer.h	/^    ssize_t writeBytes(const void *data, size_t bytes);$/;"	p	class:CircularBuffer	typeref:typename:ssize_t
writeToWebSocket	ble.cpp	/^static void writeToWebSocket(websocket::stream<tcp::socket>& ws, const std::string& jsonString,$/;"	f	typeref:typename:void	file:
writeWithPKT	tcp-packet.cpp	/^int writeWithPKT(int fds, int cmdType, uint8_t* buf, int bufSize, bool retry)$/;"	f	typeref:typename:int
writeWithPKT	tcp-packet.h	/^int writeWithPKT(int fds, const PKT& pkt, uint8_t* buf, int bufSize, bool retry);$/;"	p	typeref:typename:int
writeWithSegment	tcp-packet.cpp	/^int writeWithSegment(int fds, uint8_t* buf, int bufSize, int segmentSize, bool retry) {$/;"	f	typeref:typename:int
writeWithSegment	tcp-packet.h	/^int writeWithSegment(int fds, uint8_t* buf, int bufSize, int segmentSize, bool retry);$/;"	p	typeref:typename:int
write_cbor	json.hpp	/^    void write_cbor(const BasicJsonType& j)$/;"	f	class:nlohmann::detail::binary_writer	typeref:typename:void
write_character	json.hpp	/^    virtual void write_character(CharType c) = 0;$/;"	p	struct:nlohmann::detail::output_adapter_protocol	typeref:typename:void
write_character	json.hpp	/^    void write_character(CharType c) override$/;"	f	class:nlohmann::detail::output_stream_adapter	typeref:typename:void
write_character	json.hpp	/^    void write_character(CharType c) override$/;"	f	class:nlohmann::detail::output_string_adapter	typeref:typename:void
write_character	json.hpp	/^    void write_character(CharType c) override$/;"	f	class:nlohmann::detail::output_vector_adapter	typeref:typename:void
write_characters	json.hpp	/^    virtual void write_characters(const CharType* s, std::size_t length) = 0;$/;"	p	struct:nlohmann::detail::output_adapter_protocol	typeref:typename:void
write_characters	json.hpp	/^    void write_characters(const CharType* s, std::size_t length) override$/;"	f	class:nlohmann::detail::output_stream_adapter	typeref:typename:void
write_characters	json.hpp	/^    void write_characters(const CharType* s, std::size_t length) override$/;"	f	class:nlohmann::detail::output_string_adapter	typeref:typename:void
write_characters	json.hpp	/^    void write_characters(const CharType* s, std::size_t length) override$/;"	f	class:nlohmann::detail::output_vector_adapter	typeref:typename:void
write_decimal	spdlog/fmt/bundled/format.h	/^        write_decimal(value);$/;"	p	class:fmt::BasicWriter
write_decimal	spdlog/fmt/bundled/format.h	/^    void write_decimal(Int value)$/;"	f	class:fmt::BasicWriter	typeref:typename:void
write_double	spdlog/fmt/bundled/format.h	/^    void write_double(T value, const Spec &spec);$/;"	p	class:fmt::BasicWriter	typeref:typename:void
write_double	spdlog/fmt/bundled/format.h	/^void BasicWriter<Char>::write_double(T value, const Spec &spec)$/;"	f	class:fmt::BasicWriter	typeref:typename:void
write_int	spdlog/fmt/bundled/format.h	/^    void write_int(T value, Spec spec);$/;"	p	class:fmt::BasicWriter	typeref:typename:void
write_int	spdlog/fmt/bundled/format.h	/^void BasicWriter<Char>::write_int(T value, Spec spec)$/;"	f	class:fmt::BasicWriter	typeref:typename:void
write_msgpack	json.hpp	/^    void write_msgpack(const BasicJsonType& j)$/;"	f	class:nlohmann::detail::binary_writer	typeref:typename:void
write_null_pointer	spdlog/fmt/bundled/printf.h	/^    void write_null_pointer()$/;"	f	class:fmt::BasicPrintfArgFormatter	typeref:typename:void
write_number	json.hpp	/^    void write_number(const NumberType n)$/;"	f	class:nlohmann::detail::binary_writer	typeref:typename:void
write_number_with_ubjson_prefix	json.hpp	/^    void write_number_with_ubjson_prefix(const NumberType n,$/;"	f	class:nlohmann::detail::binary_writer	typeref:typename:void
write_pointer	spdlog/fmt/bundled/format.h	/^    void write_pointer(const void *p)$/;"	f	class:fmt::internal::ArgFormatterBase	typeref:typename:void
write_str	spdlog/fmt/bundled/format.h	/^    CharPtr write_str(const StrChar *s, std::size_t size, const AlignSpec &spec);$/;"	p	class:fmt::BasicWriter	typeref:typename:CharPtr
write_str	spdlog/fmt/bundled/format.h	/^    void write_str(const internal::Arg::StringValue<StrChar> &str, const Spec &spec);$/;"	p	class:fmt::BasicWriter	typeref:typename:void
write_str	spdlog/fmt/bundled/format.h	/^typename BasicWriter<Char>::CharPtr BasicWriter<Char>::write_str(const StrChar *s, std::size_t s/;"	f	class:fmt::BasicWriter	typeref:typename:BasicWriter<Char>::CharPtr
write_str	spdlog/fmt/bundled/format.h	/^void BasicWriter<Char>::write_str(const internal::Arg::StringValue<StrChar> &s, const Spec &spec/;"	f	class:fmt::BasicWriter	typeref:typename:void
write_ubjson	json.hpp	/^    void write_ubjson(const BasicJsonType& j, const bool use_count,$/;"	f	class:nlohmann::detail::binary_writer	typeref:typename:void
write_unsigned_decimal	spdlog/fmt/bundled/format.h	/^    Char *write_unsigned_decimal(UInt value, unsigned prefix_size = 0)$/;"	f	class:fmt::BasicWriter	typeref:typename:Char *
writer	spdlog/fmt/bundled/format.h	/^    BasicWriter<Char> &writer()$/;"	f	class:fmt::BasicFormatter	typeref:typename:BasicWriter<Char> &
writer	spdlog/fmt/bundled/format.h	/^    BasicWriter<Char> &writer()$/;"	f	class:fmt::internal::ArgFormatterBase	typeref:typename:BasicWriter<Char> &
writer_	spdlog/fmt/bundled/format.h	/^    BasicWriter<Char> &writer_;$/;"	m	class:fmt::BasicFormatter	typeref:typename:BasicWriter<Char> &
writer_	spdlog/fmt/bundled/format.h	/^    BasicWriter<Char> &writer_;$/;"	m	class:fmt::internal::ArgFormatterBase	typeref:typename:BasicWriter<Char> &
writer_	spdlog/fmt/bundled/printf.h	/^    BasicWriter<Char> &writer_;$/;"	m	class:fmt::PrintfFormatter	typeref:typename:BasicWriter<Char> &
wstring	spdlog/fmt/bundled/format.h	/^        StringValue<wchar_t> wstring;$/;"	m	union:fmt::internal::Value::__anon1ea8787f020a	typeref:typename:StringValue<wchar_t>
wstring_view	spdlog/fmt/bundled/core.h	/^typedef basic_string_view<wchar_t> wstring_view;$/;"	t	typeref:typename:basic_string_view<wchar_t>
wtAbsolute	qcustomplot.h	/^  enum WidthType { wtAbsolute       \/\/\/< Bar width is in absolute pixels$/;"	e	enum:QCPBars::WidthType
wtAbsolute	qcustomplot.h	/^  enum WidthType { wtAbsolute       \/\/\/< width is in absolute pixels$/;"	e	enum:QCPFinancial::WidthType
wtAxisRectRatio	qcustomplot.h	/^                   ,wtAxisRectRatio \/\/\/< Bar width is given by a fraction of the axis rect si/;"	e	enum:QCPBars::WidthType
wtAxisRectRatio	qcustomplot.h	/^                   ,wtAxisRectRatio \/\/\/< width is given by a fraction of the axis rect size$/;"	e	enum:QCPFinancial::WidthType
wtPlotCoords	qcustomplot.h	/^                   ,wtPlotCoords    \/\/\/< Bar width is in key coordinates and thus scales with/;"	e	enum:QCPBars::WidthType
wtPlotCoords	qcustomplot.h	/^                   ,wtPlotCoords    \/\/\/< width is in key coordinates and thus scales with the/;"	e	enum:QCPFinancial::WidthType
x	qc-message.pb.h	/^inline ::google::protobuf::int32 Imu::x() const {$/;"	f	class:Imu	typeref:typename:::google::protobuf::int32
x	qc-message.proto	/^optional int32 x = 1;$/;"	f
x	qcustomplot.h	/^  double x() const { return mX; }$/;"	f	class:QCPVector2D	typeref:typename:double
x	stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon84e4e8860608::__anon84e4e8860708	typeref:typename:int
xAxis	qcustomplot.h	/^  QCPAxis *xAxis, *yAxis, *xAxis2, *yAxis2;$/;"	m	class:QCustomPlot	typeref:typename:QCPAxis *
xAxis2	qcustomplot.h	/^  QCPAxis *xAxis, *yAxis, *xAxis2, *yAxis2;$/;"	m	class:QCustomPlot	typeref:typename:QCPAxis ***
xsputn	spdlog/fmt/bundled/ostream.h	/^    std::streamsize xsputn(const Char *s, std::streamsize count) FMT_OVERRIDE$/;"	f	class:fmt::internal::FormatBuf	typeref:typename:std::streamsize
y	qc-message.pb.h	/^inline ::google::protobuf::int32 Imu::y() const {$/;"	f	class:Imu	typeref:typename:::google::protobuf::int32
y	qc-message.proto	/^optional int32 y = 2;$/;"	f
y	qcustomplot.h	/^  double y() const { return mY; }$/;"	f	class:QCPVector2D	typeref:typename:double
y	stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon84e4e8860608::__anon84e4e8860708	typeref:typename:int
yAxis	qcustomplot.h	/^  QCPAxis *xAxis, *yAxis, *xAxis2, *yAxis2;$/;"	m	class:QCustomPlot	typeref:typename:QCPAxis **
yAxis2	qcustomplot.h	/^  QCPAxis *xAxis, *yAxis, *xAxis2, *yAxis2;$/;"	m	class:QCustomPlot	typeref:typename:QCPAxis ****
yaw	simple.pb-c.h	/^  float yaw;$/;"	m	struct:_ToHi	typeref:typename:float
yaw	simple.proto	/^    optional float yaw = 11;	\/\/rad$/;"	f
yellow	spdlog/fmt/bundled/colors.h	/^    yellow = 0xFFFF00,                  \/\/ rgb(255,255,0)$/;"	e	enum:color
yellow	spdlog/fmt/bundled/core.h	/^    yellow,$/;"	e	enum:color
yellow	spdlog/sinks/ansicolor_sink.h	/^    const std::string yellow = "\\033[33m";$/;"	m	class:spdlog::sinks::ansicolor_sink	typeref:typename:const std::string
yellow_green	spdlog/fmt/bundled/colors.h	/^    yellow_green = 0x9ACD32,            \/\/ rgb(154,205,50)$/;"	e	enum:color
ypos	stb_image.h	/^   int ypos;    \/\/ which pre-expansion row we're on$/;"	m	struct:__anon84e4e8860808	typeref:typename:int
ystep	stb_image.h	/^   int ystep;   \/\/ how far through vertical expansion we are$/;"	m	struct:__anon84e4e8860808	typeref:typename:int
z_distance	stb_image.h	/^   stbi__zhuffman z_length, z_distance;$/;"	m	struct:__anon84e4e8860a08	typeref:typename:stbi__zhuffman
z_expandable	stb_image.h	/^   int   z_expandable;$/;"	m	struct:__anon84e4e8860a08	typeref:typename:int
z_formatter	spdlog/details/pattern_formatter.h	/^    z_formatter() = default;$/;"	p	class:spdlog::details::SPDLOG_FINAL
z_formatter	spdlog/details/pattern_formatter.h	/^    z_formatter(const z_formatter &) = delete;$/;"	p	class:spdlog::details::SPDLOG_FINAL
z_formatter	spdlog/details/pattern_formatter_impl.h	/^    z_formatter() = default;$/;"	p	class:spdlog::details::SPDLOG_FINAL
z_formatter	spdlog/details/pattern_formatter_impl.h	/^    z_formatter(const z_formatter &) = delete;$/;"	p	class:spdlog::details::SPDLOG_FINAL
z_length	stb_image.h	/^   stbi__zhuffman z_length, z_distance;$/;"	m	struct:__anon84e4e8860a08	typeref:typename:stbi__zhuffman
zbuffer	stb_image.h	/^   stbi_uc *zbuffer, *zbuffer_end;$/;"	m	struct:__anon84e4e8860a08	typeref:typename:stbi_uc *
zbuffer_end	stb_image.h	/^   stbi_uc *zbuffer, *zbuffer_end;$/;"	m	struct:__anon84e4e8860a08	typeref:typename:stbi_uc **
zeroLinePen	qcustomplot.h	/^  QPen zeroLinePen() const { return mZeroLinePen; }$/;"	f	class:QCPGrid	typeref:typename:QPen
zeroLinePen	qcustomplot.h	/^  Q_PROPERTY(QPen zeroLinePen READ zeroLinePen WRITE setZeroLinePen)$/;"	p	class:QCPGrid	typeref:typename:QPen
zigzag32	protobuf-c/protobuf-c.c	/^zigzag32(int32_t v)$/;"	f	typeref:typename:uint32_t	file:
zigzag64	protobuf-c/protobuf-c.c	/^zigzag64(int64_t v)$/;"	f	typeref:typename:uint64_t	file:
zoom	qcustomplot.cpp	/^void QCPAxisRect::zoom(const QRectF &pixelRect)$/;"	f	class:QCPAxisRect	typeref:typename:void
zoom	qcustomplot.cpp	/^void QCPAxisRect::zoom(const QRectF &pixelRect, const QList<QCPAxis*> &affectedAxes)$/;"	f	class:QCPAxisRect	typeref:typename:void
zoom	qcustomplot.h	/^  void zoom(const QRectF &pixelRect);$/;"	p	class:QCPAxisRect	typeref:typename:void
zoom	qcustomplot.h	/^  void zoom(const QRectF &pixelRect, const QList<QCPAxis*> &affectedAxes);$/;"	p	class:QCPAxisRect	typeref:typename:void
zout	stb_image.h	/^   char *zout;$/;"	m	struct:__anon84e4e8860a08	typeref:typename:char *
zout_end	stb_image.h	/^   char *zout_end;$/;"	m	struct:__anon84e4e8860a08	typeref:typename:char *
zout_start	stb_image.h	/^   char *zout_start;$/;"	m	struct:__anon84e4e8860a08	typeref:typename:char *
~BLESession	ble.h	/^    virtual ~BLESession() {$/;"	f	class:BLESession
~BasicWriter	spdlog/fmt/bundled/format.h	/^    virtual ~BasicWriter() {}$/;"	f	class:fmt::BasicWriter
~Buffer	spdlog/fmt/bundled/format.h	/^    virtual ~Buffer() {}$/;"	f	class:fmt::Buffer
~BufferedFile	spdlog/fmt/bundled/posix.cc	/^fmt::BufferedFile::~BufferedFile() FMT_NOEXCEPT {$/;"	f	class:fmt::BufferedFile
~BufferedFile	spdlog/fmt/bundled/posix.h	/^    FMT_API ~BufferedFile() FMT_NOEXCEPT;$/;"	p	class:fmt::BufferedFile	typeref:typename:FMT_API
~CircularBuffer	circular-buffer.cpp	/^CircularBuffer::~CircularBuffer(){$/;"	f	class:CircularBuffer
~CircularBuffer	circular-buffer.h	/^    ~CircularBuffer();$/;"	p	class:CircularBuffer
~ClientWindow	gui.h	/^    ~ClientWindow() {$/;"	f	class:ClientWindow
~File	spdlog/fmt/bundled/posix.cc	/^fmt::File::~File() FMT_NOEXCEPT {$/;"	f	class:fmt::File
~File	spdlog/fmt/bundled/posix.h	/^    FMT_API ~File() FMT_NOEXCEPT;$/;"	p	class:fmt::File	typeref:typename:FMT_API
~FormatError	spdlog/fmt/bundled/format.cc	/^FMT_FUNC FormatError::~FormatError() FMT_DTOR_NOEXCEPT {}$/;"	f	class:fmt::FormatError	typeref:typename:FMT_FUNC
~FormatError	spdlog/fmt/bundled/format.h	/^    FMT_API ~FormatError() FMT_DTOR_NOEXCEPT FMT_OVERRIDE;$/;"	p	class:fmt::FormatError	typeref:typename:FMT_API
~GUI	gui.h	/^        ~GUI() { }$/;"	f	class:GUI
~Imu	qc-message.pb.cc	/^Imu::~Imu() {$/;"	f	class:Imu
~Imu	qc-message.pb.h	/^  virtual ~Imu();$/;"	p	class:Imu
~LicenseSession	license-session.h	/^        virtual ~LicenseSession() {$/;"	f	class:LicenseSession
~Locale	spdlog/fmt/bundled/posix.h	/^    ~Locale()$/;"	f	class:fmt::Locale
~MainWindow	mainwindow.cpp	/^MainWindow::~MainWindow()$/;"	f	class:MainWindow
~MainWindow	mainwindow.h	/^    ~MainWindow();$/;"	p	class:MainWindow
~MdiChild	mdi-child.cpp	/^MdiChild::~MdiChild() {$/;"	f	class:MdiChild
~MdiChild	mdi-child.h	/^    ~MdiChild() ;$/;"	p	class:MdiChild
~MemoryBuffer	spdlog/fmt/bundled/format.h	/^    ~MemoryBuffer() FMT_OVERRIDE$/;"	f	class:fmt::internal::MemoryBuffer
~Protocol	qc-message.pb.cc	/^Protocol::~Protocol() {$/;"	f	class:Protocol
~Protocol	qc-message.pb.h	/^  virtual ~Protocol();$/;"	p	class:Protocol
~QCPAbstractItem	qcustomplot.cpp	/^QCPAbstractItem::~QCPAbstractItem()$/;"	f	class:QCPAbstractItem
~QCPAbstractItem	qcustomplot.h	/^  virtual ~QCPAbstractItem();$/;"	p	class:QCPAbstractItem
~QCPAbstractPaintBuffer	qcustomplot.cpp	/^QCPAbstractPaintBuffer::~QCPAbstractPaintBuffer()$/;"	f	class:QCPAbstractPaintBuffer
~QCPAbstractPaintBuffer	qcustomplot.h	/^  virtual ~QCPAbstractPaintBuffer();$/;"	p	class:QCPAbstractPaintBuffer
~QCPAbstractPlottable	qcustomplot.cpp	/^QCPAbstractPlottable::~QCPAbstractPlottable()$/;"	f	class:QCPAbstractPlottable
~QCPAbstractPlottable	qcustomplot.h	/^  virtual ~QCPAbstractPlottable();$/;"	p	class:QCPAbstractPlottable
~QCPAbstractPlottable1D	qcustomplot.h	/^  virtual ~QCPAbstractPlottable1D();$/;"	p	class:QCPAbstractPlottable1D
~QCPAbstractPlottable1D	qcustomplot.h	/^QCPAbstractPlottable1D<DataType>::~QCPAbstractPlottable1D()$/;"	f	class:QCPAbstractPlottable1D
~QCPAxis	qcustomplot.cpp	/^QCPAxis::~QCPAxis()$/;"	f	class:QCPAxis
~QCPAxis	qcustomplot.h	/^  virtual ~QCPAxis();$/;"	p	class:QCPAxis
~QCPAxisPainterPrivate	qcustomplot.cpp	/^QCPAxisPainterPrivate::~QCPAxisPainterPrivate()$/;"	f	class:QCPAxisPainterPrivate
~QCPAxisPainterPrivate	qcustomplot.h	/^  virtual ~QCPAxisPainterPrivate();$/;"	p	class:QCPAxisPainterPrivate
~QCPAxisRect	qcustomplot.cpp	/^QCPAxisRect::~QCPAxisRect()$/;"	f	class:QCPAxisRect
~QCPAxisRect	qcustomplot.h	/^  virtual ~QCPAxisRect();$/;"	p	class:QCPAxisRect
~QCPAxisTicker	qcustomplot.cpp	/^QCPAxisTicker::~QCPAxisTicker()$/;"	f	class:QCPAxisTicker
~QCPAxisTicker	qcustomplot.h	/^  virtual ~QCPAxisTicker();$/;"	p	class:QCPAxisTicker
~QCPBars	qcustomplot.cpp	/^QCPBars::~QCPBars()$/;"	f	class:QCPBars
~QCPBars	qcustomplot.h	/^  virtual ~QCPBars();$/;"	p	class:QCPBars
~QCPBarsGroup	qcustomplot.cpp	/^QCPBarsGroup::~QCPBarsGroup()$/;"	f	class:QCPBarsGroup
~QCPBarsGroup	qcustomplot.h	/^  virtual ~QCPBarsGroup();$/;"	p	class:QCPBarsGroup
~QCPColorMap	qcustomplot.cpp	/^QCPColorMap::~QCPColorMap()$/;"	f	class:QCPColorMap
~QCPColorMap	qcustomplot.h	/^  virtual ~QCPColorMap();$/;"	p	class:QCPColorMap
~QCPColorMapData	qcustomplot.cpp	/^QCPColorMapData::~QCPColorMapData()$/;"	f	class:QCPColorMapData
~QCPColorMapData	qcustomplot.h	/^  ~QCPColorMapData();$/;"	p	class:QCPColorMapData
~QCPColorScale	qcustomplot.cpp	/^QCPColorScale::~QCPColorScale()$/;"	f	class:QCPColorScale
~QCPColorScale	qcustomplot.h	/^  virtual ~QCPColorScale();$/;"	p	class:QCPColorScale
~QCPCurve	qcustomplot.cpp	/^QCPCurve::~QCPCurve()$/;"	f	class:QCPCurve
~QCPCurve	qcustomplot.h	/^  virtual ~QCPCurve();$/;"	p	class:QCPCurve
~QCPErrorBars	qcustomplot.cpp	/^QCPErrorBars::~QCPErrorBars()$/;"	f	class:QCPErrorBars
~QCPErrorBars	qcustomplot.h	/^  virtual ~QCPErrorBars();$/;"	p	class:QCPErrorBars
~QCPFinancial	qcustomplot.cpp	/^QCPFinancial::~QCPFinancial()$/;"	f	class:QCPFinancial
~QCPFinancial	qcustomplot.h	/^  virtual ~QCPFinancial();$/;"	p	class:QCPFinancial
~QCPGraph	qcustomplot.cpp	/^QCPGraph::~QCPGraph()$/;"	f	class:QCPGraph
~QCPGraph	qcustomplot.h	/^  virtual ~QCPGraph();$/;"	p	class:QCPGraph
~QCPItemAnchor	qcustomplot.cpp	/^QCPItemAnchor::~QCPItemAnchor()$/;"	f	class:QCPItemAnchor
~QCPItemAnchor	qcustomplot.h	/^  virtual ~QCPItemAnchor();$/;"	p	class:QCPItemAnchor
~QCPItemBracket	qcustomplot.cpp	/^QCPItemBracket::~QCPItemBracket()$/;"	f	class:QCPItemBracket
~QCPItemBracket	qcustomplot.h	/^  virtual ~QCPItemBracket();$/;"	p	class:QCPItemBracket
~QCPItemCurve	qcustomplot.cpp	/^QCPItemCurve::~QCPItemCurve()$/;"	f	class:QCPItemCurve
~QCPItemCurve	qcustomplot.h	/^  virtual ~QCPItemCurve();$/;"	p	class:QCPItemCurve
~QCPItemEllipse	qcustomplot.cpp	/^QCPItemEllipse::~QCPItemEllipse()$/;"	f	class:QCPItemEllipse
~QCPItemEllipse	qcustomplot.h	/^  virtual ~QCPItemEllipse();$/;"	p	class:QCPItemEllipse
~QCPItemLine	qcustomplot.cpp	/^QCPItemLine::~QCPItemLine()$/;"	f	class:QCPItemLine
~QCPItemLine	qcustomplot.h	/^  virtual ~QCPItemLine();$/;"	p	class:QCPItemLine
~QCPItemPixmap	qcustomplot.cpp	/^QCPItemPixmap::~QCPItemPixmap()$/;"	f	class:QCPItemPixmap
~QCPItemPixmap	qcustomplot.h	/^  virtual ~QCPItemPixmap();$/;"	p	class:QCPItemPixmap
~QCPItemPosition	qcustomplot.cpp	/^QCPItemPosition::~QCPItemPosition()$/;"	f	class:QCPItemPosition
~QCPItemPosition	qcustomplot.h	/^  virtual ~QCPItemPosition();$/;"	p	class:QCPItemPosition
~QCPItemRect	qcustomplot.cpp	/^QCPItemRect::~QCPItemRect()$/;"	f	class:QCPItemRect
~QCPItemRect	qcustomplot.h	/^  virtual ~QCPItemRect();$/;"	p	class:QCPItemRect
~QCPItemStraightLine	qcustomplot.cpp	/^QCPItemStraightLine::~QCPItemStraightLine()$/;"	f	class:QCPItemStraightLine
~QCPItemStraightLine	qcustomplot.h	/^  virtual ~QCPItemStraightLine();$/;"	p	class:QCPItemStraightLine
~QCPItemText	qcustomplot.cpp	/^QCPItemText::~QCPItemText()$/;"	f	class:QCPItemText
~QCPItemText	qcustomplot.h	/^  virtual ~QCPItemText();$/;"	p	class:QCPItemText
~QCPItemTracer	qcustomplot.cpp	/^QCPItemTracer::~QCPItemTracer()$/;"	f	class:QCPItemTracer
~QCPItemTracer	qcustomplot.h	/^  virtual ~QCPItemTracer();$/;"	p	class:QCPItemTracer
~QCPLayer	qcustomplot.cpp	/^QCPLayer::~QCPLayer()$/;"	f	class:QCPLayer
~QCPLayer	qcustomplot.h	/^  virtual ~QCPLayer();$/;"	p	class:QCPLayer
~QCPLayerable	qcustomplot.cpp	/^QCPLayerable::~QCPLayerable()$/;"	f	class:QCPLayerable
~QCPLayerable	qcustomplot.h	/^  virtual ~QCPLayerable();$/;"	p	class:QCPLayerable
~QCPLayoutElement	qcustomplot.cpp	/^QCPLayoutElement::~QCPLayoutElement()$/;"	f	class:QCPLayoutElement
~QCPLayoutElement	qcustomplot.h	/^  virtual ~QCPLayoutElement();$/;"	p	class:QCPLayoutElement
~QCPLayoutGrid	qcustomplot.cpp	/^QCPLayoutGrid::~QCPLayoutGrid()$/;"	f	class:QCPLayoutGrid
~QCPLayoutGrid	qcustomplot.h	/^  virtual ~QCPLayoutGrid();$/;"	p	class:QCPLayoutGrid
~QCPLayoutInset	qcustomplot.cpp	/^QCPLayoutInset::~QCPLayoutInset()$/;"	f	class:QCPLayoutInset
~QCPLayoutInset	qcustomplot.h	/^  virtual ~QCPLayoutInset();$/;"	p	class:QCPLayoutInset
~QCPLegend	qcustomplot.cpp	/^QCPLegend::~QCPLegend()$/;"	f	class:QCPLegend
~QCPLegend	qcustomplot.h	/^  virtual ~QCPLegend();$/;"	p	class:QCPLegend
~QCPMarginGroup	qcustomplot.cpp	/^QCPMarginGroup::~QCPMarginGroup()$/;"	f	class:QCPMarginGroup
~QCPMarginGroup	qcustomplot.h	/^  virtual ~QCPMarginGroup();$/;"	p	class:QCPMarginGroup
~QCPPaintBufferGlFbo	qcustomplot.cpp	/^QCPPaintBufferGlFbo::~QCPPaintBufferGlFbo()$/;"	f	class:QCPPaintBufferGlFbo
~QCPPaintBufferGlFbo	qcustomplot.h	/^  virtual ~QCPPaintBufferGlFbo();$/;"	p	class:QCPPaintBufferGlFbo
~QCPPaintBufferGlPbuffer	qcustomplot.cpp	/^QCPPaintBufferGlPbuffer::~QCPPaintBufferGlPbuffer()$/;"	f	class:QCPPaintBufferGlPbuffer
~QCPPaintBufferGlPbuffer	qcustomplot.h	/^  virtual ~QCPPaintBufferGlPbuffer();$/;"	p	class:QCPPaintBufferGlPbuffer
~QCPPaintBufferPixmap	qcustomplot.cpp	/^QCPPaintBufferPixmap::~QCPPaintBufferPixmap()$/;"	f	class:QCPPaintBufferPixmap
~QCPPaintBufferPixmap	qcustomplot.h	/^  virtual ~QCPPaintBufferPixmap();$/;"	p	class:QCPPaintBufferPixmap
~QCPPlottableInterface1D	qcustomplot.h	/^  virtual ~QCPPlottableInterface1D() {}$/;"	f	class:QCPPlottableInterface1D
~QCPSelectionDecorator	qcustomplot.cpp	/^QCPSelectionDecorator::~QCPSelectionDecorator()$/;"	f	class:QCPSelectionDecorator
~QCPSelectionDecorator	qcustomplot.h	/^  virtual ~QCPSelectionDecorator();$/;"	p	class:QCPSelectionDecorator
~QCPSelectionDecoratorBracket	qcustomplot.cpp	/^QCPSelectionDecoratorBracket::~QCPSelectionDecoratorBracket()$/;"	f	class:QCPSelectionDecoratorBracket
~QCPSelectionDecoratorBracket	qcustomplot.h	/^  virtual ~QCPSelectionDecoratorBracket();$/;"	p	class:QCPSelectionDecoratorBracket
~QCPSelectionRect	qcustomplot.cpp	/^QCPSelectionRect::~QCPSelectionRect()$/;"	f	class:QCPSelectionRect
~QCPSelectionRect	qcustomplot.h	/^  virtual ~QCPSelectionRect();$/;"	p	class:QCPSelectionRect
~QCustomPlot	qcustomplot.cpp	/^QCustomPlot::~QCustomPlot()$/;"	f	class:QCustomPlot
~QCustomPlot	qcustomplot.h	/^  virtual ~QCustomPlot();$/;"	p	class:QCustomPlot
~RuntimeError	spdlog/fmt/bundled/format.cc	/^FMT_FUNC internal::RuntimeError::~RuntimeError() FMT_DTOR_NOEXCEPT {}$/;"	f	class:fmt::internal::RuntimeError	typeref:typename:FMT_FUNC
~RuntimeError	spdlog/fmt/bundled/format.h	/^    FMT_API ~RuntimeError() FMT_DTOR_NOEXCEPT FMT_OVERRIDE;$/;"	p	class:fmt::internal::RuntimeError	typeref:typename:FMT_API
~SystemError	spdlog/fmt/bundled/format.cc	/^FMT_FUNC SystemError::~SystemError() FMT_DTOR_NOEXCEPT {}$/;"	f	class:fmt::SystemError	typeref:typename:FMT_FUNC
~ansicolor_sink	spdlog/sinks/ansicolor_sink.h	/^    ~ansicolor_sink() override$/;"	f	class:spdlog::sinks::ansicolor_sink
~arg_map	spdlog/fmt/bundled/core.h	/^    ~arg_map()$/;"	f	class:internal::arg_map
~async_log_helper	spdlog/details/async_log_helper.h	/^    ~async_log_helper();$/;"	p	class:spdlog::details::async_log_helper
~async_log_helper	spdlog/details/async_log_helper.h	/^inline spdlog::details::async_log_helper::~async_log_helper()$/;"	f	class:spdlog::details::async_log_helper
~async_msg	spdlog/details/async_log_helper.h	/^        ~async_msg() = default;$/;"	p	struct:spdlog::details::async_log_helper::async_msg
~async_msg	spdlog/details/thread_pool.h	/^    ~async_msg() = default;$/;"	p	struct:spdlog::details::async_msg
~basic_buffer	spdlog/fmt/bundled/core.h	/^    virtual ~basic_buffer() {}$/;"	f	class:internal::basic_buffer
~basic_json	json.hpp	/^    ~basic_json() noexcept$/;"	f	class:nlohmann::basic_json
~file_helper	spdlog/details/file_helper.h	/^    ~file_helper()$/;"	f	class:spdlog::details::file_helper
~flag_formatter	spdlog/details/pattern_formatter.h	/^    virtual ~flag_formatter() = default;$/;"	p	class:spdlog::details::flag_formatter
~flag_formatter	spdlog/details/pattern_formatter_impl.h	/^    virtual ~flag_formatter() = default;$/;"	p	class:spdlog::details::flag_formatter
~formatter	spdlog/formatter.h	/^    virtual ~formatter() = default;$/;"	p	class:spdlog::formatter
~input_adapter_protocol	json.hpp	/^    virtual ~input_adapter_protocol() = default;$/;"	p	struct:nlohmann::detail::input_adapter_protocol
~input_stream_adapter	json.hpp	/^    ~input_stream_adapter() override$/;"	f	class:nlohmann::detail::input_stream_adapter
~logger	spdlog/details/logger_impl.h	/^inline spdlog::logger::~logger() = default;$/;"	p	class:spdlog::logger
~logger	spdlog/logger.h	/^    virtual ~logger();$/;"	p	class:spdlog::logger
~output_adapter_protocol	json.hpp	/^    virtual ~output_adapter_protocol() = default;$/;"	p	struct:nlohmann::detail::output_adapter_protocol
~sink	spdlog/sinks/sink.h	/^    virtual ~sink() = default;$/;"	p	class:spdlog::sinks::sink
~step_file_sink	spdlog/contrib/sinks/step_file_sink.h	/^    ~step_file_sink()$/;"	f	class:spdlog::sinks::SPDLOG_FINAL
~syslog_sink	spdlog/sinks/syslog_sink.h	/^    ~syslog_sink() override$/;"	f	class:spdlog::sinks::syslog_sink
~thread_pool	spdlog/details/thread_pool.h	/^    ~thread_pool()$/;"	f	class:spdlog::details::thread_pool
~wincolor_sink	spdlog/sinks/wincolor_sink.h	/^    ~wincolor_sink() override$/;"	f	class:spdlog::sinks::wincolor_sink
